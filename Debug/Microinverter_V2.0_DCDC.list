
Microinverter_V2.0_DCDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9d4  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800abac  0800abac  0001abac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b110  0800b110  00020050  2**0
                  CONTENTS
  4 .ARM          00000008  0800b110  0800b110  0001b110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b118  0800b118  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b118  0800b118  0001b118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b11c  0800b11c  0001b11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  0800b120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011404  20000050  0800b170  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20011454  0800b170  00021454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003bde0  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000669c  00000000  00000000  0005be60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00027ab2  00000000  00000000  000624fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001988  00000000  00000000  00089fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004a50  00000000  00000000  0008b938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00035288  00000000  00000000  00090388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003a8aa  00000000  00000000  000c5610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00155e81  00000000  00000000  000ffeba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00255d3b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005408  00000000  00000000  00255d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000050 	.word	0x20000050
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ab94 	.word	0x0800ab94

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000054 	.word	0x20000054
 8000214:	0800ab94 	.word	0x0800ab94

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__gedf2>:
 80007e4:	f04f 3cff 	mov.w	ip, #4294967295
 80007e8:	e006      	b.n	80007f8 <__cmpdf2+0x4>
 80007ea:	bf00      	nop

080007ec <__ledf2>:
 80007ec:	f04f 0c01 	mov.w	ip, #1
 80007f0:	e002      	b.n	80007f8 <__cmpdf2+0x4>
 80007f2:	bf00      	nop

080007f4 <__cmpdf2>:
 80007f4:	f04f 0c01 	mov.w	ip, #1
 80007f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000800:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000804:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800080e:	d01b      	beq.n	8000848 <__cmpdf2+0x54>
 8000810:	b001      	add	sp, #4
 8000812:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000816:	bf0c      	ite	eq
 8000818:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800081c:	ea91 0f03 	teqne	r1, r3
 8000820:	bf02      	ittt	eq
 8000822:	ea90 0f02 	teqeq	r0, r2
 8000826:	2000      	moveq	r0, #0
 8000828:	4770      	bxeq	lr
 800082a:	f110 0f00 	cmn.w	r0, #0
 800082e:	ea91 0f03 	teq	r1, r3
 8000832:	bf58      	it	pl
 8000834:	4299      	cmppl	r1, r3
 8000836:	bf08      	it	eq
 8000838:	4290      	cmpeq	r0, r2
 800083a:	bf2c      	ite	cs
 800083c:	17d8      	asrcs	r0, r3, #31
 800083e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000842:	f040 0001 	orr.w	r0, r0, #1
 8000846:	4770      	bx	lr
 8000848:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d102      	bne.n	8000858 <__cmpdf2+0x64>
 8000852:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000856:	d107      	bne.n	8000868 <__cmpdf2+0x74>
 8000858:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800085c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000860:	d1d6      	bne.n	8000810 <__cmpdf2+0x1c>
 8000862:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000866:	d0d3      	beq.n	8000810 <__cmpdf2+0x1c>
 8000868:	f85d 0b04 	ldr.w	r0, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop

08000870 <__aeabi_cdrcmple>:
 8000870:	4684      	mov	ip, r0
 8000872:	4610      	mov	r0, r2
 8000874:	4662      	mov	r2, ip
 8000876:	468c      	mov	ip, r1
 8000878:	4619      	mov	r1, r3
 800087a:	4663      	mov	r3, ip
 800087c:	e000      	b.n	8000880 <__aeabi_cdcmpeq>
 800087e:	bf00      	nop

08000880 <__aeabi_cdcmpeq>:
 8000880:	b501      	push	{r0, lr}
 8000882:	f7ff ffb7 	bl	80007f4 <__cmpdf2>
 8000886:	2800      	cmp	r0, #0
 8000888:	bf48      	it	mi
 800088a:	f110 0f00 	cmnmi.w	r0, #0
 800088e:	bd01      	pop	{r0, pc}

08000890 <__aeabi_dcmpeq>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff fff4 	bl	8000880 <__aeabi_cdcmpeq>
 8000898:	bf0c      	ite	eq
 800089a:	2001      	moveq	r0, #1
 800089c:	2000      	movne	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_dcmplt>:
 80008a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a8:	f7ff ffea 	bl	8000880 <__aeabi_cdcmpeq>
 80008ac:	bf34      	ite	cc
 80008ae:	2001      	movcc	r0, #1
 80008b0:	2000      	movcs	r0, #0
 80008b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b6:	bf00      	nop

080008b8 <__aeabi_dcmple>:
 80008b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008bc:	f7ff ffe0 	bl	8000880 <__aeabi_cdcmpeq>
 80008c0:	bf94      	ite	ls
 80008c2:	2001      	movls	r0, #1
 80008c4:	2000      	movhi	r0, #0
 80008c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ca:	bf00      	nop

080008cc <__aeabi_dcmpge>:
 80008cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d0:	f7ff ffce 	bl	8000870 <__aeabi_cdrcmple>
 80008d4:	bf94      	ite	ls
 80008d6:	2001      	movls	r0, #1
 80008d8:	2000      	movhi	r0, #0
 80008da:	f85d fb08 	ldr.w	pc, [sp], #8
 80008de:	bf00      	nop

080008e0 <__aeabi_dcmpgt>:
 80008e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e4:	f7ff ffc4 	bl	8000870 <__aeabi_cdrcmple>
 80008e8:	bf34      	ite	cc
 80008ea:	2001      	movcc	r0, #1
 80008ec:	2000      	movcs	r0, #0
 80008ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2iz>:
 80008f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008fc:	d215      	bcs.n	800092a <__aeabi_d2iz+0x36>
 80008fe:	d511      	bpl.n	8000924 <__aeabi_d2iz+0x30>
 8000900:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000908:	d912      	bls.n	8000930 <__aeabi_d2iz+0x3c>
 800090a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800090e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000916:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800091a:	fa23 f002 	lsr.w	r0, r3, r2
 800091e:	bf18      	it	ne
 8000920:	4240      	negne	r0, r0
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d105      	bne.n	800093c <__aeabi_d2iz+0x48>
 8000930:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000934:	bf08      	it	eq
 8000936:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800093a:	4770      	bx	lr
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <__aeabi_d2uiz>:
 8000944:	004a      	lsls	r2, r1, #1
 8000946:	d211      	bcs.n	800096c <__aeabi_d2uiz+0x28>
 8000948:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800094c:	d211      	bcs.n	8000972 <__aeabi_d2uiz+0x2e>
 800094e:	d50d      	bpl.n	800096c <__aeabi_d2uiz+0x28>
 8000950:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000954:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000958:	d40e      	bmi.n	8000978 <__aeabi_d2uiz+0x34>
 800095a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800095e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000962:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000966:	fa23 f002 	lsr.w	r0, r3, r2
 800096a:	4770      	bx	lr
 800096c:	f04f 0000 	mov.w	r0, #0
 8000970:	4770      	bx	lr
 8000972:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000976:	d102      	bne.n	800097e <__aeabi_d2uiz+0x3a>
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	4770      	bx	lr
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	4770      	bx	lr

08000984 <__aeabi_uldivmod>:
 8000984:	b953      	cbnz	r3, 800099c <__aeabi_uldivmod+0x18>
 8000986:	b94a      	cbnz	r2, 800099c <__aeabi_uldivmod+0x18>
 8000988:	2900      	cmp	r1, #0
 800098a:	bf08      	it	eq
 800098c:	2800      	cmpeq	r0, #0
 800098e:	bf1c      	itt	ne
 8000990:	f04f 31ff 	movne.w	r1, #4294967295
 8000994:	f04f 30ff 	movne.w	r0, #4294967295
 8000998:	f000 b974 	b.w	8000c84 <__aeabi_idiv0>
 800099c:	f1ad 0c08 	sub.w	ip, sp, #8
 80009a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009a4:	f000 f806 	bl	80009b4 <__udivmoddi4>
 80009a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009b0:	b004      	add	sp, #16
 80009b2:	4770      	bx	lr

080009b4 <__udivmoddi4>:
 80009b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009b8:	9d08      	ldr	r5, [sp, #32]
 80009ba:	4604      	mov	r4, r0
 80009bc:	468e      	mov	lr, r1
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d14d      	bne.n	8000a5e <__udivmoddi4+0xaa>
 80009c2:	428a      	cmp	r2, r1
 80009c4:	4694      	mov	ip, r2
 80009c6:	d969      	bls.n	8000a9c <__udivmoddi4+0xe8>
 80009c8:	fab2 f282 	clz	r2, r2
 80009cc:	b152      	cbz	r2, 80009e4 <__udivmoddi4+0x30>
 80009ce:	fa01 f302 	lsl.w	r3, r1, r2
 80009d2:	f1c2 0120 	rsb	r1, r2, #32
 80009d6:	fa20 f101 	lsr.w	r1, r0, r1
 80009da:	fa0c fc02 	lsl.w	ip, ip, r2
 80009de:	ea41 0e03 	orr.w	lr, r1, r3
 80009e2:	4094      	lsls	r4, r2
 80009e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009e8:	0c21      	lsrs	r1, r4, #16
 80009ea:	fbbe f6f8 	udiv	r6, lr, r8
 80009ee:	fa1f f78c 	uxth.w	r7, ip
 80009f2:	fb08 e316 	mls	r3, r8, r6, lr
 80009f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009fa:	fb06 f107 	mul.w	r1, r6, r7
 80009fe:	4299      	cmp	r1, r3
 8000a00:	d90a      	bls.n	8000a18 <__udivmoddi4+0x64>
 8000a02:	eb1c 0303 	adds.w	r3, ip, r3
 8000a06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a0a:	f080 811f 	bcs.w	8000c4c <__udivmoddi4+0x298>
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	f240 811c 	bls.w	8000c4c <__udivmoddi4+0x298>
 8000a14:	3e02      	subs	r6, #2
 8000a16:	4463      	add	r3, ip
 8000a18:	1a5b      	subs	r3, r3, r1
 8000a1a:	b2a4      	uxth	r4, r4
 8000a1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a20:	fb08 3310 	mls	r3, r8, r0, r3
 8000a24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a28:	fb00 f707 	mul.w	r7, r0, r7
 8000a2c:	42a7      	cmp	r7, r4
 8000a2e:	d90a      	bls.n	8000a46 <__udivmoddi4+0x92>
 8000a30:	eb1c 0404 	adds.w	r4, ip, r4
 8000a34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a38:	f080 810a 	bcs.w	8000c50 <__udivmoddi4+0x29c>
 8000a3c:	42a7      	cmp	r7, r4
 8000a3e:	f240 8107 	bls.w	8000c50 <__udivmoddi4+0x29c>
 8000a42:	4464      	add	r4, ip
 8000a44:	3802      	subs	r0, #2
 8000a46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a4a:	1be4      	subs	r4, r4, r7
 8000a4c:	2600      	movs	r6, #0
 8000a4e:	b11d      	cbz	r5, 8000a58 <__udivmoddi4+0xa4>
 8000a50:	40d4      	lsrs	r4, r2
 8000a52:	2300      	movs	r3, #0
 8000a54:	e9c5 4300 	strd	r4, r3, [r5]
 8000a58:	4631      	mov	r1, r6
 8000a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a5e:	428b      	cmp	r3, r1
 8000a60:	d909      	bls.n	8000a76 <__udivmoddi4+0xc2>
 8000a62:	2d00      	cmp	r5, #0
 8000a64:	f000 80ef 	beq.w	8000c46 <__udivmoddi4+0x292>
 8000a68:	2600      	movs	r6, #0
 8000a6a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a6e:	4630      	mov	r0, r6
 8000a70:	4631      	mov	r1, r6
 8000a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a76:	fab3 f683 	clz	r6, r3
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d14a      	bne.n	8000b14 <__udivmoddi4+0x160>
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d302      	bcc.n	8000a88 <__udivmoddi4+0xd4>
 8000a82:	4282      	cmp	r2, r0
 8000a84:	f200 80f9 	bhi.w	8000c7a <__udivmoddi4+0x2c6>
 8000a88:	1a84      	subs	r4, r0, r2
 8000a8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000a8e:	2001      	movs	r0, #1
 8000a90:	469e      	mov	lr, r3
 8000a92:	2d00      	cmp	r5, #0
 8000a94:	d0e0      	beq.n	8000a58 <__udivmoddi4+0xa4>
 8000a96:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a9a:	e7dd      	b.n	8000a58 <__udivmoddi4+0xa4>
 8000a9c:	b902      	cbnz	r2, 8000aa0 <__udivmoddi4+0xec>
 8000a9e:	deff      	udf	#255	; 0xff
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	2a00      	cmp	r2, #0
 8000aa6:	f040 8092 	bne.w	8000bce <__udivmoddi4+0x21a>
 8000aaa:	eba1 010c 	sub.w	r1, r1, ip
 8000aae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab2:	fa1f fe8c 	uxth.w	lr, ip
 8000ab6:	2601      	movs	r6, #1
 8000ab8:	0c20      	lsrs	r0, r4, #16
 8000aba:	fbb1 f3f7 	udiv	r3, r1, r7
 8000abe:	fb07 1113 	mls	r1, r7, r3, r1
 8000ac2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ac6:	fb0e f003 	mul.w	r0, lr, r3
 8000aca:	4288      	cmp	r0, r1
 8000acc:	d908      	bls.n	8000ae0 <__udivmoddi4+0x12c>
 8000ace:	eb1c 0101 	adds.w	r1, ip, r1
 8000ad2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ad6:	d202      	bcs.n	8000ade <__udivmoddi4+0x12a>
 8000ad8:	4288      	cmp	r0, r1
 8000ada:	f200 80cb 	bhi.w	8000c74 <__udivmoddi4+0x2c0>
 8000ade:	4643      	mov	r3, r8
 8000ae0:	1a09      	subs	r1, r1, r0
 8000ae2:	b2a4      	uxth	r4, r4
 8000ae4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ae8:	fb07 1110 	mls	r1, r7, r0, r1
 8000aec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000af0:	fb0e fe00 	mul.w	lr, lr, r0
 8000af4:	45a6      	cmp	lr, r4
 8000af6:	d908      	bls.n	8000b0a <__udivmoddi4+0x156>
 8000af8:	eb1c 0404 	adds.w	r4, ip, r4
 8000afc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b00:	d202      	bcs.n	8000b08 <__udivmoddi4+0x154>
 8000b02:	45a6      	cmp	lr, r4
 8000b04:	f200 80bb 	bhi.w	8000c7e <__udivmoddi4+0x2ca>
 8000b08:	4608      	mov	r0, r1
 8000b0a:	eba4 040e 	sub.w	r4, r4, lr
 8000b0e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b12:	e79c      	b.n	8000a4e <__udivmoddi4+0x9a>
 8000b14:	f1c6 0720 	rsb	r7, r6, #32
 8000b18:	40b3      	lsls	r3, r6
 8000b1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b22:	fa20 f407 	lsr.w	r4, r0, r7
 8000b26:	fa01 f306 	lsl.w	r3, r1, r6
 8000b2a:	431c      	orrs	r4, r3
 8000b2c:	40f9      	lsrs	r1, r7
 8000b2e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b32:	fa00 f306 	lsl.w	r3, r0, r6
 8000b36:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b3a:	0c20      	lsrs	r0, r4, #16
 8000b3c:	fa1f fe8c 	uxth.w	lr, ip
 8000b40:	fb09 1118 	mls	r1, r9, r8, r1
 8000b44:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b48:	fb08 f00e 	mul.w	r0, r8, lr
 8000b4c:	4288      	cmp	r0, r1
 8000b4e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b52:	d90b      	bls.n	8000b6c <__udivmoddi4+0x1b8>
 8000b54:	eb1c 0101 	adds.w	r1, ip, r1
 8000b58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b5c:	f080 8088 	bcs.w	8000c70 <__udivmoddi4+0x2bc>
 8000b60:	4288      	cmp	r0, r1
 8000b62:	f240 8085 	bls.w	8000c70 <__udivmoddi4+0x2bc>
 8000b66:	f1a8 0802 	sub.w	r8, r8, #2
 8000b6a:	4461      	add	r1, ip
 8000b6c:	1a09      	subs	r1, r1, r0
 8000b6e:	b2a4      	uxth	r4, r4
 8000b70:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b74:	fb09 1110 	mls	r1, r9, r0, r1
 8000b78:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b7c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b80:	458e      	cmp	lr, r1
 8000b82:	d908      	bls.n	8000b96 <__udivmoddi4+0x1e2>
 8000b84:	eb1c 0101 	adds.w	r1, ip, r1
 8000b88:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b8c:	d26c      	bcs.n	8000c68 <__udivmoddi4+0x2b4>
 8000b8e:	458e      	cmp	lr, r1
 8000b90:	d96a      	bls.n	8000c68 <__udivmoddi4+0x2b4>
 8000b92:	3802      	subs	r0, #2
 8000b94:	4461      	add	r1, ip
 8000b96:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b9a:	fba0 9402 	umull	r9, r4, r0, r2
 8000b9e:	eba1 010e 	sub.w	r1, r1, lr
 8000ba2:	42a1      	cmp	r1, r4
 8000ba4:	46c8      	mov	r8, r9
 8000ba6:	46a6      	mov	lr, r4
 8000ba8:	d356      	bcc.n	8000c58 <__udivmoddi4+0x2a4>
 8000baa:	d053      	beq.n	8000c54 <__udivmoddi4+0x2a0>
 8000bac:	b15d      	cbz	r5, 8000bc6 <__udivmoddi4+0x212>
 8000bae:	ebb3 0208 	subs.w	r2, r3, r8
 8000bb2:	eb61 010e 	sbc.w	r1, r1, lr
 8000bb6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bba:	fa22 f306 	lsr.w	r3, r2, r6
 8000bbe:	40f1      	lsrs	r1, r6
 8000bc0:	431f      	orrs	r7, r3
 8000bc2:	e9c5 7100 	strd	r7, r1, [r5]
 8000bc6:	2600      	movs	r6, #0
 8000bc8:	4631      	mov	r1, r6
 8000bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bce:	f1c2 0320 	rsb	r3, r2, #32
 8000bd2:	40d8      	lsrs	r0, r3
 8000bd4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bdc:	4091      	lsls	r1, r2
 8000bde:	4301      	orrs	r1, r0
 8000be0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000be4:	fa1f fe8c 	uxth.w	lr, ip
 8000be8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000bec:	fb07 3610 	mls	r6, r7, r0, r3
 8000bf0:	0c0b      	lsrs	r3, r1, #16
 8000bf2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000bf6:	fb00 f60e 	mul.w	r6, r0, lr
 8000bfa:	429e      	cmp	r6, r3
 8000bfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000c00:	d908      	bls.n	8000c14 <__udivmoddi4+0x260>
 8000c02:	eb1c 0303 	adds.w	r3, ip, r3
 8000c06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c0a:	d22f      	bcs.n	8000c6c <__udivmoddi4+0x2b8>
 8000c0c:	429e      	cmp	r6, r3
 8000c0e:	d92d      	bls.n	8000c6c <__udivmoddi4+0x2b8>
 8000c10:	3802      	subs	r0, #2
 8000c12:	4463      	add	r3, ip
 8000c14:	1b9b      	subs	r3, r3, r6
 8000c16:	b289      	uxth	r1, r1
 8000c18:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c1c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c24:	fb06 f30e 	mul.w	r3, r6, lr
 8000c28:	428b      	cmp	r3, r1
 8000c2a:	d908      	bls.n	8000c3e <__udivmoddi4+0x28a>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c34:	d216      	bcs.n	8000c64 <__udivmoddi4+0x2b0>
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d914      	bls.n	8000c64 <__udivmoddi4+0x2b0>
 8000c3a:	3e02      	subs	r6, #2
 8000c3c:	4461      	add	r1, ip
 8000c3e:	1ac9      	subs	r1, r1, r3
 8000c40:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c44:	e738      	b.n	8000ab8 <__udivmoddi4+0x104>
 8000c46:	462e      	mov	r6, r5
 8000c48:	4628      	mov	r0, r5
 8000c4a:	e705      	b.n	8000a58 <__udivmoddi4+0xa4>
 8000c4c:	4606      	mov	r6, r0
 8000c4e:	e6e3      	b.n	8000a18 <__udivmoddi4+0x64>
 8000c50:	4618      	mov	r0, r3
 8000c52:	e6f8      	b.n	8000a46 <__udivmoddi4+0x92>
 8000c54:	454b      	cmp	r3, r9
 8000c56:	d2a9      	bcs.n	8000bac <__udivmoddi4+0x1f8>
 8000c58:	ebb9 0802 	subs.w	r8, r9, r2
 8000c5c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c60:	3801      	subs	r0, #1
 8000c62:	e7a3      	b.n	8000bac <__udivmoddi4+0x1f8>
 8000c64:	4646      	mov	r6, r8
 8000c66:	e7ea      	b.n	8000c3e <__udivmoddi4+0x28a>
 8000c68:	4620      	mov	r0, r4
 8000c6a:	e794      	b.n	8000b96 <__udivmoddi4+0x1e2>
 8000c6c:	4640      	mov	r0, r8
 8000c6e:	e7d1      	b.n	8000c14 <__udivmoddi4+0x260>
 8000c70:	46d0      	mov	r8, sl
 8000c72:	e77b      	b.n	8000b6c <__udivmoddi4+0x1b8>
 8000c74:	3b02      	subs	r3, #2
 8000c76:	4461      	add	r1, ip
 8000c78:	e732      	b.n	8000ae0 <__udivmoddi4+0x12c>
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	e709      	b.n	8000a92 <__udivmoddi4+0xde>
 8000c7e:	4464      	add	r4, ip
 8000c80:	3802      	subs	r0, #2
 8000c82:	e742      	b.n	8000b0a <__udivmoddi4+0x156>

08000c84 <__aeabi_idiv0>:
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <delay_cycles>:

extern s16 AVG_Alpha_Current;
extern s16 AVG_Beta_Current;

void __attribute__( ( optimize( "O0" ) ) )
delay_cycles( uint32_t cyc ) {
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  for ( uint32_t d_i = 0; d_i < cyc; ++d_i ) { asm( "NOP" ); }
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	e003      	b.n	8000c9e <delay_cycles+0x16>
 8000c96:	bf00      	nop
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d3f7      	bcc.n	8000c96 <delay_cycles+0xe>
}
 8000ca6:	bf00      	nop
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <ExecControlInitParamOffSet>:
* Return         : None
*******************************************************************************/
void ExecControlInitParamOffSet()
{

	DataSensing_sum.AC_LineCurrent = ((DataSensing_sum.AC_LineCurrent)+(u32)(DataSensingIO.AC_LineCurrent));
 8000cb4:	4b28      	ldr	r3, [pc, #160]	; (8000d58 <ExecControlInitParamOffSet+0xa4>)
 8000cb6:	4a29      	ldr	r2, [pc, #164]	; (8000d5c <ExecControlInitParamOffSet+0xa8>)
	DataSensing_sum.DC_PanelCurrent = ((DataSensing_sum.DC_PanelCurrent)+(u32)(DataSensingIO.DC_PanelCurrent));
	DataSensing_sum.DC_BusVoltage = ((DataSensing_sum.DC_BusVoltage)+(u32)(DataSensingIO.DC_BusVoltage));
	DataSensing_sum.DC_PanelVoltage = ((DataSensing_sum.DC_PanelVoltage)+(u32)(DataSensingIO.DC_PanelVoltage));


    if (DataInitCount < (MAX_DATA_INIT_COUNT-1))
 8000cb8:	4929      	ldr	r1, [pc, #164]	; (8000d60 <ExecControlInitParamOffSet+0xac>)
{
 8000cba:	b410      	push	{r4}
	DataSensing_sum.AC_LineCurrent = ((DataSensing_sum.AC_LineCurrent)+(u32)(DataSensingIO.AC_LineCurrent));
 8000cbc:	681c      	ldr	r4, [r3, #0]
 8000cbe:	8810      	ldrh	r0, [r2, #0]
 8000cc0:	fa14 f080 	uxtah	r0, r4, r0
 8000cc4:	6018      	str	r0, [r3, #0]
	DataSensing_sum.AC_LineVoltage = ((DataSensing_sum.AC_LineVoltage)+(u32)(DataSensingIO.AC_LineVoltage));
 8000cc6:	685c      	ldr	r4, [r3, #4]
 8000cc8:	8850      	ldrh	r0, [r2, #2]
 8000cca:	fa14 f080 	uxtah	r0, r4, r0
 8000cce:	6058      	str	r0, [r3, #4]
	DataSensing_sum.DC_PanelCurrent = ((DataSensing_sum.DC_PanelCurrent)+(u32)(DataSensingIO.DC_PanelCurrent));
 8000cd0:	68dc      	ldr	r4, [r3, #12]
 8000cd2:	88d0      	ldrh	r0, [r2, #6]
 8000cd4:	fa14 f080 	uxtah	r0, r4, r0
 8000cd8:	60d8      	str	r0, [r3, #12]
	DataSensing_sum.DC_BusVoltage = ((DataSensing_sum.DC_BusVoltage)+(u32)(DataSensingIO.DC_BusVoltage));
 8000cda:	689c      	ldr	r4, [r3, #8]
 8000cdc:	8890      	ldrh	r0, [r2, #4]
 8000cde:	fa14 f080 	uxtah	r0, r4, r0
 8000ce2:	6098      	str	r0, [r3, #8]
	DataSensing_sum.DC_PanelVoltage = ((DataSensing_sum.DC_PanelVoltage)+(u32)(DataSensingIO.DC_PanelVoltage));
 8000ce4:	691c      	ldr	r4, [r3, #16]
 8000ce6:	8912      	ldrh	r2, [r2, #8]
    if (DataInitCount < (MAX_DATA_INIT_COUNT-1))
 8000ce8:	481e      	ldr	r0, [pc, #120]	; (8000d64 <ExecControlInitParamOffSet+0xb0>)
	DataSensing_sum.DC_PanelVoltage = ((DataSensing_sum.DC_PanelVoltage)+(u32)(DataSensingIO.DC_PanelVoltage));
 8000cea:	fa14 f282 	uxtah	r2, r4, r2
 8000cee:	611a      	str	r2, [r3, #16]
    if (DataInitCount < (MAX_DATA_INIT_COUNT-1))
 8000cf0:	680a      	ldr	r2, [r1, #0]
 8000cf2:	4282      	cmp	r2, r0
 8000cf4:	d92a      	bls.n	8000d4c <ExecControlInitParamOffSet+0x98>
      DataInitCount++;

    else if(DataInitCount==(MAX_DATA_INIT_COUNT-1))
 8000cf6:	6808      	ldr	r0, [r1, #0]
 8000cf8:	4a1b      	ldr	r2, [pc, #108]	; (8000d68 <ExecControlInitParamOffSet+0xb4>)
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	d002      	beq.n	8000d04 <ExecControlInitParamOffSet+0x50>

      DataInitCount++;
    }


}
 8000cfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d02:	4770      	bx	lr
      ((vu16*)&DataSensingOffSet)[0] = (u16)(DataSensing_sum.AC_LineCurrent / (DataInitCount+1));
 8000d04:	6818      	ldr	r0, [r3, #0]
 8000d06:	680c      	ldr	r4, [r1, #0]
 8000d08:	4a18      	ldr	r2, [pc, #96]	; (8000d6c <ExecControlInitParamOffSet+0xb8>)
 8000d0a:	3401      	adds	r4, #1
 8000d0c:	fbb0 f0f4 	udiv	r0, r0, r4
 8000d10:	b280      	uxth	r0, r0
 8000d12:	8010      	strh	r0, [r2, #0]
      ((vu16*)&DataSensingOffSet)[1] = (u16)(DataSensing_sum.AC_LineVoltage / (DataInitCount+1));
 8000d14:	6858      	ldr	r0, [r3, #4]
 8000d16:	680c      	ldr	r4, [r1, #0]
 8000d18:	3401      	adds	r4, #1
 8000d1a:	fbb0 f0f4 	udiv	r0, r0, r4
 8000d1e:	b280      	uxth	r0, r0
 8000d20:	8050      	strh	r0, [r2, #2]
      ((vu16*)&DataSensingOffSet)[2] = (u16)(DataSensing_sum.DC_BusVoltage / (DataInitCount+1));
 8000d22:	6898      	ldr	r0, [r3, #8]
 8000d24:	680c      	ldr	r4, [r1, #0]
 8000d26:	3401      	adds	r4, #1
 8000d28:	fbb0 f0f4 	udiv	r0, r0, r4
 8000d2c:	b280      	uxth	r0, r0
 8000d2e:	8090      	strh	r0, [r2, #4]
      ((vu16*)&DataSensingOffSet)[3] = (u16)(DataSensing_sum.DC_PanelCurrent / (DataInitCount+1));
 8000d30:	68d8      	ldr	r0, [r3, #12]
 8000d32:	680c      	ldr	r4, [r1, #0]
 8000d34:	3401      	adds	r4, #1
 8000d36:	fbb0 f0f4 	udiv	r0, r0, r4
 8000d3a:	b280      	uxth	r0, r0
 8000d3c:	80d0      	strh	r0, [r2, #6]
      ((vu16*)&DataSensingOffSet)[4] = (u16)(DataSensing_sum.DC_PanelVoltage / (DataInitCount+1));
 8000d3e:	691b      	ldr	r3, [r3, #16]
 8000d40:	6808      	ldr	r0, [r1, #0]
 8000d42:	3001      	adds	r0, #1
 8000d44:	fbb3 f3f0 	udiv	r3, r3, r0
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	8113      	strh	r3, [r2, #8]
      DataInitCount++;
 8000d4c:	680b      	ldr	r3, [r1, #0]
}
 8000d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
      DataInitCount++;
 8000d52:	3301      	adds	r3, #1
 8000d54:	600b      	str	r3, [r1, #0]
}
 8000d56:	4770      	bx	lr
 8000d58:	2000013c 	.word	0x2000013c
 8000d5c:	2000010c 	.word	0x2000010c
 8000d60:	20000108 	.word	0x20000108
 8000d64:	00025816 	.word	0x00025816
 8000d68:	00025817 	.word	0x00025817
 8000d6c:	20000124 	.word	0x20000124

08000d70 <ExecControlOpenLoop>:
  //GRID_VAC_VAL = DataSensingIO.AC_LineVoltage;
  //GRID_IAC_VAL = DataSensingIO.AC_LineCurrent;

  //uint8_t data[] = "HELLO WORLD \r\n";

    DMA1_Channel5->CCR &= ~( DMA_CCR_EN ); //CHANNEL ENABLE
 8000d70:	4bb4      	ldr	r3, [pc, #720]	; (8001044 <ExecControlOpenLoop+0x2d4>)
    //Theta += 131;//50khz 50hz
    //Theta += 158;
    Theta += 152;
    Index_Sin = (((u16)(Theta>>7)) & (u16)(0x01FF));

    Sin_Theta = Sin_Cos_Table[Index_Sin];
 8000d72:	49b5      	ldr	r1, [pc, #724]	; (8001048 <ExecControlOpenLoop+0x2d8>)
    DMA1_Channel5->CCR &= ~( DMA_CCR_EN ); //CHANNEL ENABLE
 8000d74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    mul_q15_q15_q31(Amplitude,Sin_Theta,&SinWave_q31);
 8000d76:	48b5      	ldr	r0, [pc, #724]	; (800104c <ExecControlOpenLoop+0x2dc>)
    DMA1_Channel5->CCR &= ~( DMA_CCR_EN ); //CHANNEL ENABLE
 8000d78:	f022 0201 	bic.w	r2, r2, #1
 {
 8000d7c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    DMA1_Channel5->CCR &= ~( DMA_CCR_EN ); //CHANNEL ENABLE
 8000d80:	659a      	str	r2, [r3, #88]	; 0x58
    DMA1_Channel3->CCR &= ~( DMA_CCR_EN ); //CHANNEL ENABLE
 8000d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    Theta += 152;
 8000d84:	4cb2      	ldr	r4, [pc, #712]	; (8001050 <ExecControlOpenLoop+0x2e0>)
    State_Control=START;
 8000d86:	4db3      	ldr	r5, [pc, #716]	; (8001054 <ExecControlOpenLoop+0x2e4>)
    mul_q15_q15_q31(Amplitude,Sin_Theta,&SinWave_q31);
 8000d88:	f9b0 0000 	ldrsh.w	r0, [r0]
    DMA1_Channel3->CCR &= ~( DMA_CCR_EN ); //CHANNEL ENABLE
 8000d8c:	f022 0201 	bic.w	r2, r2, #1
 8000d90:	631a      	str	r2, [r3, #48]	; 0x30
    DMA1_Channel4->CCR &= ~( DMA_CCR_EN ); //CHANNEL ENABLE
 8000d92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d94:	f022 0201 	bic.w	r2, r2, #1
 8000d98:	645a      	str	r2, [r3, #68]	; 0x44
    DMA1_Channel6->CCR &= ~( DMA_CCR_EN ); //CHANNEL ENABLE
 8000d9a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000d9c:	f022 0201 	bic.w	r2, r2, #1
 8000da0:	66da      	str	r2, [r3, #108]	; 0x6c
    Theta += 152;
 8000da2:	8823      	ldrh	r3, [r4, #0]
 8000da4:	3398      	adds	r3, #152	; 0x98
 8000da6:	b29b      	uxth	r3, r3
    Sin_Theta = Sin_Cos_Table[Index_Sin];
 8000da8:	09da      	lsrs	r2, r3, #7
 {
 8000daa:	b082      	sub	sp, #8
    mul_q15_q15_q31(Amplitude,Sin_Theta,&SinWave_q31);
 8000dac:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
    Theta += 152;
 8000db0:	8023      	strh	r3, [r4, #0]
    State_Control=START;
 8000db2:	2212      	movs	r2, #18
 8000db4:	702a      	strb	r2, [r5, #0]
    mul_q15_q15_q31(Amplitude,Sin_Theta,&SinWave_q31);
 8000db6:	aa01      	add	r2, sp, #4
 8000db8:	f003 f868 	bl	8003e8c <mul_q15_q15_q31>
    SineWave = (s16)(SinWave_q31/65536);
 8000dbc:	9c01      	ldr	r4, [sp, #4]
    /*PORT A.1 drives the RELE' */
    //GPIO_SetBits(GPIOA, GPIO_Pin_1);

    if (DCAC_GetStatus() == DCAC_Running)
 8000dbe:	f001 f9d3 	bl	8002168 <DCAC_GetStatus>
 8000dc2:	2801      	cmp	r0, #1
 8000dc4:	d002      	beq.n	8000dcc <ExecControlOpenLoop+0x5c>

		}

		SinWave_q31_temp = SinWave_q31;
    }
}
 8000dc6:	b002      	add	sp, #8
 8000dc8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
		if((RELAY_ON == FALSE) && (ZCD == 1900))
 8000dcc:	4ba2      	ldr	r3, [pc, #648]	; (8001058 <ExecControlOpenLoop+0x2e8>)
    	RESET_TIMER_D = TRUE;
 8000dce:	4da3      	ldr	r5, [pc, #652]	; (800105c <ExecControlOpenLoop+0x2ec>)
		if((RELAY_ON == FALSE) && (ZCD == 1900))
 8000dd0:	781a      	ldrb	r2, [r3, #0]
 8000dd2:	49a3      	ldr	r1, [pc, #652]	; (8001060 <ExecControlOpenLoop+0x2f0>)
    	RESET_TIMER_D = TRUE;
 8000dd4:	7028      	strb	r0, [r5, #0]
		if((RELAY_ON == FALSE) && (ZCD == 1900))
 8000dd6:	b352      	cbz	r2, 8000e2e <ExecControlOpenLoop+0xbe>
		ZCD++;
 8000dd8:	680a      	ldr	r2, [r1, #0]
 8000dda:	3201      	adds	r2, #1
    SineWave = (s16)(SinWave_q31/65536);
 8000ddc:	2c00      	cmp	r4, #0
		if((SinWave_q31) < 0)
 8000dde:	9b01      	ldr	r3, [sp, #4]
		ZCD++;
 8000de0:	600a      	str	r2, [r1, #0]
    SineWave = (s16)(SinWave_q31/65536);
 8000de2:	bfbc      	itt	lt
 8000de4:	f504 447f 	addlt.w	r4, r4, #65280	; 0xff00
 8000de8:	34ff      	addlt	r4, #255	; 0xff
		if((SinWave_q31) < 0)
 8000dea:	2b00      	cmp	r3, #0
			SOFT_START_ZC_P = TRUE;
 8000dec:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8001094 <ExecControlOpenLoop+0x324>
			polarity=FALSE;
 8000df0:	f8df a2a4 	ldr.w	sl, [pc, #676]	; 8001098 <ExecControlOpenLoop+0x328>
    SineWave = (s16)(SinWave_q31/65536);
 8000df4:	ea4f 4424 	mov.w	r4, r4, asr #16
		if((SinWave_q31) < 0)
 8000df8:	461a      	mov	r2, r3
 8000dfa:	db20      	blt.n	8000e3e <ExecControlOpenLoop+0xce>
 8000dfc:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800109c <ExecControlOpenLoop+0x32c>
 8000e00:	4e98      	ldr	r6, [pc, #608]	; (8001064 <ExecControlOpenLoop+0x2f4>)
			  Pulse1 = (u16)(qValpha_shifted_pos);
 8000e02:	4b99      	ldr	r3, [pc, #612]	; (8001068 <ExecControlOpenLoop+0x2f8>)
			if(SOFT_START_ZC_P == TRUE)
 8000e04:	f898 1000 	ldrb.w	r1, [r8]
 8000e08:	b2a4      	uxth	r4, r4
			  Pulse1 = (u16)(qValpha_shifted_pos);
 8000e0a:	601c      	str	r4, [r3, #0]
			SOFT_START_ZC_N = TRUE;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	f889 3000 	strb.w	r3, [r9]
			  polarity=TRUE;
 8000e12:	f88a 3000 	strb.w	r3, [sl]
			if(SOFT_START_ZC_P == TRUE)
 8000e16:	2900      	cmp	r1, #0
 8000e18:	f000 8086 	beq.w	8000f28 <ExecControlOpenLoop+0x1b8>
			  if(SinWave_q31 > SinWave_q31_temp) //SINE RISING
 8000e1c:	6831      	ldr	r1, [r6, #0]
 8000e1e:	4291      	cmp	r1, r2
 8000e20:	f2c0 81c7 	blt.w	80011b2 <ExecControlOpenLoop+0x442>
		SinWave_q31_temp = SinWave_q31;
 8000e24:	4613      	mov	r3, r2
 8000e26:	6033      	str	r3, [r6, #0]
}
 8000e28:	b002      	add	sp, #8
 8000e2a:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
		if((RELAY_ON == FALSE) && (ZCD == 1900))
 8000e2e:	680a      	ldr	r2, [r1, #0]
 8000e30:	f240 766c 	movw	r6, #1900	; 0x76c
 8000e34:	42b2      	cmp	r2, r6
 8000e36:	f000 81b6 	beq.w	80011a6 <ExecControlOpenLoop+0x436>
		ZCD++;
 8000e3a:	3201      	adds	r2, #1
 8000e3c:	e7ce      	b.n	8000ddc <ExecControlOpenLoop+0x6c>
			qValpha_shifted_pos = ((u16)(SineWave+(TIMF_PERIOD)));
 8000e3e:	f246 7cbe 	movw	ip, #26558	; 0x67be
			Pulse2=(u16)(qValpha_shifted_pos);
 8000e42:	4a8a      	ldr	r2, [pc, #552]	; (800106c <ExecControlOpenLoop+0x2fc>)
			if(SOFT_START_ZC_N == TRUE)
 8000e44:	f8df 9254 	ldr.w	r9, [pc, #596]	; 800109c <ExecControlOpenLoop+0x32c>
			  if(SinWave_q31 < SinWave_q31_temp)
 8000e48:	4e86      	ldr	r6, [pc, #536]	; (8001064 <ExecControlOpenLoop+0x2f4>)
			qValpha_shifted_pos = ((u16)(SineWave+(TIMF_PERIOD)));
 8000e4a:	eb0c 0104 	add.w	r1, ip, r4
			Pulse2=(u16)(qValpha_shifted_pos);
 8000e4e:	b289      	uxth	r1, r1
 8000e50:	6011      	str	r1, [r2, #0]
			if(SOFT_START_ZC_N == TRUE)
 8000e52:	f899 2000 	ldrb.w	r2, [r9]
			SOFT_START_ZC_P = TRUE;
 8000e56:	2001      	movs	r0, #1
			polarity=FALSE;
 8000e58:	f04f 0e00 	mov.w	lr, #0
			SOFT_START_ZC_P = TRUE;
 8000e5c:	f888 0000 	strb.w	r0, [r8]
			polarity=FALSE;
 8000e60:	f88a e000 	strb.w	lr, [sl]
			if(SOFT_START_ZC_N == TRUE)
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f000 811d 	beq.w	80010a4 <ExecControlOpenLoop+0x334>
			  if(SinWave_q31 < SinWave_q31_temp)
 8000e6a:	6832      	ldr	r2, [r6, #0]
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	dada      	bge.n	8000e26 <ExecControlOpenLoop+0xb6>
				HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= 1 << 3;
 8000e70:	4a7f      	ldr	r2, [pc, #508]	; (8001070 <ExecControlOpenLoop+0x300>)
				HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP3xR = (uint32_t)(Pulse2_temp-250); //FROM CMP4
 8000e72:	4d80      	ldr	r5, [pc, #512]	; (8001074 <ExecControlOpenLoop+0x304>)
				HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= 1 << 3;
 8000e74:	f8d2 123c 	ldr.w	r1, [r2, #572]	; 0x23c
				  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8000e78:	4c7f      	ldr	r4, [pc, #508]	; (8001078 <ExecControlOpenLoop+0x308>)
				STEP = STEP + STEP/20;
 8000e7a:	f8df a214 	ldr.w	sl, [pc, #532]	; 8001090 <ExecControlOpenLoop+0x320>
				HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= 1 << 3;
 8000e7e:	f041 0108 	orr.w	r1, r1, #8
 8000e82:	f8c2 123c 	str.w	r1, [r2, #572]	; 0x23c
				HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].RSTx2R |= 1 << 5;
 8000e86:	f8d2 1248 	ldr.w	r1, [r2, #584]	; 0x248
 8000e8a:	f041 0120 	orr.w	r1, r1, #32
 8000e8e:	f8c2 1248 	str.w	r1, [r2, #584]	; 0x248
				HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP1xR = (uint32_t)(1); //FROM CMP4
 8000e92:	f8c2 031c 	str.w	r0, [r2, #796]	; 0x31c
				HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP3xR = (uint32_t)(Pulse2_temp-250); //FROM CMP4
 8000e96:	f8d5 8000 	ldr.w	r8, [r5]
 8000e9a:	f1a8 01fa 	sub.w	r1, r8, #250	; 0xfa
 8000e9e:	f8c2 1328 	str.w	r1, [r2, #808]	; 0x328
			    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR = (uint32_t)(1); //FROM CMP4
 8000ea2:	f8c2 021c 	str.w	r0, [r2, #540]	; 0x21c
			    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP3xR = (uint32_t)(TIMF_PERIOD); //FROM CMP4
 8000ea6:	f8c2 c228 	str.w	ip, [r2, #552]	; 0x228
				HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(1);
 8000eaa:	f8c2 0324 	str.w	r0, [r2, #804]	; 0x324
				  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8000eae:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
				Pulse2_temp = Pulse2_temp + 5*STEP;
 8000eb2:	4872      	ldr	r0, [pc, #456]	; (800107c <ExecControlOpenLoop+0x30c>)
				  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8000eb4:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8000eb8:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
				Pulse2_temp = Pulse2_temp + 5*STEP;
 8000ebc:	6801      	ldr	r1, [r0, #0]
				STEP = STEP + STEP/20;
 8000ebe:	fbaa ba01 	umull	fp, sl, sl, r1
 8000ec2:	eb01 1a1a 	add.w	sl, r1, sl, lsr #4
				Pulse2_temp = Pulse2_temp + 5*STEP;
 8000ec6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
				STEP = STEP + STEP/20;
 8000eca:	f8c0 a000 	str.w	sl, [r0]
				Pulse2_temp = Pulse2_temp + 5*STEP;
 8000ece:	4441      	add	r1, r8
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000ed0:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 80010a0 <ExecControlOpenLoop+0x330>
 8000ed4:	6029      	str	r1, [r5, #0]
 8000ed6:	f8da 8014 	ldr.w	r8, [sl, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000eda:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 8000ede:	ea6f 0808 	mvn.w	r8, r8
 8000ee2:	f00b 7b80 	and.w	fp, fp, #16777216	; 0x1000000
 8000ee6:	f408 7880 	and.w	r8, r8, #256	; 0x100
 8000eea:	ea4b 0808 	orr.w	r8, fp, r8
				if(Pulse2_temp > TIMF_PERIOD)
 8000eee:	4561      	cmp	r1, ip
 8000ef0:	f8ca 8018 	str.w	r8, [sl, #24]
 8000ef4:	d997      	bls.n	8000e26 <ExecControlOpenLoop+0xb6>
					HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP3xR = (uint32_t)(TIMF_PERIOD-4500); //FROM CMP4
 8000ef6:	f245 612a 	movw	r1, #22058	; 0x562a
					HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(60);
 8000efa:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8000efe:	f8c2 c324 	str.w	ip, [r2, #804]	; 0x324
					HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP3xR = (uint32_t)(TIMF_PERIOD-4500); //FROM CMP4
 8000f02:	f8c2 1328 	str.w	r1, [r2, #808]	; 0x328
				    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP3xR = (uint32_t)(TIMF_PERIOD-4500); //FROM CMP4
 8000f06:	f8c2 1228 	str.w	r1, [r2, #552]	; 0x228
				    STEP = (TIMF_PERIOD/100);
 8000f0a:	f240 1209 	movw	r2, #265	; 0x109
 8000f0e:	6002      	str	r2, [r0, #0]
				    Pulse2_temp = TIMF_PERIOD-500;
 8000f10:	f246 52ca 	movw	r2, #26058	; 0x65ca
 8000f14:	602a      	str	r2, [r5, #0]
					  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8000f16:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
				    SOFT_START_ZC_N = FALSE;
 8000f1a:	f889 e000 	strb.w	lr, [r9]
					  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8000f1e:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8000f22:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 8000f26:	e77e      	b.n	8000e26 <ExecControlOpenLoop+0xb6>
				  if ((SinWave_q31 <= SinWave_q31_temp) && Pulse1 < 2000) //SINE FALLING
 8000f28:	6831      	ldr	r1, [r6, #0]
				  STEP = (TIMF_PERIOD/100);
 8000f2a:	f8df b150 	ldr.w	fp, [pc, #336]	; 800107c <ExecControlOpenLoop+0x30c>
 8000f2e:	f240 1009 	movw	r0, #265	; 0x109
				  if ((SinWave_q31 <= SinWave_q31_temp) && Pulse1 < 2000) //SINE FALLING
 8000f32:	4291      	cmp	r1, r2
				  STEP = (TIMF_PERIOD/100);
 8000f34:	f8cb 0000 	str.w	r0, [fp]
				  if ((SinWave_q31 <= SinWave_q31_temp) && Pulse1 < 2000) //SINE FALLING
 8000f38:	db28      	blt.n	8000f8c <ExecControlOpenLoop+0x21c>
 8000f3a:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 8000f3e:	da25      	bge.n	8000f8c <ExecControlOpenLoop+0x21c>
					HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(1);
 8000f40:	4a4b      	ldr	r2, [pc, #300]	; (8001070 <ExecControlOpenLoop+0x300>)
				    HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8000f42:	484d      	ldr	r0, [pc, #308]	; (8001078 <ExecControlOpenLoop+0x308>)
					HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(1);
 8000f44:	f8c2 3324 	str.w	r3, [r2, #804]	; 0x324
					HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= 1 << 3;
 8000f48:	f8d2 123c 	ldr.w	r1, [r2, #572]	; 0x23c
 8000f4c:	f041 0108 	orr.w	r1, r1, #8
 8000f50:	f8c2 123c 	str.w	r1, [r2, #572]	; 0x23c
					HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].RSTx2R |= 1 << 5;
 8000f54:	f8d2 1248 	ldr.w	r1, [r2, #584]	; 0x248
					HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP3xR = (uint32_t)(TIMF_PERIOD); //FROM CMP4
 8000f58:	f246 74be 	movw	r4, #26558	; 0x67be
					HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].RSTx2R |= 1 << 5;
 8000f5c:	f041 0120 	orr.w	r1, r1, #32
 8000f60:	f8c2 1248 	str.w	r1, [r2, #584]	; 0x248
					HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP1xR = (uint32_t)(1); //FROM CMP4
 8000f64:	f8c2 331c 	str.w	r3, [r2, #796]	; 0x31c
					HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP3xR = (uint32_t)(TIMF_PERIOD); //FROM CMP4
 8000f68:	f8c2 4328 	str.w	r4, [r2, #808]	; 0x328
				    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR = (uint32_t)(1); //FROM CMP4
 8000f6c:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
				    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP3xR = (uint32_t)(TIMF_PERIOD); //FROM CMP4
 8000f70:	f8c2 4228 	str.w	r4, [r2, #552]	; 0x228
				    HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8000f74:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
				    Pulse1_temp=26000;
 8000f78:	4a41      	ldr	r2, [pc, #260]	; (8001080 <ExecControlOpenLoop+0x310>)
				    HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8000f7a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000f7e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
				    Pulse1_temp=26000;
 8000f82:	f246 5190 	movw	r1, #26000	; 0x6590
		SinWave_q31_temp = SinWave_q31;
 8000f86:	9b01      	ldr	r3, [sp, #4]
				    Pulse1_temp=26000;
 8000f88:	6011      	str	r1, [r2, #0]
 8000f8a:	e74c      	b.n	8000e26 <ExecControlOpenLoop+0xb6>
						 if((LF_MOS_SET == FALSE) || (FIRST_CYCLE == TRUE))
 8000f8c:	4a3d      	ldr	r2, [pc, #244]	; (8001084 <ExecControlOpenLoop+0x314>)
 8000f8e:	483e      	ldr	r0, [pc, #248]	; (8001088 <ExecControlOpenLoop+0x318>)
 8000f90:	7813      	ldrb	r3, [r2, #0]
 8000f92:	b16b      	cbz	r3, 8000fb0 <ExecControlOpenLoop+0x240>
 8000f94:	7803      	ldrb	r3, [r0, #0]
 8000f96:	b95b      	cbnz	r3, 8000fb0 <ExecControlOpenLoop+0x240>
							  if (LF_UPDATE == TRUE)
 8000f98:	493c      	ldr	r1, [pc, #240]	; (800108c <ExecControlOpenLoop+0x31c>)
 8000f9a:	7808      	ldrb	r0, [r1, #0]
 8000f9c:	b388      	cbz	r0, 8001002 <ExecControlOpenLoop+0x292>
								  LF_UPDATE = FALSE;
 8000f9e:	700b      	strb	r3, [r1, #0]
								  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8000fa0:	4935      	ldr	r1, [pc, #212]	; (8001078 <ExecControlOpenLoop+0x308>)
 8000fa2:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 8000fa6:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000faa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8000fae:	e028      	b.n	8001002 <ExecControlOpenLoop+0x292>
									  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(16);
 8000fb0:	4b2f      	ldr	r3, [pc, #188]	; (8001070 <ExecControlOpenLoop+0x300>)
									  RESET_TIMER_D = FALSE;
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	7029      	strb	r1, [r5, #0]
									  FIRST_CYCLE = FALSE;
 8000fb6:	7001      	strb	r1, [r0, #0]
									  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(16);
 8000fb8:	2110      	movs	r1, #16
 8000fba:	f8c3 1324 	str.w	r1, [r3, #804]	; 0x324
									  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R &= ~ (1 << 3);
 8000fbe:	f8d3 123c 	ldr.w	r1, [r3, #572]	; 0x23c
 8000fc2:	f021 0108 	bic.w	r1, r1, #8
 8000fc6:	f8c3 123c 	str.w	r1, [r3, #572]	; 0x23c
									  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= (1 << 0);
 8000fca:	f8d3 123c 	ldr.w	r1, [r3, #572]	; 0x23c
 8000fce:	f041 0101 	orr.w	r1, r1, #1
 8000fd2:	f8c3 123c 	str.w	r1, [r3, #572]	; 0x23c
									  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].RSTx2R &= ~ (1 << 5);
 8000fd6:	f8d3 1248 	ldr.w	r1, [r3, #584]	; 0x248
 8000fda:	f021 0120 	bic.w	r1, r1, #32
 8000fde:	f8c3 1248 	str.w	r1, [r3, #584]	; 0x248
									  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].RSTx2R |= (1 << 0);
 8000fe2:	f8d3 1248 	ldr.w	r1, [r3, #584]	; 0x248
 8000fe6:	f041 0101 	orr.w	r1, r1, #1
 8000fea:	f8c3 1248 	str.w	r1, [r3, #584]	; 0x248
									  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8000fee:	4922      	ldr	r1, [pc, #136]	; (8001078 <ExecControlOpenLoop+0x308>)
 8000ff0:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 8000ff4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000ff8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
									  LF_UPDATE = TRUE;
 8000ffc:	4b23      	ldr	r3, [pc, #140]	; (800108c <ExecControlOpenLoop+0x31c>)
 8000ffe:	2101      	movs	r1, #1
 8001000:	7019      	strb	r1, [r3, #0]
					  if(Pulse1_temp < Pulse1)
 8001002:	4d1f      	ldr	r5, [pc, #124]	; (8001080 <ExecControlOpenLoop+0x310>)
 8001004:	6829      	ldr	r1, [r5, #0]
						  LF_MOS_SET = TRUE;
 8001006:	2301      	movs	r3, #1
					  if(Pulse1_temp < Pulse1)
 8001008:	428c      	cmp	r4, r1
						  LF_MOS_SET = TRUE;
 800100a:	7013      	strb	r3, [r2, #0]
					  if(Pulse1_temp < Pulse1)
 800100c:	f240 8121 	bls.w	8001252 <ExecControlOpenLoop+0x4e2>
							DCAC_SetPulse((u16)(Pulse1_temp), (u16)(Pulse1_temp));
 8001010:	4608      	mov	r0, r1
 8001012:	f001 f871 	bl	80020f8 <DCAC_SetPulse>
							Pulse1_temp = Pulse1_temp + 5*STEP;
 8001016:	f8db 3000 	ldr.w	r3, [fp]
 800101a:	6828      	ldr	r0, [r5, #0]
							STEP = STEP + STEP/20;
 800101c:	491c      	ldr	r1, [pc, #112]	; (8001090 <ExecControlOpenLoop+0x320>)
							Pulse1_temp = Pulse1_temp + 5*STEP;
 800101e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001022:	4402      	add	r2, r0
							STEP = STEP + STEP/20;
 8001024:	fba1 0103 	umull	r0, r1, r1, r3
 8001028:	eb03 1311 	add.w	r3, r3, r1, lsr #4
							HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 800102c:	4912      	ldr	r1, [pc, #72]	; (8001078 <ExecControlOpenLoop+0x308>)
							Pulse1_temp = Pulse1_temp + 5*STEP;
 800102e:	602a      	str	r2, [r5, #0]
							STEP = STEP + STEP/20;
 8001030:	f8cb 3000 	str.w	r3, [fp]
							HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8001034:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 8001038:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800103c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
		SinWave_q31_temp = SinWave_q31;
 8001040:	9b01      	ldr	r3, [sp, #4]
 8001042:	e6f0      	b.n	8000e26 <ExecControlOpenLoop+0xb6>
 8001044:	40020000 	.word	0x40020000
 8001048:	0800abac 	.word	0x0800abac
 800104c:	20000004 	.word	0x20000004
 8001050:	2000ce34 	.word	0x2000ce34
 8001054:	200001ca 	.word	0x200001ca
 8001058:	200001b4 	.word	0x200001b4
 800105c:	20000018 	.word	0x20000018
 8001060:	200001e4 	.word	0x200001e4
 8001064:	200001c4 	.word	0x200001c4
 8001068:	200001a4 	.word	0x200001a4
 800106c:	20000010 	.word	0x20000010
 8001070:	40016800 	.word	0x40016800
 8001074:	20000014 	.word	0x20000014
 8001078:	40016b00 	.word	0x40016b00
 800107c:	2000001c 	.word	0x2000001c
 8001080:	2000000c 	.word	0x2000000c
 8001084:	20000007 	.word	0x20000007
 8001088:	20000006 	.word	0x20000006
 800108c:	20000182 	.word	0x20000182
 8001090:	cccccccd 	.word	0xcccccccd
 8001094:	2000001a 	.word	0x2000001a
 8001098:	2000c1e5 	.word	0x2000c1e5
 800109c:	20000019 	.word	0x20000019
 80010a0:	48000800 	.word	0x48000800
				  STEP = (TIMF_PERIOD/100);
 80010a4:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 80012a0 <ExecControlOpenLoop+0x530>
 80010a8:	f240 1209 	movw	r2, #265	; 0x109
 80010ac:	f8cb 2000 	str.w	r2, [fp]
				  if ((SinWave_q31 >= SinWave_q31_temp) && (Pulse2 > (TIMF_PERIOD - 2000)))
 80010b0:	6832      	ldr	r2, [r6, #0]
 80010b2:	4293      	cmp	r3, r2
 80010b4:	db26      	blt.n	8001104 <ExecControlOpenLoop+0x394>
 80010b6:	f645 72ee 	movw	r2, #24558	; 0x5fee
 80010ba:	4291      	cmp	r1, r2
 80010bc:	d922      	bls.n	8001104 <ExecControlOpenLoop+0x394>
					HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= 1 << 3;
 80010be:	4a6f      	ldr	r2, [pc, #444]	; (800127c <ExecControlOpenLoop+0x50c>)
 80010c0:	f8d2 123c 	ldr.w	r1, [r2, #572]	; 0x23c
 80010c4:	f041 0108 	orr.w	r1, r1, #8
 80010c8:	f8c2 123c 	str.w	r1, [r2, #572]	; 0x23c
					HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].RSTx2R |= 1 << 5;
 80010cc:	f8d2 1248 	ldr.w	r1, [r2, #584]	; 0x248
 80010d0:	f041 0120 	orr.w	r1, r1, #32
 80010d4:	f8c2 1248 	str.w	r1, [r2, #584]	; 0x248
					HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 80010d8:	4969      	ldr	r1, [pc, #420]	; (8001280 <ExecControlOpenLoop+0x510>)
					HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP1xR = (uint32_t)(1); //FROM CMP4
 80010da:	f8c2 031c 	str.w	r0, [r2, #796]	; 0x31c
					HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP3xR = (uint32_t)(TIMF_PERIOD); //FROM CMP4
 80010de:	f8c2 c328 	str.w	ip, [r2, #808]	; 0x328
				    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR = (uint32_t)(1); //FROM CMP4
 80010e2:	f8c2 021c 	str.w	r0, [r2, #540]	; 0x21c
				    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP3xR = (uint32_t)(TIMF_PERIOD); //FROM CMP4
 80010e6:	f8c2 c228 	str.w	ip, [r2, #552]	; 0x228
					HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(1);
 80010ea:	f8c2 0324 	str.w	r0, [r2, #804]	; 0x324
					HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 80010ee:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
					Pulse2_temp=500;
 80010f2:	4864      	ldr	r0, [pc, #400]	; (8001284 <ExecControlOpenLoop+0x514>)
					HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 80010f4:	f042 0250 	orr.w	r2, r2, #80	; 0x50
					Pulse2_temp=500;
 80010f8:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
					HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 80010fc:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
					Pulse2_temp=500;
 8001100:	6004      	str	r4, [r0, #0]
 8001102:	e690      	b.n	8000e26 <ExecControlOpenLoop+0xb6>
					  if((LF_MOS_SET == TRUE) || FIRST_CYCLE == TRUE)
 8001104:	4a60      	ldr	r2, [pc, #384]	; (8001288 <ExecControlOpenLoop+0x518>)
 8001106:	4861      	ldr	r0, [pc, #388]	; (800128c <ExecControlOpenLoop+0x51c>)
 8001108:	7813      	ldrb	r3, [r2, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 80a7 	beq.w	800125e <ExecControlOpenLoop+0x4ee>
						  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(60);
 8001110:	4b5a      	ldr	r3, [pc, #360]	; (800127c <ExecControlOpenLoop+0x50c>)
						  RESET_TIMER_D = FALSE;
 8001112:	f04f 0c00 	mov.w	ip, #0
						  LF_MOS_SET = FALSE;
 8001116:	f882 c000 	strb.w	ip, [r2]
						  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(60);
 800111a:	223c      	movs	r2, #60	; 0x3c
						  FIRST_CYCLE = FALSE;
 800111c:	f880 c000 	strb.w	ip, [r0]
						  RESET_TIMER_D = FALSE;
 8001120:	f885 c000 	strb.w	ip, [r5]
						  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(60);
 8001124:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
						  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R &= ~ (1 << 3);
 8001128:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
						  LF_UPDATE = TRUE;
 800112c:	4858      	ldr	r0, [pc, #352]	; (8001290 <ExecControlOpenLoop+0x520>)
						  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R &= ~ (1 << 3);
 800112e:	f022 0208 	bic.w	r2, r2, #8
 8001132:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
						  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].RSTx1R |= (1 << 0);
 8001136:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
 800113a:	f042 0201 	orr.w	r2, r2, #1
 800113e:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
						  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].RSTx2R &= ~ (1 << 5);
 8001142:	f8d3 2248 	ldr.w	r2, [r3, #584]	; 0x248
 8001146:	f022 0220 	bic.w	r2, r2, #32
 800114a:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
						  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx2R |= (1 << 0);
 800114e:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 8001152:	f042 0201 	orr.w	r2, r2, #1
 8001156:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
						  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 800115a:	4a49      	ldr	r2, [pc, #292]	; (8001280 <ExecControlOpenLoop+0x510>)
 800115c:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8001160:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001164:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
						  LF_UPDATE = TRUE;
 8001168:	2301      	movs	r3, #1
 800116a:	7003      	strb	r3, [r0, #0]
					  if(Pulse2_temp > Pulse2)
 800116c:	4b45      	ldr	r3, [pc, #276]	; (8001284 <ExecControlOpenLoop+0x514>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4291      	cmp	r1, r2
 8001172:	d27f      	bcs.n	8001274 <ExecControlOpenLoop+0x504>
							DCAC_SetPulse((u16)(Pulse2_temp), (u16)(Pulse2_temp));
 8001174:	b291      	uxth	r1, r2
 8001176:	4608      	mov	r0, r1
 8001178:	f000 ffbe 	bl	80020f8 <DCAC_SetPulse>
							Pulse2_temp = Pulse2_temp - 5*STEP;
 800117c:	f8db 2000 	ldr.w	r2, [fp]
							STEP = STEP + STEP/20;
 8001180:	4944      	ldr	r1, [pc, #272]	; (8001294 <ExecControlOpenLoop+0x524>)
 8001182:	fba1 3102 	umull	r3, r1, r1, r2
							Pulse2_temp = Pulse2_temp - 5*STEP;
 8001186:	4b3f      	ldr	r3, [pc, #252]	; (8001284 <ExecControlOpenLoop+0x514>)
							STEP = STEP + STEP/20;
 8001188:	eb02 1111 	add.w	r1, r2, r1, lsr #4
 800118c:	f8cb 1000 	str.w	r1, [fp]
							Pulse2_temp = Pulse2_temp - 5*STEP;
 8001190:	6819      	ldr	r1, [r3, #0]
 8001192:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001196:	1a8a      	subs	r2, r1, r2
 8001198:	601a      	str	r2, [r3, #0]
		if(((SinWave_q31) >= 0))
 800119a:	9a01      	ldr	r2, [sp, #4]
 800119c:	2a00      	cmp	r2, #0
 800119e:	4613      	mov	r3, r2
 80011a0:	f6ff ae41 	blt.w	8000e26 <ExecControlOpenLoop+0xb6>
 80011a4:	e62d      	b.n	8000e02 <ExecControlOpenLoop+0x92>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80011a6:	4a3c      	ldr	r2, [pc, #240]	; (8001298 <ExecControlOpenLoop+0x528>)
 80011a8:	2610      	movs	r6, #16
 80011aa:	6196      	str	r6, [r2, #24]
		RELAY_ON = TRUE;
 80011ac:	4602      	mov	r2, r0
 80011ae:	7018      	strb	r0, [r3, #0]
		ZCD=0;
 80011b0:	e614      	b.n	8000ddc <ExecControlOpenLoop+0x6c>
				HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(1);
 80011b2:	4a32      	ldr	r2, [pc, #200]	; (800127c <ExecControlOpenLoop+0x50c>)
				HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP1xR = (uint32_t)(Pulse1_temp); //FROM CMP4
 80011b4:	4c39      	ldr	r4, [pc, #228]	; (800129c <ExecControlOpenLoop+0x52c>)
				HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(1);
 80011b6:	f8c2 3324 	str.w	r3, [r2, #804]	; 0x324
				HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= 1 << 3;
 80011ba:	f8d2 123c 	ldr.w	r1, [r2, #572]	; 0x23c
			    HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 80011be:	4d30      	ldr	r5, [pc, #192]	; (8001280 <ExecControlOpenLoop+0x510>)
				Pulse1_temp = Pulse1_temp - 5*STEP;
 80011c0:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80012a0 <ExecControlOpenLoop+0x530>
				HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= 1 << 3;
 80011c4:	f041 0108 	orr.w	r1, r1, #8
 80011c8:	f8c2 123c 	str.w	r1, [r2, #572]	; 0x23c
				HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].RSTx2R |= 1 << 5;
 80011cc:	f8d2 1248 	ldr.w	r1, [r2, #584]	; 0x248
 80011d0:	f041 0120 	orr.w	r1, r1, #32
 80011d4:	f8c2 1248 	str.w	r1, [r2, #584]	; 0x248
				HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP1xR = (uint32_t)(Pulse1_temp); //FROM CMP4
 80011d8:	6820      	ldr	r0, [r4, #0]
 80011da:	f8c2 031c 	str.w	r0, [r2, #796]	; 0x31c
				HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP3xR = (uint32_t)(TIMF_PERIOD); //FROM CMP4
 80011de:	f246 71be 	movw	r1, #26558	; 0x67be
 80011e2:	f8c2 1328 	str.w	r1, [r2, #808]	; 0x328
			    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR = (uint32_t)(1); //FROM CMP4
 80011e6:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
			    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP3xR = (uint32_t)(TIMF_PERIOD); //FROM CMP4
 80011ea:	f8c2 1228 	str.w	r1, [r2, #552]	; 0x228
			    HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 80011ee:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
				STEP = STEP + STEP/20;
 80011f2:	4928      	ldr	r1, [pc, #160]	; (8001294 <ExecControlOpenLoop+0x524>)
			    HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 80011f4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80011f8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
				Pulse1_temp = Pulse1_temp - 5*STEP;
 80011fc:	f8dc 3000 	ldr.w	r3, [ip]
				STEP = STEP + STEP/20;
 8001200:	fba1 e103 	umull	lr, r1, r1, r3
 8001204:	eb03 1111 	add.w	r1, r3, r1, lsr #4
				Pulse1_temp = Pulse1_temp - 5*STEP;
 8001208:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800120c:	1ac3      	subs	r3, r0, r3
				STEP = STEP + STEP/20;
 800120e:	f8cc 1000 	str.w	r1, [ip]
				if(Pulse1_temp < 5500)
 8001212:	f241 517b 	movw	r1, #5499	; 0x157b
 8001216:	428b      	cmp	r3, r1
				Pulse1_temp = Pulse1_temp - 5*STEP;
 8001218:	6023      	str	r3, [r4, #0]
				if(Pulse1_temp < 5500)
 800121a:	d81e      	bhi.n	800125a <ExecControlOpenLoop+0x4ea>
					HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP1xR = (uint32_t)(5200); //FROM CMP4
 800121c:	f241 4350 	movw	r3, #5200	; 0x1450
					HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(16);
 8001220:	2110      	movs	r1, #16
 8001222:	f8c2 1324 	str.w	r1, [r2, #804]	; 0x324
					HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP1xR = (uint32_t)(5200); //FROM CMP4
 8001226:	f8c2 331c 	str.w	r3, [r2, #796]	; 0x31c
				    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR = (uint32_t)(5200); //FROM CMP4
 800122a:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
				    SOFT_START_ZC_P = FALSE;
 800122e:	2300      	movs	r3, #0
 8001230:	f888 3000 	strb.w	r3, [r8]
				    STEP = (TIMF_PERIOD/100);
 8001234:	f240 1309 	movw	r3, #265	; 0x109
 8001238:	f8cc 3000 	str.w	r3, [ip]
				    HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 800123c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8001240:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001244:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
				    Pulse1_temp = 750;
 8001248:	f240 22ee 	movw	r2, #750	; 0x2ee
		SinWave_q31_temp = SinWave_q31;
 800124c:	9b01      	ldr	r3, [sp, #4]
				    Pulse1_temp = 750;
 800124e:	6022      	str	r2, [r4, #0]
 8001250:	e5e9      	b.n	8000e26 <ExecControlOpenLoop+0xb6>
					  DCAC_SetPulse((u16)(Pulse1), (u16)(Pulse1));
 8001252:	4621      	mov	r1, r4
 8001254:	4620      	mov	r0, r4
 8001256:	f000 ff4f 	bl	80020f8 <DCAC_SetPulse>
		SinWave_q31_temp = SinWave_q31;
 800125a:	9b01      	ldr	r3, [sp, #4]
 800125c:	e5e3      	b.n	8000e26 <ExecControlOpenLoop+0xb6>
					  if((LF_MOS_SET == TRUE) || FIRST_CYCLE == TRUE)
 800125e:	7803      	ldrb	r3, [r0, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	f47f af55 	bne.w	8001110 <ExecControlOpenLoop+0x3a0>
						  if (LF_UPDATE == TRUE)
 8001266:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <ExecControlOpenLoop+0x520>)
 8001268:	7810      	ldrb	r0, [r2, #0]
 800126a:	2800      	cmp	r0, #0
 800126c:	f43f af7e 	beq.w	800116c <ExecControlOpenLoop+0x3fc>
							  LF_UPDATE = FALSE;
 8001270:	7013      	strb	r3, [r2, #0]
 8001272:	e77b      	b.n	800116c <ExecControlOpenLoop+0x3fc>
					  DCAC_SetPulse((u16)(Pulse2), (u16)(Pulse2));
 8001274:	4608      	mov	r0, r1
 8001276:	f000 ff3f 	bl	80020f8 <DCAC_SetPulse>
 800127a:	e78e      	b.n	800119a <ExecControlOpenLoop+0x42a>
 800127c:	40016800 	.word	0x40016800
 8001280:	40016b00 	.word	0x40016b00
 8001284:	20000014 	.word	0x20000014
 8001288:	20000007 	.word	0x20000007
 800128c:	20000006 	.word	0x20000006
 8001290:	20000182 	.word	0x20000182
 8001294:	cccccccd 	.word	0xcccccccd
 8001298:	48000c00 	.word	0x48000c00
 800129c:	2000000c 	.word	0x2000000c
 80012a0:	2000001c 	.word	0x2000001c

080012a4 <SetControlMode>:
{
 80012a4:	b510      	push	{r4, lr}
    return State_Control;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <SetControlMode+0x3c>)
 80012a8:	781c      	ldrb	r4, [r3, #0]
    if (GetStatusControl() == STOP)
 80012aa:	b954      	cbnz	r4, 80012c2 <SetControlMode+0x1e>
      switch (mode)
 80012ac:	4603      	mov	r3, r0
 80012ae:	b158      	cbz	r0, 80012c8 <SetControlMode+0x24>
 80012b0:	2802      	cmp	r0, #2
 80012b2:	d00e      	beq.n	80012d2 <SetControlMode+0x2e>
            ControlMode = mode;
 80012b4:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <SetControlMode+0x40>)
            DS_SetAcquistionEvent(ExecControlOpenLoop);
 80012b6:	480c      	ldr	r0, [pc, #48]	; (80012e8 <SetControlMode+0x44>)
            ControlMode = mode;
 80012b8:	7013      	strb	r3, [r2, #0]
            DS_SetAcquistionEvent(ExecControlOpenLoop);
 80012ba:	f002 f9e1 	bl	8003680 <DS_SetAcquistionEvent>
}
 80012be:	4620      	mov	r0, r4
 80012c0:	bd10      	pop	{r4, pc}
    u8 nRet = CONTROL_ERROR_RUNNING;
 80012c2:	2401      	movs	r4, #1
}
 80012c4:	4620      	mov	r0, r4
 80012c6:	bd10      	pop	{r4, pc}
            DS_SetAcquistionEvent(ExecControlInitParamOffSet);
 80012c8:	4808      	ldr	r0, [pc, #32]	; (80012ec <SetControlMode+0x48>)
 80012ca:	f002 f9d9 	bl	8003680 <DS_SetAcquistionEvent>
}
 80012ce:	4620      	mov	r0, r4
 80012d0:	bd10      	pop	{r4, pc}
            ControlMode = mode;
 80012d2:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <SetControlMode+0x40>)
            DS_SetAcquistionEvent(ExecControl);
 80012d4:	4806      	ldr	r0, [pc, #24]	; (80012f0 <SetControlMode+0x4c>)
            ControlMode = mode;
 80012d6:	7013      	strb	r3, [r2, #0]
            DS_SetAcquistionEvent(ExecControl);
 80012d8:	f002 f9d2 	bl	8003680 <DS_SetAcquistionEvent>
}
 80012dc:	4620      	mov	r0, r4
 80012de:	bd10      	pop	{r4, pc}
 80012e0:	200001ca 	.word	0x200001ca
 80012e4:	2000008e 	.word	0x2000008e
 80012e8:	08000d71 	.word	0x08000d71
 80012ec:	08000cb5 	.word	0x08000cb5
 80012f0:	080018f1 	.word	0x080018f1

080012f4 <CalibrationControl.part.0>:
u8 CalibrationControl()
 80012f4:	b538      	push	{r3, r4, r5, lr}
    return State_Control;
 80012f6:	4b3d      	ldr	r3, [pc, #244]	; (80013ec <CalibrationControl.part.0+0xf8>)
      DataSensingOffSet.AC_LineCurrent  = 0;
 80012f8:	493d      	ldr	r1, [pc, #244]	; (80013f0 <CalibrationControl.part.0+0xfc>)
      DataSensing_sum.AC_LineCurrent  = 0;
 80012fa:	4a3e      	ldr	r2, [pc, #248]	; (80013f4 <CalibrationControl.part.0+0x100>)
    if (GetStatusControl() == STOP)
 80012fc:	7818      	ldrb	r0, [r3, #0]
      DataSensingOffSet.AC_LineCurrent  = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	800b      	strh	r3, [r1, #0]
      DataSensingOffSet.AC_LineVoltage  = 0;
 8001302:	804b      	strh	r3, [r1, #2]
      DataSensingOffSet.DC_PanelCurrent = 0;
 8001304:	80cb      	strh	r3, [r1, #6]
      DataSensingOffSet.DC_PanelVoltage = 0;
 8001306:	810b      	strh	r3, [r1, #8]
      DataSensingOffSet.DC_BusVoltage   = 0;
 8001308:	808b      	strh	r3, [r1, #4]
      DataSensing_sum.AC_LineCurrent  = 0;
 800130a:	6013      	str	r3, [r2, #0]
      DataSensing_sum.AC_LineVoltage  = 0;
 800130c:	6053      	str	r3, [r2, #4]
      DataSensing_sum.DC_PanelCurrent = 0;
 800130e:	60d3      	str	r3, [r2, #12]
      DataSensing_sum.DC_PanelVoltage = 0;
 8001310:	6113      	str	r3, [r2, #16]
      DataSensing_sum.DC_BusVoltage   = 0;
 8001312:	6093      	str	r3, [r2, #8]
    if (GetStatusControl() == STOP)
 8001314:	b910      	cbnz	r0, 800131c <CalibrationControl.part.0+0x28>
            DS_SetAcquistionEvent(ExecControlInitParamOffSet);
 8001316:	4838      	ldr	r0, [pc, #224]	; (80013f8 <CalibrationControl.part.0+0x104>)
 8001318:	f002 f9b2 	bl	8003680 <DS_SetAcquistionEvent>
      DataInitCount = 0;
 800131c:	4c37      	ldr	r4, [pc, #220]	; (80013fc <CalibrationControl.part.0+0x108>)
 800131e:	2000      	movs	r0, #0
 8001320:	6020      	str	r0, [r4, #0]
      DS_SendCommand(DS_Start);
 8001322:	f002 f9b3 	bl	800368c <DS_SendCommand>
      while (DataInitCount < MAX_DATA_INIT_COUNT); //wait untill init complete
 8001326:	4a36      	ldr	r2, [pc, #216]	; (8001400 <CalibrationControl.part.0+0x10c>)
 8001328:	6823      	ldr	r3, [r4, #0]
 800132a:	4293      	cmp	r3, r2
 800132c:	d9fc      	bls.n	8001328 <CalibrationControl.part.0+0x34>
      if(calib==TRUE)
 800132e:	4d35      	ldr	r5, [pc, #212]	; (8001404 <CalibrationControl.part.0+0x110>)
      DS_SendCommand(DS_Stop);
 8001330:	2001      	movs	r0, #1
 8001332:	f002 f9ab 	bl	800368c <DS_SendCommand>
      if(calib==TRUE)
 8001336:	782b      	ldrb	r3, [r5, #0]
      DataInitCount = 0;
 8001338:	2000      	movs	r0, #0
 800133a:	6020      	str	r0, [r4, #0]
      if(calib==TRUE)
 800133c:	b953      	cbnz	r3, 8001354 <CalibrationControl.part.0+0x60>
  WRITE_REG(GPIOx->BRR, PinMask);
 800133e:	4a32      	ldr	r2, [pc, #200]	; (8001408 <CalibrationControl.part.0+0x114>)
      SetControlMode(ControlMode);
 8001340:	4b32      	ldr	r3, [pc, #200]	; (800140c <CalibrationControl.part.0+0x118>)
 8001342:	2110      	movs	r1, #16
 8001344:	6291      	str	r1, [r2, #40]	; 0x28
 8001346:	7818      	ldrb	r0, [r3, #0]
 8001348:	f7ff ffac 	bl	80012a4 <SetControlMode>
      calib=TRUE;
 800134c:	2301      	movs	r3, #1
 800134e:	702b      	strb	r3, [r5, #0]
}
 8001350:	2000      	movs	r0, #0
 8001352:	bd38      	pop	{r3, r4, r5, pc}
    	TIM20->CCMR1 &= ~(TIM_CCMR1_OC2M_0); //TOP LF MOSFET LOW / BOTTOM LF MOSFET HIGH
 8001354:	492e      	ldr	r1, [pc, #184]	; (8001410 <CalibrationControl.part.0+0x11c>)
    	HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TA1ODIS; //TIMA OUTPUT 1 DISABLE
 8001356:	4b2f      	ldr	r3, [pc, #188]	; (8001414 <CalibrationControl.part.0+0x120>)
    	TIM20->CCMR1 &= ~(TIM_CCMR1_OC2M_0); //TOP LF MOSFET LOW / BOTTOM LF MOSFET HIGH
 8001358:	698a      	ldr	r2, [r1, #24]
 800135a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800135e:	618a      	str	r2, [r1, #24]
    	HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TA1ODIS; //TIMA OUTPUT 1 DISABLE
 8001360:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001364:	4928      	ldr	r1, [pc, #160]	; (8001408 <CalibrationControl.part.0+0x114>)
 8001366:	f042 0201 	orr.w	r2, r2, #1
 800136a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    	HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TA2ODIS; //TIMA OUTPUT 2 DISABLE
 800136e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001372:	f042 0202 	orr.w	r2, r2, #2
 8001376:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    	HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TB1ODIS; //TIMB OUTPUT 1 DISABLE
 800137a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800137e:	f042 0204 	orr.w	r2, r2, #4
 8001382:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    	HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TB2ODIS; //TIMB OUTPUT 2 DISABLE
 8001386:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800138a:	f042 0208 	orr.w	r2, r2, #8
 800138e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  		HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TE2ODIS; //TIME OUTPUT 2 DISABLE
 8001392:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800139a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  		HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TF1ODIS; //TIMF OUTPUT 1 DISABLE
 800139e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80013a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013a6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  		HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TF2ODIS; //TIMF OUTPUT 2 DISABLE
 80013aa:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80013ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013b2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  		HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TD1ODIS; //TIMD OUTPUT 1 DISABLE
 80013b6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80013ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013be:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  		HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TD2ODIS; //TIMD OUTPUT 2 DISABLE
 80013c2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80013c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013ca:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80013ce:	2310      	movs	r3, #16
 80013d0:	618b      	str	r3, [r1, #24]
        DataInitCount = 0;
 80013d2:	6020      	str	r0, [r4, #0]
        DS_SendCommand(DS_Start);
 80013d4:	f002 f95a 	bl	800368c <DS_SendCommand>
        while (DataInitCount < MAX_DATA_INIT_COUNT); //wait untill init complete
 80013d8:	4a09      	ldr	r2, [pc, #36]	; (8001400 <CalibrationControl.part.0+0x10c>)
 80013da:	6823      	ldr	r3, [r4, #0]
 80013dc:	4293      	cmp	r3, r2
 80013de:	d9fc      	bls.n	80013da <CalibrationControl.part.0+0xe6>
        DS_SendCommand(DS_Stop);
 80013e0:	2001      	movs	r0, #1
 80013e2:	f002 f953 	bl	800368c <DS_SendCommand>
        DataInitCount = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	6023      	str	r3, [r4, #0]
 80013ea:	e7a8      	b.n	800133e <CalibrationControl.part.0+0x4a>
 80013ec:	200001ca 	.word	0x200001ca
 80013f0:	20000124 	.word	0x20000124
 80013f4:	2000013c 	.word	0x2000013c
 80013f8:	08000cb5 	.word	0x08000cb5
 80013fc:	20000108 	.word	0x20000108
 8001400:	00025817 	.word	0x00025817
 8001404:	2000c1de 	.word	0x2000c1de
 8001408:	48000c00 	.word	0x48000c00
 800140c:	2000008e 	.word	0x2000008e
 8001410:	40015000 	.word	0x40015000
 8001414:	40016b00 	.word	0x40016b00

08001418 <StartControl>:
{
 8001418:	b570      	push	{r4, r5, r6, lr}
    StoppingCount = TIME_OUT_STOPPING;
 800141a:	4d29      	ldr	r5, [pc, #164]	; (80014c0 <StartControl+0xa8>)
    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R &= ~ (1 << 19);
 800141c:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <StartControl+0xac>)
    Fault = FAULT_NONE;
 800141e:	4a2a      	ldr	r2, [pc, #168]	; (80014c8 <StartControl+0xb0>)
    StoppingCount = TIME_OUT_STOPPING;
 8001420:	4e2a      	ldr	r6, [pc, #168]	; (80014cc <StartControl+0xb4>)
 8001422:	602e      	str	r6, [r5, #0]
    BusOverVoltage = FALSE;
 8001424:	2400      	movs	r4, #0
    Fault = FAULT_NONE;
 8001426:	8014      	strh	r4, [r2, #0]
    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R &= ~ (1 << 19);
 8001428:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
    BusOverVoltage = FALSE;
 800142c:	4828      	ldr	r0, [pc, #160]	; (80014d0 <StartControl+0xb8>)
    GridOutage = FALSE;
 800142e:	4929      	ldr	r1, [pc, #164]	; (80014d4 <StartControl+0xbc>)
    BusOverVoltage = FALSE;
 8001430:	7004      	strb	r4, [r0, #0]
    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R &= ~ (1 << 19);
 8001432:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
    GridOutage = FALSE;
 8001436:	700c      	strb	r4, [r1, #0]
    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R &= ~ (1 << 19);
 8001438:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= (1 << 0);
 800143c:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
    State_Control = DIAGNOSTIC_AC_LINE;
 8001440:	4925      	ldr	r1, [pc, #148]	; (80014d8 <StartControl+0xc0>)
    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= (1 << 0);
 8001442:	f042 0201 	orr.w	r2, r2, #1
 8001446:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
    State_Control = DIAGNOSTIC_AC_LINE;
 800144a:	2505      	movs	r5, #5
    DCAC_SendCommand(DCAC_Start);
 800144c:	4620      	mov	r0, r4
    State_Control = DIAGNOSTIC_AC_LINE;
 800144e:	700d      	strb	r5, [r1, #0]
    DCAC_SendCommand(DCAC_Start);
 8001450:	f000 fe06 	bl	8002060 <DCAC_SendCommand>
    DS_SendCommand(DS_Start);
 8001454:	4620      	mov	r0, r4
 8001456:	f002 f919 	bl	800368c <DS_SendCommand>
    DCDC_SetPhaseShift(PHASE_SHIFT_INIT);
 800145a:	f242 50f2 	movw	r0, #9714	; 0x25f2
 800145e:	f000 fef9 	bl	8002254 <DCDC_SetPhaseShift>
    DCDC_SetFrequency(MASTER_PWM_FREQ); // SET FREQUENCY AND PERIOD OF DCDC
 8001462:	481e      	ldr	r0, [pc, #120]	; (80014dc <StartControl+0xc4>)
 8001464:	f000 ff0c 	bl	8002280 <DCDC_SetFrequency>
    if (ControlMode == OpenLoop)
 8001468:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <StartControl+0xc8>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d000      	beq.n	8001472 <StartControl+0x5a>
}
 8001470:	bd70      	pop	{r4, r5, r6, pc}
        DCDC_SendCommand(DCDC_ConverterStart);
 8001472:	4620      	mov	r0, r4
 8001474:	f000 fe90 	bl	8002198 <DCDC_SendCommand>
        while(DCDC_GetPhaseShift() < (DCDC_GetPeriod()))
 8001478:	e008      	b.n	800148c <StartControl+0x74>
      	  DCDC_SetPhaseShift(DCDC_GetPhaseShift()+1);
 800147a:	f000 fee5 	bl	8002248 <DCDC_GetPhaseShift>
 800147e:	3001      	adds	r0, #1
 8001480:	f000 fee8 	bl	8002254 <DCDC_SetPhaseShift>
      	  delay_cycles(850);
 8001484:	f240 3052 	movw	r0, #850	; 0x352
 8001488:	f7ff fbfe 	bl	8000c88 <delay_cycles>
        while(DCDC_GetPhaseShift() < (DCDC_GetPeriod()))
 800148c:	f000 fedc 	bl	8002248 <DCDC_GetPhaseShift>
 8001490:	4604      	mov	r4, r0
 8001492:	f000 fecd 	bl	8002230 <DCDC_GetPeriod>
 8001496:	4284      	cmp	r4, r0
 8001498:	d3ef      	bcc.n	800147a <StartControl+0x62>
            while(DCDC_GetFrequency() > 240000)
 800149a:	4d12      	ldr	r5, [pc, #72]	; (80014e4 <StartControl+0xcc>)
          	  ActualFreq_Val=ActualFreq_Val - 1;
 800149c:	4c12      	ldr	r4, [pc, #72]	; (80014e8 <StartControl+0xd0>)
 800149e:	e007      	b.n	80014b0 <StartControl+0x98>
 80014a0:	6820      	ldr	r0, [r4, #0]
 80014a2:	3801      	subs	r0, #1
 80014a4:	6020      	str	r0, [r4, #0]
          	  DCDC_SetFrequency((u32)ActualFreq_Val);
 80014a6:	f000 feeb 	bl	8002280 <DCDC_SetFrequency>
          	  delay_cycles(170);
 80014aa:	20aa      	movs	r0, #170	; 0xaa
 80014ac:	f7ff fbec 	bl	8000c88 <delay_cycles>
            while(DCDC_GetFrequency() > 240000)
 80014b0:	f000 fec4 	bl	800223c <DCDC_GetFrequency>
 80014b4:	42a8      	cmp	r0, r5
 80014b6:	d8f3      	bhi.n	80014a0 <StartControl+0x88>
        PRECHARGE_OK=true;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <StartControl+0xd4>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
}
 80014be:	bd70      	pop	{r4, r5, r6, pc}
 80014c0:	200001cc 	.word	0x200001cc
 80014c4:	40016800 	.word	0x40016800
 80014c8:	20000178 	.word	0x20000178
 80014cc:	00028870 	.word	0x00028870
 80014d0:	2000008a 	.word	0x2000008a
 80014d4:	2000017a 	.word	0x2000017a
 80014d8:	200001ca 	.word	0x200001ca
 80014dc:	000445c0 	.word	0x000445c0
 80014e0:	2000008e 	.word	0x2000008e
 80014e4:	0003a980 	.word	0x0003a980
 80014e8:	20000000 	.word	0x20000000
 80014ec:	20000199 	.word	0x20000199

080014f0 <InitControl>:
{
 80014f0:	e92d 4170 	stmdb	sp!, {r4, r5, r6, r8, lr}
    InitStructure.frequency = DCDC_FREQUENCY;
 80014f4:	4b45      	ldr	r3, [pc, #276]	; (800160c <InitControl+0x11c>)
    ControlMode = mode;
 80014f6:	4d46      	ldr	r5, [pc, #280]	; (8001610 <InitControl+0x120>)
      ptr_State_Control = &to_grid_State_Control[0];
 80014f8:	4e46      	ldr	r6, [pc, #280]	; (8001614 <InitControl+0x124>)
{
 80014fa:	b091      	sub	sp, #68	; 0x44
 80014fc:	4604      	mov	r4, r0
    InitStructure.Counter = DCDC_COUNTER;
 80014fe:	f644 31e4 	movw	r1, #19428	; 0x4be4
    InitStructure.DutyCycle = DCDC_DUTYCYCLE;
 8001502:	f242 52f2 	movw	r2, #9714	; 0x25f2
    DCDC_Init(&InitStructure);
 8001506:	a80b      	add	r0, sp, #44	; 0x2c
    InitStructure.frequency = DCDC_FREQUENCY;
 8001508:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    InitStructure.Counter = DCDC_COUNTER;
 800150c:	910b      	str	r1, [sp, #44]	; 0x2c
    DCAC_InitStructure.Counter = DCAC_COUNTER;
 800150e:	f246 78be 	movw	r8, #26558	; 0x67be
    DCDC_Init(&InitStructure);
 8001512:	f001 fcd9 	bl	8002ec8 <DCDC_Init>
    DCAC_InitStructure.DeadTime = DCAC_DEADTIME;
 8001516:	23c8      	movs	r3, #200	; 0xc8
    DCAC_Init(&DCAC_InitStructure);
 8001518:	a805      	add	r0, sp, #20
    DCAC_InitStructure.DeadTime = DCAC_DEADTIME;
 800151a:	e9cd 8305 	strd	r8, r3, [sp, #20]
    DCAC_Init(&DCAC_InitStructure);
 800151e:	f000 fd7b 	bl	8002018 <DCAC_Init>
          DS_InitStructure.OnAcquisition = ExecControlOpenLoop;
 8001522:	4a3d      	ldr	r2, [pc, #244]	; (8001618 <InitControl+0x128>)
 8001524:	4b3d      	ldr	r3, [pc, #244]	; (800161c <InitControl+0x12c>)
    DS_InitStructure.DataRegister =  (volatile uint16_t *)&DataSensingIO;
 8001526:	493e      	ldr	r1, [pc, #248]	; (8001620 <InitControl+0x130>)
    ControlMode = mode;
 8001528:	702c      	strb	r4, [r5, #0]
          DS_InitStructure.OnAcquisition = ExecControlOpenLoop;
 800152a:	2c02      	cmp	r4, #2
 800152c:	bf18      	it	ne
 800152e:	4613      	movne	r3, r2
      DS_Init(&DS_InitStructure);
 8001530:	a807      	add	r0, sp, #28
    DS_InitStructure.RegisterSize = DATA_SENSING_SIZE;
 8001532:	2203      	movs	r2, #3
 8001534:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8001538:	930a      	str	r3, [sp, #40]	; 0x28
    DS_InitStructure.Counter = DCAC_COUNTER; //--the same counter of the DCAC
 800153a:	f8cd 801c 	str.w	r8, [sp, #28]
      DS_Init(&DS_InitStructure);
 800153e:	f002 f845 	bl	80035cc <DS_Init>
      ptr_Pulse1_IT = &Pulse1_IT;
 8001542:	4a38      	ldr	r2, [pc, #224]	; (8001624 <InitControl+0x134>)
      ptr_State_Control = &to_grid_State_Control[0];
 8001544:	4b38      	ldr	r3, [pc, #224]	; (8001628 <InitControl+0x138>)
 8001546:	6033      	str	r3, [r6, #0]
      ptr_Pulse1_IT = &Pulse1_IT;
 8001548:	4838      	ldr	r0, [pc, #224]	; (800162c <InitControl+0x13c>)
      ptr_Pulse2_IT = &Pulse2_IT;
 800154a:	4b39      	ldr	r3, [pc, #228]	; (8001630 <InitControl+0x140>)
      ptr_Pulse1_IT = &Pulse1_IT;
 800154c:	6010      	str	r0, [r2, #0]
      ptr_Pulse2_IT = &Pulse2_IT;
 800154e:	4a39      	ldr	r2, [pc, #228]	; (8001634 <InitControl+0x144>)
 8001550:	601a      	str	r2, [r3, #0]
  	  calib = FALSE;
 8001552:	4a39      	ldr	r2, [pc, #228]	; (8001638 <InitControl+0x148>)
      Freq_Control = FREQ_OUT_OF_RANGE;
 8001554:	4b39      	ldr	r3, [pc, #228]	; (800163c <InitControl+0x14c>)
      ptr_org_State_Control = &State_Control;
 8001556:	4d3a      	ldr	r5, [pc, #232]	; (8001640 <InitControl+0x150>)
 8001558:	493a      	ldr	r1, [pc, #232]	; (8001644 <InitControl+0x154>)
      Fault = 0;
 800155a:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8001698 <InitControl+0x1a8>
      ptr_org_State_Control = &State_Control;
 800155e:	600d      	str	r5, [r1, #0]
  	  State_Control = STOP;
 8001560:	2400      	movs	r4, #0
  	  calib = FALSE;
 8001562:	7014      	strb	r4, [r2, #0]
      Freq_Control = FREQ_OUT_OF_RANGE;
 8001564:	2206      	movs	r2, #6
 8001566:	701a      	strb	r2, [r3, #0]
      GDVoltage = GRID_VOLTAGE_OUT_OF_RANGE;
 8001568:	4b37      	ldr	r3, [pc, #220]	; (8001648 <InitControl+0x158>)
  	  State_Control = STOP;
 800156a:	702c      	strb	r4, [r5, #0]
      GDVoltage = GRID_VOLTAGE_OUT_OF_RANGE;
 800156c:	2208      	movs	r2, #8
 800156e:	701a      	strb	r2, [r3, #0]
      Diagnostic_Control = STOP;
 8001570:	4b36      	ldr	r3, [pc, #216]	; (800164c <InitControl+0x15c>)
      Fault = 0;
 8001572:	f8a8 4000 	strh.w	r4, [r8]
      Diagnostic_Control = STOP;
 8001576:	701c      	strb	r4, [r3, #0]
    return State_Control;
 8001578:	f7ff febc 	bl	80012f4 <CalibrationControl.part.0>
    *ptr_State_Control=State_Control;
 800157c:	6833      	ldr	r3, [r6, #0]
 800157e:	782a      	ldrb	r2, [r5, #0]
 8001580:	801a      	strh	r2, [r3, #0]
    *(ptr_State_Control+1)=State_Control;
 8001582:	782a      	ldrb	r2, [r5, #0]
 8001584:	805a      	strh	r2, [r3, #2]
    *(ptr_State_Control+2)=State_Control;
 8001586:	809a      	strh	r2, [r3, #4]
    PID_Init_Integral_Part();
 8001588:	f002 fbc2 	bl	8003d10 <PID_Init_Integral_Part>
    PID_Init(&Direct_Current_PID, &Quadrature_Current_PID, &Reactive_Power_PID,&Active_Power_PID,&BUS_Voltage_PID,&DQ_PLL_PID, &MPPT_PID);
 800158c:	4d30      	ldr	r5, [pc, #192]	; (8001650 <InitControl+0x160>)
 800158e:	4a31      	ldr	r2, [pc, #196]	; (8001654 <InitControl+0x164>)
 8001590:	4e31      	ldr	r6, [pc, #196]	; (8001658 <InitControl+0x168>)
 8001592:	4b32      	ldr	r3, [pc, #200]	; (800165c <InitControl+0x16c>)
 8001594:	4932      	ldr	r1, [pc, #200]	; (8001660 <InitControl+0x170>)
 8001596:	4833      	ldr	r0, [pc, #204]	; (8001664 <InitControl+0x174>)
 8001598:	9600      	str	r6, [sp, #0]
 800159a:	e9cd 5201 	strd	r5, r2, [sp, #4]
 800159e:	4a32      	ldr	r2, [pc, #200]	; (8001668 <InitControl+0x178>)
 80015a0:	f002 fb06 	bl	8003bb0 <PID_Init>
    pControl->PLL.pIntegral = &(DQ_PLL_PID.Ki_Gain);
 80015a4:	4a31      	ldr	r2, [pc, #196]	; (800166c <InitControl+0x17c>)
  pData->Power.pPout_act = &Actual_QD_Power.P_Active;
 80015a6:	4832      	ldr	r0, [pc, #200]	; (8001670 <InitControl+0x180>)
    pControl->PLL.pIntegral = &(DQ_PLL_PID.Ki_Gain);
 80015a8:	1d2b      	adds	r3, r5, #4
 80015aa:	6013      	str	r3, [r2, #0]
    pControl->DCBUS.pIntegral = &(BUS_Voltage_PID.Ki_Gain);
 80015ac:	1d31      	adds	r1, r6, #4
    pControl->Id.pIntegral = &(Direct_Current_PID.Ki_Gain);
 80015ae:	4b31      	ldr	r3, [pc, #196]	; (8001674 <InitControl+0x184>)
    pControl->PLL.pProportional = &(DQ_PLL_PID.Kp_Gain);
 80015b0:	3502      	adds	r5, #2
 80015b2:	6055      	str	r5, [r2, #4]
    pControl->DCBUS.pIntegral = &(BUS_Voltage_PID.Ki_Gain);
 80015b4:	6091      	str	r1, [r2, #8]
    pControl->DCBUS.pProportional = &(BUS_Voltage_PID.Kp_Gain);
 80015b6:	1cb1      	adds	r1, r6, #2
 80015b8:	60d1      	str	r1, [r2, #12]
    pControl->Id.pIntegral = &(Direct_Current_PID.Ki_Gain);
 80015ba:	6113      	str	r3, [r2, #16]
    pControl->Id.pProportional = &(Direct_Current_PID.Kp_Gain);
 80015bc:	1e99      	subs	r1, r3, #2
    pControl->Iq.pIntegral = &(Quadrature_Current_PID.Ki_Gain);
 80015be:	4b2e      	ldr	r3, [pc, #184]	; (8001678 <InitControl+0x188>)
    pControl->Id.pProportional = &(Direct_Current_PID.Kp_Gain);
 80015c0:	6151      	str	r1, [r2, #20]
    pControl->Iq.pIntegral = &(Quadrature_Current_PID.Ki_Gain);
 80015c2:	6193      	str	r3, [r2, #24]
    pControl->Iq.pProportional = &(Quadrature_Current_PID.Kp_Gain);
 80015c4:	3b02      	subs	r3, #2
 80015c6:	61d3      	str	r3, [r2, #28]
    pControl->k1k2.xz1 = &z1;
 80015c8:	492c      	ldr	r1, [pc, #176]	; (800167c <InitControl+0x18c>)
  pData->Power.pPin = NULL;
 80015ca:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <InitControl+0x190>)
    pControl->k1k2.xz1 = &z1;
 80015cc:	6291      	str	r1, [r2, #40]	; 0x28
    pControl->k1k2.xz2 = &z2;
 80015ce:	4d2d      	ldr	r5, [pc, #180]	; (8001684 <InitControl+0x194>)
  pData->VoltageCurrent.pVin_DC  = (s16 *)&DataSensingOffSet.DC_PanelVoltage;
 80015d0:	492d      	ldr	r1, [pc, #180]	; (8001688 <InitControl+0x198>)
    pControl->k1k2.xz2 = &z2;
 80015d2:	62d5      	str	r5, [r2, #44]	; 0x2c
  pData->Power.pPin = NULL;
 80015d4:	601c      	str	r4, [r3, #0]
  pData->Power.pOutFreq = &Output_qVd_Grid;
 80015d6:	4a2d      	ldr	r2, [pc, #180]	; (800168c <InitControl+0x19c>)
  pData->Power.pPout_act = &Actual_QD_Power.P_Active;
 80015d8:	6058      	str	r0, [r3, #4]
  pData->Power.pQ = &Actual_QD_Power.Q_Reactive;
 80015da:	3002      	adds	r0, #2
  pData->Power.pOutFreq = &Output_qVd_Grid;
 80015dc:	609a      	str	r2, [r3, #8]
  pData->Power.pQ = &Actual_QD_Power.Q_Reactive;
 80015de:	60d8      	str	r0, [r3, #12]
  pData->Power.pPowerThreshold =  &PowerThreshold;
 80015e0:	4a2b      	ldr	r2, [pc, #172]	; (8001690 <InitControl+0x1a0>)
 80015e2:	611a      	str	r2, [r3, #16]
  pData->VoltageCurrent.pVin_DC  = (s16 *)&DataSensingOffSet.DC_PanelVoltage;
 80015e4:	f101 0008 	add.w	r0, r1, #8
 80015e8:	6158      	str	r0, [r3, #20]
  pData->VoltageCurrent.pIin_DC  = (s16 *)&DataSensingOffSet.DC_PanelCurrent;
 80015ea:	1d88      	adds	r0, r1, #6
 80015ec:	6198      	str	r0, [r3, #24]
  pData->VoltageCurrent.pVout_AC = (s16 *)&DataSensingOffSet.AC_LineVoltage;
 80015ee:	1c88      	adds	r0, r1, #2
 80015f0:	61d8      	str	r0, [r3, #28]
  pData->Status.pState = &State;
 80015f2:	4a28      	ldr	r2, [pc, #160]	; (8001694 <InitControl+0x1a4>)
  pData->VoltageCurrent.pIout_AC = (s16 *)&DataSensingOffSet.AC_LineCurrent;
 80015f4:	6219      	str	r1, [r3, #32]
  pData->VoltageCurrent.pVDC_Bus = (s16 *)&DataSensingOffSet.DC_BusVoltage;
 80015f6:	1d08      	adds	r0, r1, #4
 80015f8:	6258      	str	r0, [r3, #36]	; 0x24
  pData->VoltageCurrent.pVDC_BusRef = &BUS_Voltage_PID.Reference;
 80015fa:	629e      	str	r6, [r3, #40]	; 0x28
  pData->Status.pFault = &Fault;
 80015fc:	f8c3 802c 	str.w	r8, [r3, #44]	; 0x2c
  pData->Status.pState = &State;
 8001600:	631a      	str	r2, [r3, #48]	; 0x30
    StartControl();
 8001602:	f7ff ff09 	bl	8001418 <StartControl>
}
 8001606:	b011      	add	sp, #68	; 0x44
 8001608:	e8bd 8170 	ldmia.w	sp!, {r4, r5, r6, r8, pc}
 800160c:	000445c0 	.word	0x000445c0
 8001610:	2000008e 	.word	0x2000008e
 8001614:	2000c1f0 	.word	0x2000c1f0
 8001618:	08000d71 	.word	0x08000d71
 800161c:	080018f1 	.word	0x080018f1
 8001620:	2000010c 	.word	0x2000010c
 8001624:	2000c1e8 	.word	0x2000c1e8
 8001628:	20010e74 	.word	0x20010e74
 800162c:	20010e6c 	.word	0x20010e6c
 8001630:	2000c1ec 	.word	0x2000c1ec
 8001634:	20010e70 	.word	0x20010e70
 8001638:	2000c1de 	.word	0x2000c1de
 800163c:	20000024 	.word	0x20000024
 8001640:	200001ca 	.word	0x200001ca
 8001644:	2000c1f4 	.word	0x2000c1f4
 8001648:	20000025 	.word	0x20000025
 800164c:	20000168 	.word	0x20000168
 8001650:	200000c8 	.word	0x200000c8
 8001654:	20000184 	.word	0x20000184
 8001658:	2000007c 	.word	0x2000007c
 800165c:	2000006c 	.word	0x2000006c
 8001660:	200001a8 	.word	0x200001a8
 8001664:	2000016c 	.word	0x2000016c
 8001668:	200001b8 	.word	0x200001b8
 800166c:	20000094 	.word	0x20000094
 8001670:	20000078 	.word	0x20000078
 8001674:	20000170 	.word	0x20000170
 8001678:	200001ac 	.word	0x200001ac
 800167c:	20000020 	.word	0x20000020
 8001680:	200000d4 	.word	0x200000d4
 8001684:	20000022 	.word	0x20000022
 8001688:	20000124 	.word	0x20000124
 800168c:	20000194 	.word	0x20000194
 8001690:	2000000a 	.word	0x2000000a
 8001694:	200001c8 	.word	0x200001c8
 8001698:	20000178 	.word	0x20000178

0800169c <CalcAndSetACComponents>:
void CalcAndSetACComponents(SystStatus_t state)
{

    Quadrature_Current_PID.Reference = 26000;//(PID_Bus_Voltage(&BUS_Voltage_PID,Bus_Voltage));

    Direct_Current_PID.Reference = (PID_Reactive_Power(&Reactive_Power_PID, Actual_QD_Power.Q_Reactive));
 800169c:	4b7c      	ldr	r3, [pc, #496]	; (8001890 <CalcAndSetACComponents+0x1f4>)
 800169e:	487d      	ldr	r0, [pc, #500]	; (8001894 <CalcAndSetACComponents+0x1f8>)
 80016a0:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
{
 80016a4:	b570      	push	{r4, r5, r6, lr}
    Quadrature_Current_PID.Reference = 26000;//(PID_Bus_Voltage(&BUS_Voltage_PID,Bus_Voltage));
 80016a6:	4e7c      	ldr	r6, [pc, #496]	; (8001898 <CalcAndSetACComponents+0x1fc>)

    Output_qId_Inverter = (s16)(PID_DirectCurrent(&Direct_Current_PID, ((Inverter_q_d.qI_Direct))));
 80016a8:	4c7c      	ldr	r4, [pc, #496]	; (800189c <CalcAndSetACComponents+0x200>)
 80016aa:	4d7d      	ldr	r5, [pc, #500]	; (80018a0 <CalcAndSetACComponents+0x204>)
    Quadrature_Current_PID.Reference = 26000;//(PID_Bus_Voltage(&BUS_Voltage_PID,Bus_Voltage));
 80016ac:	f246 5390 	movw	r3, #26000	; 0x6590
 80016b0:	8033      	strh	r3, [r6, #0]
    Direct_Current_PID.Reference = (PID_Reactive_Power(&Reactive_Power_PID, Actual_QD_Power.Q_Reactive));
 80016b2:	f002 fb09 	bl	8003cc8 <PID_Reactive_Power>
 80016b6:	4603      	mov	r3, r0
 80016b8:	487a      	ldr	r0, [pc, #488]	; (80018a4 <CalcAndSetACComponents+0x208>)
    Output_qId_Inverter = (s16)(PID_DirectCurrent(&Direct_Current_PID, ((Inverter_q_d.qI_Direct))));
 80016ba:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
    Direct_Current_PID.Reference = (PID_Reactive_Power(&Reactive_Power_PID, Actual_QD_Power.Q_Reactive));
 80016be:	8003      	strh	r3, [r0, #0]
    Output_qId_Inverter = (s16)(PID_DirectCurrent(&Direct_Current_PID, ((Inverter_q_d.qI_Direct))));
 80016c0:	f002 fabe 	bl	8003c40 <PID_DirectCurrent>

    Output_qIq_Inverter = ((s16)(PID_QuadratureCurrent(&Quadrature_Current_PID, ((Inverter_q_d.qI_Quadrature)))));
 80016c4:	f9b4 1000 	ldrsh.w	r1, [r4]
 80016c8:	4c77      	ldr	r4, [pc, #476]	; (80018a8 <CalcAndSetACComponents+0x20c>)
    Output_qId_Inverter = (s16)(PID_DirectCurrent(&Direct_Current_PID, ((Inverter_q_d.qI_Direct))));
 80016ca:	4603      	mov	r3, r0
    Output_qIq_Inverter = ((s16)(PID_QuadratureCurrent(&Quadrature_Current_PID, ((Inverter_q_d.qI_Quadrature)))));
 80016cc:	4630      	mov	r0, r6
    Output_qId_Inverter = (s16)(PID_DirectCurrent(&Direct_Current_PID, ((Inverter_q_d.qI_Direct))));
 80016ce:	802b      	strh	r3, [r5, #0]
    Output_qIq_Inverter = ((s16)(PID_QuadratureCurrent(&Quadrature_Current_PID, ((Inverter_q_d.qI_Quadrature)))));
 80016d0:	f002 fad8 	bl	8003c84 <PID_QuadratureCurrent>
 80016d4:	8020      	strh	r0, [r4, #0]

    CrossDecoupling_Control();
 80016d6:	f001 fe73 	bl	80033c0 <CrossDecoupling_Control>

    RevPark_Circle_Limitation();
 80016da:	f001 fea3 	bl	8003424 <RevPark_Circle_Limitation>

    Control_Volt_AlphaBeta= Rev_Park(Output_qIq_Inverter,Output_qId_Inverter);
 80016de:	f9b5 1000 	ldrsh.w	r1, [r5]
 80016e2:	f9b4 0000 	ldrsh.w	r0, [r4]
 80016e6:	f001 fcdf 	bl	80030a8 <Rev_Park>

    //if(State_Control!=DIAGNOSTIC_DC_LINE && State_Control!=DIAGNOSTIC_AC_LINE && State_Control!=BUSPRECHARGE)
    if(State_Control == GRID_INSERTION)
 80016ea:	4a70      	ldr	r2, [pc, #448]	; (80018ac <CalcAndSetACComponents+0x210>)
    Control_Volt_AlphaBeta= Rev_Park(Output_qIq_Inverter,Output_qId_Inverter);
 80016ec:	4b70      	ldr	r3, [pc, #448]	; (80018b0 <CalcAndSetACComponents+0x214>)
    if(State_Control == GRID_INSERTION)
 80016ee:	7812      	ldrb	r2, [r2, #0]
    Control_Volt_AlphaBeta= Rev_Park(Output_qIq_Inverter,Output_qId_Inverter);
 80016f0:	6018      	str	r0, [r3, #0]
    if(State_Control == GRID_INSERTION)
 80016f2:	2a15      	cmp	r2, #21
 80016f4:	d000      	beq.n	80016f8 <CalcAndSetACComponents+0x5c>
    }

// ********************* commentata per debug open loop *********************
  //  DAC_SetChannel(DAC_CH_1,(u16) Theta +0x8000);
// *************************************************************************
}
 80016f6:	bd70      	pop	{r4, r5, r6, pc}
		if(Control_Volt_AlphaBeta.qValpha <= 0) //NEGATIVE SINE HALF
 80016f8:	f9b3 1000 	ldrsh.w	r1, [r3]
 80016fc:	2900      	cmp	r1, #0
 80016fe:	dd65      	ble.n	80017cc <CalcAndSetACComponents+0x130>
			  Pulse2 = ((u16)(new_mul_q15_q15_q31((s16)(0x8000 - Control_Volt_AlphaBeta.qValpha ), MODINDEX) >> 16));
 8001700:	f5c1 4100 	rsb	r1, r1, #32768	; 0x8000
			  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].DTxR = 0xc804c8;
 8001704:	4c6b      	ldr	r4, [pc, #428]	; (80018b4 <CalcAndSetACComponents+0x218>)
    	      polarity=FALSE;
 8001706:	486c      	ldr	r0, [pc, #432]	; (80018b8 <CalcAndSetACComponents+0x21c>)
  WRITE_REG(GPIOx->BRR, PinMask);
 8001708:	4a6c      	ldr	r2, [pc, #432]	; (80018bc <CalcAndSetACComponents+0x220>)
			  Pulse2 = ((u16)(new_mul_q15_q15_q31((s16)(0x8000 - Control_Volt_AlphaBeta.qValpha ), MODINDEX) >> 16));
 800170a:	f246 6392 	movw	r3, #26258	; 0x6692
 800170e:	b289      	uxth	r1, r1
 8001710:	fb03 f101 	mul.w	r1, r3, r1
    	      polarity=FALSE;
 8001714:	2500      	movs	r5, #0
			  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].DTxR = 0xc804c8;
 8001716:	4b6a      	ldr	r3, [pc, #424]	; (80018c0 <CalcAndSetACComponents+0x224>)
 8001718:	f8c4 3238 	str.w	r3, [r4, #568]	; 0x238
			  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_E].DTxR = 0xc804c8;
 800171c:	0bc9      	lsrs	r1, r1, #15
 800171e:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
			  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].DTxR = 0xc804c8;
 8001722:	f8c4 3338 	str.w	r3, [r4, #824]	; 0x338
    	      polarity=FALSE;
 8001726:	7005      	strb	r5, [r0, #0]
 8001728:	f44f 7380 	mov.w	r3, #256	; 0x100
			  Pulse2 = ((u16)(new_mul_q15_q15_q31((s16)(0x8000 - Control_Volt_AlphaBeta.qValpha ), MODINDEX) >> 16));
 800172c:	4d65      	ldr	r5, [pc, #404]	; (80018c4 <CalcAndSetACComponents+0x228>)
 800172e:	6293      	str	r3, [r2, #40]	; 0x28
			  DCAC_SetPulse(Pulse2,Pulse2);
 8001730:	4608      	mov	r0, r1
			  Pulse2 = ((u16)(new_mul_q15_q15_q31((s16)(0x8000 - Control_Volt_AlphaBeta.qValpha ), MODINDEX) >> 16));
 8001732:	6029      	str	r1, [r5, #0]
			  DCAC_SetPulse(Pulse2,Pulse2);
 8001734:	f000 fce0 	bl	80020f8 <DCAC_SetPulse>
			  if((Pulse2 > Pulse2_temp) && (Pulse2>24500))
 8001738:	4a63      	ldr	r2, [pc, #396]	; (80018c8 <CalcAndSetACComponents+0x22c>)
 800173a:	682b      	ldr	r3, [r5, #0]
 800173c:	6811      	ldr	r1, [r2, #0]
 800173e:	428b      	cmp	r3, r1
 8001740:	d942      	bls.n	80017c8 <CalcAndSetACComponents+0x12c>
 8001742:	f645 71b4 	movw	r1, #24500	; 0x5fb4
 8001746:	428b      	cmp	r3, r1
 8001748:	d93e      	bls.n	80017c8 <CalcAndSetACComponents+0x12c>
				  if((LF_MOS_SET == FALSE) || (FIRST_CYCLE == TRUE))
 800174a:	4860      	ldr	r0, [pc, #384]	; (80018cc <CalcAndSetACComponents+0x230>)
 800174c:	4d60      	ldr	r5, [pc, #384]	; (80018d0 <CalcAndSetACComponents+0x234>)
 800174e:	7801      	ldrb	r1, [r0, #0]
 8001750:	b1c9      	cbz	r1, 8001786 <CalcAndSetACComponents+0xea>
 8001752:	7829      	ldrb	r1, [r5, #0]
 8001754:	b9b9      	cbnz	r1, 8001786 <CalcAndSetACComponents+0xea>
					  if (LF_UPDATE == TRUE)
 8001756:	4d5f      	ldr	r5, [pc, #380]	; (80018d4 <CalcAndSetACComponents+0x238>)
 8001758:	782e      	ldrb	r6, [r5, #0]
 800175a:	b39e      	cbz	r6, 80017c4 <CalcAndSetACComponents+0x128>
						  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R &= ~ (1 << 19);
 800175c:	f8d4 623c 	ldr.w	r6, [r4, #572]	; 0x23c
 8001760:	f426 2600 	bic.w	r6, r6, #524288	; 0x80000
 8001764:	f8c4 623c 	str.w	r6, [r4, #572]	; 0x23c
						  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= (1 << 0);
 8001768:	f8d4 623c 	ldr.w	r6, [r4, #572]	; 0x23c
 800176c:	f046 0601 	orr.w	r6, r6, #1
 8001770:	f8c4 623c 	str.w	r6, [r4, #572]	; 0x23c
						  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8001774:	4c58      	ldr	r4, [pc, #352]	; (80018d8 <CalcAndSetACComponents+0x23c>)
						  LF_UPDATE = FALSE;
 8001776:	7029      	strb	r1, [r5, #0]
						  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8001778:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800177c:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8001780:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 8001784:	e01e      	b.n	80017c4 <CalcAndSetACComponents+0x128>
					  RESET_TIMER_D = FALSE;
 8001786:	4955      	ldr	r1, [pc, #340]	; (80018dc <CalcAndSetACComponents+0x240>)
 8001788:	2400      	movs	r4, #0
 800178a:	700c      	strb	r4, [r1, #0]
					  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].DTxR = 0xc814c8;
 800178c:	4949      	ldr	r1, [pc, #292]	; (80018b4 <CalcAndSetACComponents+0x218>)
					  FIRST_CYCLE = FALSE;
 800178e:	702c      	strb	r4, [r5, #0]
					  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].DTxR = 0xc814c8;
 8001790:	4c53      	ldr	r4, [pc, #332]	; (80018e0 <CalcAndSetACComponents+0x244>)
 8001792:	f8c1 4238 	str.w	r4, [r1, #568]	; 0x238
					  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(16);
 8001796:	2510      	movs	r5, #16
					  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_E].DTxR = 0xc814c8;
 8001798:	f8c1 42b8 	str.w	r4, [r1, #696]	; 0x2b8
					  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].DTxR = 0xc814c8;
 800179c:	f8c1 4338 	str.w	r4, [r1, #824]	; 0x338
					  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(16);
 80017a0:	f8c1 5324 	str.w	r5, [r1, #804]	; 0x324
					  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= 1 << 19;
 80017a4:	f8d1 423c 	ldr.w	r4, [r1, #572]	; 0x23c
					  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 80017a8:	4d4b      	ldr	r5, [pc, #300]	; (80018d8 <CalcAndSetACComponents+0x23c>)
					  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= 1 << 19;
 80017aa:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80017ae:	f8c1 423c 	str.w	r4, [r1, #572]	; 0x23c
					  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 80017b2:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
					  LF_UPDATE = TRUE;
 80017b6:	4c47      	ldr	r4, [pc, #284]	; (80018d4 <CalcAndSetACComponents+0x238>)
					  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 80017b8:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 80017bc:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84
					  LF_UPDATE = TRUE;
 80017c0:	2101      	movs	r1, #1
 80017c2:	7021      	strb	r1, [r4, #0]
				  LF_MOS_SET = TRUE;
 80017c4:	2101      	movs	r1, #1
 80017c6:	7001      	strb	r1, [r0, #0]
			  Pulse2_temp = Pulse2;
 80017c8:	6013      	str	r3, [r2, #0]
}
 80017ca:	bd70      	pop	{r4, r5, r6, pc}
			  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].DTxR = 0xc804c8;
 80017cc:	4c39      	ldr	r4, [pc, #228]	; (80018b4 <CalcAndSetACComponents+0x218>)
			  polarity=TRUE;
 80017ce:	483a      	ldr	r0, [pc, #232]	; (80018b8 <CalcAndSetACComponents+0x21c>)
  WRITE_REG(GPIOx->BSRR, PinMask);
 80017d0:	4a3a      	ldr	r2, [pc, #232]	; (80018bc <CalcAndSetACComponents+0x220>)
			  Pulse1 = (((u16)(new_mul_q15_q15_q31(-Control_Volt_AlphaBeta.qValpha, MODINDEX) >> 16)));
 80017d2:	f649 136e 	movw	r3, #39278	; 0x996e
 80017d6:	fb11 f103 	smulbb	r1, r1, r3
			  polarity=TRUE;
 80017da:	2501      	movs	r5, #1
			  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].DTxR = 0xc804c8;
 80017dc:	4b38      	ldr	r3, [pc, #224]	; (80018c0 <CalcAndSetACComponents+0x224>)
 80017de:	f8c4 3238 	str.w	r3, [r4, #568]	; 0x238
			  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_E].DTxR = 0xc804c8;
 80017e2:	f3c1 31cf 	ubfx	r1, r1, #15, #16
 80017e6:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
			  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].DTxR = 0xc804c8;
 80017ea:	f8c4 3338 	str.w	r3, [r4, #824]	; 0x338
			  polarity=TRUE;
 80017ee:	7005      	strb	r5, [r0, #0]
 80017f0:	f44f 7380 	mov.w	r3, #256	; 0x100
			  Pulse1 = (((u16)(new_mul_q15_q15_q31(-Control_Volt_AlphaBeta.qValpha, MODINDEX) >> 16)));
 80017f4:	4d3b      	ldr	r5, [pc, #236]	; (80018e4 <CalcAndSetACComponents+0x248>)
 80017f6:	6193      	str	r3, [r2, #24]
			  DCAC_SetPulse(Pulse1,Pulse1);
 80017f8:	4608      	mov	r0, r1
			  Pulse1 = (((u16)(new_mul_q15_q15_q31(-Control_Volt_AlphaBeta.qValpha, MODINDEX) >> 16)));
 80017fa:	6029      	str	r1, [r5, #0]
			  DCAC_SetPulse(Pulse1,Pulse1);
 80017fc:	f000 fc7c 	bl	80020f8 <DCAC_SetPulse>
			  if((Pulse1 < Pulse1_temp) && (Pulse1<=500))
 8001800:	4a39      	ldr	r2, [pc, #228]	; (80018e8 <CalcAndSetACComponents+0x24c>)
 8001802:	682b      	ldr	r3, [r5, #0]
 8001804:	6811      	ldr	r1, [r2, #0]
 8001806:	428b      	cmp	r3, r1
 8001808:	d2de      	bcs.n	80017c8 <CalcAndSetACComponents+0x12c>
 800180a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800180e:	d8db      	bhi.n	80017c8 <CalcAndSetACComponents+0x12c>
	    		  if((LF_MOS_SET == TRUE) || FIRST_CYCLE == TRUE)
 8001810:	482e      	ldr	r0, [pc, #184]	; (80018cc <CalcAndSetACComponents+0x230>)
 8001812:	4d2f      	ldr	r5, [pc, #188]	; (80018d0 <CalcAndSetACComponents+0x234>)
 8001814:	7801      	ldrb	r1, [r0, #0]
 8001816:	b9d1      	cbnz	r1, 800184e <CalcAndSetACComponents+0x1b2>
 8001818:	7829      	ldrb	r1, [r5, #0]
 800181a:	b9c1      	cbnz	r1, 800184e <CalcAndSetACComponents+0x1b2>
	    			  if (LF_UPDATE == TRUE)
 800181c:	482d      	ldr	r0, [pc, #180]	; (80018d4 <CalcAndSetACComponents+0x238>)
 800181e:	7805      	ldrb	r5, [r0, #0]
 8001820:	2d00      	cmp	r5, #0
 8001822:	d0d1      	beq.n	80017c8 <CalcAndSetACComponents+0x12c>
	    				  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R &= ~ (1 << 19);
 8001824:	f8d4 523c 	ldr.w	r5, [r4, #572]	; 0x23c
 8001828:	f425 2500 	bic.w	r5, r5, #524288	; 0x80000
 800182c:	f8c4 523c 	str.w	r5, [r4, #572]	; 0x23c
	    				  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].RSTx1R |= (1 << 0);
 8001830:	f8d4 5240 	ldr.w	r5, [r4, #576]	; 0x240
 8001834:	f045 0501 	orr.w	r5, r5, #1
 8001838:	f8c4 5240 	str.w	r5, [r4, #576]	; 0x240
	    				  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 800183c:	4c26      	ldr	r4, [pc, #152]	; (80018d8 <CalcAndSetACComponents+0x23c>)
	    				  LF_UPDATE = FALSE;
 800183e:	7001      	strb	r1, [r0, #0]
	    				  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8001840:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8001844:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8001848:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
			  Pulse1_temp = Pulse1;
 800184c:	e7bc      	b.n	80017c8 <CalcAndSetACComponents+0x12c>
	    			  RESET_TIMER_D = FALSE;
 800184e:	4923      	ldr	r1, [pc, #140]	; (80018dc <CalcAndSetACComponents+0x240>)
 8001850:	2400      	movs	r4, #0
 8001852:	700c      	strb	r4, [r1, #0]
					  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].DTxR = 0xc814c8;
 8001854:	4917      	ldr	r1, [pc, #92]	; (80018b4 <CalcAndSetACComponents+0x218>)
	    			  LF_MOS_SET = FALSE;
 8001856:	7004      	strb	r4, [r0, #0]
	    			  FIRST_CYCLE = FALSE;
 8001858:	702c      	strb	r4, [r5, #0]
					  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].DTxR = 0xc814c8;
 800185a:	4821      	ldr	r0, [pc, #132]	; (80018e0 <CalcAndSetACComponents+0x244>)
 800185c:	f8c1 0238 	str.w	r0, [r1, #568]	; 0x238
	    			  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(60);
 8001860:	243c      	movs	r4, #60	; 0x3c
					  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_E].DTxR = 0xc814c8;
 8001862:	f8c1 02b8 	str.w	r0, [r1, #696]	; 0x2b8
					  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].DTxR = 0xc814c8;
 8001866:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	    			  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(60);
 800186a:	f8c1 4324 	str.w	r4, [r1, #804]	; 0x324
	    			  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= 1 << 19;
 800186e:	f8d1 023c 	ldr.w	r0, [r1, #572]	; 0x23c
	    			  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8001872:	4c19      	ldr	r4, [pc, #100]	; (80018d8 <CalcAndSetACComponents+0x23c>)
	    			  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= 1 << 19;
 8001874:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8001878:	f8c1 023c 	str.w	r0, [r1, #572]	; 0x23c
	    			  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 800187c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
	    			  LF_UPDATE = TRUE;
 8001880:	4814      	ldr	r0, [pc, #80]	; (80018d4 <CalcAndSetACComponents+0x238>)
	    			  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8001882:	f041 0150 	orr.w	r1, r1, #80	; 0x50
	    			  LF_UPDATE = TRUE;
 8001886:	2501      	movs	r5, #1
	    			  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8001888:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
	    			  LF_UPDATE = TRUE;
 800188c:	7005      	strb	r5, [r0, #0]
 800188e:	e79b      	b.n	80017c8 <CalcAndSetACComponents+0x12c>
 8001890:	20000078 	.word	0x20000078
 8001894:	200001b8 	.word	0x200001b8
 8001898:	200001a8 	.word	0x200001a8
 800189c:	2000ce20 	.word	0x2000ce20
 80018a0:	2000ce24 	.word	0x2000ce24
 80018a4:	2000016c 	.word	0x2000016c
 80018a8:	2000ce26 	.word	0x2000ce26
 80018ac:	200001ca 	.word	0x200001ca
 80018b0:	20000090 	.word	0x20000090
 80018b4:	40016800 	.word	0x40016800
 80018b8:	2000c1e5 	.word	0x2000c1e5
 80018bc:	48000800 	.word	0x48000800
 80018c0:	00c804c8 	.word	0x00c804c8
 80018c4:	20000010 	.word	0x20000010
 80018c8:	20000014 	.word	0x20000014
 80018cc:	20000007 	.word	0x20000007
 80018d0:	20000006 	.word	0x20000006
 80018d4:	20000182 	.word	0x20000182
 80018d8:	40016b00 	.word	0x40016b00
 80018dc:	20000018 	.word	0x20000018
 80018e0:	00c814c8 	.word	0x00c814c8
 80018e4:	200001a4 	.word	0x200001a4
 80018e8:	2000000c 	.word	0x2000000c
 80018ec:	00000000 	.word	0x00000000

080018f0 <ExecControl>:
{
 80018f0:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80018f4:	b082      	sub	sp, #8
  u32 freq_actual = (u32) DCDC_GetFrequency();
 80018f6:	f000 fca1 	bl	800223c <DCDC_GetFrequency>
  PV_Voltage=(u16)(DataSensingIO.DC_PanelVoltage);
 80018fa:	4b81      	ldr	r3, [pc, #516]	; (8001b00 <ExecControl+0x210>)
  Param1 = ((vu16*)&DataSensingOffSet)[1];
 80018fc:	f8df 8268 	ldr.w	r8, [pc, #616]	; 8001b68 <ExecControl+0x278>
  PV_Voltage=(u16)(DataSensingIO.DC_PanelVoltage);
 8001900:	8919      	ldrh	r1, [r3, #8]
  PV_Current=((u16)(DataSensingIO.DC_PanelCurrent))<<1;
 8001902:	88da      	ldrh	r2, [r3, #6]
 8001904:	487f      	ldr	r0, [pc, #508]	; (8001b04 <ExecControl+0x214>)
  PV_Voltage=(u16)(DataSensingIO.DC_PanelVoltage);
 8001906:	4e80      	ldr	r6, [pc, #512]	; (8001b08 <ExecControl+0x218>)
  if(PV_Voltage<=1200 && State_Control==GRID_INSERTION) //22V min
 8001908:	4d80      	ldr	r5, [pc, #512]	; (8001b0c <ExecControl+0x21c>)
  PV_Current=((u16)(DataSensingIO.DC_PanelCurrent))<<1;
 800190a:	0052      	lsls	r2, r2, #1
 800190c:	8002      	strh	r2, [r0, #0]
  Param1 = ((vu16*)&DataSensingOffSet)[1];
 800190e:	f8b8 0002 	ldrh.w	r0, [r8, #2]
  ((vu16*)&DataSensingIO)[1] -= Param1;     //AC Line Voltage Data Sensing compensation
 8001912:	885a      	ldrh	r2, [r3, #2]
 8001914:	1a12      	subs	r2, r2, r0
 8001916:	b292      	uxth	r2, r2
 8001918:	805a      	strh	r2, [r3, #2]
  Param1 = ((vu16*)&DataSensingOffSet)[0];
 800191a:	f8b8 0000 	ldrh.w	r0, [r8]
  ((vu16*)&DataSensingIO)[0] -= Param1;     //AC Line Current Data Sensing compensation
 800191e:	881a      	ldrh	r2, [r3, #0]
  PV_Voltage=(u16)(DataSensingIO.DC_PanelVoltage);
 8001920:	b209      	sxth	r1, r1
  ((vu16*)&DataSensingIO)[0] -= Param1;     //AC Line Current Data Sensing compensation
 8001922:	1a12      	subs	r2, r2, r0
 8001924:	b292      	uxth	r2, r2
  if(PV_Voltage<=1200 && State_Control==GRID_INSERTION) //22V min
 8001926:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
  PV_Voltage=(u16)(DataSensingIO.DC_PanelVoltage);
 800192a:	8031      	strh	r1, [r6, #0]
  ((vu16*)&DataSensingIO)[0] -= Param1;     //AC Line Current Data Sensing compensation
 800192c:	801a      	strh	r2, [r3, #0]
  if(PV_Voltage<=1200 && State_Control==GRID_INSERTION) //22V min
 800192e:	dc03      	bgt.n	8001938 <ExecControl+0x48>
 8001930:	782a      	ldrb	r2, [r5, #0]
 8001932:	2a15      	cmp	r2, #21
 8001934:	f000 80c5 	beq.w	8001ac2 <ExecControl+0x1d2>
  Bus_Voltage = (s16) (DataSensingIO.DC_BusVoltage) >>1; // >> 3 było
 8001938:	8899      	ldrh	r1, [r3, #4]
  if((Inverter_q_d.qI_Quadrature > 15000) && State_Control==GRID_INSERTION && MPPT_EN==TRUE) //2 A max output peak current
 800193a:	4c75      	ldr	r4, [pc, #468]	; (8001b10 <ExecControl+0x220>)
  Grid_Voltage = -(s16)((DataSensingIO.AC_LineVoltage)); //OVERSAMPLING X8
 800193c:	8858      	ldrh	r0, [r3, #2]
  Bus_Voltage = (s16) (DataSensingIO.DC_BusVoltage) >>1; // >> 3 było
 800193e:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8001b6c <ExecControl+0x27c>
  qIalpha_Inverter=-(s16)(DataSensingIO.AC_LineCurrent); //OVERSAMPLING X8 //by G.S. 19/03/12 //
 8001942:	881a      	ldrh	r2, [r3, #0]
 8001944:	f8df b228 	ldr.w	fp, [pc, #552]	; 8001b70 <ExecControl+0x280>
  Grid_Voltage = -(s16)((DataSensingIO.AC_LineVoltage)); //OVERSAMPLING X8
 8001948:	4b72      	ldr	r3, [pc, #456]	; (8001b14 <ExecControl+0x224>)
  Bus_Voltage = (s16) (DataSensingIO.DC_BusVoltage) >>1; // >> 3 było
 800194a:	f341 014e 	sbfx	r1, r1, #1, #15
  qIalpha_Inverter=-(s16)(DataSensingIO.AC_LineCurrent); //OVERSAMPLING X8 //by G.S. 19/03/12 //
 800194e:	4252      	negs	r2, r2
  Bus_Voltage = (s16) (DataSensingIO.DC_BusVoltage) >>1; // >> 3 było
 8001950:	f8a9 1000 	strh.w	r1, [r9]
  if((Inverter_q_d.qI_Quadrature > 15000) && State_Control==GRID_INSERTION && MPPT_EN==TRUE) //2 A max output peak current
 8001954:	f9b4 1000 	ldrsh.w	r1, [r4]
  qIalpha_Inverter=-(s16)(DataSensingIO.AC_LineCurrent); //OVERSAMPLING X8 //by G.S. 19/03/12 //
 8001958:	f8ab 2000 	strh.w	r2, [fp]
  Grid_Voltage = -(s16)((DataSensingIO.AC_LineVoltage)); //OVERSAMPLING X8
 800195c:	4240      	negs	r0, r0
  if((Inverter_q_d.qI_Quadrature > 15000) && State_Control==GRID_INSERTION && MPPT_EN==TRUE) //2 A max output peak current
 800195e:	f643 2298 	movw	r2, #15000	; 0x3a98
  Grid_Voltage = -(s16)((DataSensingIO.AC_LineVoltage)); //OVERSAMPLING X8
 8001962:	b200      	sxth	r0, r0
  if((Inverter_q_d.qI_Quadrature > 15000) && State_Control==GRID_INSERTION && MPPT_EN==TRUE) //2 A max output peak current
 8001964:	4291      	cmp	r1, r2
  Grid_Voltage = -(s16)((DataSensingIO.AC_LineVoltage)); //OVERSAMPLING X8
 8001966:	8018      	strh	r0, [r3, #0]
  if((Inverter_q_d.qI_Quadrature > 15000) && State_Control==GRID_INSERTION && MPPT_EN==TRUE) //2 A max output peak current
 8001968:	dd03      	ble.n	8001972 <ExecControl+0x82>
 800196a:	782a      	ldrb	r2, [r5, #0]
 800196c:	2a15      	cmp	r2, #21
 800196e:	f000 80ae 	beq.w	8001ace <ExecControl+0x1de>
     if((waiting_output_current_limit-1)<=1) waiting_output_current_limit=0;
 8001972:	4969      	ldr	r1, [pc, #420]	; (8001b18 <ExecControl+0x228>)
 8001974:	880a      	ldrh	r2, [r1, #0]
 8001976:	2a02      	cmp	r2, #2
 8001978:	bf94      	ite	ls
 800197a:	2200      	movls	r2, #0
      else waiting_output_current_limit--;
 800197c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8001980:	800a      	strh	r2, [r1, #0]
  Grid_Volt_q_d= DQ_PLL_Grid(Grid_Voltage);
 8001982:	f001 fabb 	bl	8002efc <DQ_PLL_Grid>
 8001986:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 8001b74 <ExecControl+0x284>
 800198a:	f8aa 0000 	strh.w	r0, [sl]
 800198e:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8001992:	f8aa 0002 	strh.w	r0, [sl, #2]
  Output_qVd_Grid=(s16)(PLL_PID_Regulator(&DQ_PLL_PID,Grid_Volt_q_d));
 8001996:	f8da 1000 	ldr.w	r1, [sl]
 800199a:	4860      	ldr	r0, [pc, #384]	; (8001b1c <ExecControl+0x22c>)
 800199c:	f002 f9c2 	bl	8003d24 <PLL_PID_Regulator>
 80019a0:	4a5f      	ldr	r2, [pc, #380]	; (8001b20 <ExecControl+0x230>)
 80019a2:	8010      	strh	r0, [r2, #0]
  Calc_Theta_Grid(Output_qVd_Grid);
 80019a4:	f001 fbaa 	bl	80030fc <Calc_Theta_Grid>
if(State_Control==START && MPPT_EN==FALSE && PLL_par_red_kp==FALSE && PLL_reducing!=TRUE)
 80019a8:	782a      	ldrb	r2, [r5, #0]
 80019aa:	2a12      	cmp	r2, #18
 80019ac:	d074      	beq.n	8001a98 <ExecControl+0x1a8>
if(State_Control==GRID_INSERTION && MPPT_EN==TRUE)
 80019ae:	2a15      	cmp	r2, #21
 80019b0:	d125      	bne.n	80019fe <ExecControl+0x10e>
 80019b2:	4a5c      	ldr	r2, [pc, #368]	; (8001b24 <ExecControl+0x234>)
 80019b4:	7812      	ldrb	r2, [r2, #0]
 80019b6:	b312      	cbz	r2, 80019fe <ExecControl+0x10e>
  if((Theta + 0x8000) <= 1000 && (Theta + 0x8000) >= 0)
 80019b8:	4a5b      	ldr	r2, [pc, #364]	; (8001b28 <ExecControl+0x238>)
 80019ba:	f9b2 1000 	ldrsh.w	r1, [r2]
 80019be:	4a5b      	ldr	r2, [pc, #364]	; (8001b2c <ExecControl+0x23c>)
 80019c0:	4291      	cmp	r1, r2
 80019c2:	f280 827d 	bge.w	8001ec0 <ExecControl+0x5d0>
    PVcurrentFiltered = (s16)(((s32)(((s32)PVcurrentFiltered<<3) - (s32)PVcurrentFiltered) +  (s32)(PV_Current))>>3);
 80019c6:	4b4f      	ldr	r3, [pc, #316]	; (8001b04 <ExecControl+0x214>)
    PVvoltageFiltered = (s16)(((s32)(((s32)PVvoltageFiltered<<3) - (s32)PVvoltageFiltered) +  (s32)(PV_Voltage))>>3);
 80019c8:	4859      	ldr	r0, [pc, #356]	; (8001b30 <ExecControl+0x240>)
    PVcurrentFiltered = (s16)(((s32)(((s32)PVcurrentFiltered<<3) - (s32)PVcurrentFiltered) +  (s32)(PV_Current))>>3);
 80019ca:	f9b3 e000 	ldrsh.w	lr, [r3]
 80019ce:	4b59      	ldr	r3, [pc, #356]	; (8001b34 <ExecControl+0x244>)
    PVvoltageFiltered = (s16)(((s32)(((s32)PVvoltageFiltered<<3) - (s32)PVvoltageFiltered) +  (s32)(PV_Voltage))>>3);
 80019d0:	f9b0 2000 	ldrsh.w	r2, [r0]
    PVcurrentFiltered = (s16)(((s32)(((s32)PVcurrentFiltered<<3) - (s32)PVcurrentFiltered) +  (s32)(PV_Current))>>3);
 80019d4:	f9b3 1000 	ldrsh.w	r1, [r3]
    PVvoltageFiltered = (s16)(((s32)(((s32)PVvoltageFiltered<<3) - (s32)PVvoltageFiltered) +  (s32)(PV_Voltage))>>3);
 80019d8:	f9b6 c000 	ldrsh.w	ip, [r6]
    PVcurrentFiltered = (s16)(((s32)(((s32)PVcurrentFiltered<<3) - (s32)PVcurrentFiltered) +  (s32)(PV_Current))>>3);
 80019dc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80019e0:	4471      	add	r1, lr
 80019e2:	10c9      	asrs	r1, r1, #3
    PVvoltageFiltered = (s16)(((s32)(((s32)PVvoltageFiltered<<3) - (s32)PVvoltageFiltered) +  (s32)(PV_Voltage))>>3);
 80019e4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    PVcurrentFiltered = (s16)(((s32)(((s32)PVcurrentFiltered<<3) - (s32)PVcurrentFiltered) +  (s32)(PV_Current))>>3);
 80019e8:	8019      	strh	r1, [r3, #0]
    PVvoltageFiltered = (s16)(((s32)(((s32)PVvoltageFiltered<<3) - (s32)PVvoltageFiltered) +  (s32)(PV_Voltage))>>3);
 80019ea:	4462      	add	r2, ip
    count_mppt++;
 80019ec:	4952      	ldr	r1, [pc, #328]	; (8001b38 <ExecControl+0x248>)
    PVvoltageFiltered = (s16)(((s32)(((s32)PVvoltageFiltered<<3) - (s32)PVvoltageFiltered) +  (s32)(PV_Voltage))>>3);
 80019ee:	10d2      	asrs	r2, r2, #3
 80019f0:	8002      	strh	r2, [r0, #0]
    count_mppt++;
 80019f2:	880a      	ldrh	r2, [r1, #0]
 80019f4:	3201      	adds	r2, #1
 80019f6:	800a      	strh	r2, [r1, #0]
    mppt_req=1;
 80019f8:	4a50      	ldr	r2, [pc, #320]	; (8001b3c <ExecControl+0x24c>)
 80019fa:	2101      	movs	r1, #1
 80019fc:	7011      	strb	r1, [r2, #0]
  qIbeta_Inverter= (s16)(Generate_90Degrees_Delay(qIalpha_Inverter));
 80019fe:	f9bb 0000 	ldrsh.w	r0, [fp]
 8001a02:	f001 fd77 	bl	80034f4 <Generate_90Degrees_Delay>
 8001a06:	4b4e      	ldr	r3, [pc, #312]	; (8001b40 <ExecControl+0x250>)
 8001a08:	4601      	mov	r1, r0
  Inverter_q_d=DQ_Filtering(DQ_Current_Inverter(qIalpha_Inverter,qIbeta_Inverter)); //test filtra
 8001a0a:	f9bb 0000 	ldrsh.w	r0, [fp]
  qIbeta_Inverter= (s16)(Generate_90Degrees_Delay(qIalpha_Inverter));
 8001a0e:	8019      	strh	r1, [r3, #0]
  Inverter_q_d=DQ_Filtering(DQ_Current_Inverter(qIalpha_Inverter,qIbeta_Inverter)); //test filtra
 8001a10:	f001 fafa 	bl	8003008 <DQ_Current_Inverter>
 8001a14:	9001      	str	r0, [sp, #4]
 8001a16:	f001 fd3b 	bl	8003490 <DQ_Filtering>
 8001a1a:	8020      	strh	r0, [r4, #0]
 8001a1c:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8001a20:	8060      	strh	r0, [r4, #2]
  Actual_QD_Power =  DQ_Power_Estimation(Inverter_q_d);
 8001a22:	6820      	ldr	r0, [r4, #0]
 8001a24:	f001 fc80 	bl	8003328 <DQ_Power_Estimation>
  if ((ii<2048) && (State_Control == GRID_INSERTION))
 8001a28:	4946      	ldr	r1, [pc, #280]	; (8001b44 <ExecControl+0x254>)
  Actual_QD_Power =  DQ_Power_Estimation(Inverter_q_d);
 8001a2a:	4a47      	ldr	r2, [pc, #284]	; (8001b48 <ExecControl+0x258>)
  if ((ii<2048) && (State_Control == GRID_INSERTION))
 8001a2c:	880b      	ldrh	r3, [r1, #0]
 8001a2e:	f895 b000 	ldrb.w	fp, [r5]
  Actual_QD_Power =  DQ_Power_Estimation(Inverter_q_d);
 8001a32:	6010      	str	r0, [r2, #0]
  if ((ii<2048) && (State_Control == GRID_INSERTION))
 8001a34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a38:	d203      	bcs.n	8001a42 <ExecControl+0x152>
 8001a3a:	f1bb 0f15 	cmp.w	fp, #21
 8001a3e:	f000 809b 	beq.w	8001b78 <ExecControl+0x288>
  PV_Voltage_prev=PV_Voltage;
 8001a42:	4b42      	ldr	r3, [pc, #264]	; (8001b4c <ExecControl+0x25c>)
 8001a44:	f9b6 4000 	ldrsh.w	r4, [r6]
 8001a48:	801c      	strh	r4, [r3, #0]
  switch (State_Control)
 8001a4a:	f1bb 0f16 	cmp.w	fp, #22
 8001a4e:	d820      	bhi.n	8001a92 <ExecControl+0x1a2>
 8001a50:	e8df f01b 	tbh	[pc, fp, lsl #1]
 8001a54:	0017010a 	.word	0x0017010a
 8001a58:	019e001f 	.word	0x019e001f
 8001a5c:	018f001f 	.word	0x018f001f
 8001a60:	001f001f 	.word	0x001f001f
 8001a64:	001f001f 	.word	0x001f001f
 8001a68:	001f001f 	.word	0x001f001f
 8001a6c:	001f01b0 	.word	0x001f01b0
 8001a70:	001f0120 	.word	0x001f0120
 8001a74:	001f001f 	.word	0x001f001f
 8001a78:	001f013c 	.word	0x001f013c
 8001a7c:	00b0001f 	.word	0x00b0001f
 8001a80:	00f7      	.short	0x00f7
    DCDC_SendCommand(DCDC_ConverterStop);
 8001a82:	2001      	movs	r0, #1
 8001a84:	f000 fb88 	bl	8002198 <DCDC_SendCommand>
  WRITE_REG(GPIOx->BRR, PinMask);
 8001a88:	4a31      	ldr	r2, [pc, #196]	; (8001b50 <ExecControl+0x260>)
 8001a8a:	2110      	movs	r1, #16
    State_Control = STOP;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	6291      	str	r1, [r2, #40]	; 0x28
 8001a90:	702b      	strb	r3, [r5, #0]
} // void
 8001a92:	b002      	add	sp, #8
 8001a94:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
if(State_Control==START && MPPT_EN==FALSE && PLL_par_red_kp==FALSE && PLL_reducing!=TRUE)
 8001a98:	4a22      	ldr	r2, [pc, #136]	; (8001b24 <ExecControl+0x234>)
 8001a9a:	7812      	ldrb	r2, [r2, #0]
 8001a9c:	2a00      	cmp	r2, #0
 8001a9e:	d1ae      	bne.n	80019fe <ExecControl+0x10e>
 8001aa0:	4a2c      	ldr	r2, [pc, #176]	; (8001b54 <ExecControl+0x264>)
 8001aa2:	7811      	ldrb	r1, [r2, #0]
 8001aa4:	2900      	cmp	r1, #0
 8001aa6:	d1aa      	bne.n	80019fe <ExecControl+0x10e>
 8001aa8:	492b      	ldr	r1, [pc, #172]	; (8001b58 <ExecControl+0x268>)
 8001aaa:	7809      	ldrb	r1, [r1, #0]
 8001aac:	2900      	cmp	r1, #0
 8001aae:	d1a6      	bne.n	80019fe <ExecControl+0x10e>
   if(waiting_time<=1000) //2.5 sec
 8001ab0:	4b2a      	ldr	r3, [pc, #168]	; (8001b5c <ExecControl+0x26c>)
 8001ab2:	8818      	ldrh	r0, [r3, #0]
 8001ab4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001ab8:	f200 8282 	bhi.w	8001fc0 <ExecControl+0x6d0>
     waiting_time++;
 8001abc:	3001      	adds	r0, #1
 8001abe:	8018      	strh	r0, [r3, #0]
 8001ac0:	e79d      	b.n	80019fe <ExecControl+0x10e>
      State_Control = STOP_WITH_DELAY;
 8001ac2:	2216      	movs	r2, #22
 8001ac4:	702a      	strb	r2, [r5, #0]
      Diagnostic_Control=PV_VOLTAGE_MIN;
 8001ac6:	4a26      	ldr	r2, [pc, #152]	; (8001b60 <ExecControl+0x270>)
 8001ac8:	210f      	movs	r1, #15
 8001aca:	7011      	strb	r1, [r2, #0]
 8001acc:	e734      	b.n	8001938 <ExecControl+0x48>
  if((Inverter_q_d.qI_Quadrature > 15000) && State_Control==GRID_INSERTION && MPPT_EN==TRUE) //2 A max output peak current
 8001ace:	4a15      	ldr	r2, [pc, #84]	; (8001b24 <ExecControl+0x234>)
 8001ad0:	7812      	ldrb	r2, [r2, #0]
 8001ad2:	2a00      	cmp	r2, #0
 8001ad4:	f43f af4d 	beq.w	8001972 <ExecControl+0x82>
     if(waiting_output_current_limit>=12500)
 8001ad8:	490f      	ldr	r1, [pc, #60]	; (8001b18 <ExecControl+0x228>)
 8001ada:	880a      	ldrh	r2, [r1, #0]
 8001adc:	f243 0cd3 	movw	ip, #12499	; 0x30d3
 8001ae0:	4562      	cmp	r2, ip
 8001ae2:	f240 8229 	bls.w	8001f38 <ExecControl+0x648>
      Fault = OUT_CURRENT_LIMIT;
 8001ae6:	f8df e07c 	ldr.w	lr, [pc, #124]	; 8001b64 <ExecControl+0x274>
      Diagnostic_Control=OUT_CURRENT_LIMIT;
 8001aea:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <ExecControl+0x270>)
      Fault = OUT_CURRENT_LIMIT;
 8001aec:	220d      	movs	r2, #13
 8001aee:	f8ae 2000 	strh.w	r2, [lr]
      Diagnostic_Control=OUT_CURRENT_LIMIT;
 8001af2:	701a      	strb	r2, [r3, #0]
      waiting_output_current_limit=0;
 8001af4:	2200      	movs	r2, #0
 8001af6:	800a      	strh	r2, [r1, #0]
      State_Control = STOP_WITH_DELAY;
 8001af8:	2216      	movs	r2, #22
 8001afa:	702a      	strb	r2, [r5, #0]
      Diagnostic_Control=OUT_CURRENT_LIMIT;
 8001afc:	e741      	b.n	8001982 <ExecControl+0x92>
 8001afe:	bf00      	nop
 8001b00:	2000010c 	.word	0x2000010c
 8001b04:	2000019a 	.word	0x2000019a
 8001b08:	2000019c 	.word	0x2000019c
 8001b0c:	200001ca 	.word	0x200001ca
 8001b10:	2000ce20 	.word	0x2000ce20
 8001b14:	2000017c 	.word	0x2000017c
 8001b18:	2000c1fc 	.word	0x2000c1fc
 8001b1c:	200000c8 	.word	0x200000c8
 8001b20:	20000194 	.word	0x20000194
 8001b24:	20000183 	.word	0x20000183
 8001b28:	2000ce34 	.word	0x2000ce34
 8001b2c:	ffff83e9 	.word	0xffff83e9
 8001b30:	200001a2 	.word	0x200001a2
 8001b34:	200001a0 	.word	0x200001a0
 8001b38:	2000c1e0 	.word	0x2000c1e0
 8001b3c:	2000c1e4 	.word	0x2000c1e4
 8001b40:	2000c1fa 	.word	0x2000c1fa
 8001b44:	2000c1e2 	.word	0x2000c1e2
 8001b48:	20000078 	.word	0x20000078
 8001b4c:	2000019e 	.word	0x2000019e
 8001b50:	48000c00 	.word	0x48000c00
 8001b54:	20000197 	.word	0x20000197
 8001b58:	20000198 	.word	0x20000198
 8001b5c:	2000c1fe 	.word	0x2000c1fe
 8001b60:	20000168 	.word	0x20000168
 8001b64:	20000178 	.word	0x20000178
 8001b68:	20000124 	.word	0x20000124
 8001b6c:	2000008c 	.word	0x2000008c
 8001b70:	2000c1f8 	.word	0x2000c1f8
 8001b74:	2000ce18 	.word	0x2000ce18
 	buffer[3][ii]=Inverter_q_d.qI_Quadrature;
 8001b78:	f8b4 8000 	ldrh.w	r8, [r4]
 	buffer[0][ii]=Actual_QD_Power.P_Active;
 8001b7c:	48b4      	ldr	r0, [pc, #720]	; (8001e50 <ExecControl+0x560>)
 	buffer[5][ii]=Grid_Volt_q_d.qV_Quadrature;
 8001b7e:	f8ba e000 	ldrh.w	lr, [sl]
  PV_Voltage_prev=PV_Voltage;
 8001b82:	f8b6 c000 	ldrh.w	ip, [r6]
 	buffer[5][ii]=Grid_Volt_q_d.qV_Quadrature;
 8001b86:	f503 449f 	add.w	r4, r3, #20352	; 0x4f80
 8001b8a:	347b      	adds	r4, #123	; 0x7b
 	buffer[3][ii]=Inverter_q_d.qI_Quadrature;
 8001b8c:	f503 563f 	add.w	r6, r3, #12224	; 0x2fc0
 	buffer[5][ii]=Grid_Volt_q_d.qV_Quadrature;
 8001b90:	f820 e014 	strh.w	lr, [r0, r4, lsl #1]
  PV_Voltage_prev=PV_Voltage;
 8001b94:	4caf      	ldr	r4, [pc, #700]	; (8001e54 <ExecControl+0x564>)
 	buffer[3][ii]=Inverter_q_d.qI_Quadrature;
 8001b96:	363d      	adds	r6, #61	; 0x3d
  PV_Voltage_prev=PV_Voltage;
 8001b98:	f8a4 c000 	strh.w	ip, [r4]
 	buffer[1][ii]=Actual_QD_Power.Q_Reactive;
 8001b9c:	f603 74ff 	addw	r4, r3, #4095	; 0xfff
 	buffer[3][ii]=Inverter_q_d.qI_Quadrature;
 8001ba0:	f820 8016 	strh.w	r8, [r0, r6, lsl #1]
 	buffer[0][ii]=Actual_QD_Power.P_Active;
 8001ba4:	8816      	ldrh	r6, [r2, #0]
 	buffer[1][ii]=Actual_QD_Power.Q_Reactive;
 8001ba6:	8852      	ldrh	r2, [r2, #2]
 	buffer[0][ii]=Actual_QD_Power.P_Active;
 8001ba8:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 	buffer[1][ii]=Actual_QD_Power.Q_Reactive;
 8001bac:	f820 2014 	strh.w	r2, [r0, r4, lsl #1]
 	ii++;
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	800b      	strh	r3, [r1, #0]
    *ptr_State_Control=State_Control;
 8001bb4:	4ba8      	ldr	r3, [pc, #672]	; (8001e58 <ExecControl+0x568>)
    Wait_MPPT++;
 8001bb6:	4aa9      	ldr	r2, [pc, #676]	; (8001e5c <ExecControl+0x56c>)
    *ptr_State_Control=State_Control;
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2115      	movs	r1, #21
 8001bbc:	8019      	strh	r1, [r3, #0]
    *(ptr_State_Control+1)=State_Control;
 8001bbe:	7828      	ldrb	r0, [r5, #0]
 8001bc0:	b281      	uxth	r1, r0
 8001bc2:	8059      	strh	r1, [r3, #2]
    *(ptr_State_Control+2)=State_Control;
 8001bc4:	8099      	strh	r1, [r3, #4]
    Wait_MPPT++;
 8001bc6:	8813      	ldrh	r3, [r2, #0]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	b29b      	uxth	r3, r3
    if(Wait_MPPT==55000)
 8001bcc:	f24d 61d8 	movw	r1, #55000	; 0xd6d8
 8001bd0:	428b      	cmp	r3, r1
    Wait_MPPT++;
 8001bd2:	8013      	strh	r3, [r2, #0]
    if(Wait_MPPT==55000)
 8001bd4:	d102      	bne.n	8001bdc <ExecControl+0x2ec>
     { MPPT_EN=TRUE; }
 8001bd6:	4ba2      	ldr	r3, [pc, #648]	; (8001e60 <ExecControl+0x570>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	701a      	strb	r2, [r3, #0]
    BusFiltered = (s16)(((s32)(((s32)BusFiltered<<6) - (s32)BusFiltered) +  (s32)(Bus_Voltage))>>6);
 8001bdc:	4aa1      	ldr	r2, [pc, #644]	; (8001e64 <ExecControl+0x574>)
 8001bde:	f9b9 1000 	ldrsh.w	r1, [r9]
 8001be2:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001be6:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 8001bea:	440b      	add	r3, r1
 8001bec:	f343 138f 	sbfx	r3, r3, #6, #16
    if (BusFiltered > 16000) //3804 nowe nastawy 440V
 8001bf0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
    BusFiltered = (s16)(((s32)(((s32)BusFiltered<<6) - (s32)BusFiltered) +  (s32)(Bus_Voltage))>>6);
 8001bf4:	8013      	strh	r3, [r2, #0]
    if (BusFiltered > 16000) //3804 nowe nastawy 440V
 8001bf6:	f340 818d 	ble.w	8001f14 <ExecControl+0x624>
         Fault = BUS_OVERVOLTAGE;
 8001bfa:	499b      	ldr	r1, [pc, #620]	; (8001e68 <ExecControl+0x578>)
         Diagnostic_Control=BUS_OVERVOLTAGE;
 8001bfc:	4a9b      	ldr	r2, [pc, #620]	; (8001e6c <ExecControl+0x57c>)
         Fault = BUS_OVERVOLTAGE;
 8001bfe:	2310      	movs	r3, #16
         State_Control = STOP_WITH_DELAY;
 8001c00:	2016      	movs	r0, #22
         Fault = BUS_OVERVOLTAGE;
 8001c02:	800b      	strh	r3, [r1, #0]
         State_Control = STOP_WITH_DELAY;
 8001c04:	7028      	strb	r0, [r5, #0]
         Diagnostic_Control=BUS_OVERVOLTAGE;
 8001c06:	7013      	strb	r3, [r2, #0]
    CalcAndSetACComponents(State_Control);
 8001c08:	f7ff fd48 	bl	800169c <CalcAndSetACComponents>
	  if(OC_PROT_ON < REL_ON_TICK+7000) //  stabilize relay
 8001c0c:	4a98      	ldr	r2, [pc, #608]	; (8001e70 <ExecControl+0x580>)
 8001c0e:	8813      	ldrh	r3, [r2, #0]
 8001c10:	f641 31b6 	movw	r1, #7094	; 0x1bb6
 8001c14:	428b      	cmp	r3, r1
 8001c16:	d802      	bhi.n	8001c1e <ExecControl+0x32e>
			  OC_PROT_ON++;
 8001c18:	3301      	adds	r3, #1
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	8013      	strh	r3, [r2, #0]
	  if(OC_PROT_ON == REL_ON_TICK+7000)
 8001c1e:	f641 32b7 	movw	r2, #7095	; 0x1bb7
 8001c22:	4293      	cmp	r3, r2
 8001c24:	f47f af35 	bne.w	8001a92 <ExecControl+0x1a2>
			  if (LF_UPDATE == FALSE)
 8001c28:	4b92      	ldr	r3, [pc, #584]	; (8001e74 <ExecControl+0x584>)
				  COMP7 ->CSR |= COMP_CSR_EN;//Glitch test
 8001c2a:	4a93      	ldr	r2, [pc, #588]	; (8001e78 <ExecControl+0x588>)
			  if (LF_UPDATE == FALSE)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f040 81cc 	bne.w	8001fcc <ExecControl+0x6dc>
				  COMP7 ->CSR |= COMP_CSR_EN;//Glitch test
 8001c34:	f8d2 3218 	ldr.w	r3, [r2, #536]	; 0x218
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218
			  if (LF_UPDATE == TRUE)
 8001c40:	e727      	b.n	8001a92 <ExecControl+0x1a2>
   if(WAIT_RELAY_STABLE>=REL_OFF_WAIT)
 8001c42:	4a8e      	ldr	r2, [pc, #568]	; (8001e7c <ExecControl+0x58c>)
 8001c44:	6813      	ldr	r3, [r2, #0]
 8001c46:	2b38      	cmp	r3, #56	; 0x38
 8001c48:	f240 80f4 	bls.w	8001e34 <ExecControl+0x544>
 8001c4c:	488c      	ldr	r0, [pc, #560]	; (8001e80 <ExecControl+0x590>)
      State_Control = BUS_FAULT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	2410      	movs	r4, #16
      WAIT_RELAY_STABLE=0;
 8001c52:	2100      	movs	r1, #0
 8001c54:	6284      	str	r4, [r0, #40]	; 0x28
 8001c56:	469b      	mov	fp, r3
 8001c58:	6011      	str	r1, [r2, #0]
      State_Control = BUS_FAULT;
 8001c5a:	702b      	strb	r3, [r5, #0]
    CalcAndSetACComponents(State_Control);
 8001c5c:	4658      	mov	r0, fp
} // void
 8001c5e:	b002      	add	sp, #8
 8001c60:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    CalcAndSetACComponents(State_Control);
 8001c64:	f7ff bd1a 	b.w	800169c <CalcAndSetACComponents>
      DCAC_SendCommand(DCAC_Stop);
 8001c68:	2001      	movs	r0, #1
 8001c6a:	f000 f9f9 	bl	8002060 <DCAC_SendCommand>
      DS_SendCommand(DS_Stop);
 8001c6e:	2001      	movs	r0, #1
 8001c70:	f001 fd0c 	bl	800368c <DS_SendCommand>
      if(Diagnostic_Control==PV_VOLTAGE_MIN)
 8001c74:	4b7d      	ldr	r3, [pc, #500]	; (8001e6c <ExecControl+0x57c>)
      MPPT_EN=FALSE;
 8001c76:	4a7a      	ldr	r2, [pc, #488]	; (8001e60 <ExecControl+0x570>)
      if(Diagnostic_Control==PV_VOLTAGE_MIN)
 8001c78:	781b      	ldrb	r3, [r3, #0]
      MPPT_EN=FALSE;
 8001c7a:	2100      	movs	r1, #0
      if(Diagnostic_Control==PV_VOLTAGE_MIN)
 8001c7c:	2b0f      	cmp	r3, #15
      MPPT_EN=FALSE;
 8001c7e:	7011      	strb	r1, [r2, #0]
      if(Diagnostic_Control==PV_VOLTAGE_MIN)
 8001c80:	d002      	beq.n	8001c88 <ExecControl+0x398>
      if(Diagnostic_Control==BUS_OVERVOLTAGE)
 8001c82:	2b10      	cmp	r3, #16
 8001c84:	f040 815b 	bne.w	8001f3e <ExecControl+0x64e>
      { State_Control= PV_VOLTAGE_DVDT; }
 8001c88:	702b      	strb	r3, [r5, #0]
} // void
 8001c8a:	b002      	add	sp, #8
 8001c8c:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	    StartControl();
 8001c90:	f7ff bbc2 	b.w	8001418 <StartControl>
     if(Bus_Voltage >= DC_BUS_VOLTAGE_MAX) //Vbus reg value at 400V
 8001c94:	4b7b      	ldr	r3, [pc, #492]	; (8001e84 <ExecControl+0x594>)
 8001c96:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001c9a:	f7fe fd39 	bl	8000710 <__aeabi_i2d>
 8001c9e:	a368      	add	r3, pc, #416	; (adr r3, 8001e40 <ExecControl+0x550>)
 8001ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca4:	f7fe fab8 	bl	8000218 <__aeabi_dmul>
 8001ca8:	f7fe fe24 	bl	80008f4 <__aeabi_d2iz>
 8001cac:	f9b9 3000 	ldrsh.w	r3, [r9]
 8001cb0:	b200      	sxth	r0, r0
 8001cb2:	4298      	cmp	r0, r3
 8001cb4:	f340 8172 	ble.w	8001f9c <ExecControl+0x6ac>
       if(PV_Voltage < PV_Voltage_startup) //18V min input voltage
 8001cb8:	4b73      	ldr	r3, [pc, #460]	; (8001e88 <ExecControl+0x598>)
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	429c      	cmp	r4, r3
 8001cbe:	f280 815b 	bge.w	8001f78 <ExecControl+0x688>
          bus_pre_charge++;
 8001cc2:	4a72      	ldr	r2, [pc, #456]	; (8001e8c <ExecControl+0x59c>)
 8001cc4:	8813      	ldrh	r3, [r2, #0]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	8013      	strh	r3, [r2, #0]
 8001cca:	e7c7      	b.n	8001c5c <ExecControl+0x36c>
     Wait_GRID_Insertion++;
 8001ccc:	4c70      	ldr	r4, [pc, #448]	; (8001e90 <ExecControl+0x5a0>)
     if ((Bus_Voltage >= DC_BUS_VOLTAGE_MAX))
 8001cce:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8001e84 <ExecControl+0x594>
     Wait_GRID_Insertion++;
 8001cd2:	6823      	ldr	r3, [r4, #0]
     if ((Bus_Voltage >= DC_BUS_VOLTAGE_MAX))
 8001cd4:	f9b8 0000 	ldrsh.w	r0, [r8]
     Wait_GRID_Insertion++;
 8001cd8:	3301      	adds	r3, #1
 8001cda:	6023      	str	r3, [r4, #0]
     if ((Bus_Voltage >= DC_BUS_VOLTAGE_MAX))
 8001cdc:	f7fe fd18 	bl	8000710 <__aeabi_i2d>
 8001ce0:	a357      	add	r3, pc, #348	; (adr r3, 8001e40 <ExecControl+0x550>)
 8001ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce6:	4682      	mov	sl, r0
 8001ce8:	468b      	mov	fp, r1
 8001cea:	f7fe fa95 	bl	8000218 <__aeabi_dmul>
 8001cee:	f7fe fe01 	bl	80008f4 <__aeabi_d2iz>
 8001cf2:	f9b9 6000 	ldrsh.w	r6, [r9]
 8001cf6:	b200      	sxth	r0, r0
 8001cf8:	42b0      	cmp	r0, r6
 8001cfa:	f340 8143 	ble.w	8001f84 <ExecControl+0x694>
    if ((Bus_Voltage < DC_BUS_VOLTAGE_MIN))
 8001cfe:	a352      	add	r3, pc, #328	; (adr r3, 8001e48 <ExecControl+0x558>)
 8001d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d04:	4650      	mov	r0, sl
 8001d06:	4659      	mov	r1, fp
 8001d08:	f7fe fa86 	bl	8000218 <__aeabi_dmul>
 8001d0c:	f7fe fdf2 	bl	80008f4 <__aeabi_d2iz>
 8001d10:	b200      	sxth	r0, r0
 8001d12:	42b0      	cmp	r0, r6
 8001d14:	f300 8150 	bgt.w	8001fb8 <ExecControl+0x6c8>
      if ((Wait_GRID_Insertion >= GRID_WAIT) && (State_Control==START) && (Theta_time==((Theta_Grid/4)-REL_ON_TICK) || Theta_time==((Theta_Grid*3/4)-REL_ON_TICK)))
 8001d18:	4b5e      	ldr	r3, [pc, #376]	; (8001e94 <ExecControl+0x5a4>)
 8001d1a:	6822      	ldr	r2, [r4, #0]
 8001d1c:	7828      	ldrb	r0, [r5, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d99d      	bls.n	8001c5e <ExecControl+0x36e>
 8001d22:	2812      	cmp	r0, #18
 8001d24:	d19b      	bne.n	8001c5e <ExecControl+0x36e>
 8001d26:	4b5c      	ldr	r3, [pc, #368]	; (8001e98 <ExecControl+0x5a8>)
 8001d28:	4a5c      	ldr	r2, [pc, #368]	; (8001e9c <ExecControl+0x5ac>)
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	8811      	ldrh	r1, [r2, #0]
 8001d2e:	089a      	lsrs	r2, r3, #2
 8001d30:	3a5f      	subs	r2, #95	; 0x5f
 8001d32:	4291      	cmp	r1, r2
 8001d34:	d005      	beq.n	8001d42 <ExecControl+0x452>
 8001d36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001d3a:	109b      	asrs	r3, r3, #2
 8001d3c:	3b5f      	subs	r3, #95	; 0x5f
 8001d3e:	4299      	cmp	r1, r3
 8001d40:	d18d      	bne.n	8001c5e <ExecControl+0x36e>
        DCDC_SendCommand(DCDC_ConverterStart);
 8001d42:	2000      	movs	r0, #0
 8001d44:	f000 fa28 	bl	8002198 <DCDC_SendCommand>
        COMP7 ->CSR &= ~COMP_CSR_EN;//Glitch test
 8001d48:	494b      	ldr	r1, [pc, #300]	; (8001e78 <ExecControl+0x588>)
        TIM1->AF1 &= ~TIM1_AF1_BKINE; //DISABLE
 8001d4a:	4a55      	ldr	r2, [pc, #340]	; (8001ea0 <ExecControl+0x5b0>)
        COMP7 ->CSR &= ~COMP_CSR_EN;//Glitch test
 8001d4c:	f8d1 3218 	ldr.w	r3, [r1, #536]	; 0x218
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001d50:	484b      	ldr	r0, [pc, #300]	; (8001e80 <ExecControl+0x590>)
 8001d52:	f023 0301 	bic.w	r3, r3, #1
 8001d56:	f8c1 3218 	str.w	r3, [r1, #536]	; 0x218
        TIM1->AF1 &= ~TIM1_AF1_BKINE; //DISABLE
 8001d5a:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001d5c:	f023 0301 	bic.w	r3, r3, #1
 8001d60:	6613      	str	r3, [r2, #96]	; 0x60
 8001d62:	2110      	movs	r1, #16
        State_Control =GRID_INSERTION;
 8001d64:	2315      	movs	r3, #21
        Wait_GRID_Insertion=0;
 8001d66:	2200      	movs	r2, #0
 8001d68:	6181      	str	r1, [r0, #24]
        State_Control =GRID_INSERTION;
 8001d6a:	4618      	mov	r0, r3
        Wait_GRID_Insertion=0;
 8001d6c:	6022      	str	r2, [r4, #0]
        State_Control =GRID_INSERTION;
 8001d6e:	702b      	strb	r3, [r5, #0]
     CalcAndSetACComponents(State_Control);
 8001d70:	e775      	b.n	8001c5e <ExecControl+0x36e>
    if(Freq_Control == FREQ_INSIDE_RANGE && GDVoltage == GRID_VOLTAGE_INSIDE_RANGE)
 8001d72:	4b4c      	ldr	r3, [pc, #304]	; (8001ea4 <ExecControl+0x5b4>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b07      	cmp	r3, #7
 8001d78:	f47f af70 	bne.w	8001c5c <ExecControl+0x36c>
 8001d7c:	4b4a      	ldr	r3, [pc, #296]	; (8001ea8 <ExecControl+0x5b8>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b09      	cmp	r3, #9
 8001d82:	f47f af6b 	bne.w	8001c5c <ExecControl+0x36c>
      State_Control=DIAGNOSTIC_DC_LINE;
 8001d86:	f04f 0b0c 	mov.w	fp, #12
 8001d8a:	f885 b000 	strb.w	fp, [r5]
    CalcAndSetACComponents(State_Control);
 8001d8e:	e765      	b.n	8001c5c <ExecControl+0x36c>
    DCDC_SendCommand(DCDC_ConverterStop);
 8001d90:	2001      	movs	r0, #1
 8001d92:	f000 fa01 	bl	8002198 <DCDC_SendCommand>
    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= (1 << 0);
 8001d96:	4a45      	ldr	r2, [pc, #276]	; (8001eac <ExecControl+0x5bc>)
  WRITE_REG(GPIOx->BRR, PinMask);
 8001d98:	4839      	ldr	r0, [pc, #228]	; (8001e80 <ExecControl+0x590>)
 8001d9a:	f8d2 323c 	ldr.w	r3, [r2, #572]	; 0x23c
 8001d9e:	2410      	movs	r4, #16
 8001da0:	f043 0301 	orr.w	r3, r3, #1
    State_Control = STOPPING;
 8001da4:	2101      	movs	r1, #1
    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= (1 << 0);
 8001da6:	f8c2 323c 	str.w	r3, [r2, #572]	; 0x23c
 8001daa:	6284      	str	r4, [r0, #40]	; 0x28
    State_Control = STOPPING;
 8001dac:	7029      	strb	r1, [r5, #0]
} // void
 8001dae:	b002      	add	sp, #8
 8001db0:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    Wait_BUS_DC_Reading++;
 8001db4:	4a3e      	ldr	r2, [pc, #248]	; (8001eb0 <ExecControl+0x5c0>)
    if (Wait_BUS_DC_Reading >= DC_BUS_WAIT)
 8001db6:	493f      	ldr	r1, [pc, #252]	; (8001eb4 <ExecControl+0x5c4>)
    Wait_BUS_DC_Reading++;
 8001db8:	6813      	ldr	r3, [r2, #0]
 8001dba:	3301      	adds	r3, #1
    if (Wait_BUS_DC_Reading >= DC_BUS_WAIT)
 8001dbc:	428b      	cmp	r3, r1
 8001dbe:	d93a      	bls.n	8001e36 <ExecControl+0x546>
     if(PV_Voltage >= 1300 && PV_Voltage < 4096) //20V min - 50V max
 8001dc0:	f2a4 5414 	subw	r4, r4, #1300	; 0x514
 8001dc4:	b2a4      	uxth	r4, r4
 8001dc6:	f640 23eb 	movw	r3, #2795	; 0xaeb
 8001dca:	429c      	cmp	r4, r3
 8001dcc:	f200 80c7 	bhi.w	8001f5e <ExecControl+0x66e>
		  if(Bus_Voltage < (DataSensingOffSet.DC_BusVoltage)*2) //Wait after shutdown for Bus Voltage down
 8001dd0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8001dd4:	f9b9 1000 	ldrsh.w	r1, [r9]
      Wait_BUS_DC_Reading =0;
 8001dd8:	2000      	movs	r0, #0
 8001dda:	6010      	str	r0, [r2, #0]
		  if(Bus_Voltage < (DataSensingOffSet.DC_BusVoltage)*2) //Wait after shutdown for Bus Voltage down
 8001ddc:	b29b      	uxth	r3, r3
      Wait_GRID_Insertion =0;
 8001dde:	4a2c      	ldr	r2, [pc, #176]	; (8001e90 <ExecControl+0x5a0>)
		  if(Bus_Voltage < (DataSensingOffSet.DC_BusVoltage)*2) //Wait after shutdown for Bus Voltage down
 8001de0:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
      Wait_GRID_Insertion =0;
 8001de4:	6010      	str	r0, [r2, #0]
		  if(Bus_Voltage < (DataSensingOffSet.DC_BusVoltage)*2) //Wait after shutdown for Bus Voltage down
 8001de6:	f6bf af39 	bge.w	8001c5c <ExecControl+0x36c>
			  State_Control=BUSPRECHARGE;
 8001dea:	230e      	movs	r3, #14
 8001dec:	702b      	strb	r3, [r5, #0]
			  DCDC_SendCommand(DCDC_ConverterStart);
 8001dee:	f000 f9d3 	bl	8002198 <DCDC_SendCommand>
	          while(DCDC_GetPhaseShift() < (DCDC_GetPeriod()))
 8001df2:	e008      	b.n	8001e06 <ExecControl+0x516>
	        	  DCDC_SetPhaseShift(DCDC_GetPhaseShift()+1);
 8001df4:	f000 fa28 	bl	8002248 <DCDC_GetPhaseShift>
 8001df8:	3001      	adds	r0, #1
 8001dfa:	f000 fa2b 	bl	8002254 <DCDC_SetPhaseShift>
	        	  delay_cycles(1700);
 8001dfe:	f240 60a4 	movw	r0, #1700	; 0x6a4
 8001e02:	f7fe ff41 	bl	8000c88 <delay_cycles>
	          while(DCDC_GetPhaseShift() < (DCDC_GetPeriod()))
 8001e06:	f000 fa1f 	bl	8002248 <DCDC_GetPhaseShift>
 8001e0a:	4604      	mov	r4, r0
 8001e0c:	f000 fa10 	bl	8002230 <DCDC_GetPeriod>
 8001e10:	4284      	cmp	r4, r0
 8001e12:	d3ef      	bcc.n	8001df4 <ExecControl+0x504>
	          while(DCDC_GetFrequency() > 140000)
 8001e14:	4e28      	ldr	r6, [pc, #160]	; (8001eb8 <ExecControl+0x5c8>)
	          	  ActualFreq_Val=ActualFreq_Val - 1;
 8001e16:	4c29      	ldr	r4, [pc, #164]	; (8001ebc <ExecControl+0x5cc>)
 8001e18:	e007      	b.n	8001e2a <ExecControl+0x53a>
 8001e1a:	6820      	ldr	r0, [r4, #0]
 8001e1c:	3801      	subs	r0, #1
 8001e1e:	6020      	str	r0, [r4, #0]
	          	  DCDC_SetFrequency((u32)ActualFreq_Val);
 8001e20:	f000 fa2e 	bl	8002280 <DCDC_SetFrequency>
	          	  delay_cycles(170);
 8001e24:	20aa      	movs	r0, #170	; 0xaa
 8001e26:	f7fe ff2f 	bl	8000c88 <delay_cycles>
	          while(DCDC_GetFrequency() > 140000)
 8001e2a:	f000 fa07 	bl	800223c <DCDC_GetFrequency>
 8001e2e:	42b0      	cmp	r0, r6
 8001e30:	d8f3      	bhi.n	8001e1a <ExecControl+0x52a>
 8001e32:	e0a4      	b.n	8001f7e <ExecControl+0x68e>
    {  WAIT_RELAY_STABLE++; }
 8001e34:	3301      	adds	r3, #1
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	e710      	b.n	8001c5c <ExecControl+0x36c>
 8001e3a:	bf00      	nop
 8001e3c:	f3af 8000 	nop.w
 8001e40:	851eb852 	.word	0x851eb852
 8001e44:	3ff051eb 	.word	0x3ff051eb
 8001e48:	f5c28f5c 	.word	0xf5c28f5c
 8001e4c:	3fef5c28 	.word	0x3fef5c28
 8001e50:	200001e8 	.word	0x200001e8
 8001e54:	2000019e 	.word	0x2000019e
 8001e58:	2000c1f0 	.word	0x2000c1f0
 8001e5c:	200001e0 	.word	0x200001e0
 8001e60:	20000183 	.word	0x20000183
 8001e64:	20000088 	.word	0x20000088
 8001e68:	20000178 	.word	0x20000178
 8001e6c:	20000168 	.word	0x20000168
 8001e70:	20000192 	.word	0x20000192
 8001e74:	20000182 	.word	0x20000182
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	200001d4 	.word	0x200001d4
 8001e80:	48000c00 	.word	0x48000c00
 8001e84:	2000007c 	.word	0x2000007c
 8001e88:	20000008 	.word	0x20000008
 8001e8c:	2000c1dc 	.word	0x2000c1dc
 8001e90:	200001dc 	.word	0x200001dc
 8001e94:	000249ef 	.word	0x000249ef
 8001e98:	2000ce36 	.word	0x2000ce36
 8001e9c:	2000ce3a 	.word	0x2000ce3a
 8001ea0:	40012c00 	.word	0x40012c00
 8001ea4:	20000024 	.word	0x20000024
 8001ea8:	20000025 	.word	0x20000025
 8001eac:	40016800 	.word	0x40016800
 8001eb0:	200001d8 	.word	0x200001d8
 8001eb4:	0001f413 	.word	0x0001f413
 8001eb8:	000222e0 	.word	0x000222e0
 8001ebc:	20000000 	.word	0x20000000
    if(mppt_req==1 && count_mppt>=150)  //600usec per ciclo di count_mppt con 10000 is 6sec
 8001ec0:	4a46      	ldr	r2, [pc, #280]	; (8001fdc <ExecControl+0x6ec>)
 8001ec2:	7811      	ldrb	r1, [r2, #0]
 8001ec4:	2901      	cmp	r1, #1
 8001ec6:	f47f ad9a 	bne.w	80019fe <ExecControl+0x10e>
 8001eca:	f8df c140 	ldr.w	ip, [pc, #320]	; 800200c <ExecControl+0x71c>
 8001ece:	f8bc 0000 	ldrh.w	r0, [ip]
 8001ed2:	2895      	cmp	r0, #149	; 0x95
 8001ed4:	f67f ad93 	bls.w	80019fe <ExecControl+0x10e>
     PV_Voltage=(s16)PVvoltageFiltered;
 8001ed8:	4841      	ldr	r0, [pc, #260]	; (8001fe0 <ExecControl+0x6f0>)
     MPPT_num++;
 8001eda:	f8df e134 	ldr.w	lr, [pc, #308]	; 8002010 <ExecControl+0x720>
     PV_Voltage=(s16)PVvoltageFiltered;
 8001ede:	8800      	ldrh	r0, [r0, #0]
 8001ee0:	8030      	strh	r0, [r6, #0]
     MPPT_num++;
 8001ee2:	f89e 0000 	ldrb.w	r0, [lr]
     PV_Current=(s16)PVcurrentFiltered;
 8001ee6:	4b3f      	ldr	r3, [pc, #252]	; (8001fe4 <ExecControl+0x6f4>)
     MPPT_num++;
 8001ee8:	3001      	adds	r0, #1
 8001eea:	b2c0      	uxtb	r0, r0
 8001eec:	f88e 0000 	strb.w	r0, [lr]
     PV_Current=(s16)PVcurrentFiltered;
 8001ef0:	f8df e120 	ldr.w	lr, [pc, #288]	; 8002014 <ExecControl+0x724>
 8001ef4:	f8be e000 	ldrh.w	lr, [lr]
 8001ef8:	f8a3 e000 	strh.w	lr, [r3]
     if(MPPT_num==5) Vacprot=TRUE;
 8001efc:	2805      	cmp	r0, #5
     mppt_req=0;
 8001efe:	f04f 0e00 	mov.w	lr, #0
 8001f02:	f882 e000 	strb.w	lr, [r2]
     if(MPPT_num==5) Vacprot=TRUE;
 8001f06:	bf08      	it	eq
 8001f08:	4a37      	ldreq	r2, [pc, #220]	; (8001fe8 <ExecControl+0x6f8>)
     count_mppt=0;
 8001f0a:	f8ac e000 	strh.w	lr, [ip]
     if(MPPT_num==5) Vacprot=TRUE;
 8001f0e:	bf08      	it	eq
 8001f10:	7011      	strbeq	r1, [r2, #0]
 8001f12:	e574      	b.n	80019fe <ExecControl+0x10e>
     if (BusFiltered < 5500 && MPPT_EN==TRUE) //nowe nastawy 340V
 8001f14:	f241 527b 	movw	r2, #5499	; 0x157b
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	f73f ae75 	bgt.w	8001c08 <ExecControl+0x318>
 8001f1e:	4b33      	ldr	r3, [pc, #204]	; (8001fec <ExecControl+0x6fc>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f43f ae70 	beq.w	8001c08 <ExecControl+0x318>
         Fault = BUS_UNDERVOLTAGE;
 8001f28:	4931      	ldr	r1, [pc, #196]	; (8001ff0 <ExecControl+0x700>)
         Diagnostic_Control=BUS_UNDERVOLTAGE;
 8001f2a:	4a32      	ldr	r2, [pc, #200]	; (8001ff4 <ExecControl+0x704>)
         Fault = BUS_UNDERVOLTAGE;
 8001f2c:	2311      	movs	r3, #17
         State_Control = STOP_WITH_DELAY;
 8001f2e:	2016      	movs	r0, #22
         Fault = BUS_UNDERVOLTAGE;
 8001f30:	800b      	strh	r3, [r1, #0]
         State_Control = STOP_WITH_DELAY;
 8001f32:	7028      	strb	r0, [r5, #0]
         Diagnostic_Control=BUS_UNDERVOLTAGE;
 8001f34:	7013      	strb	r3, [r2, #0]
 8001f36:	e667      	b.n	8001c08 <ExecControl+0x318>
      else waiting_output_current_limit=waiting_output_current_limit+3;
 8001f38:	3203      	adds	r2, #3
 8001f3a:	800a      	strh	r2, [r1, #0]
 8001f3c:	e521      	b.n	8001982 <ExecControl+0x92>
      if(Diagnostic_Control==BUS_UNDERVOLTAGE)
 8001f3e:	2b11      	cmp	r3, #17
 8001f40:	f43f aea2 	beq.w	8001c88 <ExecControl+0x398>
      if(Diagnostic_Control==GRID_VOLTAGE_OUT_OF_RANGE)
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	f43f ae9f 	beq.w	8001c88 <ExecControl+0x398>
      if(Diagnostic_Control==FREQ_OUT_OF_RANGE)
 8001f4a:	2b06      	cmp	r3, #6
 8001f4c:	f43f ae9c 	beq.w	8001c88 <ExecControl+0x398>
      if(Diagnostic_Control==OUT_CURRENT_LIMIT)
 8001f50:	2b0d      	cmp	r3, #13
 8001f52:	f43f ae99 	beq.w	8001c88 <ExecControl+0x398>
      if(Diagnostic_Control==PV_VOLTAGE_DVDT)
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	f43f ae96 	beq.w	8001c88 <ExecControl+0x398>
 8001f5c:	e695      	b.n	8001c8a <ExecControl+0x39a>
        Wait_BUS_DC_Reading =0;
 8001f5e:	2000      	movs	r0, #0
        Freq_Control= FREQ_OUT_OF_RANGE;
 8001f60:	4925      	ldr	r1, [pc, #148]	; (8001ff8 <ExecControl+0x708>)
        GDVoltage = GRID_VOLTAGE_OUT_OF_RANGE;
 8001f62:	4b26      	ldr	r3, [pc, #152]	; (8001ffc <ExecControl+0x70c>)
        Wait_BUS_DC_Reading =0;
 8001f64:	6010      	str	r0, [r2, #0]
        State_Control=DIAGNOSTIC_AC_LINE;
 8001f66:	f04f 0b05 	mov.w	fp, #5
        Freq_Control= FREQ_OUT_OF_RANGE;
 8001f6a:	2006      	movs	r0, #6
        GDVoltage = GRID_VOLTAGE_OUT_OF_RANGE;
 8001f6c:	2208      	movs	r2, #8
        Freq_Control= FREQ_OUT_OF_RANGE;
 8001f6e:	7008      	strb	r0, [r1, #0]
        GDVoltage = GRID_VOLTAGE_OUT_OF_RANGE;
 8001f70:	701a      	strb	r2, [r3, #0]
        State_Control=DIAGNOSTIC_AC_LINE;
 8001f72:	f885 b000 	strb.w	fp, [r5]
    CalcAndSetACComponents(State_Control);
 8001f76:	e671      	b.n	8001c5c <ExecControl+0x36c>
          DCDC_SendCommand(DCDC_ConverterStart);
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f000 f90d 	bl	8002198 <DCDC_SendCommand>
    CalcAndSetACComponents(State_Control);
 8001f7e:	f895 b000 	ldrb.w	fp, [r5]
 8001f82:	e66b      	b.n	8001c5c <ExecControl+0x36c>
        DCDC_SendCommand(DCDC_ConverterStop);
 8001f84:	2001      	movs	r0, #1
 8001f86:	f000 f907 	bl	8002198 <DCDC_SendCommand>
    if ((Bus_Voltage < DC_BUS_VOLTAGE_MIN))
 8001f8a:	f9b8 0000 	ldrsh.w	r0, [r8]
 8001f8e:	f7fe fbbf 	bl	8000710 <__aeabi_i2d>
 8001f92:	f9b9 6000 	ldrsh.w	r6, [r9]
 8001f96:	4682      	mov	sl, r0
 8001f98:	468b      	mov	fp, r1
 8001f9a:	e6b0      	b.n	8001cfe <ExecControl+0x40e>
        DCDC_SendCommand(DCDC_ConverterStop);
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	f000 f8fb 	bl	8002198 <DCDC_SendCommand>
        bus_pre_charge=0;
 8001fa2:	4917      	ldr	r1, [pc, #92]	; (8002000 <ExecControl+0x710>)
        PRECHARGE_OK = TRUE;
 8001fa4:	4b17      	ldr	r3, [pc, #92]	; (8002004 <ExecControl+0x714>)
        State_Control =START;
 8001fa6:	f04f 0b12 	mov.w	fp, #18
        bus_pre_charge=0;
 8001faa:	2000      	movs	r0, #0
        PRECHARGE_OK = TRUE;
 8001fac:	2201      	movs	r2, #1
        bus_pre_charge=0;
 8001fae:	8008      	strh	r0, [r1, #0]
        PRECHARGE_OK = TRUE;
 8001fb0:	701a      	strb	r2, [r3, #0]
        State_Control =START;
 8001fb2:	f885 b000 	strb.w	fp, [r5]
 8001fb6:	e651      	b.n	8001c5c <ExecControl+0x36c>
        DCDC_SendCommand(DCDC_ConverterStart);
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f000 f8ed 	bl	8002198 <DCDC_SendCommand>
 8001fbe:	e6ab      	b.n	8001d18 <ExecControl+0x428>
     PLL_par_red_ki=TRUE;
 8001fc0:	4811      	ldr	r0, [pc, #68]	; (8002008 <ExecControl+0x718>)
     waiting_time=0;
 8001fc2:	8019      	strh	r1, [r3, #0]
     PLL_par_red_kp=TRUE;
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	7011      	strb	r1, [r2, #0]
     PLL_par_red_ki=TRUE;
 8001fc8:	7001      	strb	r1, [r0, #0]
     waiting_time=0;
 8001fca:	e518      	b.n	80019fe <ExecControl+0x10e>
				  COMP7 ->CSR &= ~COMP_CSR_EN;//Glitch test
 8001fcc:	f8d2 3218 	ldr.w	r3, [r2, #536]	; 0x218
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218
 8001fd8:	e55b      	b.n	8001a92 <ExecControl+0x1a2>
 8001fda:	bf00      	nop
 8001fdc:	2000c1e4 	.word	0x2000c1e4
 8001fe0:	200001a2 	.word	0x200001a2
 8001fe4:	2000019a 	.word	0x2000019a
 8001fe8:	200001d0 	.word	0x200001d0
 8001fec:	20000183 	.word	0x20000183
 8001ff0:	20000178 	.word	0x20000178
 8001ff4:	20000168 	.word	0x20000168
 8001ff8:	20000024 	.word	0x20000024
 8001ffc:	20000025 	.word	0x20000025
 8002000:	2000c1dc 	.word	0x2000c1dc
 8002004:	20000199 	.word	0x20000199
 8002008:	20000196 	.word	0x20000196
 800200c:	2000c1e0 	.word	0x2000c1e0
 8002010:	20000190 	.word	0x20000190
 8002014:	200001a0 	.word	0x200001a0

08002018 <DCAC_Init>:
{
    DCAC_Error_t nRet;

    nRet = DCAC_ERROR_INVALID_PARAMETER;

    if (pDCACInit)
 8002018:	b1e0      	cbz	r0, 8002054 <DCAC_Init+0x3c>
    {
        nRet = DCAC_ERROR_ON_INIT;
        if (LocalDevice.State != DCAC_Running)
 800201a:	4a0f      	ldr	r2, [pc, #60]	; (8002058 <DCAC_Init+0x40>)
 800201c:	7a13      	ldrb	r3, [r2, #8]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d016      	beq.n	8002050 <DCAC_Init+0x38>
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
//  TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
  TIM_OC3Init(TIM8, &TIM_OCInitStructure);
*/

	  TIM20->CCER |= TIM_CCER_CC2E; ////ENABLE CHANNEL 2
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <DCAC_Init+0x44>)
            LocalDevice.Init.Counter  = pDCACInit->Counter;
 8002024:	6801      	ldr	r1, [r0, #0]
{
 8002026:	b410      	push	{r4}
            LocalDevice.Init.Counter  = pDCACInit->Counter;
 8002028:	6011      	str	r1, [r2, #0]
	  TIM20->CCER |= TIM_CCER_CC2E; ////ENABLE CHANNEL 2
 800202a:	6a19      	ldr	r1, [r3, #32]
            LocalDevice.Init.DeadTime = pDCACInit->DeadTime;
 800202c:	6844      	ldr	r4, [r0, #4]
	  TIM20->CCER |= TIM_CCER_CC2E; ////ENABLE CHANNEL 2
 800202e:	f041 0110 	orr.w	r1, r1, #16
 8002032:	6219      	str	r1, [r3, #32]
	  TIM20->CCER |= TIM_CCER_CC2NE; ////ENABLE CHANNEL 2N
 8002034:	6a19      	ldr	r1, [r3, #32]
 8002036:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800203a:	6219      	str	r1, [r3, #32]
	  TIM20->CR1  |= (TIM_CR1_ARPE | TIM_CR1_CEN); // ENABLE AUTORELOAD PRELOAD AND TIMER COUNTER
 800203c:	6819      	ldr	r1, [r3, #0]
            LocalDevice.Init.DeadTime = pDCACInit->DeadTime;
 800203e:	6054      	str	r4, [r2, #4]
            LocalDevice.State = DCAC_Stopped;
 8002040:	2000      	movs	r0, #0
 8002042:	7210      	strb	r0, [r2, #8]
	  TIM20->CR1  |= (TIM_CR1_ARPE | TIM_CR1_CEN); // ENABLE AUTORELOAD PRELOAD AND TIMER COUNTER
 8002044:	f041 0181 	orr.w	r1, r1, #129	; 0x81
}
 8002048:	f85d 4b04 	ldr.w	r4, [sp], #4
	  TIM20->CR1  |= (TIM_CR1_ARPE | TIM_CR1_CEN); // ENABLE AUTORELOAD PRELOAD AND TIMER COUNTER
 800204c:	6019      	str	r1, [r3, #0]
}
 800204e:	4770      	bx	lr
        nRet = DCAC_ERROR_ON_INIT;
 8002050:	2002      	movs	r0, #2
}
 8002052:	4770      	bx	lr
    nRet = DCAC_ERROR_INVALID_PARAMETER;
 8002054:	2001      	movs	r0, #1
 8002056:	4770      	bx	lr
 8002058:	2000c200 	.word	0x2000c200
 800205c:	40015000 	.word	0x40015000

08002060 <DCAC_SendCommand>:
    if (cmd == DCAC_Start)
 8002060:	bb08      	cbnz	r0, 80020a6 <DCAC_SendCommand+0x46>
    return LocalDevice.State;
 8002062:	4923      	ldr	r1, [pc, #140]	; (80020f0 <DCAC_SendCommand+0x90>)
       if (DCAC_GetStatus() != DCAC_Running)
 8002064:	7a0b      	ldrb	r3, [r1, #8]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d040      	beq.n	80020ec <DCAC_SendCommand+0x8c>
           HRTIM1_COMMON->OENR |=HRTIM_OENR_TD2OEN; //TIMD OUTPUT 2 ENABLE
 800206a:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <DCAC_SendCommand+0x94>)
 800206c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
           LocalDevice.State = DCAC_Running;
 8002070:	f04f 0c01 	mov.w	ip, #1
           HRTIM1_COMMON->OENR |=HRTIM_OENR_TD2OEN; //TIMD OUTPUT 2 ENABLE
 8002074:	f042 0280 	orr.w	r2, r2, #128	; 0x80
           LocalDevice.State = DCAC_Running;
 8002078:	f881 c008 	strb.w	ip, [r1, #8]
           HRTIM1_COMMON->OENR |=HRTIM_OENR_TD2OEN; //TIMD OUTPUT 2 ENABLE
 800207c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
           HRTIM1_COMMON->OENR |=HRTIM_OENR_TD1OEN; //TIMD OUTPUT 1 ENABLE
 8002080:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002084:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002088:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
           HRTIM1_COMMON->OENR |=HRTIM_OENR_TF2OEN; //TIMF OUTPUT 2 ENABLE
 800208c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002090:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002094:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
           HRTIM1_COMMON->OENR |=HRTIM_OENR_TF1OEN; //TIMF OUTPUT 1 ENABLE
 8002098:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800209c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
          nRet = DCAC_ERROR_NONE;
 80020a4:	4770      	bx	lr
    if (cmd == DCAC_Stop)
 80020a6:	2801      	cmp	r0, #1
 80020a8:	d001      	beq.n	80020ae <DCAC_SendCommand+0x4e>
    nRet = DCAC_ERROR_INVALID_COMMAND;
 80020aa:	2003      	movs	r0, #3
 80020ac:	4770      	bx	lr
    return LocalDevice.State;
 80020ae:	4a10      	ldr	r2, [pc, #64]	; (80020f0 <DCAC_SendCommand+0x90>)
       if (DCAC_GetStatus() != DCAC_Stopped)
 80020b0:	7a13      	ldrb	r3, [r2, #8]
 80020b2:	b1db      	cbz	r3, 80020ec <DCAC_SendCommand+0x8c>
           HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TD1ODIS; //TIMD OUTPUT 1 DISABLE
 80020b4:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <DCAC_SendCommand+0x94>)
 80020b6:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
           LocalDevice.State = DCAC_Stopped;
 80020ba:	2000      	movs	r0, #0
           HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TD1ODIS; //TIMD OUTPUT 1 DISABLE
 80020bc:	f041 0140 	orr.w	r1, r1, #64	; 0x40
           LocalDevice.State = DCAC_Stopped;
 80020c0:	7210      	strb	r0, [r2, #8]
           HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TD1ODIS; //TIMD OUTPUT 1 DISABLE
 80020c2:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
           HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TD2ODIS; //TIMD OUTPUT 2 DISABLE
 80020c6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80020ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020ce:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
           HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TF1ODIS; //TIMF OUTPUT 1 DISABLE
 80020d2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80020d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020da:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
           HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TF2ODIS; //TIMF OUTPUT 2 DISABLE
 80020de:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80020e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020e6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
          nRet = DCAC_ERROR_NONE;
 80020ea:	4770      	bx	lr
       nRet = DCAC_ERROR_ON_SEND_COMMAND;
 80020ec:	2004      	movs	r0, #4
}
 80020ee:	4770      	bx	lr
 80020f0:	2000c200 	.word	0x2000c200
 80020f4:	40016b00 	.word	0x40016b00

080020f8 <DCAC_SetPulse>:
      if(PulseChannel1>=DCAC_MAX_PULSE) PulseChannel1=DCAC_MAX_PULSE; //-110
 80020f8:	4b17      	ldr	r3, [pc, #92]	; (8002158 <DCAC_SetPulse+0x60>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f246 72be 	movw	r2, #26558	; 0x67be
 8002100:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
 8002104:	4290      	cmp	r0, r2
{
 8002106:	b410      	push	{r4}
       if(iii <= 1000)
 8002108:	4c14      	ldr	r4, [pc, #80]	; (800215c <DCAC_SetPulse+0x64>)
      if(PulseChannel1>=DCAC_MAX_PULSE) PulseChannel1=DCAC_MAX_PULSE; //-110
 800210a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800210e:	bf28      	it	cs
 8002110:	4610      	movcs	r0, r2
      if(PulseChannel2>=DCAC_MAX_PULSE) PulseChannel2=DCAC_MAX_PULSE; //-110
 8002112:	4291      	cmp	r1, r2
 8002114:	bf28      	it	cs
 8002116:	4611      	movcs	r1, r2
      if(PulseChannel1<=DCAC_MIN_PULSE) PulseChannel1=DCAC_MIN_PULSE;
 8002118:	4298      	cmp	r0, r3
       if(iii <= 1000)
 800211a:	8822      	ldrh	r2, [r4, #0]
 800211c:	bf38      	it	cc
 800211e:	4618      	movcc	r0, r3
      if(PulseChannel2<=DCAC_MIN_PULSE) PulseChannel2=DCAC_MIN_PULSE;
 8002120:	428b      	cmp	r3, r1
 8002122:	bf38      	it	cc
 8002124:	460b      	movcc	r3, r1
       if(iii <= 1000)
 8002126:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800212a:	d804      	bhi.n	8002136 <DCAC_SetPulse+0x3e>
    	   Pulse_Buffer[iii] = PulseChannel1;
 800212c:	490c      	ldr	r1, [pc, #48]	; (8002160 <DCAC_SetPulse+0x68>)
 800212e:	f821 0012 	strh.w	r0, [r1, r2, lsl #1]
    	   iii++;
 8002132:	3201      	adds	r2, #1
 8002134:	8022      	strh	r2, [r4, #0]
      HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP1xR = (uint32_t)(PulseChannel1+250); //FROM CMP4
 8002136:	490b      	ldr	r1, [pc, #44]	; (8002164 <DCAC_SetPulse+0x6c>)
}
 8002138:	f85d 4b04 	ldr.w	r4, [sp], #4
      HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP1xR = (uint32_t)(PulseChannel1+250); //FROM CMP4
 800213c:	f100 02fa 	add.w	r2, r0, #250	; 0xfa
      HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP3xR = (uint32_t)(PulseChannel2-250); //FROM CMP4
 8002140:	3bfa      	subs	r3, #250	; 0xfa
      HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP1xR = (uint32_t)(PulseChannel1+250); //FROM CMP4
 8002142:	f8c1 231c 	str.w	r2, [r1, #796]	; 0x31c
}
 8002146:	2000      	movs	r0, #0
      HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR = (uint32_t)(PulseChannel1+250); //FROM CMP4
 8002148:	f8c1 221c 	str.w	r2, [r1, #540]	; 0x21c
      HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP3xR = (uint32_t)(PulseChannel2-250); //FROM CMP4
 800214c:	f8c1 3328 	str.w	r3, [r1, #808]	; 0x328
      HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP3xR = (uint32_t)(PulseChannel2-250); //FROM CMP4
 8002150:	f8c1 3228 	str.w	r3, [r1, #552]	; 0x228
}
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	2000c200 	.word	0x2000c200
 800215c:	2000c9dc 	.word	0x2000c9dc
 8002160:	2000c20c 	.word	0x2000c20c
 8002164:	40016800 	.word	0x40016800

08002168 <DCAC_GetStatus>:
    return LocalDevice.State;
 8002168:	4b01      	ldr	r3, [pc, #4]	; (8002170 <DCAC_GetStatus+0x8>)
}
 800216a:	7a18      	ldrb	r0, [r3, #8]
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	2000c200 	.word	0x2000c200

08002174 <HRTIM_TIMD_DMA_START>:
* Return         :
*******************************************************************************/
void HRTIM_TIMD_DMA_START()
{
	//HAL_HRTIM_SimplePWMStart_DMA(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, (uint32_t)&TIMD_DMA_Buffer[0], (uint32_t)&(HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].PERxR), 1);
	HAL_HRTIM_WaveformCountStart_DMA(&hhrtim1, HRTIM_TIMERID_TIMER_D);
 8002174:	4802      	ldr	r0, [pc, #8]	; (8002180 <HRTIM_TIMD_DMA_START+0xc>)
 8002176:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800217a:	f005 bc19 	b.w	80079b0 <HAL_HRTIM_WaveformCountStart_DMA>
 800217e:	bf00      	nop
 8002180:	2001112c 	.word	0x2001112c

08002184 <HRTIM_TIMD_DMA_STOP>:
}

void HRTIM_TIMD_DMA_STOP()
{
	//HAL_HRTIM_SimplePWMStop(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1);
}
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop

08002188 <HRTIM_TIMF_DMA_START>:

void HRTIM_TIMF_DMA_START()
{
	//HAL_HRTIM_SimplePWMStart_DMA(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF1, (uint32_t)&TIMF_DMA_Buffer[0], (uint32_t)&(HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR), 1);
	HAL_HRTIM_WaveformCountStart_DMA(&hhrtim1, HRTIM_TIMERID_TIMER_F);
 8002188:	4802      	ldr	r0, [pc, #8]	; (8002194 <HRTIM_TIMF_DMA_START+0xc>)
 800218a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800218e:	f005 bc0f 	b.w	80079b0 <HAL_HRTIM_WaveformCountStart_DMA>
 8002192:	bf00      	nop
 8002194:	2001112c 	.word	0x2001112c

08002198 <DCDC_SendCommand>:
{
    DCDC_Error_t nRet;

    nRet = DCDC_ERROR_INVALID_COMMAND;

    if (cmd == DCDC_ConverterStart)
 8002198:	b9a8      	cbnz	r0, 80021c6 <DCDC_SendCommand+0x2e>
* Input          : NONE
* Return         : Actual State of the device
*******************************************************************************/
DCDC_Status_t DCDC_GetStatus()
{
    return LocalDevice.State;
 800219a:	4a22      	ldr	r2, [pc, #136]	; (8002224 <DCDC_SendCommand+0x8c>)
       if (DCDC_GetStatus() != DCDC_Running || (HRTIM1_COMMON->ODSR & HRTIM_ODSR_TA1ODS) || (HRTIM1_COMMON->ODSR & HRTIM_ODSR_TB1ODS))
 800219c:	7d13      	ldrb	r3, [r2, #20]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d01a      	beq.n	80021d8 <DCDC_SendCommand+0x40>
       	  uint32_t isrflags = HRTIM1->sCommonRegs.ISR;
 80021a2:	4b21      	ldr	r3, [pc, #132]	; (8002228 <DCDC_SendCommand+0x90>)
 80021a4:	f8d3 0388 	ldr.w	r0, [r3, #904]	; 0x388
           LocalDevice.State = DCDC_Running;
 80021a8:	2101      	movs	r1, #1
 80021aa:	7511      	strb	r1, [r2, #20]
       	  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 80021ac:	f010 0008 	ands.w	r0, r0, #8
       	  uint32_t ierits   = HRTIM1->sCommonRegs.IER;
 80021b0:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
       	  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 80021b4:	d00d      	beq.n	80021d2 <DCDC_SendCommand+0x3a>
       	    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 80021b6:	f012 0008 	ands.w	r0, r2, #8
 80021ba:	d00a      	beq.n	80021d2 <DCDC_SendCommand+0x3a>
       	    	HRTIM1->sCommonRegs.ICR = HRTIM_ICR_FLT4C;
 80021bc:	2208      	movs	r2, #8
 80021be:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c
            nRet = DCDC_ERROR_NONE;
 80021c2:	2000      	movs	r0, #0
 80021c4:	4770      	bx	lr
    if (cmd == DCDC_ConverterStop)
 80021c6:	2801      	cmp	r0, #1
 80021c8:	d104      	bne.n	80021d4 <DCDC_SendCommand+0x3c>
    return LocalDevice.State;
 80021ca:	4a16      	ldr	r2, [pc, #88]	; (8002224 <DCDC_SendCommand+0x8c>)
       if (DCDC_GetStatus() != DCDC_Stopped)
 80021cc:	7d13      	ldrb	r3, [r2, #20]
 80021ce:	b96b      	cbnz	r3, 80021ec <DCDC_SendCommand+0x54>
       nRet = DCDC_ERROR_ON_SEND_COMMAND;
 80021d0:	2004      	movs	r0, #4
}
 80021d2:	4770      	bx	lr
    nRet = DCDC_ERROR_INVALID_COMMAND;
 80021d4:	2003      	movs	r0, #3
 80021d6:	4770      	bx	lr
       if (DCDC_GetStatus() != DCDC_Running || (HRTIM1_COMMON->ODSR & HRTIM_ODSR_TA1ODS) || (HRTIM1_COMMON->ODSR & HRTIM_ODSR_TB1ODS))
 80021d8:	4b14      	ldr	r3, [pc, #80]	; (800222c <DCDC_SendCommand+0x94>)
 80021da:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80021de:	07c9      	lsls	r1, r1, #31
 80021e0:	d4df      	bmi.n	80021a2 <DCDC_SendCommand+0xa>
 80021e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021e6:	075b      	lsls	r3, r3, #29
 80021e8:	d5f2      	bpl.n	80021d0 <DCDC_SendCommand+0x38>
 80021ea:	e7da      	b.n	80021a2 <DCDC_SendCommand+0xa>
         HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TA1ODIS; //TIMA OUTPUT 1 DISABLE
 80021ec:	4b0f      	ldr	r3, [pc, #60]	; (800222c <DCDC_SendCommand+0x94>)
 80021ee:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
         LocalDevice.State = DCDC_Stopped;
 80021f2:	2000      	movs	r0, #0
         HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TA1ODIS; //TIMA OUTPUT 1 DISABLE
 80021f4:	f041 0101 	orr.w	r1, r1, #1
         LocalDevice.State = DCDC_Stopped;
 80021f8:	7510      	strb	r0, [r2, #20]
         HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TA1ODIS; //TIMA OUTPUT 1 DISABLE
 80021fa:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
         HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TA2ODIS; //TIMA OUTPUT 2 DISABLE
 80021fe:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002202:	f042 0202 	orr.w	r2, r2, #2
 8002206:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
         HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TB1ODIS; //TIMB OUTPUT 1 DISABLE
 800220a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800220e:	f042 0204 	orr.w	r2, r2, #4
 8002212:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
         HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TB2ODIS; //TIMB OUTPUT 2 DISABLE
 8002216:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800221a:	f042 0208 	orr.w	r2, r2, #8
 800221e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
          nRet = DCDC_ERROR_NONE;
 8002222:	4770      	bx	lr
 8002224:	2000c9e0 	.word	0x2000c9e0
 8002228:	40016800 	.word	0x40016800
 800222c:	40016b00 	.word	0x40016b00

08002230 <DCDC_GetPeriod>:
* Input          : NONE
* Return         : the period
*******************************************************************************/
u32 DCDC_GetPeriod()
{
    return LocalDevice.Init.Counter;
 8002230:	4b01      	ldr	r3, [pc, #4]	; (8002238 <DCDC_GetPeriod+0x8>)
}
 8002232:	6818      	ldr	r0, [r3, #0]
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	2000c9e0 	.word	0x2000c9e0

0800223c <DCDC_GetFrequency>:
* Input          : NONE
* Return         : Actual Frequency
*******************************************************************************/
u32 DCDC_GetFrequency()
{
    return LocalDevice.Init.frequency;
 800223c:	4b01      	ldr	r3, [pc, #4]	; (8002244 <DCDC_GetFrequency+0x8>)
}
 800223e:	6918      	ldr	r0, [r3, #16]
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	2000c9e0 	.word	0x2000c9e0

08002248 <DCDC_GetPhaseShift>:
* Input          : NONE
* Return         : Actual Frequency
*******************************************************************************/
u32 DCDC_GetPhaseShift()
{
    return LocalDevice.Init.PhaseShift;
 8002248:	4b01      	ldr	r3, [pc, #4]	; (8002250 <DCDC_GetPhaseShift+0x8>)
}
 800224a:	6858      	ldr	r0, [r3, #4]
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	2000c9e0 	.word	0x2000c9e0

08002254 <DCDC_SetPhaseShift>:
* Input          : dwPhaseShift the new phase shift
* Return         : Error on function 0 no error.
*******************************************************************************/
DCDC_Error_t DCDC_SetPhaseShift(u32 dwPhaseShift)
{
	u32 MAX_PHASE_SHIFT = (LocalDevice.Init.Counter)/2; // 180 DEG
 8002254:	4907      	ldr	r1, [pc, #28]	; (8002274 <DCDC_SetPhaseShift+0x20>)
 8002256:	680a      	ldr	r2, [r1, #0]
 8002258:	0853      	lsrs	r3, r2, #1
	u32 MIN_PHASE_SHIFT = (LocalDevice.Init.Counter);  // 0 DEG

    DCDC_Error_t nRet;
    nRet = DCDC_ERROR_ON_SET_PHASESHIFT;
    if (dwPhaseShift >= (MAX_PHASE_SHIFT-1) && dwPhaseShift <= MIN_PHASE_SHIFT)
 800225a:	3b01      	subs	r3, #1
 800225c:	4283      	cmp	r3, r0
 800225e:	d806      	bhi.n	800226e <DCDC_SetPhaseShift+0x1a>
 8002260:	4282      	cmp	r2, r0
 8002262:	d304      	bcc.n	800226e <DCDC_SetPhaseShift+0x1a>
        LocalDevice.Init.PhaseShift = dwPhaseShift;
        //TIM_SetCompare1(TIM1, TIM2_MAX_PULSE + TIM2_DEAD_TIME + LocalDevice.Init.PhaseShift);

        //LL_HRTIM_TIM_SetCompare1(HRTIM1, LL_HRTIM_TIMER_MASTER, (uint32_t)(LocalDevice.Init.PhaseShift));

        HRTIM1->sMasterRegs.MCMP1R = (uint32_t)(LocalDevice.Init.PhaseShift);
 8002264:	4b04      	ldr	r3, [pc, #16]	; (8002278 <DCDC_SetPhaseShift+0x24>)
        LocalDevice.Init.PhaseShift = dwPhaseShift;
 8002266:	6048      	str	r0, [r1, #4]
        HRTIM1->sMasterRegs.MCMP1R = (uint32_t)(LocalDevice.Init.PhaseShift);
 8002268:	61d8      	str	r0, [r3, #28]
        nRet = DCDC_ERROR_NONE;
 800226a:	2000      	movs	r0, #0
 800226c:	4770      	bx	lr
    nRet = DCDC_ERROR_ON_SET_PHASESHIFT;
 800226e:	2008      	movs	r0, #8
    }
    return nRet;
}
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	2000c9e0 	.word	0x2000c9e0
 8002278:	40016800 	.word	0x40016800
 800227c:	00000000 	.word	0x00000000

08002280 <DCDC_SetFrequency>:
* Description    : Set the Frequency for the LLC DCDC converter
* Input          : MPPT new Frequency
* Return         : Error on function 0 no error.
*******************************************************************************/
DCDC_Error_t DCDC_SetFrequency(u32 LLC_frequency)
{
 8002280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return LocalDevice.Init.PhaseShift;
 8002284:	f8df a2a0 	ldr.w	sl, [pc, #672]	; 8002528 <DCDC_SetFrequency+0x2a8>
    DCDC_Error_t nRet;
    DCDC_TypeDef_t InitStructure;
    nRet = DCDC_ERROR_ON_SET_FREQUENCY;
    frequencyinc = LLC_frequency;
 8002288:	4a9b      	ldr	r2, [pc, #620]	; (80024f8 <DCDC_SetFrequency+0x278>)

   u32 Phase_Period_Ratio = (DCDC_GetPhaseShift() * 0xFFFF) / DCDC_GetPeriod();
 800228a:	e9da 3400 	ldrd	r3, r4, [sl]
 800228e:	ebc4 4404 	rsb	r4, r4, r4, lsl #16
 8002292:	fbb4 f4f3 	udiv	r4, r4, r3

   if((frequencyinc) <= MIN_FREQ)
 8002296:	4b99      	ldr	r3, [pc, #612]	; (80024fc <DCDC_SetFrequency+0x27c>)
 8002298:	4298      	cmp	r0, r3
{
 800229a:	ed2d 8b02 	vpush	{d8}
    frequencyinc = LLC_frequency;
 800229e:	6010      	str	r0, [r2, #0]
   if((frequencyinc) <= MIN_FREQ)
 80022a0:	f240 80d7 	bls.w	8002452 <DCDC_SetFrequency+0x1d2>
                                 + HRTIM_CR2_TBSWU;

        nRet = DCDC_ERROR_NONE;

    }
  else if((frequencyinc) >= MAX_FREQ)
 80022a4:	4b96      	ldr	r3, [pc, #600]	; (8002500 <DCDC_SetFrequency+0x280>)
 80022a6:	4298      	cmp	r0, r3
 80022a8:	4605      	mov	r5, r0
 80022aa:	d940      	bls.n	800232e <DCDC_SetFrequency+0xae>
    {
	    NEW_DCDC_PERIOD = ((uint16_t)(((uint64_t)HRTIM_INPUT_CLOCK * HRTIMER_LLC_PRESCALER) / MAX_FREQ));
 80022ac:	4a95      	ldr	r2, [pc, #596]	; (8002504 <DCDC_SetFrequency+0x284>)
		//LL_TIM_OC_SetCompareCH3(TIM8, (NEW_isoDCDC_PERDIOD)*0.5);

	    HRTIM1->sMasterRegs.MPER = (uint32_t)(NEW_DCDC_PERIOD);
	    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].PERxR = (uint32_t)(NEW_DCDC_PERIOD);
	    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].PERxR = (uint32_t)(NEW_DCDC_PERIOD);
	    TIM8->ARR = (uint32_t)NEW_isoDCDC_PERDIOD;
 80022ae:	4896      	ldr	r0, [pc, #600]	; (8002508 <DCDC_SetFrequency+0x288>)
	    NEW_isoDCDC_PERDIOD = ((uint16_t)((uint64_t)TIM8_INPUT_CLOCK / (MAX_FREQ)));
 80022b0:	4e96      	ldr	r6, [pc, #600]	; (800250c <DCDC_SetFrequency+0x28c>)
	    NEW_DCDC_PERIOD = ((uint16_t)(((uint64_t)HRTIM_INPUT_CLOCK * HRTIMER_LLC_PRESCALER) / MAX_FREQ));
 80022b2:	f644 33e4 	movw	r3, #19428	; 0x4be4
 80022b6:	6013      	str	r3, [r2, #0]
	    HRTIM1->sMasterRegs.MCMP3R = (uint32_t)(NEW_DCDC_PERIOD * MASTER_DUTY_CYCLE * ADC1_TRIG_DUTY_CYCLE);

        LocalDevice.Init.frequency=MAX_FREQ;
        LocalDevice.Init.Counter = NEW_DCDC_PERIOD;

        DCDC_SetPhaseShift((Phase_Period_Ratio * DCDC_GetPeriod())/0xFFFF);
 80022b8:	4a95      	ldr	r2, [pc, #596]	; (8002510 <DCDC_SetFrequency+0x290>)
 80022ba:	fb03 f404 	mul.w	r4, r3, r4
 80022be:	fba2 2404 	umull	r2, r4, r2, r4
	    HRTIM1->sMasterRegs.MPER = (uint32_t)(NEW_DCDC_PERIOD);
 80022c2:	4a94      	ldr	r2, [pc, #592]	; (8002514 <DCDC_SetFrequency+0x294>)
	    NEW_isoDCDC_PERDIOD = ((uint16_t)((uint64_t)TIM8_INPUT_CLOCK / (MAX_FREQ)));
 80022c4:	f240 255f 	movw	r5, #607	; 0x25f
 80022c8:	6035      	str	r5, [r6, #0]
	    HRTIM1->sMasterRegs.MPER = (uint32_t)(NEW_DCDC_PERIOD);
 80022ca:	6153      	str	r3, [r2, #20]
	    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].PERxR = (uint32_t)(NEW_DCDC_PERIOD);
 80022cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].PERxR = (uint32_t)(NEW_DCDC_PERIOD);
 80022d0:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	    TIM8->ARR = (uint32_t)NEW_isoDCDC_PERDIOD;
 80022d4:	62c5      	str	r5, [r0, #44]	; 0x2c
        LocalDevice.Init.frequency=MAX_FREQ;
 80022d6:	4d90      	ldr	r5, [pc, #576]	; (8002518 <DCDC_SetFrequency+0x298>)
 80022d8:	f8ca 5010 	str.w	r5, [sl, #16]
	    TIM8->CCR3 = (uint32_t)NEW_isoDCDC_PERDIOD/2;
 80022dc:	f240 152f 	movw	r5, #303	; 0x12f
 80022e0:	63c5      	str	r5, [r0, #60]	; 0x3c
        DCDC_SetPhaseShift((Phase_Period_Ratio * DCDC_GetPeriod())/0xFFFF);
 80022e2:	0be4      	lsrs	r4, r4, #15
	    HRTIM1->sMasterRegs.MCMP2R = (uint32_t)(NEW_DCDC_PERIOD * MASTER_DUTY_CYCLE * (1 + ADC1_TRIG_DUTY_CYCLE));
 80022e4:	f642 30a3 	movw	r0, #11171	; 0x2ba3
 80022e8:	6250      	str	r0, [r2, #36]	; 0x24
    if (dwPhaseShift >= (MAX_PHASE_SHIFT-1) && dwPhaseShift <= MIN_PHASE_SHIFT)
 80022ea:	f5a4 5117 	sub.w	r1, r4, #9664	; 0x25c0
	    HRTIM1->sMasterRegs.MCMP3R = (uint32_t)(NEW_DCDC_PERIOD * MASTER_DUTY_CYCLE * ADC1_TRIG_DUTY_CYCLE);
 80022ee:	f240 50b1 	movw	r0, #1457	; 0x5b1
 80022f2:	6290      	str	r0, [r2, #40]	; 0x28
    if (dwPhaseShift >= (MAX_PHASE_SHIFT-1) && dwPhaseShift <= MIN_PHASE_SHIFT)
 80022f4:	3931      	subs	r1, #49	; 0x31
        LocalDevice.Init.Counter = NEW_DCDC_PERIOD;
 80022f6:	f8ca 3000 	str.w	r3, [sl]
    if (dwPhaseShift >= (MAX_PHASE_SHIFT-1) && dwPhaseShift <= MIN_PHASE_SHIFT)
 80022fa:	f242 53f3 	movw	r3, #9715	; 0x25f3
 80022fe:	4299      	cmp	r1, r3
        LocalDevice.Init.PhaseShift = dwPhaseShift;
 8002300:	bf98      	it	ls
 8002302:	f8ca 4004 	strls.w	r4, [sl, #4]
    dutyadj = dutycycle;
 8002306:	4b85      	ldr	r3, [pc, #532]	; (800251c <DCDC_SetFrequency+0x29c>)
        HRTIM1->sMasterRegs.MCMP1R = (uint32_t)(LocalDevice.Init.PhaseShift);
 8002308:	bf98      	it	ls
 800230a:	61d4      	strls	r4, [r2, #28]

        DCDC_SetDutyCycle(NEW_DCDC_PERIOD/2); // FIXED 50% - TODO

        /*  update from shadow register */
        HRTIM1->sCommonRegs.CR2 |= HRTIM_CR2_TASWU
 800230c:	4a81      	ldr	r2, [pc, #516]	; (8002514 <DCDC_SetFrequency+0x294>)
    dutyadj = dutycycle;
 800230e:	f242 51f2 	movw	r1, #9714	; 0x25f2

    }
     /*DCDC Converter configuration */

    return nRet;
}
 8002312:	ecbd 8b02 	vpop	{d8}
    dutyadj = dutycycle;
 8002316:	6019      	str	r1, [r3, #0]
        HRTIM1->sCommonRegs.CR2 |= HRTIM_CR2_TASWU
 8002318:	f8d2 3384 	ldr.w	r3, [r2, #900]	; 0x384
        LocalDevice.Init.DutyCycle=dutyadj;
 800231c:	f8ca 100c 	str.w	r1, [sl, #12]
        HRTIM1->sCommonRegs.CR2 |= HRTIM_CR2_TASWU
 8002320:	f043 0306 	orr.w	r3, r3, #6
}
 8002324:	2000      	movs	r0, #0
        HRTIM1->sCommonRegs.CR2 |= HRTIM_CR2_TASWU
 8002326:	f8c2 3384 	str.w	r3, [r2, #900]	; 0x384
}
 800232a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    NEW_DCDC_PERIOD = ((uint16_t)(((uint64_t)HRTIM_INPUT_CLOCK * HRTIMER_LLC_PRESCALER) / frequencyinc));
 800232e:	4602      	mov	r2, r0
 8002330:	2300      	movs	r3, #0
 8002332:	a167      	add	r1, pc, #412	; (adr r1, 80024d0 <DCDC_SetFrequency+0x250>)
 8002334:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002338:	f7fe fb24 	bl	8000984 <__aeabi_uldivmod>
	    HRTIM1->sMasterRegs.MPER = (uint32_t)(NEW_DCDC_PERIOD);
 800233c:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8002514 <DCDC_SetFrequency+0x294>
	    TIM8->ARR = (uint32_t)NEW_isoDCDC_PERDIOD;
 8002340:	4a71      	ldr	r2, [pc, #452]	; (8002508 <DCDC_SetFrequency+0x288>)
	    NEW_DCDC_PERIOD = ((uint16_t)(((uint64_t)HRTIM_INPUT_CLOCK * HRTIMER_LLC_PRESCALER) / frequencyinc));
 8002342:	4b70      	ldr	r3, [pc, #448]	; (8002504 <DCDC_SetFrequency+0x284>)
	    NEW_isoDCDC_PERDIOD = ((uint16_t)((uint64_t)TIM8_INPUT_CLOCK / (frequencyinc)));
 8002344:	4971      	ldr	r1, [pc, #452]	; (800250c <DCDC_SetFrequency+0x28c>)
	    NEW_DCDC_PERIOD = ((uint16_t)(((uint64_t)HRTIM_INPUT_CLOCK * HRTIMER_LLC_PRESCALER) / frequencyinc));
 8002346:	fa1f f880 	uxth.w	r8, r0
 800234a:	f8c3 8000 	str.w	r8, [r3]
	    NEW_isoDCDC_PERDIOD = ((uint16_t)((uint64_t)TIM8_INPUT_CLOCK / (frequencyinc)));
 800234e:	4b74      	ldr	r3, [pc, #464]	; (8002520 <DCDC_SetFrequency+0x2a0>)
 8002350:	fbb3 f3f5 	udiv	r3, r3, r5
 8002354:	600b      	str	r3, [r1, #0]
	    HRTIM1->sMasterRegs.MPER = (uint32_t)(NEW_DCDC_PERIOD);
 8002356:	f8c9 8014 	str.w	r8, [r9, #20]
	    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].PERxR = (uint32_t)(NEW_DCDC_PERIOD);
 800235a:	f8c9 8094 	str.w	r8, [r9, #148]	; 0x94
	    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].PERxR = (uint32_t)(NEW_DCDC_PERIOD);
 800235e:	f8c9 8114 	str.w	r8, [r9, #276]	; 0x114
	    TIM8->ARR = (uint32_t)NEW_isoDCDC_PERDIOD;
 8002362:	62d3      	str	r3, [r2, #44]	; 0x2c
	    TIM8->CCR3 = (uint32_t)NEW_isoDCDC_PERDIOD/2;
 8002364:	085b      	lsrs	r3, r3, #1
 8002366:	63d3      	str	r3, [r2, #60]	; 0x3c
	    HRTIM1->sMasterRegs.MCMP2R = (uint32_t)(NEW_DCDC_PERIOD * MASTER_DUTY_CYCLE * (1 + ADC1_TRIG_DUTY_CYCLE));
 8002368:	4640      	mov	r0, r8
 800236a:	f7fe f9c1 	bl	80006f0 <__aeabi_ui2d>
 800236e:	4b6d      	ldr	r3, [pc, #436]	; (8002524 <DCDC_SetFrequency+0x2a4>)
 8002370:	2200      	movs	r2, #0
 8002372:	4606      	mov	r6, r0
 8002374:	460f      	mov	r7, r1
 8002376:	f7fd ff4f 	bl	8000218 <__aeabi_dmul>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	ec43 2b18 	vmov	d8, r2, r3
 8002382:	a355      	add	r3, pc, #340	; (adr r3, 80024d8 <DCDC_SetFrequency+0x258>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	f7fd ff46 	bl	8000218 <__aeabi_dmul>
 800238c:	f7fe fada 	bl	8000944 <__aeabi_d2uiz>
	    HRTIM1->sMasterRegs.MCMP3R = (uint32_t)(NEW_DCDC_PERIOD * MASTER_DUTY_CYCLE * ADC1_TRIG_DUTY_CYCLE);
 8002390:	a353      	add	r3, pc, #332	; (adr r3, 80024e0 <DCDC_SetFrequency+0x260>)
 8002392:	e9d3 2300 	ldrd	r2, r3, [r3]
	    HRTIM1->sMasterRegs.MCMP2R = (uint32_t)(NEW_DCDC_PERIOD * MASTER_DUTY_CYCLE * (1 + ADC1_TRIG_DUTY_CYCLE));
 8002396:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
	    HRTIM1->sMasterRegs.MCMP3R = (uint32_t)(NEW_DCDC_PERIOD * MASTER_DUTY_CYCLE * ADC1_TRIG_DUTY_CYCLE);
 800239a:	ec51 0b18 	vmov	r0, r1, d8
 800239e:	f7fd ff3b 	bl	8000218 <__aeabi_dmul>
 80023a2:	f7fe facf 	bl	8000944 <__aeabi_d2uiz>
        DCDC_SetPhaseShift((Phase_Period_Ratio * DCDC_GetPeriod())/0xFFFF);
 80023a6:	4b5a      	ldr	r3, [pc, #360]	; (8002510 <DCDC_SetFrequency+0x290>)
        LocalDevice.Init.frequency = frequencyinc;
 80023a8:	f8ca 5010 	str.w	r5, [sl, #16]
	u32 MAX_PHASE_SHIFT = (LocalDevice.Init.Counter)/2; // 180 DEG
 80023ac:	ea4f 0b58 	mov.w	fp, r8, lsr #1
        DCDC_SetPhaseShift((Phase_Period_Ratio * DCDC_GetPeriod())/0xFFFF);
 80023b0:	fb04 f408 	mul.w	r4, r4, r8
 80023b4:	fba3 3404 	umull	r3, r4, r3, r4
    if (dwPhaseShift >= (MAX_PHASE_SHIFT-1) && dwPhaseShift <= MIN_PHASE_SHIFT)
 80023b8:	f10b 32ff 	add.w	r2, fp, #4294967295
 80023bc:	ebb2 3fd4 	cmp.w	r2, r4, lsr #15
	    HRTIM1->sMasterRegs.MCMP3R = (uint32_t)(NEW_DCDC_PERIOD * MASTER_DUTY_CYCLE * ADC1_TRIG_DUTY_CYCLE);
 80023c0:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
        DCDC_SetPhaseShift((Phase_Period_Ratio * DCDC_GetPeriod())/0xFFFF);
 80023c4:	ea4f 33d4 	mov.w	r3, r4, lsr #15
        LocalDevice.Init.Counter = NEW_DCDC_PERIOD;
 80023c8:	f8ca 8000 	str.w	r8, [sl]
    if (dwPhaseShift >= (MAX_PHASE_SHIFT-1) && dwPhaseShift <= MIN_PHASE_SHIFT)
 80023cc:	d805      	bhi.n	80023da <DCDC_SetFrequency+0x15a>
 80023ce:	4598      	cmp	r8, r3
        HRTIM1->sMasterRegs.MCMP1R = (uint32_t)(LocalDevice.Init.PhaseShift);
 80023d0:	bf24      	itt	cs
 80023d2:	f8c9 301c 	strcs.w	r3, [r9, #28]
        LocalDevice.Init.PhaseShift = dwPhaseShift;
 80023d6:	f8ca 3004 	strcs.w	r3, [sl, #4]
    dutyadj = dutycycle;
 80023da:	4b50      	ldr	r3, [pc, #320]	; (800251c <DCDC_SetFrequency+0x29c>)
   if((dutyadj) <= DCDC_GetPeriod()*0.1)
 80023dc:	4658      	mov	r0, fp
    dutyadj = dutycycle;
 80023de:	f8c3 b000 	str.w	fp, [r3]
   if((dutyadj) <= DCDC_GetPeriod()*0.1)
 80023e2:	f7fe f985 	bl	80006f0 <__aeabi_ui2d>
 80023e6:	a340      	add	r3, pc, #256	; (adr r3, 80024e8 <DCDC_SetFrequency+0x268>)
 80023e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ec:	4604      	mov	r4, r0
 80023ee:	460d      	mov	r5, r1
 80023f0:	4630      	mov	r0, r6
 80023f2:	4639      	mov	r1, r7
 80023f4:	f7fd ff10 	bl	8000218 <__aeabi_dmul>
 80023f8:	4680      	mov	r8, r0
 80023fa:	4689      	mov	r9, r1
 80023fc:	4620      	mov	r0, r4
 80023fe:	4629      	mov	r1, r5
 8002400:	4642      	mov	r2, r8
 8002402:	464b      	mov	r3, r9
 8002404:	f7fe fa58 	bl	80008b8 <__aeabi_dcmple>
 8002408:	2800      	cmp	r0, #0
 800240a:	d155      	bne.n	80024b8 <DCDC_SetFrequency+0x238>
  else if((dutyadj) >= DCDC_GetPeriod()*0.9)
 800240c:	a338      	add	r3, pc, #224	; (adr r3, 80024f0 <DCDC_SetFrequency+0x270>)
 800240e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002412:	4630      	mov	r0, r6
 8002414:	4639      	mov	r1, r7
 8002416:	f7fd feff 	bl	8000218 <__aeabi_dmul>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4620      	mov	r0, r4
 8002420:	4629      	mov	r1, r5
 8002422:	4614      	mov	r4, r2
 8002424:	461d      	mov	r5, r3
 8002426:	f7fe fa51 	bl	80008cc <__aeabi_dcmpge>
 800242a:	2800      	cmp	r0, #0
 800242c:	d04b      	beq.n	80024c6 <DCDC_SetFrequency+0x246>
        LocalDevice.Init.DutyCycle = (DCDC_GetPeriod()*0.9);
 800242e:	4620      	mov	r0, r4
 8002430:	4629      	mov	r1, r5
 8002432:	f7fe fa87 	bl	8000944 <__aeabi_d2uiz>
 8002436:	f8ca 000c 	str.w	r0, [sl, #12]
        HRTIM1->sCommonRegs.CR2 |= HRTIM_CR2_TASWU
 800243a:	4a36      	ldr	r2, [pc, #216]	; (8002514 <DCDC_SetFrequency+0x294>)
}
 800243c:	ecbd 8b02 	vpop	{d8}
        HRTIM1->sCommonRegs.CR2 |= HRTIM_CR2_TASWU
 8002440:	f8d2 3384 	ldr.w	r3, [r2, #900]	; 0x384
 8002444:	f043 0306 	orr.w	r3, r3, #6
}
 8002448:	2000      	movs	r0, #0
        HRTIM1->sCommonRegs.CR2 |= HRTIM_CR2_TASWU
 800244a:	f8c2 3384 	str.w	r3, [r2, #900]	; 0x384
}
 800244e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    NEW_DCDC_PERIOD = ((uint16_t)(((uint64_t)HRTIM_INPUT_CLOCK * HRTIMER_LLC_PRESCALER) / MIN_FREQ));
 8002452:	492c      	ldr	r1, [pc, #176]	; (8002504 <DCDC_SetFrequency+0x284>)
        LocalDevice.Init.frequency = MIN_FREQ;
 8002454:	f8ca 3010 	str.w	r3, [sl, #16]
	    NEW_isoDCDC_PERDIOD = ((uint16_t)((uint64_t)TIM8_INPUT_CLOCK / (MIN_FREQ)));
 8002458:	4a2c      	ldr	r2, [pc, #176]	; (800250c <DCDC_SetFrequency+0x28c>)
        DCDC_SetPhaseShift((Phase_Period_Ratio * DCDC_GetPeriod())/0xFFFF);
 800245a:	482d      	ldr	r0, [pc, #180]	; (8002510 <DCDC_SetFrequency+0x290>)
	    NEW_DCDC_PERIOD = ((uint16_t)(((uint64_t)HRTIM_INPUT_CLOCK * HRTIMER_LLC_PRESCALER) / MIN_FREQ));
 800245c:	f642 7392 	movw	r3, #12178	; 0x2f92
 8002460:	600b      	str	r3, [r1, #0]
        DCDC_SetPhaseShift((Phase_Period_Ratio * DCDC_GetPeriod())/0xFFFF);
 8002462:	fb03 f404 	mul.w	r4, r3, r4
	    NEW_isoDCDC_PERDIOD = ((uint16_t)((uint64_t)TIM8_INPUT_CLOCK / (MIN_FREQ)));
 8002466:	f640 117c 	movw	r1, #2428	; 0x97c
 800246a:	6011      	str	r1, [r2, #0]
        DCDC_SetPhaseShift((Phase_Period_Ratio * DCDC_GetPeriod())/0xFFFF);
 800246c:	fba0 0404 	umull	r0, r4, r0, r4
	    HRTIM1->sMasterRegs.MPER = (uint32_t)(NEW_DCDC_PERIOD);
 8002470:	4a28      	ldr	r2, [pc, #160]	; (8002514 <DCDC_SetFrequency+0x294>)
	    TIM8->ARR = (uint32_t)NEW_isoDCDC_PERDIOD;
 8002472:	4825      	ldr	r0, [pc, #148]	; (8002508 <DCDC_SetFrequency+0x288>)
	    HRTIM1->sMasterRegs.MPER = (uint32_t)(NEW_DCDC_PERIOD);
 8002474:	6153      	str	r3, [r2, #20]
	    TIM8->CCR3 = (uint32_t)NEW_isoDCDC_PERDIOD/2;
 8002476:	f240 45be 	movw	r5, #1214	; 0x4be
	    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].PERxR = (uint32_t)(NEW_DCDC_PERIOD);
 800247a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        DCDC_SetPhaseShift((Phase_Period_Ratio * DCDC_GetPeriod())/0xFFFF);
 800247e:	0be4      	lsrs	r4, r4, #15
	    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].PERxR = (uint32_t)(NEW_DCDC_PERIOD);
 8002480:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	    TIM8->ARR = (uint32_t)NEW_isoDCDC_PERDIOD;
 8002484:	62c1      	str	r1, [r0, #44]	; 0x2c
	    TIM8->CCR3 = (uint32_t)NEW_isoDCDC_PERDIOD/2;
 8002486:	63c5      	str	r5, [r0, #60]	; 0x3c
	    HRTIM1->sMasterRegs.MCMP2R = (uint32_t)(NEW_DCDC_PERIOD * MASTER_DUTY_CYCLE * (1 + ADC1_TRIG_DUTY_CYCLE));
 8002488:	f641 305a 	movw	r0, #7002	; 0x1b5a
 800248c:	6250      	str	r0, [r2, #36]	; 0x24
    if (dwPhaseShift >= (MAX_PHASE_SHIFT-1) && dwPhaseShift <= MIN_PHASE_SHIFT)
 800248e:	f5a4 51be 	sub.w	r1, r4, #6080	; 0x17c0
	    HRTIM1->sMasterRegs.MCMP3R = (uint32_t)(NEW_DCDC_PERIOD * MASTER_DUTY_CYCLE * ADC1_TRIG_DUTY_CYCLE);
 8002492:	f240 3091 	movw	r0, #913	; 0x391
 8002496:	6290      	str	r0, [r2, #40]	; 0x28
    if (dwPhaseShift >= (MAX_PHASE_SHIFT-1) && dwPhaseShift <= MIN_PHASE_SHIFT)
 8002498:	3908      	subs	r1, #8
        LocalDevice.Init.Counter = NEW_DCDC_PERIOD;
 800249a:	f8ca 3000 	str.w	r3, [sl]
    if (dwPhaseShift >= (MAX_PHASE_SHIFT-1) && dwPhaseShift <= MIN_PHASE_SHIFT)
 800249e:	f241 73ca 	movw	r3, #6090	; 0x17ca
 80024a2:	4299      	cmp	r1, r3
        LocalDevice.Init.PhaseShift = dwPhaseShift;
 80024a4:	bf98      	it	ls
 80024a6:	f8ca 4004 	strls.w	r4, [sl, #4]
    dutyadj = dutycycle;
 80024aa:	4b1c      	ldr	r3, [pc, #112]	; (800251c <DCDC_SetFrequency+0x29c>)
        HRTIM1->sMasterRegs.MCMP1R = (uint32_t)(LocalDevice.Init.PhaseShift);
 80024ac:	bf98      	it	ls
 80024ae:	61d4      	strls	r4, [r2, #28]
    dutyadj = dutycycle;
 80024b0:	f241 71c9 	movw	r1, #6089	; 0x17c9
        HRTIM1->sCommonRegs.CR2 |= HRTIM_CR2_TASWU
 80024b4:	4a17      	ldr	r2, [pc, #92]	; (8002514 <DCDC_SetFrequency+0x294>)
 80024b6:	e72c      	b.n	8002312 <DCDC_SetFrequency+0x92>
        LocalDevice.Init.DutyCycle = (DCDC_GetPeriod()*0.1);
 80024b8:	4640      	mov	r0, r8
 80024ba:	4649      	mov	r1, r9
 80024bc:	f7fe fa42 	bl	8000944 <__aeabi_d2uiz>
 80024c0:	f8ca 000c 	str.w	r0, [sl, #12]
        nRet = DCDC_ERROR_NONE;
 80024c4:	e7b9      	b.n	800243a <DCDC_SetFrequency+0x1ba>
        LocalDevice.Init.DutyCycle=dutyadj;
 80024c6:	f8ca b00c 	str.w	fp, [sl, #12]
        nRet = DCDC_ERROR_NONE;
 80024ca:	e7b6      	b.n	800243a <DCDC_SetFrequency+0x1ba>
 80024cc:	f3af 8000 	nop.w
 80024d0:	443fd000 	.word	0x443fd000
 80024d4:	00000001 	.word	0x00000001
 80024d8:	66666666 	.word	0x66666666
 80024dc:	3ff26666 	.word	0x3ff26666
 80024e0:	33333333 	.word	0x33333333
 80024e4:	3fc33333 	.word	0x3fc33333
 80024e8:	9999999a 	.word	0x9999999a
 80024ec:	3fb99999 	.word	0x3fb99999
 80024f0:	cccccccd 	.word	0xcccccccd
 80024f4:	3feccccc 	.word	0x3feccccc
 80024f8:	2000ca08 	.word	0x2000ca08
 80024fc:	00011170 	.word	0x00011170
 8002500:	000445bf 	.word	0x000445bf
 8002504:	2000c9f8 	.word	0x2000c9f8
 8002508:	40013400 	.word	0x40013400
 800250c:	2000c9fc 	.word	0x2000c9fc
 8002510:	80008001 	.word	0x80008001
 8002514:	40016800 	.word	0x40016800
 8002518:	000445c0 	.word	0x000445c0
 800251c:	2000ca04 	.word	0x2000ca04
 8002520:	0a21fe80 	.word	0x0a21fe80
 8002524:	3fe00000 	.word	0x3fe00000
 8002528:	2000c9e0 	.word	0x2000c9e0

0800252c <DCDC_TIMx_Configuration>:
* Description    : Timers configuration for DCDC converter
* Input          : NONE
* Return         : None
*******************************************************************************/
void DCDC_TIMx_Configuration(void)
{
 800252c:	b510      	push	{r4, lr}

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_EventCfgTypeDef pEventCfg = {0};
 800252e:	2400      	movs	r4, #0
{
 8002530:	b0c8      	sub	sp, #288	; 0x120
  HRTIM_FaultBlankingCfgTypeDef pFaultBlkCfg = {0};
  HRTIM_FaultCfgTypeDef pFaultCfg = {0};
  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8002532:	2260      	movs	r2, #96	; 0x60
 8002534:	4621      	mov	r1, r4
 8002536:	a830      	add	r0, sp, #192	; 0xc0
  HRTIM_FaultBlankingCfgTypeDef pFaultBlkCfg = {0};
 8002538:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 800253c:	e9cd 4401 	strd	r4, r4, [sp, #4]
  HRTIM_EventCfgTypeDef pEventCfg = {0};
 8002540:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 8002544:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  HRTIM_FaultCfgTypeDef pFaultCfg = {0};
 8002548:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 800254c:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  HRTIM_EventCfgTypeDef pEventCfg = {0};
 8002550:	9413      	str	r4, [sp, #76]	; 0x4c
  HRTIM_FaultBlankingCfgTypeDef pFaultBlkCfg = {0};
 8002552:	9407      	str	r4, [sp, #28]
  HRTIM_FaultCfgTypeDef pFaultCfg = {0};
 8002554:	940b      	str	r4, [sp, #44]	; 0x2c
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8002556:	940f      	str	r4, [sp, #60]	; 0x3c
  HRTIM_FaultCfgTypeDef pFaultCfg = {0};
 8002558:	940e      	str	r4, [sp, #56]	; 0x38
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 800255a:	9412      	str	r4, [sp, #72]	; 0x48
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 800255c:	f008 fb12 	bl	800ab84 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
  HRTIM_TimerEventFilteringCfgTypeDef pTimerEventFilteringCfg = {0};
  HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 8002560:	2224      	movs	r2, #36	; 0x24
 8002562:	4621      	mov	r1, r4
 8002564:	a827      	add	r0, sp, #156	; 0x9c
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8002566:	e9cd 4408 	strd	r4, r4, [sp, #32]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 800256a:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 800256e:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
 8002572:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
  HRTIM_TimerEventFilteringCfgTypeDef pTimerEventFilteringCfg = {0};
 8002576:	e9cd 4403 	strd	r4, r4, [sp, #12]
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 800257a:	940a      	str	r4, [sp, #40]	; 0x28
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 800257c:	941e      	str	r4, [sp, #120]	; 0x78
  HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 800257e:	f008 fb01 	bl	800ab84 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8002582:	2220      	movs	r2, #32
 8002584:	4621      	mov	r1, r4
 8002586:	a81f      	add	r0, sp, #124	; 0x7c
 8002588:	f008 fafc 	bl	800ab84 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 800258c:	48bf      	ldr	r0, [pc, #764]	; (800288c <DCDC_TIMx_Configuration+0x360>)
 800258e:	4bc0      	ldr	r3, [pc, #768]	; (8002890 <DCDC_TIMx_Configuration+0x364>)
 8002590:	6003      	str	r3, [r0, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_MASTER;
 8002592:	2301      	movs	r3, #1
 8002594:	6083      	str	r3, [r0, #8]
  hhrtim1.Init.SyncOutputSource = HRTIM_SYNCOUTPUTSOURCE_TIMA_CMP1;
  hhrtim1.Init.SyncOutputPolarity = HRTIM_SYNCOUTPUTPOLARITY_POSITIVE;
 8002596:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800259a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800259e:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80025a2:	6044      	str	r4, [r0, #4]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 80025a4:	f004 f85e 	bl	8006664 <HAL_HRTIM_Init>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	f040 8393 	bne.w	8002cd4 <DCDC_TIMx_Configuration+0x7a8>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 80025ae:	48b7      	ldr	r0, [pc, #732]	; (800288c <DCDC_TIMx_Configuration+0x360>)
 80025b0:	210c      	movs	r1, #12
 80025b2:	f004 f8b1 	bl	8006718 <HAL_HRTIM_DLLCalibrationStart>
 80025b6:	2800      	cmp	r0, #0
 80025b8:	f040 8395 	bne.w	8002ce6 <DCDC_TIMx_Configuration+0x7ba>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 80025bc:	48b3      	ldr	r0, [pc, #716]	; (800288c <DCDC_TIMx_Configuration+0x360>)
 80025be:	210a      	movs	r1, #10
 80025c0:	f004 f8e2 	bl	8006788 <HAL_HRTIM_PollForDLLCalibration>
 80025c4:	2800      	cmp	r0, #0
 80025c6:	f040 8397 	bne.w	8002cf8 <DCDC_TIMx_Configuration+0x7cc>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_EventPrescalerConfig(&hhrtim1, HRTIM_EVENTPRESCALER_DIV1) != HAL_OK)
 80025ca:	48b0      	ldr	r0, [pc, #704]	; (800288c <DCDC_TIMx_Configuration+0x360>)
 80025cc:	2100      	movs	r1, #0
 80025ce:	f004 f959 	bl	8006884 <HAL_HRTIM_EventPrescalerConfig>
 80025d2:	2800      	cmp	r0, #0
 80025d4:	f040 8399 	bne.w	8002d0a <DCDC_TIMx_Configuration+0x7de>
  {
    Error_Handler();
  }
  pEventCfg.Source = HRTIM_EEV6SRC_COMP1_OUT;
  pEventCfg.Polarity = HRTIM_EVENTPOLARITY_HIGH;
 80025d8:	2300      	movs	r3, #0
  pEventCfg.Sensitivity = HRTIM_EVENTSENSITIVITY_LEVEL;
 80025da:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  pEventCfg.Source = HRTIM_EEV6SRC_COMP1_OUT;
 80025de:	2302      	movs	r3, #2
 80025e0:	9313      	str	r3, [sp, #76]	; 0x4c
  pEventCfg.Filter = HRTIM_EVENTFILTER_3;
  if (HAL_HRTIM_EventConfig(&hhrtim1, HRTIM_EVENT_6, &pEventCfg) != HAL_OK)
 80025e2:	48aa      	ldr	r0, [pc, #680]	; (800288c <DCDC_TIMx_Configuration+0x360>)
  pEventCfg.Filter = HRTIM_EVENTFILTER_3;
 80025e4:	2303      	movs	r3, #3
  if (HAL_HRTIM_EventConfig(&hhrtim1, HRTIM_EVENT_6, &pEventCfg) != HAL_OK)
 80025e6:	aa13      	add	r2, sp, #76	; 0x4c
 80025e8:	2106      	movs	r1, #6
  pEventCfg.Filter = HRTIM_EVENTFILTER_3;
 80025ea:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_HRTIM_EventConfig(&hhrtim1, HRTIM_EVENT_6, &pEventCfg) != HAL_OK)
 80025ec:	f004 f92a 	bl	8006844 <HAL_HRTIM_EventConfig>
 80025f0:	2800      	cmp	r0, #0
 80025f2:	f040 8460 	bne.w	8002eb6 <DCDC_TIMx_Configuration+0x98a>
  {
    Error_Handler();
  }
  pEventCfg.Source = HRTIM_EEV7SRC_COMP4_OUT;
 80025f6:	2301      	movs	r3, #1
  if (HAL_HRTIM_EventConfig(&hhrtim1, HRTIM_EVENT_7, &pEventCfg) != HAL_OK)
 80025f8:	48a4      	ldr	r0, [pc, #656]	; (800288c <DCDC_TIMx_Configuration+0x360>)
  pEventCfg.Source = HRTIM_EEV7SRC_COMP4_OUT;
 80025fa:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_HRTIM_EventConfig(&hhrtim1, HRTIM_EVENT_7, &pEventCfg) != HAL_OK)
 80025fc:	aa13      	add	r2, sp, #76	; 0x4c
 80025fe:	2107      	movs	r1, #7
 8002600:	f004 f920 	bl	8006844 <HAL_HRTIM_EventConfig>
 8002604:	2800      	cmp	r0, #0
 8002606:	f040 8452 	bne.w	8002eae <DCDC_TIMx_Configuration+0x982>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_FaultPrescalerConfig(&hhrtim1, HRTIM_FAULTPRESCALER_DIV1) != HAL_OK)
 800260a:	48a0      	ldr	r0, [pc, #640]	; (800288c <DCDC_TIMx_Configuration+0x360>)
 800260c:	2100      	movs	r1, #0
 800260e:	f004 fa55 	bl	8006abc <HAL_HRTIM_FaultPrescalerConfig>
 8002612:	2800      	cmp	r0, #0
 8002614:	f040 8447 	bne.w	8002ea6 <DCDC_TIMx_Configuration+0x97a>
  {
    Error_Handler();
  }
  pFaultBlkCfg.Threshold = 0;
 8002618:	2300      	movs	r3, #0
  pFaultBlkCfg.ResetMode = HRTIM_FAULTCOUNTERRST_UNCONDITIONAL;
  pFaultBlkCfg.BlankingSource = HRTIM_FAULTBLANKINGMODE_RSTALIGNED;
  if (HAL_HRTIM_FaultCounterConfig(&hhrtim1, HRTIM_FAULT_2, &pFaultBlkCfg) != HAL_OK)
 800261a:	489c      	ldr	r0, [pc, #624]	; (800288c <DCDC_TIMx_Configuration+0x360>)
  pFaultBlkCfg.BlankingSource = HRTIM_FAULTBLANKINGMODE_RSTALIGNED;
 800261c:	9307      	str	r3, [sp, #28]
  if (HAL_HRTIM_FaultCounterConfig(&hhrtim1, HRTIM_FAULT_2, &pFaultBlkCfg) != HAL_OK)
 800261e:	aa05      	add	r2, sp, #20
 8002620:	2102      	movs	r1, #2
  pFaultBlkCfg.ResetMode = HRTIM_FAULTCOUNTERRST_UNCONDITIONAL;
 8002622:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if (HAL_HRTIM_FaultCounterConfig(&hhrtim1, HRTIM_FAULT_2, &pFaultBlkCfg) != HAL_OK)
 8002626:	f004 faff 	bl	8006c28 <HAL_HRTIM_FaultCounterConfig>
 800262a:	2800      	cmp	r0, #0
 800262c:	f040 8437 	bne.w	8002e9e <DCDC_TIMx_Configuration+0x972>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_FaultCounterConfig(&hhrtim1, HRTIM_FAULT_2, &pFaultBlkCfg) != HAL_OK)
 8002630:	4896      	ldr	r0, [pc, #600]	; (800288c <DCDC_TIMx_Configuration+0x360>)
 8002632:	aa05      	add	r2, sp, #20
 8002634:	2102      	movs	r1, #2
 8002636:	f004 faf7 	bl	8006c28 <HAL_HRTIM_FaultCounterConfig>
 800263a:	2800      	cmp	r0, #0
 800263c:	f040 842b 	bne.w	8002e96 <DCDC_TIMx_Configuration+0x96a>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_FaultCounterConfig(&hhrtim1, HRTIM_FAULT_2, &pFaultBlkCfg) != HAL_OK)
 8002640:	4892      	ldr	r0, [pc, #584]	; (800288c <DCDC_TIMx_Configuration+0x360>)
 8002642:	aa05      	add	r2, sp, #20
 8002644:	2102      	movs	r1, #2
 8002646:	f004 faef 	bl	8006c28 <HAL_HRTIM_FaultCounterConfig>
 800264a:	2800      	cmp	r0, #0
 800264c:	f040 841f 	bne.w	8002e8e <DCDC_TIMx_Configuration+0x962>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_2, &pFaultBlkCfg) != HAL_OK)
 8002650:	488e      	ldr	r0, [pc, #568]	; (800288c <DCDC_TIMx_Configuration+0x360>)
 8002652:	aa05      	add	r2, sp, #20
 8002654:	2102      	movs	r1, #2
 8002656:	f004 fa55 	bl	8006b04 <HAL_HRTIM_FaultBlankingConfigAndEnable>
 800265a:	2800      	cmp	r0, #0
 800265c:	f040 8413 	bne.w	8002e86 <DCDC_TIMx_Configuration+0x95a>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_2, &pFaultBlkCfg) != HAL_OK)
 8002660:	488a      	ldr	r0, [pc, #552]	; (800288c <DCDC_TIMx_Configuration+0x360>)
 8002662:	aa05      	add	r2, sp, #20
 8002664:	2102      	movs	r1, #2
 8002666:	f004 fa4d 	bl	8006b04 <HAL_HRTIM_FaultBlankingConfigAndEnable>
 800266a:	2800      	cmp	r0, #0
 800266c:	f040 8407 	bne.w	8002e7e <DCDC_TIMx_Configuration+0x952>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_2, &pFaultBlkCfg) != HAL_OK)
 8002670:	4886      	ldr	r0, [pc, #536]	; (800288c <DCDC_TIMx_Configuration+0x360>)
 8002672:	aa05      	add	r2, sp, #20
 8002674:	2102      	movs	r1, #2
 8002676:	f004 fa45 	bl	8006b04 <HAL_HRTIM_FaultBlankingConfigAndEnable>
 800267a:	2800      	cmp	r0, #0
 800267c:	f040 83fc 	bne.w	8002e78 <DCDC_TIMx_Configuration+0x94c>
  {
    Error_Handler();
  }
  pFaultCfg.Source = HRTIM_FAULTSOURCE_DIGITALINPUT;
 8002680:	2300      	movs	r3, #0
 8002682:	2102      	movs	r1, #2
 8002684:	e9cd 310b 	strd	r3, r1, [sp, #44]	; 0x2c
  pFaultCfg.Polarity = HRTIM_FAULTPOLARITY_HIGH;
  pFaultCfg.Filter = HRTIM_FAULTFILTER_15;
  pFaultCfg.Lock = HRTIM_FAULTLOCK_READWRITE;
 8002688:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_HRTIM_FaultConfig(&hhrtim1, HRTIM_FAULT_2, &pFaultCfg) != HAL_OK)
 800268a:	4880      	ldr	r0, [pc, #512]	; (800288c <DCDC_TIMx_Configuration+0x360>)
  pFaultCfg.Filter = HRTIM_FAULTFILTER_15;
 800268c:	2378      	movs	r3, #120	; 0x78
  if (HAL_HRTIM_FaultConfig(&hhrtim1, HRTIM_FAULT_2, &pFaultCfg) != HAL_OK)
 800268e:	aa0b      	add	r2, sp, #44	; 0x2c
  pFaultCfg.Filter = HRTIM_FAULTFILTER_15;
 8002690:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_HRTIM_FaultConfig(&hhrtim1, HRTIM_FAULT_2, &pFaultCfg) != HAL_OK)
 8002692:	f004 f91b 	bl	80068cc <HAL_HRTIM_FaultConfig>
 8002696:	2800      	cmp	r0, #0
 8002698:	f040 83eb 	bne.w	8002e72 <DCDC_TIMx_Configuration+0x946>
  {
    Error_Handler();
  }
  HAL_HRTIM_FaultModeCtl(&hhrtim1, HRTIM_FAULT_2, HRTIM_FAULTMODECTL_DISABLED);
 800269c:	487b      	ldr	r0, [pc, #492]	; (800288c <DCDC_TIMx_Configuration+0x360>)
 800269e:	2200      	movs	r2, #0
 80026a0:	2102      	movs	r1, #2
 80026a2:	f004 fb5f 	bl	8006d64 <HAL_HRTIM_FaultModeCtl>
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_MASTER;
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_MASTER_CMP2;
 80026a6:	2100      	movs	r1, #0
 80026a8:	2302      	movs	r3, #2
 80026aa:	e9cd 1301 	strd	r1, r3, [sp, #4]
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 80026ae:	4877      	ldr	r0, [pc, #476]	; (800288c <DCDC_TIMx_Configuration+0x360>)
 80026b0:	aa01      	add	r2, sp, #4
 80026b2:	2101      	movs	r1, #1
 80026b4:	f004 fbac 	bl	8006e10 <HAL_HRTIM_ADCTriggerConfig>
 80026b8:	2800      	cmp	r0, #0
 80026ba:	f040 83d7 	bne.w	8002e6c <DCDC_TIMx_Configuration+0x940>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, 0x0) != HAL_OK)
 80026be:	4873      	ldr	r0, [pc, #460]	; (800288c <DCDC_TIMx_Configuration+0x360>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	2101      	movs	r1, #1
 80026c4:	f004 fcca 	bl	800705c <HAL_HRTIM_ADCPostScalerConfig>
 80026c8:	2800      	cmp	r0, #0
 80026ca:	f040 83cc 	bne.w	8002e66 <DCDC_TIMx_Configuration+0x93a>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, 0x0) != HAL_OK)
 80026ce:	486f      	ldr	r0, [pc, #444]	; (800288c <DCDC_TIMx_Configuration+0x360>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	2101      	movs	r1, #1
 80026d4:	f004 fcc2 	bl	800705c <HAL_HRTIM_ADCPostScalerConfig>
 80026d8:	2800      	cmp	r0, #0
 80026da:	f040 83c1 	bne.w	8002e60 <DCDC_TIMx_Configuration+0x934>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, 0x0) != HAL_OK)
 80026de:	486b      	ldr	r0, [pc, #428]	; (800288c <DCDC_TIMx_Configuration+0x360>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	2101      	movs	r1, #1
 80026e4:	f004 fcba 	bl	800705c <HAL_HRTIM_ADCPostScalerConfig>
 80026e8:	2800      	cmp	r0, #0
 80026ea:	f040 83b6 	bne.w	8002e5a <DCDC_TIMx_Configuration+0x92e>
  {
    Error_Handler();
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_F;
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERF_CMP3;
 80026ee:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80026f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026f6:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_3, &pADCTriggerCfg) != HAL_OK)
 80026fa:	4864      	ldr	r0, [pc, #400]	; (800288c <DCDC_TIMx_Configuration+0x360>)
 80026fc:	aa01      	add	r2, sp, #4
 80026fe:	2104      	movs	r1, #4
 8002700:	f004 fb86 	bl	8006e10 <HAL_HRTIM_ADCTriggerConfig>
 8002704:	2800      	cmp	r0, #0
 8002706:	f040 83a5 	bne.w	8002e54 <DCDC_TIMx_Configuration+0x928>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_3, 0x0) != HAL_OK)
 800270a:	4860      	ldr	r0, [pc, #384]	; (800288c <DCDC_TIMx_Configuration+0x360>)
 800270c:	2200      	movs	r2, #0
 800270e:	2104      	movs	r1, #4
 8002710:	f004 fca4 	bl	800705c <HAL_HRTIM_ADCPostScalerConfig>
 8002714:	2800      	cmp	r0, #0
 8002716:	f040 839a 	bne.w	8002e4e <DCDC_TIMx_Configuration+0x922>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_3, 0x0) != HAL_OK)
 800271a:	485c      	ldr	r0, [pc, #368]	; (800288c <DCDC_TIMx_Configuration+0x360>)
 800271c:	2200      	movs	r2, #0
 800271e:	2104      	movs	r1, #4
 8002720:	f004 fc9c 	bl	800705c <HAL_HRTIM_ADCPostScalerConfig>
 8002724:	2800      	cmp	r0, #0
 8002726:	f040 838f 	bne.w	8002e48 <DCDC_TIMx_Configuration+0x91c>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_3, 0x0) != HAL_OK)
 800272a:	4858      	ldr	r0, [pc, #352]	; (800288c <DCDC_TIMx_Configuration+0x360>)
 800272c:	2200      	movs	r2, #0
 800272e:	2104      	movs	r1, #4
 8002730:	f004 fc94 	bl	800705c <HAL_HRTIM_ADCPostScalerConfig>
 8002734:	2800      	cmp	r0, #0
 8002736:	f040 8384 	bne.w	8002e42 <DCDC_TIMx_Configuration+0x916>
  {
    Error_Handler();
  }
  pTimeBaseCfg.Period = (uint32_t)MASTER_PERIOD;
  pTimeBaseCfg.RepetitionCounter = 0x00;
 800273a:	2300      	movs	r3, #0
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 800273c:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  pTimeBaseCfg.Period = (uint32_t)MASTER_PERIOD;
 8002740:	f644 33e4 	movw	r3, #19428	; 0x4be4
 8002744:	930f      	str	r3, [sp, #60]	; 0x3c
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 8002746:	4851      	ldr	r0, [pc, #324]	; (800288c <DCDC_TIMx_Configuration+0x360>)
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8002748:	2308      	movs	r3, #8
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 800274a:	aa0f      	add	r2, sp, #60	; 0x3c
 800274c:	2106      	movs	r1, #6
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 800274e:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 8002750:	f004 f83c 	bl	80067cc <HAL_HRTIM_TimeBaseConfig>
 8002754:	2800      	cmp	r0, #0
 8002756:	f040 8371 	bne.w	8002e3c <DCDC_TIMx_Configuration+0x910>
  {
    Error_Handler();
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 800275a:	2300      	movs	r3, #0
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 800275c:	e9cd 3330 	strd	r3, r3, [sp, #192]	; 0xc0
  pTimerCfg.DMASrcAddress = 0x0000;
  pTimerCfg.DMADstAddress = 0x0000;
 8002760:	e9cd 3332 	strd	r3, r3, [sp, #200]	; 0xc8
  pTimerCfg.DMASize = 0x1;
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8002764:	e9cd 3335 	strd	r3, r3, [sp, #212]	; 0xd4
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8002768:	e9cd 3337 	strd	r3, r3, [sp, #220]	; 0xdc
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 800276c:	e9cd 3339 	strd	r3, r3, [sp, #228]	; 0xe4
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8002770:	e9cd 333b 	strd	r3, r3, [sp, #236]	; 0xec
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8002774:	933d      	str	r3, [sp, #244]	; 0xf4
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 8002776:	9347      	str	r3, [sp, #284]	; 0x11c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 8002778:	4844      	ldr	r0, [pc, #272]	; (800288c <DCDC_TIMx_Configuration+0x360>)
  pTimerCfg.DMASize = 0x1;
 800277a:	2301      	movs	r3, #1
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 800277c:	aa30      	add	r2, sp, #192	; 0xc0
 800277e:	2106      	movs	r1, #6
  pTimerCfg.DMASize = 0x1;
 8002780:	9334      	str	r3, [sp, #208]	; 0xd0
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 8002782:	f004 fd65 	bl	8007250 <HAL_HRTIM_WaveformTimerConfig>
 8002786:	2800      	cmp	r0, #0
 8002788:	f040 8355 	bne.w	8002e36 <DCDC_TIMx_Configuration+0x90a>
  {
    Error_Handler();
  }
  pCompareCfg.CompareValue = (uint32_t)(PHASE_SHIFT_INIT);
 800278c:	f242 53f2 	movw	r3, #9714	; 0x25f2
 8002790:	9308      	str	r3, [sp, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8002792:	483e      	ldr	r0, [pc, #248]	; (800288c <DCDC_TIMx_Configuration+0x360>)
 8002794:	ab08      	add	r3, sp, #32
 8002796:	2201      	movs	r2, #1
 8002798:	2106      	movs	r1, #6
 800279a:	f005 f82b 	bl	80077f4 <HAL_HRTIM_WaveformCompareConfig>
 800279e:	2800      	cmp	r0, #0
 80027a0:	f040 8346 	bne.w	8002e30 <DCDC_TIMx_Configuration+0x904>
  {
    Error_Handler();
  }
  pCompareCfg.CompareValue = (uint32_t)(MASTER_PERIOD * MASTER_DUTY_CYCLE * (1 + ADC1_TRIG_DUTY_CYCLE));
 80027a4:	f642 33a3 	movw	r3, #11171	; 0x2ba3
 80027a8:	9308      	str	r3, [sp, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80027aa:	4838      	ldr	r0, [pc, #224]	; (800288c <DCDC_TIMx_Configuration+0x360>)
 80027ac:	ab08      	add	r3, sp, #32
 80027ae:	2202      	movs	r2, #2
 80027b0:	2106      	movs	r1, #6
 80027b2:	f005 f81f 	bl	80077f4 <HAL_HRTIM_WaveformCompareConfig>
 80027b6:	2800      	cmp	r0, #0
 80027b8:	f040 8337 	bne.w	8002e2a <DCDC_TIMx_Configuration+0x8fe>
  {
    Error_Handler();
  }
  pCompareCfg.CompareValue = (uint32_t)(MASTER_PERIOD * MASTER_DUTY_CYCLE * ADC1_TRIG_DUTY_CYCLE);
 80027bc:	f240 53b1 	movw	r3, #1457	; 0x5b1
 80027c0:	9308      	str	r3, [sp, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80027c2:	4832      	ldr	r0, [pc, #200]	; (800288c <DCDC_TIMx_Configuration+0x360>)
 80027c4:	ab08      	add	r3, sp, #32
 80027c6:	2204      	movs	r2, #4
 80027c8:	2106      	movs	r1, #6
 80027ca:	f005 f813 	bl	80077f4 <HAL_HRTIM_WaveformCompareConfig>
 80027ce:	2800      	cmp	r0, #0
 80027d0:	f040 8328 	bne.w	8002e24 <DCDC_TIMx_Configuration+0x8f8>
  {
    Error_Handler();
  }
  pCompareCfg.CompareValue = (uint32_t)(MASTER_PERIOD*0.75);
 80027d4:	f643 03eb 	movw	r3, #14571	; 0x38eb
 80027d8:	9308      	str	r3, [sp, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 80027da:	482c      	ldr	r0, [pc, #176]	; (800288c <DCDC_TIMx_Configuration+0x360>)
 80027dc:	ab08      	add	r3, sp, #32
 80027de:	2208      	movs	r2, #8
 80027e0:	2106      	movs	r1, #6
 80027e2:	f005 f807 	bl	80077f4 <HAL_HRTIM_WaveformCompareConfig>
 80027e6:	2800      	cmp	r0, #0
 80027e8:	f040 8319 	bne.w	8002e1e <DCDC_TIMx_Configuration+0x8f2>
  {
    Error_Handler();
  }
  pTimeBaseCfg.Mode = HRTIM_MODE_SINGLESHOT_RETRIGGERABLE;
 80027ec:	2310      	movs	r3, #16
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 80027ee:	4827      	ldr	r0, [pc, #156]	; (800288c <DCDC_TIMx_Configuration+0x360>)
  pTimeBaseCfg.Mode = HRTIM_MODE_SINGLESHOT_RETRIGGERABLE;
 80027f0:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 80027f2:	aa0f      	add	r2, sp, #60	; 0x3c
 80027f4:	2100      	movs	r1, #0
 80027f6:	f003 ffe9 	bl	80067cc <HAL_HRTIM_TimeBaseConfig>
 80027fa:	2800      	cmp	r0, #0
 80027fc:	f040 830c 	bne.w	8002e18 <DCDC_TIMx_Configuration+0x8ec>
  {
    Error_Handler();
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 8002800:	2100      	movs	r1, #0
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 8002802:	4822      	ldr	r0, [pc, #136]	; (800288c <DCDC_TIMx_Configuration+0x360>)
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 8002804:	9118      	str	r1, [sp, #96]	; 0x60
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 8002806:	aa18      	add	r2, sp, #96	; 0x60
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 8002808:	911b      	str	r1, [sp, #108]	; 0x6c
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 800280a:	911e      	str	r1, [sp, #120]	; 0x78
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 800280c:	f004 fe7e 	bl	800750c <HAL_HRTIM_WaveformTimerControl>
 8002810:	2800      	cmp	r0, #0
 8002812:	f040 82fe 	bne.w	8002e12 <DCDC_TIMx_Configuration+0x8e6>
  {
    Error_Handler();
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_DLYPRT;
 8002816:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800281a:	9330      	str	r3, [sp, #192]	; 0xc0
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DUAL;
 800281c:	2302      	movs	r3, #2
 800281e:	9336      	str	r3, [sp, #216]	; 0xd8
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8002820:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002824:	933a      	str	r3, [sp, #232]	; 0xe8
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDBOTH_EEV7;
 8002826:	f44f 7480 	mov.w	r4, #256	; 0x100
 800282a:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 800282e:	2100      	movs	r1, #0
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDBOTH_EEV7;
 8002830:	e9cd 4341 	strd	r4, r3, [sp, #260]	; 0x104
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_MASTER;
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_MASTER_PER;
 8002834:	f04f 7c80 	mov.w	ip, #16777216	; 0x1000000
 8002838:	2310      	movs	r3, #16
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 800283a:	4814      	ldr	r0, [pc, #80]	; (800288c <DCDC_TIMx_Configuration+0x360>)
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 800283c:	9131      	str	r1, [sp, #196]	; 0xc4
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 800283e:	aa30      	add	r2, sp, #192	; 0xc0
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8002840:	e9cd 113e 	strd	r1, r1, [sp, #248]	; 0xf8
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_MASTER_PER;
 8002844:	e9cd c344 	strd	ip, r3, [sp, #272]	; 0x110
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8002848:	9140      	str	r1, [sp, #256]	; 0x100
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 800284a:	9146      	str	r1, [sp, #280]	; 0x118
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 800284c:	f004 fd00 	bl	8007250 <HAL_HRTIM_WaveformTimerConfig>
 8002850:	2800      	cmp	r0, #0
 8002852:	f040 82db 	bne.w	8002e0c <DCDC_TIMx_Configuration+0x8e0>
  {
    Error_Handler();
  }
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8002856:	2300      	movs	r3, #0
 8002858:	933a      	str	r3, [sp, #232]	; 0xe8
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_MASTER_CMP1;
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 800285a:	480c      	ldr	r0, [pc, #48]	; (800288c <DCDC_TIMx_Configuration+0x360>)
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_MASTER_CMP1;
 800285c:	2320      	movs	r3, #32
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 800285e:	aa30      	add	r2, sp, #192	; 0xc0
 8002860:	2101      	movs	r1, #1
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_MASTER_CMP1;
 8002862:	9345      	str	r3, [sp, #276]	; 0x114
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8002864:	f004 fcf4 	bl	8007250 <HAL_HRTIM_WaveformTimerConfig>
 8002868:	2800      	cmp	r0, #0
 800286a:	f040 82cc 	bne.w	8002e06 <DCDC_TIMx_Configuration+0x8da>
  {
    Error_Handler();
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 800286e:	2300      	movs	r3, #0
  pTimerCfg.DMASize = 1; //ZMIANA Z 0x1
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_ENABLED;
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED; //DODANE
 8002870:	e9cd 3341 	strd	r3, r3, [sp, #260]	; 0x104
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8002874:	9330      	str	r3, [sp, #192]	; 0xc0
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8002876:	9336      	str	r3, [sp, #216]	; 0xd8
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_SET2;//HRTIM_TIM_DMA_RST1;//HRTIM_TIM_DMA_SET1;
 8002878:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800287c:	9331      	str	r3, [sp, #196]	; 0xc4
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 800287e:	933a      	str	r3, [sp, #232]	; 0xe8
  pTimerCfg.DMASrcAddress = (uint32_t)&TIMD_DMA_Buffer[0];//(uint32_t)&TIMD_DMA_Buffer[0];//(uint32_t)&TIMD_DMA_Buffer[0];
 8002880:	4b04      	ldr	r3, [pc, #16]	; (8002894 <DCDC_TIMx_Configuration+0x368>)
 8002882:	9332      	str	r3, [sp, #200]	; 0xc8
  pTimerCfg.DMADstAddress = (uint32_t)&(HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].RSTx2R);//(uint32_t)&(HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx2R);//(uint32_t)&(hhrtim1.Instance->sCommonRegs.BDMADR); //(uint32_t)&(HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R);
 8002884:	4b04      	ldr	r3, [pc, #16]	; (8002898 <DCDC_TIMx_Configuration+0x36c>)
 8002886:	9333      	str	r3, [sp, #204]	; 0xcc
  pTimerCfg.DMASize = 1; //ZMIANA Z 0x1
 8002888:	2301      	movs	r3, #1
 800288a:	e007      	b.n	800289c <DCDC_TIMx_Configuration+0x370>
 800288c:	2001112c 	.word	0x2001112c
 8002890:	40016800 	.word	0x40016800
 8002894:	2000ca00 	.word	0x2000ca00
 8002898:	40016a48 	.word	0x40016a48
 800289c:	9334      	str	r3, [sp, #208]	; 0xd0
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_ENABLED;
 800289e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_TIMER_F; //HRTIM_TIMUPDATETRIGGER_TIMER_F;
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_OTHER5_CMP2;
 80028a2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_ENABLED;
 80028a6:	933d      	str	r3, [sp, #244]	; 0xf4
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_OTHER5_CMP2;
 80028a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80028ac:	e9cd 1344 	strd	r1, r3, [sp, #272]	; 0x110
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_DMABURST;
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 80028b0:	48be      	ldr	r0, [pc, #760]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_DMABURST;
 80028b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 80028b6:	aa30      	add	r2, sp, #192	; 0xc0
 80028b8:	2103      	movs	r1, #3
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_DMABURST;
 80028ba:	933b      	str	r3, [sp, #236]	; 0xec
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 80028bc:	f004 fcc8 	bl	8007250 <HAL_HRTIM_WaveformTimerConfig>
 80028c0:	2800      	cmp	r0, #0
 80028c2:	f040 829d 	bne.w	8002e00 <DCDC_TIMx_Configuration+0x8d4>
  {
    Error_Handler();
  }

  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80028c6:	2300      	movs	r3, #0
  pTimerCfg.DMASrcAddress = 0x0000;
 80028c8:	e9cd 3331 	strd	r3, r3, [sp, #196]	; 0xc4
  pTimerCfg.DMADstAddress = 0x0000;
 80028cc:	9333      	str	r3, [sp, #204]	; 0xcc
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_ENABLED;
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_TIMER_F;
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_OTHER5_CMP2;//HRTIM_TIMRESETTRIGGER_OTHER5_CMP2;
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80028ce:	933b      	str	r3, [sp, #236]	; 0xec
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 80028d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80028d4:	933a      	str	r3, [sp, #232]	; 0xe8
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_ENABLED;
 80028d6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80028da:	933d      	str	r3, [sp, #244]	; 0xf4
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 80028dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028e0:	9341      	str	r3, [sp, #260]	; 0x104
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_OTHER5_CMP2;//HRTIM_TIMRESETTRIGGER_OTHER5_CMP2;
 80028e2:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 80028e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000

  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 80028ea:	48b0      	ldr	r0, [pc, #704]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
 80028ec:	aa30      	add	r2, sp, #192	; 0xc0
 80028ee:	2104      	movs	r1, #4
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_OTHER5_CMP2;//HRTIM_TIMRESETTRIGGER_OTHER5_CMP2;
 80028f0:	e9cd c344 	strd	ip, r3, [sp, #272]	; 0x110
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 80028f4:	f004 fcac 	bl	8007250 <HAL_HRTIM_WaveformTimerConfig>
 80028f8:	2800      	cmp	r0, #0
 80028fa:	f040 827e 	bne.w	8002dfa <DCDC_TIMx_Configuration+0x8ce>
  {
    Error_Handler();
  }
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80028fe:	2300      	movs	r3, #0
  pTimerCfg.DMASrcAddress = 0x0000;//(uint32_t)&TIMF_DMA_Buffer[0];
 8002900:	e9cd 3331 	strd	r3, r3, [sp, #196]	; 0xc4
  pTimerCfg.DMADstAddress = 0x0000;//(uint32_t)&(HRTIM1_COMMON->CR2);
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_ENABLED;
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_F_DELAYEDPROTECTION_DISABLED;
 8002904:	e9cd 3341 	strd	r3, r3, [sp, #260]	; 0x104
  pTimerCfg.DMADstAddress = 0x0000;//(uint32_t)&(HRTIM1_COMMON->CR2);
 8002908:	9333      	str	r3, [sp, #204]	; 0xcc
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 800290a:	9345      	str	r3, [sp, #276]	; 0x114
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 800290c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002910:	933a      	str	r3, [sp, #232]	; 0xe8
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCfg) != HAL_OK)
 8002912:	48a6      	ldr	r0, [pc, #664]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_ENABLED;
 8002914:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCfg) != HAL_OK)
 8002918:	aa30      	add	r2, sp, #192	; 0xc0
 800291a:	2105      	movs	r1, #5
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_ENABLED;
 800291c:	933d      	str	r3, [sp, #244]	; 0xf4
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCfg) != HAL_OK)
 800291e:	f004 fc97 	bl	8007250 <HAL_HRTIM_WaveformTimerConfig>
 8002922:	2800      	cmp	r0, #0
 8002924:	f040 8266 	bne.w	8002df4 <DCDC_TIMx_Configuration+0x8c8>
  {
    Error_Handler();
  }

  pCompareCfg.CompareValue = 0xFFF7;
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8002928:	2300      	movs	r3, #0
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 800292a:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  pCompareCfg.CompareValue = 0xFFF7;
 800292e:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8002932:	9308      	str	r3, [sp, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 8002934:	489d      	ldr	r0, [pc, #628]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
 8002936:	ab08      	add	r3, sp, #32
 8002938:	2208      	movs	r2, #8
 800293a:	2103      	movs	r1, #3
 800293c:	f004 ff5a 	bl	80077f4 <HAL_HRTIM_WaveformCompareConfig>
 8002940:	2800      	cmp	r0, #0
 8002942:	f040 8254 	bne.w	8002dee <DCDC_TIMx_Configuration+0x8c2>
  {
    Error_Handler();
  }
  pCompareCfg.CompareValue = (uint32_t)(TIMF_PERIOD*TIMF_DUTY_CYCLE);
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8002946:	2300      	movs	r3, #0
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8002948:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  pCompareCfg.CompareValue = (uint32_t)(TIMF_PERIOD*TIMF_DUTY_CYCLE);
 800294c:	f243 33df 	movw	r3, #13279	; 0x33df
 8002950:	9308      	str	r3, [sp, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 8002952:	4896      	ldr	r0, [pc, #600]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
 8002954:	ab08      	add	r3, sp, #32
 8002956:	2208      	movs	r2, #8
 8002958:	2105      	movs	r1, #5
 800295a:	f004 ff4b 	bl	80077f4 <HAL_HRTIM_WaveformCompareConfig>
 800295e:	2800      	cmp	r0, #0
 8002960:	f040 8242 	bne.w	8002de8 <DCDC_TIMx_Configuration+0x8bc>
  {
    Error_Handler();
  }
  pTimerEventFilteringCfg.Filter = HRTIM_TIMEEVFLT_BLANKINGCMP1;
 8002964:	2302      	movs	r3, #2
  pTimerEventFilteringCfg.Latch = HRTIM_TIMEVENTLATCH_DISABLED;
 8002966:	2100      	movs	r1, #0
  pTimerEventFilteringCfg.Filter = HRTIM_TIMEEVFLT_BLANKINGCMP1;
 8002968:	9303      	str	r3, [sp, #12]
  if (HAL_HRTIM_TimerEventFilteringConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_EVENT_6, &pTimerEventFilteringCfg) != HAL_OK)
 800296a:	4890      	ldr	r0, [pc, #576]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
  pTimerEventFilteringCfg.Latch = HRTIM_TIMEVENTLATCH_DISABLED;
 800296c:	9104      	str	r1, [sp, #16]
  if (HAL_HRTIM_TimerEventFilteringConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_EVENT_6, &pTimerEventFilteringCfg) != HAL_OK)
 800296e:	ab03      	add	r3, sp, #12
 8002970:	2206      	movs	r2, #6
 8002972:	f004 fe11 	bl	8007598 <HAL_HRTIM_TimerEventFilteringConfig>
 8002976:	2800      	cmp	r0, #0
 8002978:	f040 8233 	bne.w	8002de2 <DCDC_TIMx_Configuration+0x8b6>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_TimerEventFilteringConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_EVENT_6, &pTimerEventFilteringCfg) != HAL_OK)
 800297c:	488b      	ldr	r0, [pc, #556]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
 800297e:	ab03      	add	r3, sp, #12
 8002980:	2206      	movs	r2, #6
 8002982:	2101      	movs	r1, #1
 8002984:	f004 fe08 	bl	8007598 <HAL_HRTIM_TimerEventFilteringConfig>
 8002988:	2800      	cmp	r0, #0
 800298a:	f040 8227 	bne.w	8002ddc <DCDC_TIMx_Configuration+0x8b0>
  {
    Error_Handler();
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL8;
 800298e:	2100      	movs	r1, #0
  pDeadTimeCfg.RisingValue = (uint32_t)(LLC_DEADTIME);
 8002990:	23b4      	movs	r3, #180	; 0xb4
  pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_WRITE;
  pDeadTimeCfg.FallingValue = (uint32_t)(LLC_DEADTIME);
  pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
  pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
  pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_WRITE;
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 8002992:	4886      	ldr	r0, [pc, #536]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL8;
 8002994:	9127      	str	r1, [sp, #156]	; 0x9c
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 8002996:	aa27      	add	r2, sp, #156	; 0x9c
  pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_WRITE;
 8002998:	e9cd 1129 	strd	r1, r1, [sp, #164]	; 0xa4
  pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
 800299c:	e9cd 112d 	strd	r1, r1, [sp, #180]	; 0xb4
  pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_WRITE;
 80029a0:	912b      	str	r1, [sp, #172]	; 0xac
  pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_WRITE;
 80029a2:	912f      	str	r1, [sp, #188]	; 0xbc
  pDeadTimeCfg.RisingValue = (uint32_t)(LLC_DEADTIME);
 80029a4:	9328      	str	r3, [sp, #160]	; 0xa0
  pDeadTimeCfg.FallingValue = (uint32_t)(LLC_DEADTIME);
 80029a6:	932c      	str	r3, [sp, #176]	; 0xb0
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 80029a8:	f004 fed0 	bl	800774c <HAL_HRTIM_DeadTimeConfig>
 80029ac:	2800      	cmp	r0, #0
 80029ae:	f040 8212 	bne.w	8002dd6 <DCDC_TIMx_Configuration+0x8aa>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pDeadTimeCfg) != HAL_OK)
 80029b2:	487e      	ldr	r0, [pc, #504]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
 80029b4:	aa27      	add	r2, sp, #156	; 0x9c
 80029b6:	2101      	movs	r1, #1
 80029b8:	f004 fec8 	bl	800774c <HAL_HRTIM_DeadTimeConfig>
 80029bc:	2800      	cmp	r0, #0
 80029be:	f040 8207 	bne.w	8002dd0 <DCDC_TIMx_Configuration+0x8a4>
  {
    Error_Handler();
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL4;
  pDeadTimeCfg.RisingValue = (uint32_t)(TIMD_DEADTIME);
 80029c2:	23c8      	movs	r3, #200	; 0xc8
 80029c4:	9328      	str	r3, [sp, #160]	; 0xa0
  pDeadTimeCfg.FallingValue = (uint32_t)(TIMD_DEADTIME);
 80029c6:	932c      	str	r3, [sp, #176]	; 0xb0
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pDeadTimeCfg) != HAL_OK)
 80029c8:	4878      	ldr	r0, [pc, #480]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL4;
 80029ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pDeadTimeCfg) != HAL_OK)
 80029ce:	aa27      	add	r2, sp, #156	; 0x9c
 80029d0:	2103      	movs	r1, #3
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL4;
 80029d2:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pDeadTimeCfg) != HAL_OK)
 80029d4:	f004 feba 	bl	800774c <HAL_HRTIM_DeadTimeConfig>
 80029d8:	2800      	cmp	r0, #0
 80029da:	f040 81f6 	bne.w	8002dca <DCDC_TIMx_Configuration+0x89e>
  {
    Error_Handler();
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL4;
  pDeadTimeCfg.RisingValue = (uint32_t)(TIMF_DEADTIME);
 80029de:	23c8      	movs	r3, #200	; 0xc8
 80029e0:	9328      	str	r3, [sp, #160]	; 0xa0
  pDeadTimeCfg.FallingValue = (uint32_t)(TIMF_DEADTIME);
 80029e2:	932c      	str	r3, [sp, #176]	; 0xb0
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pDeadTimeCfg) != HAL_OK)
 80029e4:	4871      	ldr	r0, [pc, #452]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL4;
 80029e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pDeadTimeCfg) != HAL_OK)
 80029ea:	aa27      	add	r2, sp, #156	; 0x9c
 80029ec:	2105      	movs	r1, #5
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL4;
 80029ee:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pDeadTimeCfg) != HAL_OK)
 80029f0:	f004 feac 	bl	800774c <HAL_HRTIM_DeadTimeConfig>
 80029f4:	2800      	cmp	r0, #0
 80029f6:	f040 81e5 	bne.w	8002dc4 <DCDC_TIMx_Configuration+0x898>
  {
    Error_Handler();
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL4;
  pDeadTimeCfg.RisingValue = (uint32_t)(0);
 80029fa:	2300      	movs	r3, #0
 80029fc:	9328      	str	r3, [sp, #160]	; 0xa0
  pDeadTimeCfg.FallingValue = (uint32_t)(0);
 80029fe:	932c      	str	r3, [sp, #176]	; 0xb0
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pDeadTimeCfg) != HAL_OK)
 8002a00:	486a      	ldr	r0, [pc, #424]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL4;
 8002a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pDeadTimeCfg) != HAL_OK)
 8002a06:	aa27      	add	r2, sp, #156	; 0x9c
 8002a08:	2104      	movs	r1, #4
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL4;
 8002a0a:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pDeadTimeCfg) != HAL_OK)
 8002a0c:	f004 fe9e 	bl	800774c <HAL_HRTIM_DeadTimeConfig>
 8002a10:	2800      	cmp	r0, #0
 8002a12:	f040 81d4 	bne.w	8002dbe <DCDC_TIMx_Configuration+0x892>
    Error_Handler();
  }

  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_MASTERPER;
 8002a16:	2380      	movs	r3, #128	; 0x80
 8002a18:	f04f 0c08 	mov.w	ip, #8
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8002a1c:	2100      	movs	r1, #0
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_MASTERPER;
 8002a1e:	e9cd c320 	strd	ip, r3, [sp, #128]	; 0x80
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8002a22:	4862      	ldr	r0, [pc, #392]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8002a24:	911f      	str	r1, [sp, #124]	; 0x7c
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8002a26:	ab1f      	add	r3, sp, #124	; 0x7c
 8002a28:	2201      	movs	r2, #1
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8002a2a:	e9cd 1122 	strd	r1, r1, [sp, #136]	; 0x88
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8002a2e:	e9cd 1124 	strd	r1, r1, [sp, #144]	; 0x90
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8002a32:	9126      	str	r1, [sp, #152]	; 0x98
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8002a34:	f004 ff9a 	bl	800796c <HAL_HRTIM_WaveformOutputConfig>
 8002a38:	2800      	cmp	r0, #0
 8002a3a:	f040 81bd 	bne.w	8002db8 <DCDC_TIMx_Configuration+0x88c>
  {
    Error_Handler();
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_MASTERCMP1;
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8002a3e:	2308      	movs	r3, #8
 8002a40:	f44f 7480 	mov.w	r4, #256	; 0x100
 8002a44:	e9cd 4320 	strd	r4, r3, [sp, #128]	; 0x80
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 8002a48:	4858      	ldr	r0, [pc, #352]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
 8002a4a:	ab1f      	add	r3, sp, #124	; 0x7c
 8002a4c:	2204      	movs	r2, #4
 8002a4e:	2101      	movs	r1, #1
 8002a50:	f004 ff8c 	bl	800796c <HAL_HRTIM_WaveformOutputConfig>
 8002a54:	2800      	cmp	r0, #0
 8002a56:	f040 81ac 	bne.w	8002db2 <DCDC_TIMx_Configuration+0x886>
  {
    Error_Handler();
  }
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8002a5a:	2300      	movs	r3, #0
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;//HRTIM_OUTPUTSET_TIMDEV8_TIMFCMP1;//HRTIM_OUTPUTSET_TIMDEV8_TIMFCMP1; //HRTIM_OUTPUTSET_TIMCMP1;
 8002a5c:	2208      	movs	r2, #8
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8002a5e:	9323      	str	r3, [sp, #140]	; 0x8c
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE; //HRTIM_OUTPUTRESET_TIMDEV9_TIMFCMP3;
 8002a60:	9321      	str	r3, [sp, #132]	; 0x84
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;//HRTIM_OUTPUTSET_TIMDEV8_TIMFCMP1;//HRTIM_OUTPUTSET_TIMDEV8_TIMFCMP1; //HRTIM_OUTPUTSET_TIMCMP1;
 8002a62:	9220      	str	r2, [sp, #128]	; 0x80
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 8002a64:	4851      	ldr	r0, [pc, #324]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
 8002a66:	ab1f      	add	r3, sp, #124	; 0x7c
 8002a68:	2240      	movs	r2, #64	; 0x40
 8002a6a:	2103      	movs	r1, #3
 8002a6c:	f004 ff7e 	bl	800796c <HAL_HRTIM_WaveformOutputConfig>
 8002a70:	2800      	cmp	r0, #0
 8002a72:	f040 819b 	bne.w	8002dac <DCDC_TIMx_Configuration+0x880>
  {
    Error_Handler();
  }
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8002a76:	2300      	movs	r3, #0
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 8002a78:	2208      	movs	r2, #8
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8002a7a:	9323      	str	r3, [sp, #140]	; 0x8c
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8002a7c:	9321      	str	r3, [sp, #132]	; 0x84
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 8002a7e:	9220      	str	r2, [sp, #128]	; 0x80
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF1, &pOutputCfg) != HAL_OK)
 8002a80:	484a      	ldr	r0, [pc, #296]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
 8002a82:	ab1f      	add	r3, sp, #124	; 0x7c
 8002a84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a88:	2105      	movs	r1, #5
 8002a8a:	f004 ff6f 	bl	800796c <HAL_HRTIM_WaveformOutputConfig>
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	f040 8189 	bne.w	8002da6 <DCDC_TIMx_Configuration+0x87a>
  {
    Error_Handler();
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8002a94:	2100      	movs	r1, #0
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8002a96:	4845      	ldr	r0, [pc, #276]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8002a98:	9120      	str	r1, [sp, #128]	; 0x80
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8002a9a:	ab1f      	add	r3, sp, #124	; 0x7c
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	f004 ff65 	bl	800796c <HAL_HRTIM_WaveformOutputConfig>
 8002aa2:	2800      	cmp	r0, #0
 8002aa4:	f040 817c 	bne.w	8002da0 <DCDC_TIMx_Configuration+0x874>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8002aa8:	4840      	ldr	r0, [pc, #256]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
 8002aaa:	ab1f      	add	r3, sp, #124	; 0x7c
 8002aac:	2208      	movs	r2, #8
 8002aae:	2101      	movs	r1, #1
 8002ab0:	f004 ff5c 	bl	800796c <HAL_HRTIM_WaveformOutputConfig>
 8002ab4:	2800      	cmp	r0, #0
 8002ab6:	f040 8170 	bne.w	8002d9a <DCDC_TIMx_Configuration+0x86e>
  {
    Error_Handler();
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP3;//HRTIM_OUTPUTRESET_TIMDEV9_TIMFCMP3; //FROM CMP2
 8002aba:	2000      	movs	r0, #0
 8002abc:	2320      	movs	r3, #32
 8002abe:	e9cd 0320 	strd	r0, r3, [sp, #128]	; 0x80
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 8002ac2:	2280      	movs	r2, #128	; 0x80
 8002ac4:	4839      	ldr	r0, [pc, #228]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
 8002ac6:	ab1f      	add	r3, sp, #124	; 0x7c
 8002ac8:	2103      	movs	r1, #3
 8002aca:	f004 ff4f 	bl	800796c <HAL_HRTIM_WaveformOutputConfig>
 8002ace:	2800      	cmp	r0, #0
 8002ad0:	f040 8160 	bne.w	8002d94 <DCDC_TIMx_Configuration+0x868>
  {
    Error_Handler();
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8002ad4:	2300      	movs	r3, #0
  pOutputCfg.ResetSource = HRTIM_OUTPUTSET_NONE;
 8002ad6:	e9cd 3320 	strd	r3, r3, [sp, #128]	; 0x80
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8002ada:	4834      	ldr	r0, [pc, #208]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
 8002adc:	ab1f      	add	r3, sp, #124	; 0x7c
 8002ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ae2:	2104      	movs	r1, #4
 8002ae4:	f004 ff42 	bl	800796c <HAL_HRTIM_WaveformOutputConfig>
 8002ae8:	2800      	cmp	r0, #0
 8002aea:	f040 8150 	bne.w	8002d8e <DCDC_TIMx_Configuration+0x862>
  {
    Error_Handler();
  }

  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;//HRTIM_OUTPUTSET_TIMEEV8_TIMFCMP3;
 8002aee:	2104      	movs	r1, #4
  pOutputCfg.ResetSource = HRTIM_OUTPUTSET_TIMPER;//HRTIM_OUTPUTSET_TIMEEV8_TIMFCMP3;
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE2, &pOutputCfg) != HAL_OK)
 8002af0:	482e      	ldr	r0, [pc, #184]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
 8002af2:	ab1f      	add	r3, sp, #124	; 0x7c
 8002af4:	f44f 7200 	mov.w	r2, #512	; 0x200
  pOutputCfg.ResetSource = HRTIM_OUTPUTSET_TIMPER;//HRTIM_OUTPUTSET_TIMEEV8_TIMFCMP3;
 8002af8:	e9cd 1120 	strd	r1, r1, [sp, #128]	; 0x80
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE2, &pOutputCfg) != HAL_OK)
 8002afc:	f004 ff36 	bl	800796c <HAL_HRTIM_WaveformOutputConfig>
 8002b00:	2800      	cmp	r0, #0
 8002b02:	f040 8141 	bne.w	8002d88 <DCDC_TIMx_Configuration+0x85c>
  {
    Error_Handler();
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8002b06:	2200      	movs	r2, #0
 8002b08:	9220      	str	r2, [sp, #128]	; 0x80
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP3;
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	9221      	str	r2, [sp, #132]	; 0x84
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF2, &pOutputCfg) != HAL_OK)
 8002b0e:	4827      	ldr	r0, [pc, #156]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
 8002b10:	ab1f      	add	r3, sp, #124	; 0x7c
 8002b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b16:	2105      	movs	r1, #5
 8002b18:	f004 ff28 	bl	800796c <HAL_HRTIM_WaveformOutputConfig>
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	f040 8130 	bne.w	8002d82 <DCDC_TIMx_Configuration+0x856>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8002b22:	4822      	ldr	r0, [pc, #136]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
 8002b24:	aa0f      	add	r2, sp, #60	; 0x3c
 8002b26:	2101      	movs	r1, #1
 8002b28:	f003 fe50 	bl	80067cc <HAL_HRTIM_TimeBaseConfig>
 8002b2c:	2800      	cmp	r0, #0
 8002b2e:	f040 8125 	bne.w	8002d7c <DCDC_TIMx_Configuration+0x850>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCtl) != HAL_OK)
 8002b32:	481e      	ldr	r0, [pc, #120]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
 8002b34:	aa18      	add	r2, sp, #96	; 0x60
 8002b36:	2101      	movs	r1, #1
 8002b38:	f004 fce8 	bl	800750c <HAL_HRTIM_WaveformTimerControl>
 8002b3c:	2800      	cmp	r0, #0
 8002b3e:	f040 811a 	bne.w	8002d76 <DCDC_TIMx_Configuration+0x84a>
  {
    Error_Handler();
  }
  pTimeBaseCfg.Period = (uint32_t)TIMF_PERIOD;
 8002b42:	f246 72be 	movw	r2, #26558	; 0x67be
  pTimeBaseCfg.RepetitionCounter = 1;
 8002b46:	2301      	movs	r3, #1
  pTimeBaseCfg.Period = (uint32_t)TIMF_PERIOD;
 8002b48:	920f      	str	r2, [sp, #60]	; 0x3c
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL16;
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8002b4a:	4818      	ldr	r0, [pc, #96]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
 8002b4c:	aa0f      	add	r2, sp, #60	; 0x3c
 8002b4e:	2103      	movs	r1, #3
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL16;
 8002b50:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8002b54:	f003 fe3a 	bl	80067cc <HAL_HRTIM_TimeBaseConfig>
 8002b58:	2800      	cmp	r0, #0
 8002b5a:	f040 8109 	bne.w	8002d70 <DCDC_TIMx_Configuration+0x844>
  {
    Error_Handler();
  }

  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UPDOWN;
  pTimerCtl.TrigHalf = HRTIM_TIMERTRIGHALF_DISABLED;
 8002b5e:	2201      	movs	r2, #1
 8002b60:	2300      	movs	r3, #0
 8002b62:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCtl) != HAL_OK)
 8002b66:	4811      	ldr	r0, [pc, #68]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
 8002b68:	aa18      	add	r2, sp, #96	; 0x60
 8002b6a:	2103      	movs	r1, #3
 8002b6c:	f004 fcce 	bl	800750c <HAL_HRTIM_WaveformTimerControl>
 8002b70:	2800      	cmp	r0, #0
 8002b72:	f040 80fa 	bne.w	8002d6a <DCDC_TIMx_Configuration+0x83e>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_RollOverModeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_TIM_FEROM_VALLEY|HRTIM_TIM_BMROM_VALLEY
 8002b76:	480d      	ldr	r0, [pc, #52]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
 8002b78:	f245 5240 	movw	r2, #21824	; 0x5540
 8002b7c:	2103      	movs	r1, #3
 8002b7e:	f004 fb39 	bl	80071f4 <HAL_HRTIM_RollOverModeConfig>
 8002b82:	2800      	cmp	r0, #0
 8002b84:	f040 80ee 	bne.w	8002d64 <DCDC_TIMx_Configuration+0x838>
                              |HRTIM_TIM_ADROM_VALLEY|HRTIM_TIM_OUTROM_VALLEY
                              |HRTIM_TIM_ROM_VALLEY) != HAL_OK)
  {
    Error_Handler();
  }
  pCompareCfg.CompareValue = (uint32_t)(TIMD_PERIOD/2);
 8002b88:	f243 32df 	movw	r2, #13279	; 0x33df
 8002b8c:	9208      	str	r2, [sp, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8002b8e:	4807      	ldr	r0, [pc, #28]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
 8002b90:	ab08      	add	r3, sp, #32
 8002b92:	2201      	movs	r2, #1
 8002b94:	2103      	movs	r1, #3
 8002b96:	f004 fe2d 	bl	80077f4 <HAL_HRTIM_WaveformCompareConfig>
 8002b9a:	2800      	cmp	r0, #0
 8002b9c:	f040 80df 	bne.w	8002d5e <DCDC_TIMx_Configuration+0x832>
  {
    Error_Handler();
  }
  pCompareCfg.CompareValue = (uint32_t)(TIMD_PERIOD*TIMD_DUTY_CYCLE);
 8002ba0:	f243 32df 	movw	r2, #13279	; 0x33df
 8002ba4:	9208      	str	r2, [sp, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8002ba6:	4801      	ldr	r0, [pc, #4]	; (8002bac <DCDC_TIMx_Configuration+0x680>)
 8002ba8:	ab08      	add	r3, sp, #32
 8002baa:	e001      	b.n	8002bb0 <DCDC_TIMx_Configuration+0x684>
 8002bac:	2001112c 	.word	0x2001112c
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	2103      	movs	r1, #3
 8002bb4:	f004 fe1e 	bl	80077f4 <HAL_HRTIM_WaveformCompareConfig>
 8002bb8:	2800      	cmp	r0, #0
 8002bba:	f040 80cd 	bne.w	8002d58 <DCDC_TIMx_Configuration+0x82c>
  {
    Error_Handler();
  }
  pCompareCfg.CompareValue = (uint32_t)TIMF_PERIOD*1.5;
 8002bbe:	f649 329d 	movw	r2, #39837	; 0x9b9d
 8002bc2:	9208      	str	r2, [sp, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8002bc4:	48be      	ldr	r0, [pc, #760]	; (8002ec0 <DCDC_TIMx_Configuration+0x994>)
 8002bc6:	ab08      	add	r3, sp, #32
 8002bc8:	2204      	movs	r2, #4
 8002bca:	2103      	movs	r1, #3
 8002bcc:	f004 fe12 	bl	80077f4 <HAL_HRTIM_WaveformCompareConfig>
 8002bd0:	2800      	cmp	r0, #0
 8002bd2:	f040 80be 	bne.w	8002d52 <DCDC_TIMx_Configuration+0x826>
  {
    Error_Handler();
  }
  pTimeBaseCfg.Period = (uint32_t)(TIMF_PERIOD);
  pTimeBaseCfg.RepetitionCounter = 1;
 8002bd6:	f246 72be 	movw	r2, #26558	; 0x67be
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
  pTimeBaseCfg.Mode = HRTIM_MODE_SINGLESHOT_RETRIGGERABLE;
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8002be0:	48b7      	ldr	r0, [pc, #732]	; (8002ec0 <DCDC_TIMx_Configuration+0x994>)
  pTimeBaseCfg.Mode = HRTIM_MODE_SINGLESHOT_RETRIGGERABLE;
 8002be2:	2310      	movs	r3, #16
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8002be4:	aa0f      	add	r2, sp, #60	; 0x3c
 8002be6:	2104      	movs	r1, #4
  pTimeBaseCfg.Mode = HRTIM_MODE_SINGLESHOT_RETRIGGERABLE;
 8002be8:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8002bea:	f003 fdef 	bl	80067cc <HAL_HRTIM_TimeBaseConfig>
 8002bee:	2800      	cmp	r0, #0
 8002bf0:	f040 80ac 	bne.w	8002d4c <DCDC_TIMx_Configuration+0x820>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCtl) != HAL_OK)
 8002bf4:	48b2      	ldr	r0, [pc, #712]	; (8002ec0 <DCDC_TIMx_Configuration+0x994>)
 8002bf6:	aa18      	add	r2, sp, #96	; 0x60
 8002bf8:	2104      	movs	r1, #4
 8002bfa:	f004 fc87 	bl	800750c <HAL_HRTIM_WaveformTimerControl>
 8002bfe:	2800      	cmp	r0, #0
 8002c00:	f040 80a1 	bne.w	8002d46 <DCDC_TIMx_Configuration+0x81a>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_RollOverModeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_TIM_FEROM_BOTH|HRTIM_TIM_BMROM_BOTH
 8002c04:	48ae      	ldr	r0, [pc, #696]	; (8002ec0 <DCDC_TIMx_Configuration+0x994>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	2104      	movs	r1, #4
 8002c0a:	f004 faf3 	bl	80071f4 <HAL_HRTIM_RollOverModeConfig>
 8002c0e:	2800      	cmp	r0, #0
 8002c10:	f040 8096 	bne.w	8002d40 <DCDC_TIMx_Configuration+0x814>
                              |HRTIM_TIM_ADROM_BOTH|HRTIM_TIM_OUTROM_BOTH
                              |HRTIM_TIM_ROM_BOTH) != HAL_OK)
  {
    Error_Handler();
  }
  pTimeBaseCfg.Period = (uint32_t)TIMF_PERIOD;
 8002c14:	f246 73be 	movw	r3, #26558	; 0x67be
 8002c18:	930f      	str	r3, [sp, #60]	; 0x3c
  pTimeBaseCfg.RepetitionCounter = 1;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	9310      	str	r3, [sp, #64]	; 0x40
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimeBaseCfg) != HAL_OK)
 8002c1e:	48a8      	ldr	r0, [pc, #672]	; (8002ec0 <DCDC_TIMx_Configuration+0x994>)
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8002c20:	2308      	movs	r3, #8
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimeBaseCfg) != HAL_OK)
 8002c22:	aa0f      	add	r2, sp, #60	; 0x3c
 8002c24:	2105      	movs	r1, #5
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8002c26:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimeBaseCfg) != HAL_OK)
 8002c28:	f003 fdd0 	bl	80067cc <HAL_HRTIM_TimeBaseConfig>
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	f040 8084 	bne.w	8002d3a <DCDC_TIMx_Configuration+0x80e>
  {
    Error_Handler();
  }
  pTimerCtl.GreaterCMP3 = HRTIM_TIMERGTCMP3_EQUAL;
 8002c32:	2300      	movs	r3, #0
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCtl) != HAL_OK)
 8002c34:	48a2      	ldr	r0, [pc, #648]	; (8002ec0 <DCDC_TIMx_Configuration+0x994>)
  pTimerCtl.GreaterCMP3 = HRTIM_TIMERGTCMP3_EQUAL;
 8002c36:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCtl) != HAL_OK)
 8002c38:	aa18      	add	r2, sp, #96	; 0x60
 8002c3a:	2105      	movs	r1, #5
 8002c3c:	f004 fc66 	bl	800750c <HAL_HRTIM_WaveformTimerControl>
 8002c40:	2800      	cmp	r0, #0
 8002c42:	d177      	bne.n	8002d34 <DCDC_TIMx_Configuration+0x808>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_RollOverModeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_TIM_FEROM_VALLEY|HRTIM_TIM_BMROM_VALLEY
 8002c44:	489e      	ldr	r0, [pc, #632]	; (8002ec0 <DCDC_TIMx_Configuration+0x994>)
 8002c46:	f245 5240 	movw	r2, #21824	; 0x5540
 8002c4a:	2105      	movs	r1, #5
 8002c4c:	f004 fad2 	bl	80071f4 <HAL_HRTIM_RollOverModeConfig>
 8002c50:	2800      	cmp	r0, #0
 8002c52:	d16c      	bne.n	8002d2e <DCDC_TIMx_Configuration+0x802>
                              |HRTIM_TIM_ADROM_VALLEY|HRTIM_TIM_OUTROM_VALLEY
                              |HRTIM_TIM_ROM_VALLEY) != HAL_OK)
  {
    Error_Handler();
  }
  pCompareCfg.CompareValue = (uint32_t)(TIMF_PERIOD/2);
 8002c54:	f243 31df 	movw	r1, #13279	; 0x33df
 8002c58:	9108      	str	r1, [sp, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8002c5a:	4899      	ldr	r0, [pc, #612]	; (8002ec0 <DCDC_TIMx_Configuration+0x994>)
 8002c5c:	ab08      	add	r3, sp, #32
 8002c5e:	2201      	movs	r2, #1
 8002c60:	2104      	movs	r1, #4
 8002c62:	f004 fdc7 	bl	80077f4 <HAL_HRTIM_WaveformCompareConfig>
 8002c66:	2800      	cmp	r0, #0
 8002c68:	d15e      	bne.n	8002d28 <DCDC_TIMx_Configuration+0x7fc>
  {
    Error_Handler();
  }
  pCompareCfg.CompareValue = (uint32_t)(TIMF_PERIOD/2);
 8002c6a:	f243 31df 	movw	r1, #13279	; 0x33df
 8002c6e:	9108      	str	r1, [sp, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8002c70:	4893      	ldr	r0, [pc, #588]	; (8002ec0 <DCDC_TIMx_Configuration+0x994>)
 8002c72:	ab08      	add	r3, sp, #32
 8002c74:	2202      	movs	r2, #2
 8002c76:	2104      	movs	r1, #4
 8002c78:	f004 fdbc 	bl	80077f4 <HAL_HRTIM_WaveformCompareConfig>
 8002c7c:	2800      	cmp	r0, #0
 8002c7e:	d150      	bne.n	8002d22 <DCDC_TIMx_Configuration+0x7f6>
  {
    Error_Handler();
  }
  pCompareCfg.CompareValue = (uint32_t)(TIMF_PERIOD * TIMF_DUTY_CYCLE);
 8002c80:	f243 31df 	movw	r1, #13279	; 0x33df
 8002c84:	9108      	str	r1, [sp, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8002c86:	488e      	ldr	r0, [pc, #568]	; (8002ec0 <DCDC_TIMx_Configuration+0x994>)
 8002c88:	ab08      	add	r3, sp, #32
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	2105      	movs	r1, #5
 8002c8e:	f004 fdb1 	bl	80077f4 <HAL_HRTIM_WaveformCompareConfig>
 8002c92:	2800      	cmp	r0, #0
 8002c94:	d142      	bne.n	8002d1c <DCDC_TIMx_Configuration+0x7f0>
  {
    Error_Handler();
  }
  pCompareCfg.CompareValue = (uint32_t)(60);
 8002c96:	213c      	movs	r1, #60	; 0x3c
 8002c98:	9108      	str	r1, [sp, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8002c9a:	4889      	ldr	r0, [pc, #548]	; (8002ec0 <DCDC_TIMx_Configuration+0x994>)
 8002c9c:	ab08      	add	r3, sp, #32
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	2105      	movs	r1, #5
 8002ca2:	f004 fda7 	bl	80077f4 <HAL_HRTIM_WaveformCompareConfig>
 8002ca6:	2800      	cmp	r0, #0
 8002ca8:	d135      	bne.n	8002d16 <DCDC_TIMx_Configuration+0x7ea>
  {
    Error_Handler();
  }
  pCompareCfg.CompareValue = (uint32_t)((0));//(uint32_t)((TIMF_PERIOD * ADC23_TRIG_DUTY_CYCLE));
 8002caa:	2100      	movs	r1, #0
 8002cac:	9108      	str	r1, [sp, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8002cae:	4884      	ldr	r0, [pc, #528]	; (8002ec0 <DCDC_TIMx_Configuration+0x994>)
 8002cb0:	ab08      	add	r3, sp, #32
 8002cb2:	2204      	movs	r2, #4
 8002cb4:	2105      	movs	r1, #5
 8002cb6:	f004 fd9d 	bl	80077f4 <HAL_HRTIM_WaveformCompareConfig>
 8002cba:	bb48      	cbnz	r0, 8002d10 <DCDC_TIMx_Configuration+0x7e4>
  {
    Error_Handler();
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */
  HRTIM1_COMMON->CR2 |= (1 << 20);
 8002cbc:	4a81      	ldr	r2, [pc, #516]	; (8002ec4 <DCDC_TIMx_Configuration+0x998>)
  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8002cbe:	4880      	ldr	r0, [pc, #512]	; (8002ec0 <DCDC_TIMx_Configuration+0x994>)
  HRTIM1_COMMON->CR2 |= (1 << 20);
 8002cc0:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8002cc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cc8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8002ccc:	f002 fc4e 	bl	800556c <HAL_HRTIM_MspPostInit>

  //HAL_HRTIM_BurstDMAConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_BURSTDMA_SET1R);
  //HAL_HRTIM_BurstDMATransfer(&hhrtim1,HRTIM_TIMERINDEX_TIMER_D,TIMD_DMA_Buffer[0],1);
}
 8002cd0:	b048      	add	sp, #288	; 0x120
 8002cd2:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002cd4:	f002 fb74 	bl	80053c0 <Error_Handler>
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8002cd8:	4879      	ldr	r0, [pc, #484]	; (8002ec0 <DCDC_TIMx_Configuration+0x994>)
 8002cda:	210c      	movs	r1, #12
 8002cdc:	f003 fd1c 	bl	8006718 <HAL_HRTIM_DLLCalibrationStart>
 8002ce0:	2800      	cmp	r0, #0
 8002ce2:	f43f ac6b 	beq.w	80025bc <DCDC_TIMx_Configuration+0x90>
    Error_Handler();
 8002ce6:	f002 fb6b 	bl	80053c0 <Error_Handler>
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8002cea:	4875      	ldr	r0, [pc, #468]	; (8002ec0 <DCDC_TIMx_Configuration+0x994>)
 8002cec:	210a      	movs	r1, #10
 8002cee:	f003 fd4b 	bl	8006788 <HAL_HRTIM_PollForDLLCalibration>
 8002cf2:	2800      	cmp	r0, #0
 8002cf4:	f43f ac69 	beq.w	80025ca <DCDC_TIMx_Configuration+0x9e>
    Error_Handler();
 8002cf8:	f002 fb62 	bl	80053c0 <Error_Handler>
  if (HAL_HRTIM_EventPrescalerConfig(&hhrtim1, HRTIM_EVENTPRESCALER_DIV1) != HAL_OK)
 8002cfc:	4870      	ldr	r0, [pc, #448]	; (8002ec0 <DCDC_TIMx_Configuration+0x994>)
 8002cfe:	2100      	movs	r1, #0
 8002d00:	f003 fdc0 	bl	8006884 <HAL_HRTIM_EventPrescalerConfig>
 8002d04:	2800      	cmp	r0, #0
 8002d06:	f43f ac67 	beq.w	80025d8 <DCDC_TIMx_Configuration+0xac>
    Error_Handler();
 8002d0a:	f002 fb59 	bl	80053c0 <Error_Handler>
 8002d0e:	e463      	b.n	80025d8 <DCDC_TIMx_Configuration+0xac>
    Error_Handler();
 8002d10:	f002 fb56 	bl	80053c0 <Error_Handler>
 8002d14:	e7d2      	b.n	8002cbc <DCDC_TIMx_Configuration+0x790>
    Error_Handler();
 8002d16:	f002 fb53 	bl	80053c0 <Error_Handler>
 8002d1a:	e7c6      	b.n	8002caa <DCDC_TIMx_Configuration+0x77e>
    Error_Handler();
 8002d1c:	f002 fb50 	bl	80053c0 <Error_Handler>
 8002d20:	e7b9      	b.n	8002c96 <DCDC_TIMx_Configuration+0x76a>
    Error_Handler();
 8002d22:	f002 fb4d 	bl	80053c0 <Error_Handler>
 8002d26:	e7ab      	b.n	8002c80 <DCDC_TIMx_Configuration+0x754>
    Error_Handler();
 8002d28:	f002 fb4a 	bl	80053c0 <Error_Handler>
 8002d2c:	e79d      	b.n	8002c6a <DCDC_TIMx_Configuration+0x73e>
    Error_Handler();
 8002d2e:	f002 fb47 	bl	80053c0 <Error_Handler>
 8002d32:	e78f      	b.n	8002c54 <DCDC_TIMx_Configuration+0x728>
    Error_Handler();
 8002d34:	f002 fb44 	bl	80053c0 <Error_Handler>
 8002d38:	e784      	b.n	8002c44 <DCDC_TIMx_Configuration+0x718>
    Error_Handler();
 8002d3a:	f002 fb41 	bl	80053c0 <Error_Handler>
 8002d3e:	e778      	b.n	8002c32 <DCDC_TIMx_Configuration+0x706>
    Error_Handler();
 8002d40:	f002 fb3e 	bl	80053c0 <Error_Handler>
 8002d44:	e766      	b.n	8002c14 <DCDC_TIMx_Configuration+0x6e8>
    Error_Handler();
 8002d46:	f002 fb3b 	bl	80053c0 <Error_Handler>
 8002d4a:	e75b      	b.n	8002c04 <DCDC_TIMx_Configuration+0x6d8>
    Error_Handler();
 8002d4c:	f002 fb38 	bl	80053c0 <Error_Handler>
 8002d50:	e750      	b.n	8002bf4 <DCDC_TIMx_Configuration+0x6c8>
    Error_Handler();
 8002d52:	f002 fb35 	bl	80053c0 <Error_Handler>
 8002d56:	e73e      	b.n	8002bd6 <DCDC_TIMx_Configuration+0x6aa>
    Error_Handler();
 8002d58:	f002 fb32 	bl	80053c0 <Error_Handler>
 8002d5c:	e72f      	b.n	8002bbe <DCDC_TIMx_Configuration+0x692>
    Error_Handler();
 8002d5e:	f002 fb2f 	bl	80053c0 <Error_Handler>
 8002d62:	e71d      	b.n	8002ba0 <DCDC_TIMx_Configuration+0x674>
    Error_Handler();
 8002d64:	f002 fb2c 	bl	80053c0 <Error_Handler>
 8002d68:	e70e      	b.n	8002b88 <DCDC_TIMx_Configuration+0x65c>
    Error_Handler();
 8002d6a:	f002 fb29 	bl	80053c0 <Error_Handler>
 8002d6e:	e702      	b.n	8002b76 <DCDC_TIMx_Configuration+0x64a>
    Error_Handler();
 8002d70:	f002 fb26 	bl	80053c0 <Error_Handler>
 8002d74:	e6f3      	b.n	8002b5e <DCDC_TIMx_Configuration+0x632>
    Error_Handler();
 8002d76:	f002 fb23 	bl	80053c0 <Error_Handler>
 8002d7a:	e6e2      	b.n	8002b42 <DCDC_TIMx_Configuration+0x616>
    Error_Handler();
 8002d7c:	f002 fb20 	bl	80053c0 <Error_Handler>
 8002d80:	e6d7      	b.n	8002b32 <DCDC_TIMx_Configuration+0x606>
    Error_Handler();
 8002d82:	f002 fb1d 	bl	80053c0 <Error_Handler>
 8002d86:	e6cc      	b.n	8002b22 <DCDC_TIMx_Configuration+0x5f6>
    Error_Handler();
 8002d88:	f002 fb1a 	bl	80053c0 <Error_Handler>
 8002d8c:	e6bb      	b.n	8002b06 <DCDC_TIMx_Configuration+0x5da>
    Error_Handler();
 8002d8e:	f002 fb17 	bl	80053c0 <Error_Handler>
 8002d92:	e6ac      	b.n	8002aee <DCDC_TIMx_Configuration+0x5c2>
    Error_Handler();
 8002d94:	f002 fb14 	bl	80053c0 <Error_Handler>
 8002d98:	e69c      	b.n	8002ad4 <DCDC_TIMx_Configuration+0x5a8>
    Error_Handler();
 8002d9a:	f002 fb11 	bl	80053c0 <Error_Handler>
 8002d9e:	e68c      	b.n	8002aba <DCDC_TIMx_Configuration+0x58e>
    Error_Handler();
 8002da0:	f002 fb0e 	bl	80053c0 <Error_Handler>
 8002da4:	e680      	b.n	8002aa8 <DCDC_TIMx_Configuration+0x57c>
    Error_Handler();
 8002da6:	f002 fb0b 	bl	80053c0 <Error_Handler>
 8002daa:	e673      	b.n	8002a94 <DCDC_TIMx_Configuration+0x568>
    Error_Handler();
 8002dac:	f002 fb08 	bl	80053c0 <Error_Handler>
 8002db0:	e661      	b.n	8002a76 <DCDC_TIMx_Configuration+0x54a>
    Error_Handler();
 8002db2:	f002 fb05 	bl	80053c0 <Error_Handler>
 8002db6:	e650      	b.n	8002a5a <DCDC_TIMx_Configuration+0x52e>
    Error_Handler();
 8002db8:	f002 fb02 	bl	80053c0 <Error_Handler>
 8002dbc:	e63f      	b.n	8002a3e <DCDC_TIMx_Configuration+0x512>
    Error_Handler();
 8002dbe:	f002 faff 	bl	80053c0 <Error_Handler>
 8002dc2:	e628      	b.n	8002a16 <DCDC_TIMx_Configuration+0x4ea>
    Error_Handler();
 8002dc4:	f002 fafc 	bl	80053c0 <Error_Handler>
 8002dc8:	e617      	b.n	80029fa <DCDC_TIMx_Configuration+0x4ce>
    Error_Handler();
 8002dca:	f002 faf9 	bl	80053c0 <Error_Handler>
 8002dce:	e606      	b.n	80029de <DCDC_TIMx_Configuration+0x4b2>
    Error_Handler();
 8002dd0:	f002 faf6 	bl	80053c0 <Error_Handler>
 8002dd4:	e5f5      	b.n	80029c2 <DCDC_TIMx_Configuration+0x496>
    Error_Handler();
 8002dd6:	f002 faf3 	bl	80053c0 <Error_Handler>
 8002dda:	e5ea      	b.n	80029b2 <DCDC_TIMx_Configuration+0x486>
    Error_Handler();
 8002ddc:	f002 faf0 	bl	80053c0 <Error_Handler>
 8002de0:	e5d5      	b.n	800298e <DCDC_TIMx_Configuration+0x462>
    Error_Handler();
 8002de2:	f002 faed 	bl	80053c0 <Error_Handler>
 8002de6:	e5c9      	b.n	800297c <DCDC_TIMx_Configuration+0x450>
    Error_Handler();
 8002de8:	f002 faea 	bl	80053c0 <Error_Handler>
 8002dec:	e5ba      	b.n	8002964 <DCDC_TIMx_Configuration+0x438>
    Error_Handler();
 8002dee:	f002 fae7 	bl	80053c0 <Error_Handler>
 8002df2:	e5a8      	b.n	8002946 <DCDC_TIMx_Configuration+0x41a>
    Error_Handler();
 8002df4:	f002 fae4 	bl	80053c0 <Error_Handler>
 8002df8:	e596      	b.n	8002928 <DCDC_TIMx_Configuration+0x3fc>
    Error_Handler();
 8002dfa:	f002 fae1 	bl	80053c0 <Error_Handler>
 8002dfe:	e57e      	b.n	80028fe <DCDC_TIMx_Configuration+0x3d2>
    Error_Handler();
 8002e00:	f002 fade 	bl	80053c0 <Error_Handler>
 8002e04:	e55f      	b.n	80028c6 <DCDC_TIMx_Configuration+0x39a>
    Error_Handler();
 8002e06:	f002 fadb 	bl	80053c0 <Error_Handler>
 8002e0a:	e530      	b.n	800286e <DCDC_TIMx_Configuration+0x342>
    Error_Handler();
 8002e0c:	f002 fad8 	bl	80053c0 <Error_Handler>
 8002e10:	e521      	b.n	8002856 <DCDC_TIMx_Configuration+0x32a>
    Error_Handler();
 8002e12:	f002 fad5 	bl	80053c0 <Error_Handler>
 8002e16:	e4fe      	b.n	8002816 <DCDC_TIMx_Configuration+0x2ea>
    Error_Handler();
 8002e18:	f002 fad2 	bl	80053c0 <Error_Handler>
 8002e1c:	e4f0      	b.n	8002800 <DCDC_TIMx_Configuration+0x2d4>
    Error_Handler();
 8002e1e:	f002 facf 	bl	80053c0 <Error_Handler>
 8002e22:	e4e3      	b.n	80027ec <DCDC_TIMx_Configuration+0x2c0>
    Error_Handler();
 8002e24:	f002 facc 	bl	80053c0 <Error_Handler>
 8002e28:	e4d4      	b.n	80027d4 <DCDC_TIMx_Configuration+0x2a8>
    Error_Handler();
 8002e2a:	f002 fac9 	bl	80053c0 <Error_Handler>
 8002e2e:	e4c5      	b.n	80027bc <DCDC_TIMx_Configuration+0x290>
    Error_Handler();
 8002e30:	f002 fac6 	bl	80053c0 <Error_Handler>
 8002e34:	e4b6      	b.n	80027a4 <DCDC_TIMx_Configuration+0x278>
    Error_Handler();
 8002e36:	f002 fac3 	bl	80053c0 <Error_Handler>
 8002e3a:	e4a7      	b.n	800278c <DCDC_TIMx_Configuration+0x260>
    Error_Handler();
 8002e3c:	f002 fac0 	bl	80053c0 <Error_Handler>
 8002e40:	e48b      	b.n	800275a <DCDC_TIMx_Configuration+0x22e>
    Error_Handler();
 8002e42:	f002 fabd 	bl	80053c0 <Error_Handler>
 8002e46:	e478      	b.n	800273a <DCDC_TIMx_Configuration+0x20e>
    Error_Handler();
 8002e48:	f002 faba 	bl	80053c0 <Error_Handler>
 8002e4c:	e46d      	b.n	800272a <DCDC_TIMx_Configuration+0x1fe>
    Error_Handler();
 8002e4e:	f002 fab7 	bl	80053c0 <Error_Handler>
 8002e52:	e462      	b.n	800271a <DCDC_TIMx_Configuration+0x1ee>
    Error_Handler();
 8002e54:	f002 fab4 	bl	80053c0 <Error_Handler>
 8002e58:	e457      	b.n	800270a <DCDC_TIMx_Configuration+0x1de>
    Error_Handler();
 8002e5a:	f002 fab1 	bl	80053c0 <Error_Handler>
 8002e5e:	e446      	b.n	80026ee <DCDC_TIMx_Configuration+0x1c2>
    Error_Handler();
 8002e60:	f002 faae 	bl	80053c0 <Error_Handler>
 8002e64:	e43b      	b.n	80026de <DCDC_TIMx_Configuration+0x1b2>
    Error_Handler();
 8002e66:	f002 faab 	bl	80053c0 <Error_Handler>
 8002e6a:	e430      	b.n	80026ce <DCDC_TIMx_Configuration+0x1a2>
    Error_Handler();
 8002e6c:	f002 faa8 	bl	80053c0 <Error_Handler>
 8002e70:	e425      	b.n	80026be <DCDC_TIMx_Configuration+0x192>
    Error_Handler();
 8002e72:	f002 faa5 	bl	80053c0 <Error_Handler>
 8002e76:	e411      	b.n	800269c <DCDC_TIMx_Configuration+0x170>
    Error_Handler();
 8002e78:	f002 faa2 	bl	80053c0 <Error_Handler>
 8002e7c:	e400      	b.n	8002680 <DCDC_TIMx_Configuration+0x154>
    Error_Handler();
 8002e7e:	f002 fa9f 	bl	80053c0 <Error_Handler>
 8002e82:	f7ff bbf5 	b.w	8002670 <DCDC_TIMx_Configuration+0x144>
    Error_Handler();
 8002e86:	f002 fa9b 	bl	80053c0 <Error_Handler>
 8002e8a:	f7ff bbe9 	b.w	8002660 <DCDC_TIMx_Configuration+0x134>
    Error_Handler();
 8002e8e:	f002 fa97 	bl	80053c0 <Error_Handler>
 8002e92:	f7ff bbdd 	b.w	8002650 <DCDC_TIMx_Configuration+0x124>
    Error_Handler();
 8002e96:	f002 fa93 	bl	80053c0 <Error_Handler>
 8002e9a:	f7ff bbd1 	b.w	8002640 <DCDC_TIMx_Configuration+0x114>
    Error_Handler();
 8002e9e:	f002 fa8f 	bl	80053c0 <Error_Handler>
 8002ea2:	f7ff bbc5 	b.w	8002630 <DCDC_TIMx_Configuration+0x104>
    Error_Handler();
 8002ea6:	f002 fa8b 	bl	80053c0 <Error_Handler>
 8002eaa:	f7ff bbb5 	b.w	8002618 <DCDC_TIMx_Configuration+0xec>
    Error_Handler();
 8002eae:	f002 fa87 	bl	80053c0 <Error_Handler>
 8002eb2:	f7ff bbaa 	b.w	800260a <DCDC_TIMx_Configuration+0xde>
    Error_Handler();
 8002eb6:	f002 fa83 	bl	80053c0 <Error_Handler>
 8002eba:	f7ff bb9c 	b.w	80025f6 <DCDC_TIMx_Configuration+0xca>
 8002ebe:	bf00      	nop
 8002ec0:	2001112c 	.word	0x2001112c
 8002ec4:	40016b00 	.word	0x40016b00

08002ec8 <DCDC_Init>:
    if (pDCDCInit)
 8002ec8:	b1a0      	cbz	r0, 8002ef4 <DCDC_Init+0x2c>
{
 8002eca:	b538      	push	{r3, r4, r5, lr}
        if (LocalDevice.State != DCDC_Running)
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <DCDC_Init+0x30>)
 8002ece:	7d1a      	ldrb	r2, [r3, #20]
 8002ed0:	2a01      	cmp	r2, #1
 8002ed2:	d00d      	beq.n	8002ef0 <DCDC_Init+0x28>
            LocalDevice.Init.frequency = pDCDCInit->frequency;
 8002ed4:	e9d0 4103 	ldrd	r4, r1, [r0, #12]
            LocalDevice.Init.Counter = pDCDCInit->Counter;
 8002ed8:	6805      	ldr	r5, [r0, #0]
            LocalDevice.Init.PhaseShift = pDCDCInit->PhaseShift;
 8002eda:	6842      	ldr	r2, [r0, #4]
            LocalDevice.Init.DutyCycle = pDCDCInit->DutyCycle;
 8002edc:	60dc      	str	r4, [r3, #12]
            LocalDevice.State = DCDC_Stopped;
 8002ede:	2400      	movs	r4, #0
            LocalDevice.Init.Counter = pDCDCInit->Counter;
 8002ee0:	601d      	str	r5, [r3, #0]
            LocalDevice.Init.frequency = pDCDCInit->frequency;
 8002ee2:	6119      	str	r1, [r3, #16]
            LocalDevice.Init.PhaseShift = pDCDCInit->PhaseShift;
 8002ee4:	605a      	str	r2, [r3, #4]
            LocalDevice.State = DCDC_Stopped;
 8002ee6:	751c      	strb	r4, [r3, #20]
            DCDC_TIMx_Configuration();
 8002ee8:	f7ff fb20 	bl	800252c <DCDC_TIMx_Configuration>
            nRet = DCDC_ERROR_NONE;
 8002eec:	4620      	mov	r0, r4
}
 8002eee:	bd38      	pop	{r3, r4, r5, pc}
        nRet = DCDC_ERROR_ON_INIT;
 8002ef0:	2002      	movs	r0, #2
}
 8002ef2:	bd38      	pop	{r3, r4, r5, pc}
    nRet = DCDC_ERROR_INVALID_PARAMETER;
 8002ef4:	2001      	movs	r0, #1
}
 8002ef6:	4770      	bx	lr
 8002ef8:	2000c9e0 	.word	0x2000c9e0

08002efc <DQ_PLL_Grid>:
* Output         : w,Theta.
* Return         : none.
*******************************************************************************/
Volt_Components DQ_PLL_Grid(s16 Voltage)

{
 8002efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  Volt_Components Volt_Output;

  s32 qVd_Grid_tmp_1=0, qVd_Grid_tmp_2=0;
 8002f00:	2200      	movs	r2, #0
{
 8002f02:	b086      	sub	sp, #24
  s32 qVd_Grid_tmp_1=0, qVd_Grid_tmp_2=0;
 8002f04:	e9cd 2201 	strd	r2, r2, [sp, #4]
  s32 qVq_Grid_tmp_1=0, qVq_Grid_tmp_2=0;
 8002f08:	e9cd 2203 	strd	r2, r2, [sp, #12]
  Count_Beta_2++;

//  Index_Sin=((u8)(Theta>>8));
//  Index_Cos =((u8)(Theta>>8)+64);

  Index_Sin = ((u16)(Theta>>7) & (u16)(0x01FF));
 8002f0c:	4a34      	ldr	r2, [pc, #208]	; (8002fe0 <DQ_PLL_Grid+0xe4>)
  Count_Alpha_2=(u8)(Count_Beta_2+Delay90); //((1/50Hz)/(1/21.600kHz)/4)-256
 8002f0e:	4f35      	ldr	r7, [pc, #212]	; (8002fe4 <DQ_PLL_Grid+0xe8>)
  Index_Sin = ((u16)(Theta>>7) & (u16)(0x01FF));
 8002f10:	f9b2 2000 	ldrsh.w	r2, [r2]
  Count_Alpha_2=(u8)(Count_Beta_2+Delay90); //((1/50Hz)/(1/21.600kHz)/4)-256
 8002f14:	7839      	ldrb	r1, [r7, #0]
  BUFFER_Beta_Voltage[Count_Beta_2]=qValpha;
 8002f16:	4c34      	ldr	r4, [pc, #208]	; (8002fe8 <DQ_PLL_Grid+0xec>)
  Index_Cos = ((u16)(Theta>>7)+128) & (u16)(0x01FF);

//  Index_Sin = (u16)(new_mul_q15_q15_q31(Theta, 350) >> 16);
//  Index_Cos = (u16)(new_mul_q15_q15_q31(Theta, 350) >> 16)+88;

  Sin_Theta = Sin_Cos_Table[Index_Sin];
 8002f18:	4e34      	ldr	r6, [pc, #208]	; (8002fec <DQ_PLL_Grid+0xf0>)
  BUFFER_Beta_Voltage[Count_Beta_2]=qValpha;
 8002f1a:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
  Index_Cos = ((u16)(Theta>>7)+128) & (u16)(0x01FF);
 8002f1e:	11d3      	asrs	r3, r2, #7
  qVbeta=-BUFFER_Beta_Voltage[(u8)Count_Alpha_2];
 8002f20:	f081 0c80 	eor.w	ip, r1, #128	; 0x80
  Index_Cos = ((u16)(Theta>>7)+128) & (u16)(0x01FF);
 8002f24:	3380      	adds	r3, #128	; 0x80
 8002f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
  Index_Sin = ((u16)(Theta>>7) & (u16)(0x01FF));
 8002f2a:	f3c2 12c8 	ubfx	r2, r2, #7, #9
  qVbeta=-BUFFER_Beta_Voltage[(u8)Count_Alpha_2];
 8002f2e:	f834 401c 	ldrh.w	r4, [r4, ip, lsl #1]
  Sin_Theta = Sin_Cos_Table[Index_Sin];
 8002f32:	f836 c012 	ldrh.w	ip, [r6, r2, lsl #1]
  qValpha=Voltage;
 8002f36:	4d2e      	ldr	r5, [pc, #184]	; (8002ff0 <DQ_PLL_Grid+0xf4>)
  Cos_Theta = Sin_Cos_Table[Index_Cos];
 8002f38:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8003004 <DQ_PLL_Grid+0x108>
  qValpha=Voltage;
 8002f3c:	8028      	strh	r0, [r5, #0]
  Count_Beta_2++;
 8002f3e:	3101      	adds	r1, #1
 8002f40:	7039      	strb	r1, [r7, #0]
  Cos_Theta = Sin_Cos_Table[Index_Cos];
 8002f42:	f936 1013 	ldrsh.w	r1, [r6, r3, lsl #1]
  qVbeta=-BUFFER_Beta_Voltage[(u8)Count_Alpha_2];
 8002f46:	4e2b      	ldr	r6, [pc, #172]	; (8002ff4 <DQ_PLL_Grid+0xf8>)
  Sin_Theta = Sin_Cos_Table[Index_Sin];
 8002f48:	4f2b      	ldr	r7, [pc, #172]	; (8002ff8 <DQ_PLL_Grid+0xfc>)
  Cos_Theta = Sin_Cos_Table[Index_Cos];
 8002f4a:	f8a8 1000 	strh.w	r1, [r8]
  qVbeta=-BUFFER_Beta_Voltage[(u8)Count_Alpha_2];
 8002f4e:	4264      	negs	r4, r4
 8002f50:	8034      	strh	r4, [r6, #0]
  Index_Sin = ((u16)(Theta>>7) & (u16)(0x01FF));
 8002f52:	4c2a      	ldr	r4, [pc, #168]	; (8002ffc <DQ_PLL_Grid+0x100>)
  Sin_Theta = Sin_Cos_Table[Index_Sin];
 8002f54:	f8a7 c000 	strh.w	ip, [r7]
  Index_Sin = ((u16)(Theta>>7) & (u16)(0x01FF));
 8002f58:	8022      	strh	r2, [r4, #0]
  Index_Cos = ((u16)(Theta>>7)+128) & (u16)(0x01FF);
 8002f5a:	4a29      	ldr	r2, [pc, #164]	; (8003000 <DQ_PLL_Grid+0x104>)
 8002f5c:	8013      	strh	r3, [r2, #0]


  mul_q15_q15_q31(qValpha,Cos_Theta,&qVq_Grid_tmp_1);
 8002f5e:	aa03      	add	r2, sp, #12
 8002f60:	f000 ff94 	bl	8003e8c <mul_q15_q15_q31>
  mul_q15_q15_q31(qVbeta,Sin_Theta,&qVq_Grid_tmp_2);
 8002f64:	f9b7 1000 	ldrsh.w	r1, [r7]
 8002f68:	f9b6 0000 	ldrsh.w	r0, [r6]
 8002f6c:	aa04      	add	r2, sp, #16
 8002f6e:	f000 ff8d 	bl	8003e8c <mul_q15_q15_q31>


  qVq_Grid_1 = (s16)(qVq_Grid_tmp_1/65536);
 8002f72:	9c03      	ldr	r4, [sp, #12]
  qVq_Grid_2 = (s16)(qVq_Grid_tmp_2/65536);
 8002f74:	9b04      	ldr	r3, [sp, #16]


  Volt_Output.qV_Quadrature = (s16)((qVq_Grid_1)-(qVq_Grid_2));	//SECONDO NREL


  mul_q15_q15_q31(qValpha,Sin_Theta,&qVd_Grid_tmp_1);           // SECONDO NREL
 8002f76:	f9b7 1000 	ldrsh.w	r1, [r7]
 8002f7a:	f9b5 0000 	ldrsh.w	r0, [r5]
  qVq_Grid_1 = (s16)(qVq_Grid_tmp_1/65536);
 8002f7e:	2c00      	cmp	r4, #0
 8002f80:	bfbc      	itt	lt
 8002f82:	f504 447f 	addlt.w	r4, r4, #65280	; 0xff00
 8002f86:	34ff      	addlt	r4, #255	; 0xff
  qVq_Grid_2 = (s16)(qVq_Grid_tmp_2/65536);
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bfbc      	itt	lt
 8002f8c:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8002f90:	33ff      	addlt	r3, #255	; 0xff
  mul_q15_q15_q31(qValpha,Sin_Theta,&qVd_Grid_tmp_1);           // SECONDO NREL
 8002f92:	aa01      	add	r2, sp, #4
  qVq_Grid_1 = (s16)(qVq_Grid_tmp_1/65536);
 8002f94:	1424      	asrs	r4, r4, #16
  Volt_Output.qV_Quadrature = (s16)((qVq_Grid_1)-(qVq_Grid_2));	//SECONDO NREL
 8002f96:	eba4 4423 	sub.w	r4, r4, r3, asr #16
  mul_q15_q15_q31(qValpha,Sin_Theta,&qVd_Grid_tmp_1);           // SECONDO NREL
 8002f9a:	f000 ff77 	bl	8003e8c <mul_q15_q15_q31>
  mul_q15_q15_q31(qVbeta,Cos_Theta,&qVd_Grid_tmp_2);            // SECONDO NREL
 8002f9e:	f9b6 0000 	ldrsh.w	r0, [r6]
 8002fa2:	f9b8 1000 	ldrsh.w	r1, [r8]
 8002fa6:	aa02      	add	r2, sp, #8
 8002fa8:	f000 ff70 	bl	8003e8c <mul_q15_q15_q31>


  qVd_Grid_1 = ((s16)(qVd_Grid_tmp_1/65536));
 8002fac:	9b01      	ldr	r3, [sp, #4]
  qVd_Grid_2 = ((s16)(qVd_Grid_tmp_2/65536));
 8002fae:	9a02      	ldr	r2, [sp, #8]
  qVd_Grid_1 = ((s16)(qVd_Grid_tmp_1/65536));
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	bfbc      	itt	lt
 8002fb4:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8002fb8:	33ff      	addlt	r3, #255	; 0xff
  qVd_Grid_2 = ((s16)(qVd_Grid_tmp_2/65536));
 8002fba:	2a00      	cmp	r2, #0
 8002fbc:	bfbc      	itt	lt
 8002fbe:	f502 427f 	addlt.w	r2, r2, #65280	; 0xff00
 8002fc2:	32ff      	addlt	r2, #255	; 0xff
  Volt_Output.qV_Quadrature = (s16)((qVq_Grid_1)-(qVq_Grid_2));	//SECONDO NREL
 8002fc4:	b224      	sxth	r4, r4
  qVd_Grid_1 = ((s16)(qVd_Grid_tmp_1/65536));
 8002fc6:	141b      	asrs	r3, r3, #16
  Volt_Output.qV_Direct = (s16)((qVd_Grid_1)+(qVd_Grid_2));	  //Vd component




  return (Volt_Output);
 8002fc8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8002fcc:	b2a4      	uxth	r4, r4
 8002fce:	2000      	movs	r0, #0
 8002fd0:	f364 000f 	bfi	r0, r4, #0, #16
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	f363 401f 	bfi	r0, r3, #16, #16


}
 8002fda:	b006      	add	sp, #24
 8002fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fe0:	2000ce34 	.word	0x2000ce34
 8002fe4:	2000ce13 	.word	0x2000ce13
 8002fe8:	2000cc10 	.word	0x2000cc10
 8002fec:	0800abac 	.word	0x0800abac
 8002ff0:	2000ce48 	.word	0x2000ce48
 8002ff4:	2000ce4a 	.word	0x2000ce4a
 8002ff8:	2000ce28 	.word	0x2000ce28
 8002ffc:	2000ce1e 	.word	0x2000ce1e
 8003000:	2000ce1c 	.word	0x2000ce1c
 8003004:	2000ce10 	.word	0x2000ce10

08003008 <DQ_Current_Inverter>:
* Output         : w,Theta.
* Return         : none.
*******************************************************************************/
Curr_Components DQ_Current_Inverter(s16 qIalpha,s16 qIbeta)

{
 8003008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 // static u8 Index=0;////  to be deleted if not used!!!

  s16 qId_Inverter_1=0,qId_Inverter_2=0;
  s16 qIq_Inverter_1=0,qIq_Inverter_2=0;

  mul_q15_q15_q31(qIalpha,Sin_Theta,&qId_Inverter_tmp_1);
 800300c:	4e24      	ldr	r6, [pc, #144]	; (80030a0 <DQ_Current_Inverter+0x98>)
  mul_q15_q15_q31(qIbeta,Cos_Theta,&qId_Inverter_tmp_2) ;
 800300e:	4f25      	ldr	r7, [pc, #148]	; (80030a4 <DQ_Current_Inverter+0x9c>)
{
 8003010:	b086      	sub	sp, #24
  s32 qId_Inverter_tmp_1=0, qId_Inverter_tmp_2=0;
 8003012:	2300      	movs	r3, #0
{
 8003014:	460d      	mov	r5, r1
  mul_q15_q15_q31(qIalpha,Sin_Theta,&qId_Inverter_tmp_1);
 8003016:	aa01      	add	r2, sp, #4
 8003018:	f9b6 1000 	ldrsh.w	r1, [r6]
  s32 qId_Inverter_tmp_1=0, qId_Inverter_tmp_2=0;
 800301c:	e9cd 3301 	strd	r3, r3, [sp, #4]
  s32 qIq_Inverter_tmp_1=0, qIq_Inverter_tmp_2=0;
 8003020:	e9cd 3303 	strd	r3, r3, [sp, #12]
{
 8003024:	4680      	mov	r8, r0
  mul_q15_q15_q31(qIalpha,Sin_Theta,&qId_Inverter_tmp_1);
 8003026:	f000 ff31 	bl	8003e8c <mul_q15_q15_q31>
  mul_q15_q15_q31(qIbeta,Cos_Theta,&qId_Inverter_tmp_2) ;
 800302a:	f9b7 1000 	ldrsh.w	r1, [r7]
 800302e:	aa02      	add	r2, sp, #8
 8003030:	4628      	mov	r0, r5
 8003032:	f000 ff2b 	bl	8003e8c <mul_q15_q15_q31>

  qId_Inverter_1 = (s16)(qId_Inverter_tmp_1/65536);
 8003036:	9c01      	ldr	r4, [sp, #4]
  qId_Inverter_2 = (s16)(qId_Inverter_tmp_2/65536);
 8003038:	9b02      	ldr	r3, [sp, #8]

  Curr_Output_Inverter.qI_Direct = (s16)((qId_Inverter_1)+(qId_Inverter_2));


  mul_q15_q15_q31(qIalpha,Cos_Theta,&qIq_Inverter_tmp_1);
 800303a:	f9b7 1000 	ldrsh.w	r1, [r7]
  qId_Inverter_1 = (s16)(qId_Inverter_tmp_1/65536);
 800303e:	2c00      	cmp	r4, #0
 8003040:	bfbc      	itt	lt
 8003042:	f504 447f 	addlt.w	r4, r4, #65280	; 0xff00
 8003046:	34ff      	addlt	r4, #255	; 0xff
  qId_Inverter_2 = (s16)(qId_Inverter_tmp_2/65536);
 8003048:	2b00      	cmp	r3, #0
 800304a:	bfbc      	itt	lt
 800304c:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8003050:	33ff      	addlt	r3, #255	; 0xff
  mul_q15_q15_q31(qIalpha,Cos_Theta,&qIq_Inverter_tmp_1);
 8003052:	4640      	mov	r0, r8
 8003054:	aa03      	add	r2, sp, #12
  qId_Inverter_1 = (s16)(qId_Inverter_tmp_1/65536);
 8003056:	1424      	asrs	r4, r4, #16
  Curr_Output_Inverter.qI_Direct = (s16)((qId_Inverter_1)+(qId_Inverter_2));
 8003058:	eb04 4423 	add.w	r4, r4, r3, asr #16
  mul_q15_q15_q31(qIalpha,Cos_Theta,&qIq_Inverter_tmp_1);
 800305c:	f000 ff16 	bl	8003e8c <mul_q15_q15_q31>
  mul_q15_q15_q31(qIbeta,Sin_Theta,&qIq_Inverter_tmp_2);
 8003060:	aa04      	add	r2, sp, #16
 8003062:	4628      	mov	r0, r5
 8003064:	f9b6 1000 	ldrsh.w	r1, [r6]
 8003068:	f000 ff10 	bl	8003e8c <mul_q15_q15_q31>


  qIq_Inverter_1 = ((s16)(qIq_Inverter_tmp_1/65536));
 800306c:	9b03      	ldr	r3, [sp, #12]
  qIq_Inverter_2 = ((s16)(qIq_Inverter_tmp_2/65536));
 800306e:	9a04      	ldr	r2, [sp, #16]
  qIq_Inverter_1 = ((s16)(qIq_Inverter_tmp_1/65536));
 8003070:	2b00      	cmp	r3, #0
 8003072:	bfbc      	itt	lt
 8003074:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8003078:	33ff      	addlt	r3, #255	; 0xff
  qIq_Inverter_2 = ((s16)(qIq_Inverter_tmp_2/65536));
 800307a:	2a00      	cmp	r2, #0
 800307c:	bfbc      	itt	lt
 800307e:	f502 427f 	addlt.w	r2, r2, #65280	; 0xff00
 8003082:	32ff      	addlt	r2, #255	; 0xff
  qIq_Inverter_1 = ((s16)(qIq_Inverter_tmp_1/65536));
 8003084:	141b      	asrs	r3, r3, #16

  Curr_Output_Inverter.qI_Quadrature = (s16)((qIq_Inverter_1)-(qIq_Inverter_2));

  return (Curr_Output_Inverter);
 8003086:	eba3 4312 	sub.w	r3, r3, r2, lsr #16
 800308a:	b29b      	uxth	r3, r3
  Curr_Output_Inverter.qI_Direct = (s16)((qId_Inverter_1)+(qId_Inverter_2));
 800308c:	b224      	sxth	r4, r4
  return (Curr_Output_Inverter);
 800308e:	2000      	movs	r0, #0
 8003090:	f363 000f 	bfi	r0, r3, #0, #16
 8003094:	b2a4      	uxth	r4, r4
 8003096:	f364 401f 	bfi	r0, r4, #16, #16

}
 800309a:	b006      	add	sp, #24
 800309c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030a0:	2000ce28 	.word	0x2000ce28
 80030a4:	2000ce10 	.word	0x2000ce10

080030a8 <Rev_Park>:
/*********************************Inverse Park Transformation *****************/
/**************Valfa=Vd*Cos(theta)-Vq*Sin(theta)*******************************/
/**************Vbeta=Vq*Cos(theta)+Vd*Sin(theta)  *****************************/
/******************************************************************************/
Volt_AlphaBeta_Components Rev_Park(s16 Output_QuadraturePID,s16 Output_DirectPID)
{
 80030a8:	b510      	push	{r4, lr}
  s16 qValpha_1,qValpha_2=0;          //qVbeta_1,qVbeta_2;
  Volt_AlphaBeta_Components Volt_Output;



   mul_q15_q15_q31(Output_DirectPID,Sin_Theta,&qValpha_tmp1);
 80030aa:	4a12      	ldr	r2, [pc, #72]	; (80030f4 <Rev_Park+0x4c>)
{
 80030ac:	b084      	sub	sp, #16
 80030ae:	460b      	mov	r3, r1
 80030b0:	4604      	mov	r4, r0
   mul_q15_q15_q31(Output_DirectPID,Sin_Theta,&qValpha_tmp1);
 80030b2:	f9b2 1000 	ldrsh.w	r1, [r2]
 80030b6:	4618      	mov	r0, r3
 80030b8:	aa01      	add	r2, sp, #4
  s32 qValpha_tmp1,qValpha_tmp2=0;    //qVbeta_tmp1,qVbeta_tmp2;
 80030ba:	2300      	movs	r3, #0
 80030bc:	9302      	str	r3, [sp, #8]
   mul_q15_q15_q31(Output_DirectPID,Sin_Theta,&qValpha_tmp1);
 80030be:	f000 fee5 	bl	8003e8c <mul_q15_q15_q31>

   mul_q15_q15_q31(Output_QuadraturePID,Cos_Theta,&qValpha_tmp2);
 80030c2:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <Rev_Park+0x50>)
 80030c4:	4620      	mov	r0, r4
 80030c6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80030ca:	aa02      	add	r2, sp, #8
 80030cc:	f000 fede 	bl	8003e8c <mul_q15_q15_q31>


  qValpha_1 = (s16)(qValpha_tmp1/65536);
 80030d0:	9801      	ldr	r0, [sp, #4]
  qValpha_2 = (s16)(qValpha_tmp2/65536);
 80030d2:	9b02      	ldr	r3, [sp, #8]
  qValpha_1 = (s16)(qValpha_tmp1/65536);
 80030d4:	2800      	cmp	r0, #0
 80030d6:	bfbc      	itt	lt
 80030d8:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 80030dc:	30ff      	addlt	r0, #255	; 0xff
  qValpha_2 = (s16)(qValpha_tmp2/65536);
 80030de:	2b00      	cmp	r3, #0
 80030e0:	bfbc      	itt	lt
 80030e2:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 80030e6:	33ff      	addlt	r3, #255	; 0xff
  qValpha_1 = (s16)(qValpha_tmp1/65536);
 80030e8:	1400      	asrs	r0, r0, #16

  Volt_Output.qValpha = ((qValpha_1)+(qValpha_2));

  Volt_Output.qVbeta = 0;//((qVbeta_1)+(qVbeta_2));

  return(Volt_Output);
 80030ea:	eb00 4013 	add.w	r0, r0, r3, lsr #16
}
 80030ee:	b280      	uxth	r0, r0
 80030f0:	b004      	add	sp, #16
 80030f2:	bd10      	pop	{r4, pc}
 80030f4:	2000ce28 	.word	0x2000ce28
 80030f8:	2000ce10 	.word	0x2000ce10

080030fc <Calc_Theta_Grid>:
  return(Volt_Output);
}


void Calc_Theta_Grid(s16 Input_Integration)
{
 80030fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 static s32 Delta_Theta_tmp=0;
 static s16 Delta_Theta=0;
 static u16 freq_monitor_time=0;

 mul_q15_q15_q31(Input_Integration,SAMPLING_TIME,&Delta_Theta_tmp);
 8003100:	4e70      	ldr	r6, [pc, #448]	; (80032c4 <Calc_Theta_Grid+0x1c8>)

 Delta_Theta = (s16)(Delta_Theta_tmp>>16);

 Theta=Theta+Delta_Theta + 0;//
 8003102:	4d71      	ldr	r5, [pc, #452]	; (80032c8 <Calc_Theta_Grid+0x1cc>)


 Theta_time++;
 8003104:	4c71      	ldr	r4, [pc, #452]	; (80032cc <Calc_Theta_Grid+0x1d0>)
 mul_q15_q15_q31(Input_Integration,SAMPLING_TIME,&Delta_Theta_tmp);
 8003106:	f641 11ee 	movw	r1, #6638	; 0x19ee
 800310a:	4632      	mov	r2, r6
 800310c:	f000 febe 	bl	8003e8c <mul_q15_q15_q31>
 Theta=Theta+Delta_Theta + 0;//
 8003110:	882b      	ldrh	r3, [r5, #0]
 Delta_Theta = (s16)(Delta_Theta_tmp>>16);
 8003112:	f9b6 1002 	ldrsh.w	r1, [r6, #2]

 if(tti<4096)
 8003116:	4a6e      	ldr	r2, [pc, #440]	; (80032d0 <Calc_Theta_Grid+0x1d4>)
 Theta=Theta+Delta_Theta + 0;//
 8003118:	4419      	add	r1, r3
 Theta_time++;
 800311a:	8823      	ldrh	r3, [r4, #0]
 800311c:	3301      	adds	r3, #1
 800311e:	8023      	strh	r3, [r4, #0]
 if(tti<4096)
 8003120:	8813      	ldrh	r3, [r2, #0]
 Theta=Theta+Delta_Theta + 0;//
 8003122:	b208      	sxth	r0, r1
 if(tti<4096)
 8003124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 Theta=Theta+Delta_Theta + 0;//
 8003128:	8028      	strh	r0, [r5, #0]
 800312a:	b289      	uxth	r1, r1
 if(tti<4096)
 800312c:	d375      	bcc.n	800321a <Calc_Theta_Grid+0x11e>
 {
 tti++;
 theta_total[tti] = (int32_t)(((Theta+0x8000)-Theta_previous));//Theta; //(int32_t)(((Theta+0x8000)-Theta_previous));
 800312e:	4e69      	ldr	r6, [pc, #420]	; (80032d4 <Calc_Theta_Grid+0x1d8>)
 }


  if(zero_detect==50)
 8003130:	4d69      	ldr	r5, [pc, #420]	; (80032d8 <Calc_Theta_Grid+0x1dc>)
 theta_total[tti] = (int32_t)(((Theta+0x8000)-Theta_previous));//Theta; //(int32_t)(((Theta+0x8000)-Theta_previous));
 8003132:	8833      	ldrh	r3, [r6, #0]
 8003134:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8003138:	1ac0      	subs	r0, r0, r3
  if(zero_detect==50)
 800313a:	882b      	ldrh	r3, [r5, #0]
 800313c:	2b32      	cmp	r3, #50	; 0x32
 800313e:	d07b      	beq.n	8003238 <Calc_Theta_Grid+0x13c>

 VqFiltered_prec = (u16)(Grid_Volt_q_d.qV_Quadrature + 0x8000);

 VqFiltered = (u16)(((s32)(((s32)VqFiltered<<8) - (s32)VqFiltered) +  (s32)(VqFiltered_prec))>>8);

  if(VqFiltered>VqFiltered_max) VqFiltered_max=VqFiltered;
 8003140:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 800331c <Calc_Theta_Grid+0x220>
  else if(VqFiltered<VqFiltered_min) VqFiltered_min=VqFiltered;
 8003144:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8003320 <Calc_Theta_Grid+0x224>
  if(VqFiltered>VqFiltered_max) VqFiltered_max=VqFiltered;
 8003148:	f8b8 3000 	ldrh.w	r3, [r8]
  else if(VqFiltered<VqFiltered_min) VqFiltered_min=VqFiltered;
 800314c:	f8b9 e000 	ldrh.w	lr, [r9]
 VqFiltered = (u16)(((s32)(((s32)VqFiltered<<8) - (s32)VqFiltered) +  (s32)(VqFiltered_prec))>>8);
 8003150:	4f62      	ldr	r7, [pc, #392]	; (80032dc <Calc_Theta_Grid+0x1e0>)
 VqFiltered_prec = (u16)(Grid_Volt_q_d.qV_Quadrature + 0x8000);
 8003152:	4a63      	ldr	r2, [pc, #396]	; (80032e0 <Calc_Theta_Grid+0x1e4>)
 8003154:	f8b2 c000 	ldrh.w	ip, [r2]
 VqFiltered = (u16)(((s32)(((s32)VqFiltered<<8) - (s32)VqFiltered) +  (s32)(VqFiltered_prec))>>8);
 8003158:	883a      	ldrh	r2, [r7, #0]
 VqFiltered_prec = (u16)(Grid_Volt_q_d.qV_Quadrature + 0x8000);
 800315a:	f48c 4c00 	eor.w	ip, ip, #32768	; 0x8000
 VqFiltered = (u16)(((s32)(((s32)VqFiltered<<8) - (s32)VqFiltered) +  (s32)(VqFiltered_prec))>>8);
 800315e:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8003162:	4462      	add	r2, ip
 8003164:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8003168:	803a      	strh	r2, [r7, #0]
 VqFiltered_prec = (u16)(Grid_Volt_q_d.qV_Quadrature + 0x8000);
 800316a:	4f5e      	ldr	r7, [pc, #376]	; (80032e4 <Calc_Theta_Grid+0x1e8>)
  if(VqFiltered>VqFiltered_max) VqFiltered_max=VqFiltered;
 800316c:	429a      	cmp	r2, r3
 VqFiltered_prec = (u16)(Grid_Volt_q_d.qV_Quadrature + 0x8000);
 800316e:	f8a7 c000 	strh.w	ip, [r7]
  if(VqFiltered>VqFiltered_max) VqFiltered_max=VqFiltered;
 8003172:	d96f      	bls.n	8003254 <Calc_Theta_Grid+0x158>
 8003174:	f8a8 2000 	strh.w	r2, [r8]
 8003178:	4613      	mov	r3, r2

  VqFiltered_mean=(u16)((VqFiltered_max+VqFiltered_min)>>1);
 800317a:	4a5b      	ldr	r2, [pc, #364]	; (80032e8 <Calc_Theta_Grid+0x1ec>)
 800317c:	4473      	add	r3, lr
 800317e:	105b      	asrs	r3, r3, #1
 8003180:	6013      	str	r3, [r2, #0]
}
*/
  //GPIOG -> ODR ^= (1 << 9);

  //265V max & 186V min
   if((VqFiltered_mean>=48641 || VqFiltered_mean<=32837) && State_Control==GRID_INSERTION && MPPT_EN==TRUE && zero_detect>5 && Vacprot==TRUE)
 8003182:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003186:	f1a3 0746 	sub.w	r7, r3, #70	; 0x46
 800318a:	f643 52ba 	movw	r2, #15802	; 0x3dba
 800318e:	4297      	cmp	r7, r2
 8003190:	d903      	bls.n	800319a <Calc_Theta_Grid+0x9e>
 8003192:	4a56      	ldr	r2, [pc, #344]	; (80032ec <Calc_Theta_Grid+0x1f0>)
 8003194:	7817      	ldrb	r7, [r2, #0]
 8003196:	2f15      	cmp	r7, #21
 8003198:	d062      	beq.n	8003260 <Calc_Theta_Grid+0x164>
  // {
	   //LL_GPIO_TogglePin(SD_CS_GPIO_Port, SD_CS_Pin);
  // }

 //************************** ISLANDING DETECTION *****************************
 if(((Theta+0x8000)-Theta_previous)<=-20000)
 800319a:	4a55      	ldr	r2, [pc, #340]	; (80032f0 <Calc_Theta_Grid+0x1f4>)
 800319c:	4290      	cmp	r0, r2
 800319e:	da0f      	bge.n	80031c0 <Calc_Theta_Grid+0xc4>
 {
  zero_detect++;
 80031a0:	882a      	ldrh	r2, [r5, #0]
  Theta_Grid = Theta_time;

//****************** DIAGNOSTIC AC - VOLTAGE AND FREQ AT STARTUP ***************
  //Freq 47 Hz - 53 Hz
  //Vac 185V - 265V
  if((State_Control==DIAGNOSTIC_AC_LINE) || (State_Control==DIAGNOSTIC_DC_LINE))
 80031a2:	4f52      	ldr	r7, [pc, #328]	; (80032ec <Calc_Theta_Grid+0x1f0>)
  zero_detect++;
 80031a4:	3201      	adds	r2, #1
  if((State_Control==DIAGNOSTIC_AC_LINE) || (State_Control==DIAGNOSTIC_DC_LINE))
 80031a6:	7838      	ldrb	r0, [r7, #0]
  zero_detect++;
 80031a8:	802a      	strh	r2, [r5, #0]
  Theta_Grid = Theta_time;
 80031aa:	4d52      	ldr	r5, [pc, #328]	; (80032f4 <Calc_Theta_Grid+0x1f8>)
 80031ac:	8822      	ldrh	r2, [r4, #0]
 80031ae:	802a      	strh	r2, [r5, #0]
  if((State_Control==DIAGNOSTIC_AC_LINE) || (State_Control==DIAGNOSTIC_DC_LINE))
 80031b0:	2805      	cmp	r0, #5
 80031b2:	d00a      	beq.n	80031ca <Calc_Theta_Grid+0xce>
 80031b4:	280c      	cmp	r0, #12
 80031b6:	d008      	beq.n	80031ca <Calc_Theta_Grid+0xce>
     }
   }
//****************** DIAGNOSTIC AC - VOLTAGE AND FREQ AT GRID CONNECTION *******
  else
  {
	  if(State_Control == GRID_INSERTION && MPPT_EN == TRUE)
 80031b8:	2815      	cmp	r0, #21
 80031ba:	d06a      	beq.n	8003292 <Calc_Theta_Grid+0x196>
	  }
  }
//****************** DIAGNOSTIC AC - VOLTAGE AND FREQ AT GRID CONNECTION *******


    Theta_time=0;
 80031bc:	2300      	movs	r3, #0
 80031be:	8023      	strh	r3, [r4, #0]
 }

 Theta_previous=Theta+0x8000;
 80031c0:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 80031c4:	8031      	strh	r1, [r6, #0]



 //********************** END ISLANDING DETECTION ******************************

}
 80031c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if((Theta_time>(GRID_FREQ_MAX) && Theta_time<(GRID_FREQ_MIN)) && (VqFiltered_mean >= 32837 && VqFiltered_mean<=48641)) //48641 = 254V
 80031ca:	f5a2 72f2 	sub.w	r2, r2, #484	; 0x1e4
 80031ce:	2a3b      	cmp	r2, #59	; 0x3b
 80031d0:	d813      	bhi.n	80031fa <Calc_Theta_Grid+0xfe>
 80031d2:	3b45      	subs	r3, #69	; 0x45
 80031d4:	f643 52bc 	movw	r2, #15804	; 0x3dbc
 80031d8:	4293      	cmp	r3, r2
 80031da:	d80e      	bhi.n	80031fa <Calc_Theta_Grid+0xfe>
      if(freq_monitor_time>=50) //1 sec
 80031dc:	4b46      	ldr	r3, [pc, #280]	; (80032f8 <Calc_Theta_Grid+0x1fc>)
 80031de:	881a      	ldrh	r2, [r3, #0]
 80031e0:	2a31      	cmp	r2, #49	; 0x31
 80031e2:	d866      	bhi.n	80032b2 <Calc_Theta_Grid+0x1b6>
      if(Freq_Control==FREQ_OUT_OF_RANGE && GDVoltage == GRID_VOLTAGE_OUT_OF_RANGE)
 80031e4:	4845      	ldr	r0, [pc, #276]	; (80032fc <Calc_Theta_Grid+0x200>)
 80031e6:	7800      	ldrb	r0, [r0, #0]
 80031e8:	2806      	cmp	r0, #6
 80031ea:	d1e7      	bne.n	80031bc <Calc_Theta_Grid+0xc0>
 80031ec:	4844      	ldr	r0, [pc, #272]	; (8003300 <Calc_Theta_Grid+0x204>)
 80031ee:	7800      	ldrb	r0, [r0, #0]
 80031f0:	2808      	cmp	r0, #8
 80031f2:	d1e3      	bne.n	80031bc <Calc_Theta_Grid+0xc0>
         freq_monitor_time++;
 80031f4:	3201      	adds	r2, #1
 80031f6:	801a      	strh	r2, [r3, #0]
 80031f8:	e7e0      	b.n	80031bc <Calc_Theta_Grid+0xc0>
       freq_monitor_time=0;
 80031fa:	4a3f      	ldr	r2, [pc, #252]	; (80032f8 <Calc_Theta_Grid+0x1fc>)
 80031fc:	2300      	movs	r3, #0
 80031fe:	8013      	strh	r3, [r2, #0]
       Grid_Voltage_max=0;
 8003200:	4a40      	ldr	r2, [pc, #256]	; (8003304 <Calc_Theta_Grid+0x208>)
 8003202:	8013      	strh	r3, [r2, #0]
       Grid_Voltage_min=0;
 8003204:	4a40      	ldr	r2, [pc, #256]	; (8003308 <Calc_Theta_Grid+0x20c>)
 8003206:	8013      	strh	r3, [r2, #0]
       Freq_Control = FREQ_OUT_OF_RANGE;
 8003208:	4b3c      	ldr	r3, [pc, #240]	; (80032fc <Calc_Theta_Grid+0x200>)
 800320a:	2206      	movs	r2, #6
 800320c:	701a      	strb	r2, [r3, #0]
       GDVoltage = GRID_VOLTAGE_OUT_OF_RANGE;
 800320e:	4b3c      	ldr	r3, [pc, #240]	; (8003300 <Calc_Theta_Grid+0x204>)
 8003210:	2208      	movs	r2, #8
 8003212:	701a      	strb	r2, [r3, #0]
    Theta_time=0;
 8003214:	2300      	movs	r3, #0
 8003216:	8023      	strh	r3, [r4, #0]
 8003218:	e7d2      	b.n	80031c0 <Calc_Theta_Grid+0xc4>
 theta_total[tti] = (int32_t)(((Theta+0x8000)-Theta_previous));//Theta; //(int32_t)(((Theta+0x8000)-Theta_previous));
 800321a:	4e2e      	ldr	r6, [pc, #184]	; (80032d4 <Calc_Theta_Grid+0x1d8>)
 tti++;
 800321c:	3301      	adds	r3, #1
 theta_total[tti] = (int32_t)(((Theta+0x8000)-Theta_previous));//Theta; //(int32_t)(((Theta+0x8000)-Theta_previous));
 800321e:	8835      	ldrh	r5, [r6, #0]
 tti++;
 8003220:	b29b      	uxth	r3, r3
 theta_total[tti] = (int32_t)(((Theta+0x8000)-Theta_previous));//Theta; //(int32_t)(((Theta+0x8000)-Theta_previous));
 8003222:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 tti++;
 8003226:	8013      	strh	r3, [r2, #0]
 theta_total[tti] = (int32_t)(((Theta+0x8000)-Theta_previous));//Theta; //(int32_t)(((Theta+0x8000)-Theta_previous));
 8003228:	1b40      	subs	r0, r0, r5
 800322a:	4a38      	ldr	r2, [pc, #224]	; (800330c <Calc_Theta_Grid+0x210>)
  if(zero_detect==50)
 800322c:	4d2a      	ldr	r5, [pc, #168]	; (80032d8 <Calc_Theta_Grid+0x1dc>)
 theta_total[tti] = (int32_t)(((Theta+0x8000)-Theta_previous));//Theta; //(int32_t)(((Theta+0x8000)-Theta_previous));
 800322e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  if(zero_detect==50)
 8003232:	882b      	ldrh	r3, [r5, #0]
 8003234:	2b32      	cmp	r3, #50	; 0x32
 8003236:	d183      	bne.n	8003140 <Calc_Theta_Grid+0x44>
   VqFiltered_min=65500;
 8003238:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8003320 <Calc_Theta_Grid+0x224>
   VqFiltered_max=0;
 800323c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 800331c <Calc_Theta_Grid+0x220>
 8003240:	2300      	movs	r3, #0
   VqFiltered_min=65500;
 8003242:	f64f 7edc 	movw	lr, #65500	; 0xffdc
   VqFiltered_max=0;
 8003246:	f8a8 3000 	strh.w	r3, [r8]
   Theta_time=0;
 800324a:	8023      	strh	r3, [r4, #0]
   zero_detect=0;
 800324c:	802b      	strh	r3, [r5, #0]
   VqFiltered_min=65500;
 800324e:	f8a9 e000 	strh.w	lr, [r9]
   zero_detect=0;
 8003252:	e77d      	b.n	8003150 <Calc_Theta_Grid+0x54>
  else if(VqFiltered<VqFiltered_min) VqFiltered_min=VqFiltered;
 8003254:	4572      	cmp	r2, lr
 8003256:	bf3c      	itt	cc
 8003258:	f8a9 2000 	strhcc.w	r2, [r9]
 800325c:	4696      	movcc	lr, r2
 800325e:	e78c      	b.n	800317a <Calc_Theta_Grid+0x7e>
   if((VqFiltered_mean>=48641 || VqFiltered_mean<=32837) && State_Control==GRID_INSERTION && MPPT_EN==TRUE && zero_detect>5 && Vacprot==TRUE)
 8003260:	4f2b      	ldr	r7, [pc, #172]	; (8003310 <Calc_Theta_Grid+0x214>)
 8003262:	783f      	ldrb	r7, [r7, #0]
 8003264:	2f00      	cmp	r7, #0
 8003266:	d098      	beq.n	800319a <Calc_Theta_Grid+0x9e>
 8003268:	882f      	ldrh	r7, [r5, #0]
 800326a:	2f05      	cmp	r7, #5
 800326c:	d995      	bls.n	800319a <Calc_Theta_Grid+0x9e>
 800326e:	4f29      	ldr	r7, [pc, #164]	; (8003314 <Calc_Theta_Grid+0x218>)
 8003270:	783f      	ldrb	r7, [r7, #0]
 8003272:	2f00      	cmp	r7, #0
 8003274:	d091      	beq.n	800319a <Calc_Theta_Grid+0x9e>
 8003276:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 8003324 <Calc_Theta_Grid+0x228>
       Diagnostic_Control=GRID_VOLTAGE_OUT_OF_RANGE;
 800327a:	4f27      	ldr	r7, [pc, #156]	; (8003318 <Calc_Theta_Grid+0x21c>)
 800327c:	f04f 0e10 	mov.w	lr, #16
 8003280:	f8cc e028 	str.w	lr, [ip, #40]	; 0x28
       State_Control = STOP_WITH_DELAY;
 8003284:	f04f 0c16 	mov.w	ip, #22
 8003288:	f882 c000 	strb.w	ip, [r2]
       Diagnostic_Control=GRID_VOLTAGE_OUT_OF_RANGE;
 800328c:	2208      	movs	r2, #8
 800328e:	703a      	strb	r2, [r7, #0]
 8003290:	e783      	b.n	800319a <Calc_Theta_Grid+0x9e>
	  if(State_Control == GRID_INSERTION && MPPT_EN == TRUE)
 8003292:	4b1f      	ldr	r3, [pc, #124]	; (8003310 <Calc_Theta_Grid+0x214>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d090      	beq.n	80031bc <Calc_Theta_Grid+0xc0>
	   if((Theta_time<=GRID_FREQ_MAX || Theta_time>=GRID_FREQ_MIN))
 800329a:	f5a2 72f2 	sub.w	r2, r2, #484	; 0x1e4
 800329e:	2a3b      	cmp	r2, #59	; 0x3b
 80032a0:	d98c      	bls.n	80031bc <Calc_Theta_Grid+0xc0>
		   Diagnostic_Control=FREQ_OUT_OF_RANGE;
 80032a2:	4a1d      	ldr	r2, [pc, #116]	; (8003318 <Calc_Theta_Grid+0x21c>)
		   State_Control = STOP_WITH_DELAY;
 80032a4:	2316      	movs	r3, #22
 80032a6:	703b      	strb	r3, [r7, #0]
		   Diagnostic_Control=FREQ_OUT_OF_RANGE;
 80032a8:	2306      	movs	r3, #6
 80032aa:	7013      	strb	r3, [r2, #0]
		   Freq_Control = FREQ_OUT_OF_RANGE;
 80032ac:	4a13      	ldr	r2, [pc, #76]	; (80032fc <Calc_Theta_Grid+0x200>)
 80032ae:	7013      	strb	r3, [r2, #0]
 80032b0:	e784      	b.n	80031bc <Calc_Theta_Grid+0xc0>
        GDVoltage = GRID_VOLTAGE_INSIDE_RANGE;
 80032b2:	4813      	ldr	r0, [pc, #76]	; (8003300 <Calc_Theta_Grid+0x204>)
        Freq_Control = FREQ_INSIDE_RANGE; //inside the G83 freq range
 80032b4:	4a11      	ldr	r2, [pc, #68]	; (80032fc <Calc_Theta_Grid+0x200>)
        GDVoltage = GRID_VOLTAGE_INSIDE_RANGE;
 80032b6:	2509      	movs	r5, #9
 80032b8:	7005      	strb	r5, [r0, #0]
        Freq_Control = FREQ_INSIDE_RANGE; //inside the G83 freq range
 80032ba:	2007      	movs	r0, #7
 80032bc:	7010      	strb	r0, [r2, #0]
        freq_monitor_time=0;
 80032be:	2200      	movs	r2, #0
 80032c0:	801a      	strh	r2, [r3, #0]
      if(Freq_Control==FREQ_OUT_OF_RANGE && GDVoltage == GRID_VOLTAGE_OUT_OF_RANGE)
 80032c2:	e77b      	b.n	80031bc <Calc_Theta_Grid+0xc0>
 80032c4:	2000ce14 	.word	0x2000ce14
 80032c8:	2000ce34 	.word	0x2000ce34
 80032cc:	2000ce3a 	.word	0x2000ce3a
 80032d0:	20010e4c 	.word	0x20010e4c
 80032d4:	2000ce38 	.word	0x2000ce38
 80032d8:	20010e4e 	.word	0x20010e4e
 80032dc:	2000ce3c 	.word	0x2000ce3c
 80032e0:	2000ce18 	.word	0x2000ce18
 80032e4:	2000ce44 	.word	0x2000ce44
 80032e8:	2000ce40 	.word	0x2000ce40
 80032ec:	200001ca 	.word	0x200001ca
 80032f0:	ffffb1e1 	.word	0xffffb1e1
 80032f4:	2000ce36 	.word	0x2000ce36
 80032f8:	2000ce46 	.word	0x2000ce46
 80032fc:	20000024 	.word	0x20000024
 8003300:	20000025 	.word	0x20000025
 8003304:	2000017e 	.word	0x2000017e
 8003308:	20000180 	.word	0x20000180
 800330c:	2000ce4c 	.word	0x2000ce4c
 8003310:	20000183 	.word	0x20000183
 8003314:	200001d0 	.word	0x200001d0
 8003318:	20000168 	.word	0x20000168
 800331c:	2000ce3e 	.word	0x2000ce3e
 8003320:	20000026 	.word	0x20000026
 8003324:	48000c00 	.word	0x48000c00

08003328 <DQ_Power_Estimation>:
* Return         : None
*******************************************************************************/


Power_Components DQ_Power_Estimation(Curr_Components QD_Current)
{
 8003328:	b5f0      	push	{r4, r5, r6, r7, lr}
   s16 P_Active_1,P_Active_2=0;
   s16 Q_Reactive_1,Q_Reactive_2=0;



   mul_q15_q15_q31(Grid_Volt_q_d.qV_Direct,QD_Current.qI_Direct,&P_Active_tmp_1) ;
 800332a:	4d24      	ldr	r5, [pc, #144]	; (80033bc <DQ_Power_Estimation+0x94>)
{
 800332c:	b089      	sub	sp, #36	; 0x24
 800332e:	1407      	asrs	r7, r0, #16
   s32 P_Active_tmp_1,P_Active_tmp_2=0;
 8003330:	2300      	movs	r3, #0
 8003332:	b206      	sxth	r6, r0
{
 8003334:	9001      	str	r0, [sp, #4]
   mul_q15_q15_q31(Grid_Volt_q_d.qV_Direct,QD_Current.qI_Direct,&P_Active_tmp_1) ;
 8003336:	aa03      	add	r2, sp, #12
 8003338:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
   s32 P_Active_tmp_1,P_Active_tmp_2=0;
 800333c:	9304      	str	r3, [sp, #16]
   mul_q15_q15_q31(Grid_Volt_q_d.qV_Direct,QD_Current.qI_Direct,&P_Active_tmp_1) ;
 800333e:	4639      	mov	r1, r7
   s32 Q_Reactive_tmp_1,Q_Reactive_tmp_2=0;
 8003340:	9306      	str	r3, [sp, #24]
   mul_q15_q15_q31(Grid_Volt_q_d.qV_Direct,QD_Current.qI_Direct,&P_Active_tmp_1) ;
 8003342:	f000 fda3 	bl	8003e8c <mul_q15_q15_q31>
   mul_q15_q15_q31(Grid_Volt_q_d.qV_Quadrature,QD_Current.qI_Quadrature,&P_Active_tmp_2);
 8003346:	f9b5 0000 	ldrsh.w	r0, [r5]
 800334a:	aa04      	add	r2, sp, #16
 800334c:	4631      	mov	r1, r6
 800334e:	f000 fd9d 	bl	8003e8c <mul_q15_q15_q31>

  P_Active_1 = (s16)(P_Active_tmp_1/65536);
 8003352:	9c03      	ldr	r4, [sp, #12]
  P_Active_2 = (s16)(P_Active_tmp_2/65536);
 8003354:	9a04      	ldr	r2, [sp, #16]

Power_Output.P_Active = (s16)((P_Active_1)+(P_Active_2));

  mul_q15_q15_q31(Grid_Volt_q_d.qV_Direct,QD_Current.qI_Quadrature,&Q_Reactive_tmp_1) ;
 8003356:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
  P_Active_1 = (s16)(P_Active_tmp_1/65536);
 800335a:	2c00      	cmp	r4, #0
 800335c:	bfbc      	itt	lt
 800335e:	f504 447f 	addlt.w	r4, r4, #65280	; 0xff00
 8003362:	34ff      	addlt	r4, #255	; 0xff
  P_Active_2 = (s16)(P_Active_tmp_2/65536);
 8003364:	2a00      	cmp	r2, #0
 8003366:	bfbc      	itt	lt
 8003368:	f502 427f 	addlt.w	r2, r2, #65280	; 0xff00
 800336c:	32ff      	addlt	r2, #255	; 0xff
  P_Active_1 = (s16)(P_Active_tmp_1/65536);
 800336e:	1424      	asrs	r4, r4, #16
  mul_q15_q15_q31(Grid_Volt_q_d.qV_Direct,QD_Current.qI_Quadrature,&Q_Reactive_tmp_1) ;
 8003370:	4631      	mov	r1, r6
Power_Output.P_Active = (s16)((P_Active_1)+(P_Active_2));
 8003372:	eb04 4422 	add.w	r4, r4, r2, asr #16
  mul_q15_q15_q31(Grid_Volt_q_d.qV_Direct,QD_Current.qI_Quadrature,&Q_Reactive_tmp_1) ;
 8003376:	aa05      	add	r2, sp, #20
 8003378:	f000 fd88 	bl	8003e8c <mul_q15_q15_q31>
  mul_q15_q15_q31(Grid_Volt_q_d.qV_Quadrature,QD_Current.qI_Direct,&Q_Reactive_tmp_2);
 800337c:	f9b5 0000 	ldrsh.w	r0, [r5]
 8003380:	aa06      	add	r2, sp, #24
 8003382:	4639      	mov	r1, r7
 8003384:	f000 fd82 	bl	8003e8c <mul_q15_q15_q31>


  Q_Reactive_1 = (s16)(Q_Reactive_tmp_1/65536);
  Q_Reactive_2 = (s16)(Q_Reactive_tmp_2/65536);
 8003388:	9b06      	ldr	r3, [sp, #24]
  Q_Reactive_1 = (s16)(Q_Reactive_tmp_1/65536);
 800338a:	9a05      	ldr	r2, [sp, #20]
  Q_Reactive_2 = (s16)(Q_Reactive_tmp_2/65536);
 800338c:	2b00      	cmp	r3, #0
 800338e:	bfbc      	itt	lt
 8003390:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8003394:	33ff      	addlt	r3, #255	; 0xff
  Q_Reactive_1 = (s16)(Q_Reactive_tmp_1/65536);
 8003396:	2a00      	cmp	r2, #0
 8003398:	bfbc      	itt	lt
 800339a:	f502 427f 	addlt.w	r2, r2, #65280	; 0xff00
 800339e:	32ff      	addlt	r2, #255	; 0xff
Power_Output.P_Active = (s16)((P_Active_1)+(P_Active_2));
 80033a0:	b224      	sxth	r4, r4
  Q_Reactive_2 = (s16)(Q_Reactive_tmp_2/65536);
 80033a2:	141b      	asrs	r3, r3, #16

  //Power_Output.Q_Reactive = (s16)((Q_Reactive_1)+(Q_Reactive_2));

  Power_Output.Q_Reactive = (s16)(-(Q_Reactive_1)+(Q_Reactive_2));
  return (Power_Output);
 80033a4:	eba3 4312 	sub.w	r3, r3, r2, lsr #16
 80033a8:	b2a4      	uxth	r4, r4
 80033aa:	2000      	movs	r0, #0
 80033ac:	f364 000f 	bfi	r0, r4, #0, #16
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	f363 401f 	bfi	r0, r3, #16, #16


}
 80033b6:	b009      	add	sp, #36	; 0x24
 80033b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033ba:	bf00      	nop
 80033bc:	2000ce18 	.word	0x2000ce18

080033c0 <CrossDecoupling_Control>:
*******************************************************************************/



void CrossDecoupling_Control(void)
{
 80033c0:	b510      	push	{r4, lr}

  s32 Omega_L_tmp, Omega_L_Quadrature_tmp,Omega_L_Direct_tmp=0;
  s16 Omega_L,Omega_L_Direct,Omega_L_Quadrature=0;

  mul_q15_q15_q31(INDUCTANCE_VALUE,Output_qVd_Grid,&Omega_L_tmp);
 80033c2:	4b14      	ldr	r3, [pc, #80]	; (8003414 <CrossDecoupling_Control+0x54>)
  Omega_L = (s16)(Omega_L_tmp>>16);

  mul_q15_q15_q31(Omega_L,Inverter_q_d.qI_Direct,&Omega_L_Direct_tmp);
 80033c4:	4c14      	ldr	r4, [pc, #80]	; (8003418 <CrossDecoupling_Control+0x58>)
  mul_q15_q15_q31(INDUCTANCE_VALUE,Output_qVd_Grid,&Omega_L_tmp);
 80033c6:	f9b3 1000 	ldrsh.w	r1, [r3]
{
 80033ca:	b086      	sub	sp, #24
  s32 Omega_L_tmp, Omega_L_Quadrature_tmp,Omega_L_Direct_tmp=0;
 80033cc:	2300      	movs	r3, #0
  mul_q15_q15_q31(INDUCTANCE_VALUE,Output_qVd_Grid,&Omega_L_tmp);
 80033ce:	aa03      	add	r2, sp, #12
 80033d0:	f44f 70be 	mov.w	r0, #380	; 0x17c
  s32 Omega_L_tmp, Omega_L_Quadrature_tmp,Omega_L_Direct_tmp=0;
 80033d4:	9305      	str	r3, [sp, #20]
  mul_q15_q15_q31(INDUCTANCE_VALUE,Output_qVd_Grid,&Omega_L_tmp);
 80033d6:	f000 fd59 	bl	8003e8c <mul_q15_q15_q31>
  Omega_L = (s16)(Omega_L_tmp>>16);
 80033da:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
  mul_q15_q15_q31(Omega_L,Inverter_q_d.qI_Direct,&Omega_L_Direct_tmp);
 80033de:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80033e2:	9001      	str	r0, [sp, #4]
 80033e4:	aa05      	add	r2, sp, #20
 80033e6:	f000 fd51 	bl	8003e8c <mul_q15_q15_q31>
  mul_q15_q15_q31(Omega_L,Inverter_q_d.qI_Quadrature,&Omega_L_Quadrature_tmp);
 80033ea:	f9b4 1000 	ldrsh.w	r1, [r4]
 80033ee:	9801      	ldr	r0, [sp, #4]
 80033f0:	aa04      	add	r2, sp, #16
 80033f2:	f000 fd4b 	bl	8003e8c <mul_q15_q15_q31>

  Omega_L_Direct =    (s16)(Omega_L_Direct_tmp>>16);
  Omega_L_Quadrature =(s16)(Omega_L_Quadrature_tmp>>16);

   Output_qIq_Inverter=(s16)(Output_qIq_Inverter-Omega_L_Direct);//+(Grid_Volt_q_d.qV_Quadrature));//+Grid_Volt_q_d.qV_Quadrature);//);//Omega_L_Direct);//
   Output_qId_Inverter=(s16)(Output_qId_Inverter+Omega_L_Quadrature);//+(Grid_Volt_q_d.qV_Direct));//+Grid_Volt_q_d.qV_Direct);//-Omega_L_Quadrature);    // -Omega_L_Quadrature);//+Grid_Volt_q_d.qV_Direct
 80033f6:	4809      	ldr	r0, [pc, #36]	; (800341c <CrossDecoupling_Control+0x5c>)
  Omega_L_Quadrature =(s16)(Omega_L_Quadrature_tmp>>16);
 80033f8:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
   Output_qId_Inverter=(s16)(Output_qId_Inverter+Omega_L_Quadrature);//+(Grid_Volt_q_d.qV_Direct));//+Grid_Volt_q_d.qV_Direct);//-Omega_L_Quadrature);    // -Omega_L_Quadrature);//+Grid_Volt_q_d.qV_Direct
 80033fc:	8804      	ldrh	r4, [r0, #0]
   Output_qIq_Inverter=(s16)(Output_qIq_Inverter-Omega_L_Direct);//+(Grid_Volt_q_d.qV_Quadrature));//+Grid_Volt_q_d.qV_Quadrature);//);//Omega_L_Direct);//
 80033fe:	4908      	ldr	r1, [pc, #32]	; (8003420 <CrossDecoupling_Control+0x60>)
   Output_qId_Inverter=(s16)(Output_qId_Inverter+Omega_L_Quadrature);//+(Grid_Volt_q_d.qV_Direct));//+Grid_Volt_q_d.qV_Direct);//-Omega_L_Quadrature);    // -Omega_L_Quadrature);//+Grid_Volt_q_d.qV_Direct
 8003400:	4422      	add	r2, r4
   Output_qIq_Inverter=(s16)(Output_qIq_Inverter-Omega_L_Direct);//+(Grid_Volt_q_d.qV_Quadrature));//+Grid_Volt_q_d.qV_Quadrature);//);//Omega_L_Direct);//
 8003402:	880b      	ldrh	r3, [r1, #0]
   Output_qId_Inverter=(s16)(Output_qId_Inverter+Omega_L_Quadrature);//+(Grid_Volt_q_d.qV_Direct));//+Grid_Volt_q_d.qV_Direct);//-Omega_L_Quadrature);    // -Omega_L_Quadrature);//+Grid_Volt_q_d.qV_Direct
 8003404:	8002      	strh	r2, [r0, #0]
  Omega_L_Direct =    (s16)(Omega_L_Direct_tmp>>16);
 8003406:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
   Output_qIq_Inverter=(s16)(Output_qIq_Inverter-Omega_L_Direct);//+(Grid_Volt_q_d.qV_Quadrature));//+Grid_Volt_q_d.qV_Quadrature);//);//Omega_L_Direct);//
 800340a:	1a9b      	subs	r3, r3, r2
 800340c:	800b      	strh	r3, [r1, #0]

}
 800340e:	b006      	add	sp, #24
 8003410:	bd10      	pop	{r4, pc}
 8003412:	bf00      	nop
 8003414:	20000194 	.word	0x20000194
 8003418:	2000ce20 	.word	0x2000ce20
 800341c:	2000ce24 	.word	0x2000ce24
 8003420:	2000ce26 	.word	0x2000ce26

08003424 <RevPark_Circle_Limitation>:
void RevPark_Circle_Limitation(void)
{
s32 temp;

temp = Output_qIq_Inverter * Output_qIq_Inverter
             + Output_qId_Inverter * Output_qId_Inverter;  // min value 0, max value 2*32767*32767
 8003424:	4816      	ldr	r0, [pc, #88]	; (8003480 <RevPark_Circle_Limitation+0x5c>)
{
 8003426:	b430      	push	{r4, r5}
temp = Output_qIq_Inverter * Output_qIq_Inverter
 8003428:	4c16      	ldr	r4, [pc, #88]	; (8003484 <RevPark_Circle_Limitation+0x60>)
             + Output_qId_Inverter * Output_qId_Inverter;  // min value 0, max value 2*32767*32767
 800342a:	f9b0 2000 	ldrsh.w	r2, [r0]
temp = Output_qIq_Inverter * Output_qIq_Inverter
 800342e:	f9b4 1000 	ldrsh.w	r1, [r4]

if ( temp > (32767*32767) )       // temp > 32767*32767,
 8003432:	4d15      	ldr	r5, [pc, #84]	; (8003488 <RevPark_Circle_Limitation+0x64>)
             + Output_qId_Inverter * Output_qId_Inverter;  // min value 0, max value 2*32767*32767
 8003434:	fb02 f302 	mul.w	r3, r2, r2
temp = Output_qIq_Inverter * Output_qIq_Inverter
 8003438:	fb01 3301 	mla	r3, r1, r1, r3
if ( temp > (32767*32767) )       // temp > 32767*32767,
 800343c:	42ab      	cmp	r3, r5
 800343e:	dd1c      	ble.n	800347a <RevPark_Circle_Limitation+0x56>
   unsigned long long temp2;
   u16 index;

   //temp2 = (unsigned long long ) 128*temp;
   //temp2 /= (32767*32767);   // min value 128, max value 256
   temp2 = (unsigned long long )257*temp;
 8003440:	f240 1c01 	movw	ip, #257	; 0x101
 8003444:	fb83 3c0c 	smull	r3, ip, r3, ip
   temp2 /= (u32)(32768*32768);   // min value 128, max value 256
   temp = temp2/2;
 8003448:	0fdb      	lsrs	r3, r3, #31
 800344a:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
   temp -= 128;   // min value 0, max value 128
   index = circle_limit_table[(u8)temp];
 800344e:	4d0f      	ldr	r5, [pc, #60]	; (800348c <RevPark_Circle_Limitation+0x68>)
 8003450:	3b80      	subs	r3, #128	; 0x80

   temp = (s16)Output_qIq_Inverter * (u16)(index);
 8003452:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 8003456:	fb03 f101 	mul.w	r1, r3, r1
   Output_qIq_Inverter = (s16)(temp/32768);
 800345a:	2900      	cmp	r1, #0

   temp = (s16)Output_qId_Inverter * (u16)(index);
 800345c:	fb03 f202 	mul.w	r2, r3, r2
   Output_qIq_Inverter = (s16)(temp/32768);
 8003460:	bfbc      	itt	lt
 8003462:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 8003466:	317f      	addlt	r1, #127	; 0x7f
   Output_qId_Inverter = (s16)(temp/32768);
 8003468:	2a00      	cmp	r2, #0
 800346a:	bfbc      	itt	lt
 800346c:	f502 42ff 	addlt.w	r2, r2, #32640	; 0x7f80
 8003470:	327f      	addlt	r2, #127	; 0x7f
   Output_qIq_Inverter = (s16)(temp/32768);
 8003472:	13c9      	asrs	r1, r1, #15
   Output_qId_Inverter = (s16)(temp/32768);
 8003474:	13d2      	asrs	r2, r2, #15
   Output_qIq_Inverter = (s16)(temp/32768);
 8003476:	8021      	strh	r1, [r4, #0]
   Output_qId_Inverter = (s16)(temp/32768);
 8003478:	8002      	strh	r2, [r0, #0]
   }
}
 800347a:	bc30      	pop	{r4, r5}
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	2000ce24 	.word	0x2000ce24
 8003484:	2000ce26 	.word	0x2000ce26
 8003488:	3fff0001 	.word	0x3fff0001
 800348c:	0800afac 	.word	0x0800afac

08003490 <DQ_Filtering>:



Curr_Components DQ_Filtering(Curr_Components QD_Current) //// 10 próbek / 25khz/10 = 2.5khz filter zero -> 250hz HIT

{
 8003490:	b470      	push	{r4, r5, r6}

  static s32 Sum_Quadrature=0;
  static s32 Sum_Direct=0;


   Sum_Quadrature=(s32)((Sum_Quadrature+QD_Current.qI_Quadrature)-(AVG_Quadrature_Current));
 8003492:	4e14      	ldr	r6, [pc, #80]	; (80034e4 <DQ_Filtering+0x54>)
   Sum_Direct=(s32)((Sum_Direct+QD_Current.qI_Direct)-(AVG_Direct_Current));
 8003494:	4d14      	ldr	r5, [pc, #80]	; (80034e8 <DQ_Filtering+0x58>)
   Sum_Quadrature=(s32)((Sum_Quadrature+QD_Current.qI_Quadrature)-(AVG_Quadrature_Current));
 8003496:	4c15      	ldr	r4, [pc, #84]	; (80034ec <DQ_Filtering+0x5c>)
   Sum_Direct=(s32)((Sum_Direct+QD_Current.qI_Direct)-(AVG_Direct_Current));
 8003498:	682a      	ldr	r2, [r5, #0]
   Sum_Quadrature=(s32)((Sum_Quadrature+QD_Current.qI_Quadrature)-(AVG_Quadrature_Current));
 800349a:	6833      	ldr	r3, [r6, #0]
   Sum_Direct=(s32)((Sum_Direct+QD_Current.qI_Direct)-(AVG_Direct_Current));
 800349c:	4914      	ldr	r1, [pc, #80]	; (80034f0 <DQ_Filtering+0x60>)
   Sum_Quadrature=(s32)((Sum_Quadrature+QD_Current.qI_Quadrature)-(AVG_Quadrature_Current));
 800349e:	fa03 f380 	sxtah	r3, r3, r0
   Sum_Direct=(s32)((Sum_Direct+QD_Current.qI_Direct)-(AVG_Direct_Current));
 80034a2:	eb02 4020 	add.w	r0, r2, r0, asr #16
   Sum_Quadrature=(s32)((Sum_Quadrature+QD_Current.qI_Quadrature)-(AVG_Quadrature_Current));
 80034a6:	f9b4 2000 	ldrsh.w	r2, [r4]
 80034aa:	1a9b      	subs	r3, r3, r2
   Sum_Direct=(s32)((Sum_Direct+QD_Current.qI_Direct)-(AVG_Direct_Current));
 80034ac:	f9b1 2000 	ldrsh.w	r2, [r1]
   Sum_Quadrature=(s32)((Sum_Quadrature+QD_Current.qI_Quadrature)-(AVG_Quadrature_Current));
 80034b0:	6033      	str	r3, [r6, #0]
   Sum_Direct=(s32)((Sum_Direct+QD_Current.qI_Direct)-(AVG_Direct_Current));
 80034b2:	1a80      	subs	r0, r0, r2

   AVG_Quadrature_Current=(s16)((Sum_Quadrature/8));
 80034b4:	2b00      	cmp	r3, #0
   Sum_Direct=(s32)((Sum_Direct+QD_Current.qI_Direct)-(AVG_Direct_Current));
 80034b6:	6028      	str	r0, [r5, #0]
   AVG_Quadrature_Current=(s16)((Sum_Quadrature/8));
 80034b8:	bfb8      	it	lt
 80034ba:	3307      	addlt	r3, #7
   AVG_Direct_Current=(s16)((Sum_Direct/8));
 80034bc:	2800      	cmp	r0, #0
 80034be:	bfb8      	it	lt
 80034c0:	3007      	addlt	r0, #7
   AVG_Quadrature_Current=(s16)((Sum_Quadrature/8));
 80034c2:	f343 03cf 	sbfx	r3, r3, #3, #16
   AVG_Direct_Current=(s16)((Sum_Direct/8));
 80034c6:	f340 02cf 	sbfx	r2, r0, #3, #16
   AVG_Quadrature_Current=(s16)((Sum_Quadrature/8));
 80034ca:	8023      	strh	r3, [r4, #0]

   AVG_Current.qI_Direct = AVG_Direct_Current;
   AVG_Current.qI_Quadrature = AVG_Quadrature_Current;

   return AVG_Current;
 80034cc:	2000      	movs	r0, #0
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	f363 000f 	bfi	r0, r3, #0, #16
 80034d4:	b293      	uxth	r3, r2
{
 80034d6:	b085      	sub	sp, #20
   return AVG_Current;
 80034d8:	f363 401f 	bfi	r0, r3, #16, #16
   AVG_Direct_Current=(s16)((Sum_Direct/8));
 80034dc:	800a      	strh	r2, [r1, #0]

 }
 80034de:	b005      	add	sp, #20
 80034e0:	bc70      	pop	{r4, r5, r6}
 80034e2:	4770      	bx	lr
 80034e4:	2000ce30 	.word	0x2000ce30
 80034e8:	2000ce2c 	.word	0x2000ce2c
 80034ec:	2000ca0e 	.word	0x2000ca0e
 80034f0:	2000ca0c 	.word	0x2000ca0c

080034f4 <Generate_90Degrees_Delay>:
  static u8 Count_Beta=0;
  static u8 Count_Alpha=0;

  s16 Output=0;

  Count_Alpha=(u8)((Count_Beta+Delay90));// for 90 degrees 36 //((1/50Hz)/(1/20.600kHz)/4)-256
 80034f4:	4a06      	ldr	r2, [pc, #24]	; (8003510 <Generate_90Degrees_Delay+0x1c>)
  //Count_Alpha=(u8)((Count_Beta+141));// for 90 degrees 36
  BUFFER_Beta_Acquisitions[Count_Beta]=Alpha_Component;
 80034f6:	4907      	ldr	r1, [pc, #28]	; (8003514 <Generate_90Degrees_Delay+0x20>)
  Count_Alpha=(u8)((Count_Beta+Delay90));// for 90 degrees 36 //((1/50Hz)/(1/20.600kHz)/4)-256
 80034f8:	7813      	ldrb	r3, [r2, #0]
  BUFFER_Beta_Acquisitions[Count_Beta]=Alpha_Component;
 80034fa:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]

  Output=-(BUFFER_Beta_Acquisitions[(u8)Count_Alpha]);// to compensate offset
 80034fe:	f083 0080 	eor.w	r0, r3, #128	; 0x80

  Count_Beta++;
 8003502:	3301      	adds	r3, #1
  Output=-(BUFFER_Beta_Acquisitions[(u8)Count_Alpha]);// to compensate offset
 8003504:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
  Count_Beta++;
 8003508:	7013      	strb	r3, [r2, #0]
  Output=-(BUFFER_Beta_Acquisitions[(u8)Count_Alpha]);// to compensate offset
 800350a:	4240      	negs	r0, r0

  return ((s16)(Output));


}
 800350c:	b200      	sxth	r0, r0
 800350e:	4770      	bx	lr
 8003510:	2000ce12 	.word	0x2000ce12
 8003514:	2000ca10 	.word	0x2000ca10

08003518 <DS_ADC_EnableAndCalibrate>:
* Description    : Enable and calibrate Analog to digital converter
* Input          : ADCx the adc to calibrate
* Return         : None
*******************************************************************************/
void DS_ADC_EnableAndCalibrate(ADC_TypeDef* ADCx)
{
 8003518:	b082      	sub	sp, #8
	  __IO uint32_t wait_loop_index = 0U;
 800351a:	2200      	movs	r2, #0
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_ADRDY(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_ADRDY);
 800351c:	2301      	movs	r3, #1
 800351e:	9201      	str	r2, [sp, #4]
 8003520:	6003      	str	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003522:	6883      	ldr	r3, [r0, #8]
	  #if (USE_TIMEOUT == 1)
	  uint32_t Timeout = 0U; /* Variable used for timeout management */
	  #endif /* USE_TIMEOUT */
	//if(LL_ADC_ClearFlag_ADRDY(ADCx) == )
	  LL_ADC_ClearFlag_ADRDY(ADCx);
	if (LL_ADC_IsEnabled(ADCx) == 0)
 8003524:	07da      	lsls	r2, r3, #31
 8003526:	d448      	bmi.n	80035ba <DS_ADC_EnableAndCalibrate+0xa2>
	    /* Compute number of CPU cycles to wait for, from delay in us.            */
	    /* Note: Variable divided by 2 to compensate partially                    */
	    /*       CPU processing cycles (depends on compilation optimization).     */
	    /* Note: If system core clock frequency is below 200kHz, wait time        */
	    /*       is only a few CPU processing cycles.                             */
	    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8003528:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <DS_ADC_EnableAndCalibrate+0xa8>)
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800352a:	6882      	ldr	r2, [r0, #8]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4925      	ldr	r1, [pc, #148]	; (80035c4 <DS_ADC_EnableAndCalibrate+0xac>)
 8003530:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8003534:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003538:	099b      	lsrs	r3, r3, #6
 800353a:	6082      	str	r2, [r0, #8]
 800353c:	fba1 2303 	umull	r2, r3, r1, r3
 8003540:	099b      	lsrs	r3, r3, #6
  MODIFY_REG(ADCx->CR,
 8003542:	6882      	ldr	r2, [r0, #8]
 8003544:	4920      	ldr	r1, [pc, #128]	; (80035c8 <DS_ADC_EnableAndCalibrate+0xb0>)
 8003546:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800354a:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003554:	fba1 1303 	umull	r1, r3, r1, r3
 8003558:	08db      	lsrs	r3, r3, #3
 800355a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800355e:	6082      	str	r2, [r0, #8]
 8003560:	9301      	str	r3, [sp, #4]
	    while(wait_loop_index != 0)
 8003562:	9b01      	ldr	r3, [sp, #4]
 8003564:	b12b      	cbz	r3, 8003572 <DS_ADC_EnableAndCalibrate+0x5a>
	    {
	      wait_loop_index--;
 8003566:	9b01      	ldr	r3, [sp, #4]
 8003568:	3b01      	subs	r3, #1
 800356a:	9301      	str	r3, [sp, #4]
	    while(wait_loop_index != 0)
 800356c:	9b01      	ldr	r3, [sp, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f9      	bne.n	8003566 <DS_ADC_EnableAndCalibrate+0x4e>
  MODIFY_REG(ADCx->CR,
 8003572:	6883      	ldr	r3, [r0, #8]
 8003574:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003578:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800357c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003580:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003582:	6883      	ldr	r3, [r0, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	dbfc      	blt.n	8003582 <DS_ADC_EnableAndCalibrate+0x6a>
	    }

	    /* Delay between ADC end of calibration and ADC enable.                   */
	    /* Note: Variable divided by 2 to compensate partially                    */
	    /*       CPU processing cycles (depends on compilation optimization).     */
	    wait_loop_index = (ADC_DELAY_CALIB_ENABLE_CPU_CYCLES >> 1);
 8003588:	2340      	movs	r3, #64	; 0x40
 800358a:	9301      	str	r3, [sp, #4]
	    while(wait_loop_index != 0)
 800358c:	9b01      	ldr	r3, [sp, #4]
 800358e:	b12b      	cbz	r3, 800359c <DS_ADC_EnableAndCalibrate+0x84>
	    {
	      wait_loop_index--;
 8003590:	9b01      	ldr	r3, [sp, #4]
 8003592:	3b01      	subs	r3, #1
 8003594:	9301      	str	r3, [sp, #4]
	    while(wait_loop_index != 0)
 8003596:	9b01      	ldr	r3, [sp, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1f9      	bne.n	8003590 <DS_ADC_EnableAndCalibrate+0x78>
  MODIFY_REG(ADCx->CR,
 800359c:	6883      	ldr	r3, [r0, #8]
 800359e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80035ac:	6803      	ldr	r3, [r0, #0]
	    /* Poll for ADC ready to convert */
	    #if (USE_TIMEOUT == 1)
	    Timeout = ADC_ENABLE_TIMEOUT_MS;
	    #endif /* USE_TIMEOUT */

	    while (LL_ADC_IsActiveFlag_ADRDY(ADCx) == 0)
 80035ae:	07db      	lsls	r3, r3, #31
 80035b0:	d5fc      	bpl.n	80035ac <DS_ADC_EnableAndCalibrate+0x94>
	    /* Note: ADC flag ADRDY is not cleared here to be able to check ADC       */
	    /*       status afterwards.                                               */
	    /*       This flag should be cleared at ADC Deactivation, before a new    */
	    /*       ADC activation, using function "LL_ADC_ClearFlag_ADRDY()".       */

	    ADCx->CR |=ADC_CR_ADSTART;
 80035b2:	6883      	ldr	r3, [r0, #8]
 80035b4:	f043 0304 	orr.w	r3, r3, #4
 80035b8:	6083      	str	r3, [r0, #8]
	  }

}
 80035ba:	b002      	add	sp, #8
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	2000002c 	.word	0x2000002c
 80035c4:	053e2d63 	.word	0x053e2d63
 80035c8:	cccccccd 	.word	0xcccccccd

080035cc <DS_Init>:
    if (pDSInit)
 80035cc:	2800      	cmp	r0, #0
 80035ce:	d045      	beq.n	800365c <DS_Init+0x90>
        if (DataSensing.State != DS_Running)
 80035d0:	4a23      	ldr	r2, [pc, #140]	; (8003660 <DS_Init+0x94>)
 80035d2:	7c13      	ldrb	r3, [r2, #16]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d03f      	beq.n	8003658 <DS_Init+0x8c>
{
 80035d8:	b570      	push	{r4, r5, r6, lr}
            DataSensing.Init.Counter       = pDSInit->Counter;
 80035da:	6804      	ldr	r4, [r0, #0]
 80035dc:	6014      	str	r4, [r2, #0]
            DataSensing.Init.OnAcquisition = pDSInit->OnAcquisition;
 80035de:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
	   DMA1_Channel1->CPAR  = (uint32_t)(&(ADC1->DR)); // peripheral (source) address
 80035e2:	4b20      	ldr	r3, [pc, #128]	; (8003664 <DS_Init+0x98>)
            DataSensing.Init.DataRegister  = pDSInit->DataRegister;
 80035e4:	6841      	ldr	r1, [r0, #4]
	   DMA1_Channel1->CPAR  = (uint32_t)(&(ADC1->DR)); // peripheral (source) address
 80035e6:	4820      	ldr	r0, [pc, #128]	; (8003668 <DS_Init+0x9c>)
	   DMA1_Channel5->CPAR  = (uint32_t)(&(ADC2->DR)); // peripheral (source) address
 80035e8:	4e20      	ldr	r6, [pc, #128]	; (800366c <DS_Init+0xa0>)
            DataSensing.Init.RegisterSize  = pDSInit->RegisterSize;
 80035ea:	e9c2 1401 	strd	r1, r4, [r2, #4]
	   DMA1_Channel1->CPAR  = (uint32_t)(&(ADC1->DR)); // peripheral (source) address
 80035ee:	6118      	str	r0, [r3, #16]
	   DMA1_Channel1->CMAR = (uint32_t)(DataSensing.Init.DataRegister+3); //MEMORY ADDRESS
 80035f0:	1d88      	adds	r0, r1, #6
 80035f2:	6158      	str	r0, [r3, #20]
	   DMA1_Channel1->CNDTR = ( uint16_t )ADC1_DATA_SIZE; //TRANSFER SIZE
 80035f4:	2002      	movs	r0, #2
 80035f6:	60d8      	str	r0, [r3, #12]
	   DMA1_Channel1->CCR |= ( DMA_CCR_EN ); //CHANNEL ENABLE
 80035f8:	6898      	ldr	r0, [r3, #8]
 80035fa:	f040 0001 	orr.w	r0, r0, #1
 80035fe:	6098      	str	r0, [r3, #8]
            DataSensing.State = DS_Stopped;
 8003600:	2400      	movs	r4, #0
            DataSensing.Init.OnAcquisition = pDSInit->OnAcquisition;
 8003602:	60d5      	str	r5, [r2, #12]
	   DMA1_Channel5->CMAR = (uint32_t)(DataSensing.Init.DataRegister+9); //MEMORY ADDRESS
 8003604:	f101 0512 	add.w	r5, r1, #18
            DataSensing.State = DS_Stopped;
 8003608:	7414      	strb	r4, [r2, #16]
	   DMA1_Channel2->CPAR  = (uint32_t)(&(SPI4->DR)); // peripheral (source) address
 800360a:	4819      	ldr	r0, [pc, #100]	; (8003670 <DS_Init+0xa4>)
	   DMA1_Channel5->CPAR  = (uint32_t)(&(ADC2->DR)); // peripheral (source) address
 800360c:	661e      	str	r6, [r3, #96]	; 0x60
	   DMA1_Channel2->CNDTR = ( uint16_t )SPI4_DATA_SIZE; //TRANSFER SIZE
 800360e:	2203      	movs	r2, #3
	   DMA1_Channel5->CMAR = (uint32_t)(DataSensing.Init.DataRegister+9); //MEMORY ADDRESS
 8003610:	665d      	str	r5, [r3, #100]	; 0x64
	   DMA1_Channel5->CNDTR = ( uint16_t )ADC2_DATA_SIZE; //TRANSFER SIZE
 8003612:	2501      	movs	r5, #1
 8003614:	65dd      	str	r5, [r3, #92]	; 0x5c
	   DMA1_Channel2->CPAR  = (uint32_t)(&(SPI4->DR)); // peripheral (source) address
 8003616:	6258      	str	r0, [r3, #36]	; 0x24
	   DMA1_Channel2->CMAR = (uint32_t)(DataSensing.Init.DataRegister); //MEMORY ADDRESS
 8003618:	6299      	str	r1, [r3, #40]	; 0x28
	   DMA1_Channel2->CNDTR = ( uint16_t )SPI4_DATA_SIZE; //TRANSFER SIZE
 800361a:	621a      	str	r2, [r3, #32]
	   DMA1_Channel2->CCR |= DMA_CCR_TCIE; //ENABLE TRANSFER COMPLETE INTERRUPT
 800361c:	69d9      	ldr	r1, [r3, #28]
	   DMA1_Channel4->CMAR = (uint32_t)(DCAC_DATA); //MEMORY ADDRESS
 800361e:	4e15      	ldr	r6, [pc, #84]	; (8003674 <DS_Init+0xa8>)
	   DMA1_Channel2->CCR |= DMA_CCR_TCIE; //ENABLE TRANSFER COMPLETE INTERRUPT
 8003620:	f041 0102 	orr.w	r1, r1, #2
 8003624:	61d9      	str	r1, [r3, #28]
	   DMA1_Channel2->CCR |= ( DMA_CCR_EN ); //CHANNEL ENABLE
 8003626:	69d9      	ldr	r1, [r3, #28]
 8003628:	4329      	orrs	r1, r5
 800362a:	61d9      	str	r1, [r3, #28]
	   DMA1_Channel4->CPAR  = (uint32_t)(&(SPI3->DR)); // peripheral (source) address
 800362c:	4d12      	ldr	r5, [pc, #72]	; (8003678 <DS_Init+0xac>)
	   DMA1_Channel3->CMAR = (uint32_t)(to_grid_State_Control); //MEMORY ADDRESS
 800362e:	4913      	ldr	r1, [pc, #76]	; (800367c <DS_Init+0xb0>)
	   DMA1_Channel3->CPAR  = (uint32_t)(&(SPI4->DR)); // peripheral (source) address
 8003630:	6398      	str	r0, [r3, #56]	; 0x38
	   DMA1_Channel3->CMAR = (uint32_t)(to_grid_State_Control); //MEMORY ADDRESS
 8003632:	63d9      	str	r1, [r3, #60]	; 0x3c
	   DMA1_Channel3->CNDTR = ( uint16_t )SPI4_DATA_SIZE; //TRANSFER SIZE
 8003634:	635a      	str	r2, [r3, #52]	; 0x34
	   DMA1_Channel4->CPAR  = (uint32_t)(&(SPI3->DR)); // peripheral (source) address
 8003636:	64dd      	str	r5, [r3, #76]	; 0x4c
	   DMA1_Channel4->CMAR = (uint32_t)(DCAC_DATA); //MEMORY ADDRESS
 8003638:	651e      	str	r6, [r3, #80]	; 0x50
	   DMA1_Channel4->CNDTR = ( uint16_t )ADC4_DATA_SIZE; //TRANSFER SIZE
 800363a:	2605      	movs	r6, #5
 800363c:	649e      	str	r6, [r3, #72]	; 0x48
  DS_ADC_EnableAndCalibrate(ADC1);
 800363e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
	    DMA1_Channel6->CPAR  = (uint32_t)(&(SPI3->DR)); // peripheral (source) address
 8003642:	675d      	str	r5, [r3, #116]	; 0x74
	    DMA1_Channel6->CMAR = (uint32_t)(to_grid_State_Control); //MEMORY ADDRESS
 8003644:	6799      	str	r1, [r3, #120]	; 0x78
	    DMA1_Channel6->CNDTR = ( uint16_t )SPI4_DATA_SIZE; //TRANSFER SIZE
 8003646:	671a      	str	r2, [r3, #112]	; 0x70
  DS_ADC_EnableAndCalibrate(ADC1);
 8003648:	f7ff ff66 	bl	8003518 <DS_ADC_EnableAndCalibrate>
  DS_ADC_EnableAndCalibrate(ADC2);
 800364c:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8003650:	f7ff ff62 	bl	8003518 <DS_ADC_EnableAndCalibrate>
            nRet = DS_ERROR_NONE;
 8003654:	4620      	mov	r0, r4
}
 8003656:	bd70      	pop	{r4, r5, r6, pc}
        nRet = DS_ERROR_ON_INIT;
 8003658:	2002      	movs	r0, #2
}
 800365a:	4770      	bx	lr
    nRet = DS_ERROR_INVALID_PARAMETER;
 800365c:	2001      	movs	r0, #1
 800365e:	4770      	bx	lr
 8003660:	20010e58 	.word	0x20010e58
 8003664:	40020000 	.word	0x40020000
 8003668:	50000040 	.word	0x50000040
 800366c:	50000140 	.word	0x50000140
 8003670:	40013c0c 	.word	0x40013c0c
 8003674:	20010e50 	.word	0x20010e50
 8003678:	40003c0c 	.word	0x40003c0c
 800367c:	20010e74 	.word	0x20010e74

08003680 <DS_SetAcquistionEvent>:
  if (pfFn)
 8003680:	b108      	cbz	r0, 8003686 <DS_SetAcquistionEvent+0x6>
    DataSensing.Init.OnAcquisition = pfFn;
 8003682:	4b01      	ldr	r3, [pc, #4]	; (8003688 <DS_SetAcquistionEvent+0x8>)
 8003684:	60d8      	str	r0, [r3, #12]
}
 8003686:	4770      	bx	lr
 8003688:	20010e58 	.word	0x20010e58

0800368c <DS_SendCommand>:
{
 800368c:	b530      	push	{r4, r5, lr}
    if (cmd == DS_Start)
 800368e:	4604      	mov	r4, r0
{
 8003690:	b09f      	sub	sp, #124	; 0x7c
    if (cmd == DS_Start)
 8003692:	2800      	cmp	r0, #0
 8003694:	f040 8130 	bne.w	80038f8 <DS_SendCommand+0x26c>
    return DataSensing.State;
 8003698:	4b9d      	ldr	r3, [pc, #628]	; (8003910 <DS_SendCommand+0x284>)
       if (DS_GetStatus() != DS_Running)
 800369a:	7c1a      	ldrb	r2, [r3, #16]
 800369c:	2a01      	cmp	r2, #1
 800369e:	f000 8130 	beq.w	8003902 <DS_SendCommand+0x276>
          DataSensing.State = DS_Running;
 80036a2:	2201      	movs	r2, #1
 80036a4:	741a      	strb	r2, [r3, #16]

	  /* USER CODE BEGIN TIM1_Init 0 */

	  /* USER CODE END TIM1_Init 0 */

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036a6:	e9cd 0007 	strd	r0, r0, [sp, #28]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036aa:	e9cd 0001 	strd	r0, r0, [sp, #4]
	  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80036ae:	e9cd 0004 	strd	r0, r0, [sp, #16]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80036b2:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
 80036b6:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
 80036ba:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036be:	9006      	str	r0, [sp, #24]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036c0:	9000      	str	r0, [sp, #0]
	  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80036c2:	9003      	str	r0, [sp, #12]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80036c4:	900a      	str	r0, [sp, #40]	; 0x28
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036c6:	9009      	str	r0, [sp, #36]	; 0x24
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80036c8:	4601      	mov	r1, r0
 80036ca:	2234      	movs	r2, #52	; 0x34
 80036cc:	a811      	add	r0, sp, #68	; 0x44
 80036ce:	f007 fa59 	bl	800ab84 <memset>

	  /* USER CODE BEGIN TIM1_Init 1 */

	  /* USER CODE END TIM1_Init 1 */
	  htim1.Instance = TIM1;
 80036d2:	4890      	ldr	r0, [pc, #576]	; (8003914 <DS_SendCommand+0x288>)
 80036d4:	4b90      	ldr	r3, [pc, #576]	; (8003918 <DS_SendCommand+0x28c>)
 80036d6:	6003      	str	r3, [r0, #0]
	  htim1.Init.Prescaler = 0;
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
	  htim1.Init.Period = 65535;
 80036d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	  htim1.Init.RepetitionCounter = 0;
 80036e0:	e9c0 4404 	strd	r4, r4, [r0, #16]
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036e4:	6184      	str	r4, [r0, #24]
	  htim1.Init.Period = 65535;
 80036e6:	60c3      	str	r3, [r0, #12]
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80036e8:	f005 f930 	bl	800894c <HAL_TIM_Base_Init>
 80036ec:	2800      	cmp	r0, #0
 80036ee:	f040 81c5 	bne.w	8003a7c <DS_SendCommand+0x3f0>
	  {
	    Error_Handler();
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80036f6:	4887      	ldr	r0, [pc, #540]	; (8003914 <DS_SendCommand+0x288>)
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036f8:	9306      	str	r3, [sp, #24]
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80036fa:	a906      	add	r1, sp, #24
 80036fc:	f004 ffc8 	bl	8008690 <HAL_TIM_ConfigClockSource>
 8003700:	2800      	cmp	r0, #0
 8003702:	f040 81b8 	bne.w	8003a76 <DS_SendCommand+0x3ea>
	  {
	    Error_Handler();
	  }
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003706:	4883      	ldr	r0, [pc, #524]	; (8003914 <DS_SendCommand+0x288>)
 8003708:	f005 f952 	bl	80089b0 <HAL_TIM_PWM_Init>
 800370c:	2800      	cmp	r0, #0
 800370e:	f040 81af 	bne.w	8003a70 <DS_SendCommand+0x3e4>
	  {
	    Error_Handler();
	  }
	  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8003712:	4880      	ldr	r0, [pc, #512]	; (8003914 <DS_SendCommand+0x288>)
 8003714:	2108      	movs	r1, #8
 8003716:	f005 f97d 	bl	8008a14 <HAL_TIM_OnePulse_Init>
 800371a:	2800      	cmp	r0, #0
 800371c:	f040 81a5 	bne.w	8003a6a <DS_SendCommand+0x3de>
	  {
	    Error_Handler();
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003720:	2300      	movs	r3, #0
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003722:	487c      	ldr	r0, [pc, #496]	; (8003914 <DS_SendCommand+0x288>)
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003724:	9302      	str	r3, [sp, #8]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003726:	4669      	mov	r1, sp
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003728:	e9cd 3300 	strd	r3, r3, [sp]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800372c:	f005 fad4 	bl	8008cd8 <HAL_TIMEx_MasterConfigSynchronization>
 8003730:	2800      	cmp	r0, #0
 8003732:	f040 8197 	bne.w	8003a64 <DS_SendCommand+0x3d8>
	  {
	    Error_Handler();
	  }

	  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8003736:	2101      	movs	r1, #1
	  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
	  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8003738:	2300      	movs	r3, #0
	  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 800373a:	4876      	ldr	r0, [pc, #472]	; (8003914 <DS_SendCommand+0x288>)
	  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 800373c:	9305      	str	r3, [sp, #20]
	  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 800373e:	aa03      	add	r2, sp, #12
	  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8003740:	e9cd 1103 	strd	r1, r1, [sp, #12]
	  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8003744:	f005 fb76 	bl	8008e34 <HAL_TIMEx_ConfigBreakInput>
 8003748:	2800      	cmp	r0, #0
 800374a:	f040 8188 	bne.w	8003a5e <DS_SendCommand+0x3d2>
	  {
	    Error_Handler();
	  }

	  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP7;
 800374e:	2380      	movs	r3, #128	; 0x80
	  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8003750:	2101      	movs	r1, #1
	  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP7;
 8003752:	9303      	str	r3, [sp, #12]
	  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;

	  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8003754:	486f      	ldr	r0, [pc, #444]	; (8003914 <DS_SendCommand+0x288>)
	  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8003756:	2300      	movs	r3, #0
	  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8003758:	aa03      	add	r2, sp, #12
	  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 800375a:	e9cd 1304 	strd	r1, r3, [sp, #16]
	  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 800375e:	f005 fb69 	bl	8008e34 <HAL_TIMEx_ConfigBreakInput>
 8003762:	2800      	cmp	r0, #0
 8003764:	f040 8178 	bne.w	8003a58 <DS_SendCommand+0x3cc>
	    Error_Handler();
	  }

	  //TIM1->AF1 &= ~TIM1_AF1_BKINE; //DISABLE

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003768:	2360      	movs	r3, #96	; 0x60
 800376a:	930a      	str	r3, [sp, #40]	; 0x28
	  sConfigOC.Pulse = 65535;
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800376c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003770:	2302      	movs	r3, #2
 8003772:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8003776:	2208      	movs	r2, #8
	  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003778:	2304      	movs	r3, #4
 800377a:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800377e:	f44f 7580 	mov.w	r5, #256	; 0x100
 8003782:	2300      	movs	r3, #0
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003784:	4863      	ldr	r0, [pc, #396]	; (8003914 <DS_SendCommand+0x288>)
 8003786:	a90a      	add	r1, sp, #40	; 0x28
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003788:	e9cd 530f 	strd	r5, r3, [sp, #60]	; 0x3c
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800378c:	f005 f9c4 	bl	8008b18 <HAL_TIM_PWM_ConfigChannel>
 8003790:	2800      	cmp	r0, #0
 8003792:	f040 815e 	bne.w	8003a52 <DS_SendCommand+0x3c6>
	    Error_Handler();
	  }



	  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8003796:	485f      	ldr	r0, [pc, #380]	; (8003914 <DS_SendCommand+0x288>)
 8003798:	f005 fbe6 	bl	8008f68 <HAL_TIMEx_EnableDeadTimePreload>
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800379c:	f44f 6400 	mov.w	r4, #2048	; 0x800
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80037a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80037a4:	2300      	movs	r3, #0
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80037a6:	e9cd 4211 	strd	r4, r2, [sp, #68]	; 0x44
	  sBreakDeadTimeConfig.DeadTime = 150; // 150 = 1 us
 80037aa:	2496      	movs	r4, #150	; 0x96
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE; //zmiana
 80037ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	  sBreakDeadTimeConfig.DeadTime = 150; // 150 = 1 us
 80037b0:	e9cd 3413 	strd	r3, r4, [sp, #76]	; 0x4c
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE; //zmiana
 80037b4:	9215      	str	r2, [sp, #84]	; 0x54
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
	  sBreakDeadTimeConfig.BreakFilter = 3; // 5 = 160 ns
 80037b6:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 80037ba:	2203      	movs	r2, #3
 80037bc:	e9cd 4216 	strd	r4, r2, [sp, #88]	; 0x58
	  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
	  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
	  sBreakDeadTimeConfig.Break2Filter = 0;
	  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80037c0:	4854      	ldr	r0, [pc, #336]	; (8003914 <DS_SendCommand+0x288>)
	  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80037c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80037c6:	a911      	add	r1, sp, #68	; 0x44
	  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80037c8:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
	  sBreakDeadTimeConfig.Break2Filter = 0;
 80037cc:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80037d0:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80037d4:	f005 fadc 	bl	8008d90 <HAL_TIMEx_ConfigBreakDeadTime>
 80037d8:	2800      	cmp	r0, #0
 80037da:	f040 8137 	bne.w	8003a4c <DS_SendCommand+0x3c0>
          TIM_CCxChannelCmd(TIM1, TIM_CHANNEL_3, TIM_CCx_ENABLE);
 80037de:	4c4e      	ldr	r4, [pc, #312]	; (8003918 <DS_SendCommand+0x28c>)
	    Error_Handler();
	  }
	  /* USER CODE BEGIN TIM1_Init 2 */

	  /* USER CODE END TIM1_Init 2 */
	  HAL_TIM_MspPostInit(&htim1);
 80037e0:	484c      	ldr	r0, [pc, #304]	; (8003914 <DS_SendCommand+0x288>)
          TIM8->CCER |= TIM_CCER_CC3E; ////ENABLE CHANNEL 3
 80037e2:	4d4e      	ldr	r5, [pc, #312]	; (800391c <DS_SendCommand+0x290>)
	  HAL_TIM_MspPostInit(&htim1);
 80037e4:	f002 f868 	bl	80058b8 <HAL_TIM_MspPostInit>
          TIM_CCxChannelCmd(TIM1, TIM_CHANNEL_3, TIM_CCx_ENABLE);
 80037e8:	4620      	mov	r0, r4
 80037ea:	2201      	movs	r2, #1
 80037ec:	2108      	movs	r1, #8
 80037ee:	f005 fa23 	bl	8008c38 <TIM_CCxChannelCmd>
          TIM1->CCER &=  ~tmp;
 80037f2:	6a23      	ldr	r3, [r4, #32]
          COMP7 ->CSR &= ~COMP_CSR_EN;
 80037f4:	4a4a      	ldr	r2, [pc, #296]	; (8003920 <DS_SendCommand+0x294>)
          TIM1->CCER &=  ~tmp;
 80037f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037fa:	6223      	str	r3, [r4, #32]
          TIM1->CCER |= (uint32_t)(TIM_CCxN_ENABLE << (TIM_CHANNEL_3 & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037fc:	6a23      	ldr	r3, [r4, #32]
 80037fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003802:	6223      	str	r3, [r4, #32]
          TIM1->BDTR |= TIM_BDTR_MOE; //ENABLE ALL OUTPUTS
 8003804:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800380a:	6463      	str	r3, [r4, #68]	; 0x44
          TIM1->AF1 &= ~TIM1_AF1_BKINE;
 800380c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800380e:	f023 0301 	bic.w	r3, r3, #1
 8003812:	6623      	str	r3, [r4, #96]	; 0x60
          COMP7 ->CSR &= ~COMP_CSR_EN;
 8003814:	f8d2 3218 	ldr.w	r3, [r2, #536]	; 0x218
 8003818:	f023 0301 	bic.w	r3, r3, #1
 800381c:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218
          delay_us(10000);
 8003820:	f242 7010 	movw	r0, #10000	; 0x2710
 8003824:	f001 fdb4 	bl	8005390 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003828:	4b3e      	ldr	r3, [pc, #248]	; (8003924 <DS_SendCommand+0x298>)
 800382a:	2204      	movs	r2, #4
 800382c:	619a      	str	r2, [r3, #24]
          TIM8->CCER |= TIM_CCER_CC3E; ////ENABLE CHANNEL 3
 800382e:	6a2b      	ldr	r3, [r5, #32]
 8003830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003834:	622b      	str	r3, [r5, #32]
          TIM8->BDTR |= TIM_BDTR_MOE; //ENABLE ALL OUTPUTS
 8003836:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800383c:	646b      	str	r3, [r5, #68]	; 0x44
          TIM8->CR1  |= TIM_CR1_ARPE | TIM_CR1_CEN; // ENABLE AUTORELOAD PRELOAD AND TIMER COUNTER
 800383e:	682b      	ldr	r3, [r5, #0]
 8003840:	f043 0381 	orr.w	r3, r3, #129	; 0x81
          delay_us(10000);
 8003844:	f242 7010 	movw	r0, #10000	; 0x2710
          TIM8->CR1  |= TIM_CR1_ARPE | TIM_CR1_CEN; // ENABLE AUTORELOAD PRELOAD AND TIMER COUNTER
 8003848:	602b      	str	r3, [r5, #0]
          for (int new_value=ISO_DCDC_PERIOD*ISO_DCDC_DUTY; new_value<=ISO_DCDC_PERIOD*0.5; new_value++){
 800384a:	240f      	movs	r4, #15
          delay_us(10000);
 800384c:	f001 fda0 	bl	8005390 <delay_us>
        	  TIM8->CCR3 = new_value;
 8003850:	63ec      	str	r4, [r5, #60]	; 0x3c
        	  delay_us(300);;
 8003852:	f44f 7096 	mov.w	r0, #300	; 0x12c
          for (int new_value=ISO_DCDC_PERIOD*ISO_DCDC_DUTY; new_value<=ISO_DCDC_PERIOD*0.5; new_value++){
 8003856:	3401      	adds	r4, #1
        	  delay_us(300);;
 8003858:	f001 fd9a 	bl	8005390 <delay_us>
          for (int new_value=ISO_DCDC_PERIOD*ISO_DCDC_DUTY; new_value<=ISO_DCDC_PERIOD*0.5; new_value++){
 800385c:	2c98      	cmp	r4, #152	; 0x98
 800385e:	d1f7      	bne.n	8003850 <DS_SendCommand+0x1c4>
          delay_us(100000);
 8003860:	4831      	ldr	r0, [pc, #196]	; (8003928 <DS_SendCommand+0x29c>)
 8003862:	f001 fd95 	bl	8005390 <delay_us>
          HRTIM_TIMF_DMA_START();
 8003866:	f7fe fc8f 	bl	8002188 <HRTIM_TIMF_DMA_START>
          HRTIM_TIMD_DMA_START();
 800386a:	f7fe fc83 	bl	8002174 <HRTIM_TIMD_DMA_START>
          HRTIM1->sMasterRegs.MCR |= (HRTIM_MCR_MCEN | HRTIM_MCR_TACEN | HRTIM_MCR_TBCEN | HRTIM_MCR_TDCEN | HRTIM_MCR_TECEN | HRTIM_MCR_TFCEN);
 800386e:	492f      	ldr	r1, [pc, #188]	; (800392c <DS_SendCommand+0x2a0>)
          HRTIM1_COMMON->OENR |=HRTIM_OENR_TE2OEN; //TIME OUTPUT 2 ENABLE
 8003870:	4a2f      	ldr	r2, [pc, #188]	; (8003930 <DS_SendCommand+0x2a4>)
          HRTIM1->sMasterRegs.MCR |= (HRTIM_MCR_MCEN | HRTIM_MCR_TACEN | HRTIM_MCR_TBCEN | HRTIM_MCR_TDCEN | HRTIM_MCR_TECEN | HRTIM_MCR_TFCEN);
 8003872:	680b      	ldr	r3, [r1, #0]
          delay_us(100000);
 8003874:	482c      	ldr	r0, [pc, #176]	; (8003928 <DS_SendCommand+0x29c>)
          HRTIM1->sMasterRegs.MCR |= (HRTIM_MCR_MCEN | HRTIM_MCR_TACEN | HRTIM_MCR_TBCEN | HRTIM_MCR_TDCEN | HRTIM_MCR_TECEN | HRTIM_MCR_TFCEN);
 8003876:	f443 03ee 	orr.w	r3, r3, #7798784	; 0x770000
 800387a:	600b      	str	r3, [r1, #0]
          HRTIM1_COMMON->OENR |=HRTIM_OENR_TE2OEN; //TIME OUTPUT 2 ENABLE
 800387c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003880:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003884:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          delay_us(100000);
 8003888:	f001 fd82 	bl	8005390 <delay_us>
          SPI4->CR2 &= ~(SPI_RXFIFO_THRESHOLD || SPI_CR2_LDMARX);
 800388c:	4929      	ldr	r1, [pc, #164]	; (8003934 <DS_SendCommand+0x2a8>)
          DMA1_Channel2->CCR |= ( DMA_CCR_EN );
 800388e:	4a2a      	ldr	r2, [pc, #168]	; (8003938 <DS_SendCommand+0x2ac>)
          SPI4->CR2 &= ~(SPI_RXFIFO_THRESHOLD || SPI_CR2_LDMARX);
 8003890:	6848      	ldr	r0, [r1, #4]
          SPI3->CR2 &= ~(SPI_RXFIFO_THRESHOLD || SPI_CR2_LDMARX);
 8003892:	4b2a      	ldr	r3, [pc, #168]	; (800393c <DS_SendCommand+0x2b0>)
          SPI4->CR2 &= ~(SPI_RXFIFO_THRESHOLD || SPI_CR2_LDMARX);
 8003894:	f020 0001 	bic.w	r0, r0, #1
 8003898:	6048      	str	r0, [r1, #4]
          DMA1_Channel2->CCR |= ( DMA_CCR_EN );
 800389a:	69d0      	ldr	r0, [r2, #28]
 800389c:	f040 0001 	orr.w	r0, r0, #1
 80038a0:	61d0      	str	r0, [r2, #28]
          DMA1_Channel3->CCR |= ( DMA_CCR_EN );
 80038a2:	6b10      	ldr	r0, [r2, #48]	; 0x30
 80038a4:	f040 0001 	orr.w	r0, r0, #1
 80038a8:	6310      	str	r0, [r2, #48]	; 0x30
          SPI4->CR1 |=  ( SPI_CR1_SPE );
 80038aa:	6808      	ldr	r0, [r1, #0]
 80038ac:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80038b0:	6008      	str	r0, [r1, #0]
          SPI4->CR2 |= (SPI_CR2_TXDMAEN);
 80038b2:	6848      	ldr	r0, [r1, #4]
 80038b4:	f040 0002 	orr.w	r0, r0, #2
 80038b8:	6048      	str	r0, [r1, #4]
          SPI4->CR2 |= (SPI_CR2_RXDMAEN);
 80038ba:	6848      	ldr	r0, [r1, #4]
 80038bc:	f040 0001 	orr.w	r0, r0, #1
 80038c0:	6048      	str	r0, [r1, #4]
          SPI3->CR2 &= ~(SPI_RXFIFO_THRESHOLD || SPI_CR2_LDMARX);
 80038c2:	6859      	ldr	r1, [r3, #4]
 80038c4:	f021 0101 	bic.w	r1, r1, #1
 80038c8:	6059      	str	r1, [r3, #4]
          DMA1_Channel4->CCR |= ( DMA_CCR_EN );
 80038ca:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80038cc:	f041 0101 	orr.w	r1, r1, #1
 80038d0:	6451      	str	r1, [r2, #68]	; 0x44
          DMA1_Channel6->CCR |= ( DMA_CCR_EN );
 80038d2:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
 80038d4:	f041 0101 	orr.w	r1, r1, #1
 80038d8:	66d1      	str	r1, [r2, #108]	; 0x6c
          SPI3->CR1 |=  ( SPI_CR1_SPE );
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038e0:	601a      	str	r2, [r3, #0]
          SPI3->CR2 |= (SPI_CR2_TXDMAEN);
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	f042 0202 	orr.w	r2, r2, #2
 80038e8:	605a      	str	r2, [r3, #4]
          SPI3->CR2 |= (SPI_CR2_RXDMAEN);
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	f042 0201 	orr.w	r2, r2, #1
          nRet = DS_ERROR_NONE;
 80038f0:	2000      	movs	r0, #0
          SPI3->CR2 |= (SPI_CR2_RXDMAEN);
 80038f2:	605a      	str	r2, [r3, #4]
}
 80038f4:	b01f      	add	sp, #124	; 0x7c
 80038f6:	bd30      	pop	{r4, r5, pc}
    if (cmd == DS_Stop)
 80038f8:	2801      	cmp	r0, #1
 80038fa:	d105      	bne.n	8003908 <DS_SendCommand+0x27c>
    return DataSensing.State;
 80038fc:	4b04      	ldr	r3, [pc, #16]	; (8003910 <DS_SendCommand+0x284>)
       if (DS_GetStatus() != DS_Stopped)
 80038fe:	7c1a      	ldrb	r2, [r3, #16]
 8003900:	b9f2      	cbnz	r2, 8003940 <DS_SendCommand+0x2b4>
       nRet = DS_ERROR_ON_SEND_COMMAND;
 8003902:	2004      	movs	r0, #4
}
 8003904:	b01f      	add	sp, #124	; 0x7c
 8003906:	bd30      	pop	{r4, r5, pc}
    nRet = DS_ERROR_INVALID_COMMAND;
 8003908:	2003      	movs	r0, #3
}
 800390a:	b01f      	add	sp, #124	; 0x7c
 800390c:	bd30      	pop	{r4, r5, pc}
 800390e:	bf00      	nop
 8003910:	20010e58 	.word	0x20010e58
 8003914:	20011354 	.word	0x20011354
 8003918:	40012c00 	.word	0x40012c00
 800391c:	40013400 	.word	0x40013400
 8003920:	40010000 	.word	0x40010000
 8003924:	48000c00 	.word	0x48000c00
 8003928:	000186a0 	.word	0x000186a0
 800392c:	40016800 	.word	0x40016800
 8003930:	40016b00 	.word	0x40016b00
 8003934:	40013c00 	.word	0x40013c00
 8003938:	40020000 	.word	0x40020000
 800393c:	40003c00 	.word	0x40003c00
            HRTIM1->sMasterRegs.MCR &=~HRTIM_MCR_MCEN; //MASTER TIMER COUNTER DISABLE
 8003940:	4c54      	ldr	r4, [pc, #336]	; (8003a94 <DS_SendCommand+0x408>)
            HAL_SPI_DMAStop(&hspi4);
 8003942:	4855      	ldr	r0, [pc, #340]	; (8003a98 <DS_SendCommand+0x40c>)
            DataSensing.State = DS_Stopped;
 8003944:	2500      	movs	r5, #0
 8003946:	741d      	strb	r5, [r3, #16]
            HAL_SPI_DMAStop(&hspi4);
 8003948:	f004 fcd8 	bl	80082fc <HAL_SPI_DMAStop>
            HRTIM1->sMasterRegs.MCR &=~HRTIM_MCR_MCEN; //MASTER TIMER COUNTER DISABLE
 800394c:	6823      	ldr	r3, [r4, #0]
            HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TE2ODIS; //TIME OUTPUT 2 DISABLE
 800394e:	4a53      	ldr	r2, [pc, #332]	; (8003a9c <DS_SendCommand+0x410>)
            HRTIM1->sMasterRegs.MCR &=~HRTIM_MCR_MCEN; //MASTER TIMER COUNTER DISABLE
 8003950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003954:	6023      	str	r3, [r4, #0]
            HRTIM1->sMasterRegs.MCR &=~HRTIM_MCR_TACEN; //TIMER A COUNTER DISABLE
 8003956:	6823      	ldr	r3, [r4, #0]
 8003958:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800395c:	6023      	str	r3, [r4, #0]
            HRTIM1->sMasterRegs.MCR &=~HRTIM_MCR_TBCEN; //TIMER B COUNTER DISABLE
 800395e:	6823      	ldr	r3, [r4, #0]
 8003960:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003964:	6023      	str	r3, [r4, #0]
            HRTIM1->sMasterRegs.MCR &=~HRTIM_MCR_TFCEN; //TIMER F COUNTER DISABLE
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800396c:	6023      	str	r3, [r4, #0]
            HRTIM1->sMasterRegs.MCR &=~HRTIM_MCR_TECEN; //TIMER E COUNTER DISABLE
 800396e:	6823      	ldr	r3, [r4, #0]
 8003970:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003974:	6023      	str	r3, [r4, #0]
            HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TE2ODIS; //TIME OUTPUT 2 DISABLE
 8003976:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800397a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800397e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
            HRTIM_TIMD_DMA_STOP();
 8003982:	f7fe fbff 	bl	8002184 <HRTIM_TIMD_DMA_STOP>
            TIM8->CCER &= ~TIM_CCER_CC3NE; //DISABLE CHANNEL 3N
 8003986:	4b46      	ldr	r3, [pc, #280]	; (8003aa0 <DS_SendCommand+0x414>)
  WRITE_REG(GPIOx->BRR, PinMask);
 8003988:	4946      	ldr	r1, [pc, #280]	; (8003aa4 <DS_SendCommand+0x418>)
 800398a:	6a1a      	ldr	r2, [r3, #32]
            HAL_TIMEx_OnePulseN_Stop(&htim1, TIM_CHANNEL_3); // (High default) Enable/Disable HS gate drivers
 800398c:	4846      	ldr	r0, [pc, #280]	; (8003aa8 <DS_SendCommand+0x41c>)
            TIM8->CCER &= ~TIM_CCER_CC3NE; //DISABLE CHANNEL 3N
 800398e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003992:	621a      	str	r2, [r3, #32]
            TIM8->CCER &= ~TIM_CCER_CC3E; ////DISABLE CHANNEL 3
 8003994:	6a1a      	ldr	r2, [r3, #32]
 8003996:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800399a:	621a      	str	r2, [r3, #32]
            TIM8->BDTR &= ~TIM_BDTR_MOE; //DISABLE ALL OUTPUTS
 800399c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800399e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039a2:	645a      	str	r2, [r3, #68]	; 0x44
            TIM8->CR1  &= ~(TIM_CR1_ARPE | TIM_CR1_CEN); // DISABLE AUTORELOAD PRELOAD AND TIMER COUNTER
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	f022 0281 	bic.w	r2, r2, #129	; 0x81
 80039aa:	601a      	str	r2, [r3, #0]
            SPI4->CR2 &= ~(SPI_CR2_TXDMAEN);
 80039ac:	4a3f      	ldr	r2, [pc, #252]	; (8003aac <DS_SendCommand+0x420>)
 80039ae:	2304      	movs	r3, #4
 80039b0:	628b      	str	r3, [r1, #40]	; 0x28
 80039b2:	6851      	ldr	r1, [r2, #4]
            DMA1_Channel2->CCR &= ~( DMA_CCR_EN );
 80039b4:	4b3e      	ldr	r3, [pc, #248]	; (8003ab0 <DS_SendCommand+0x424>)
            SPI4->CR2 &= ~(SPI_CR2_TXDMAEN);
 80039b6:	f021 0102 	bic.w	r1, r1, #2
 80039ba:	6051      	str	r1, [r2, #4]
            SPI4->CR2 &= ~(SPI_CR2_RXDMAEN);
 80039bc:	6851      	ldr	r1, [r2, #4]
 80039be:	f021 0101 	bic.w	r1, r1, #1
 80039c2:	6051      	str	r1, [r2, #4]
            SPI4->CR1 &= ~SPI_CR1_SPE;
 80039c4:	6811      	ldr	r1, [r2, #0]
 80039c6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80039ca:	6011      	str	r1, [r2, #0]
            DMA1_Channel2->CCR &= ~( DMA_CCR_EN );
 80039cc:	69d9      	ldr	r1, [r3, #28]
 80039ce:	f021 0101 	bic.w	r1, r1, #1
 80039d2:	61d9      	str	r1, [r3, #28]
            DMA1_Channel3->CCR &= ~( DMA_CCR_EN );
 80039d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
            SPI3->CR2 &= ~(SPI_CR2_TXDMAEN);
 80039d6:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
            DMA1_Channel3->CCR &= ~( DMA_CCR_EN );
 80039da:	f021 0101 	bic.w	r1, r1, #1
 80039de:	6319      	str	r1, [r3, #48]	; 0x30
            SPI3->CR2 &= ~(SPI_CR2_TXDMAEN);
 80039e0:	6851      	ldr	r1, [r2, #4]
 80039e2:	f021 0102 	bic.w	r1, r1, #2
 80039e6:	6051      	str	r1, [r2, #4]
            SPI3->CR2 &= ~(SPI_CR2_RXDMAEN);
 80039e8:	6851      	ldr	r1, [r2, #4]
 80039ea:	f021 0101 	bic.w	r1, r1, #1
 80039ee:	6051      	str	r1, [r2, #4]
            SPI3->CR1 &= ~SPI_CR1_SPE;
 80039f0:	6811      	ldr	r1, [r2, #0]
 80039f2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80039f6:	6011      	str	r1, [r2, #0]
            DMA1_Channel4->CCR &= ~( DMA_CCR_EN );
 80039f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039fa:	f022 0201 	bic.w	r2, r2, #1
 80039fe:	645a      	str	r2, [r3, #68]	; 0x44
            DMA1_Channel6->CCR &= ~( DMA_CCR_EN );
 8003a00:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003a02:	f022 0201 	bic.w	r2, r2, #1
 8003a06:	66da      	str	r2, [r3, #108]	; 0x6c
            HAL_TIMEx_OnePulseN_Stop(&htim1, TIM_CHANNEL_3); // (High default) Enable/Disable HS gate drivers
 8003a08:	2108      	movs	r1, #8
 8003a0a:	f005 f925 	bl	8008c58 <HAL_TIMEx_OnePulseN_Stop>
            HAL_TIM_OnePulse_Stop(&htim1, TIM_CHANNEL_3); // (Low default) OC signal to DCAC
 8003a0e:	2108      	movs	r1, #8
 8003a10:	4825      	ldr	r0, [pc, #148]	; (8003aa8 <DS_SendCommand+0x41c>)
 8003a12:	f004 fded 	bl	80085f0 <HAL_TIM_OnePulse_Stop>
            TIM1->AF1 &= ~TIM1_AF1_BKINE;
 8003a16:	4927      	ldr	r1, [pc, #156]	; (8003ab4 <DS_SendCommand+0x428>)
            COMP7 ->CSR &= ~COMP_CSR_EN;
 8003a18:	4a27      	ldr	r2, [pc, #156]	; (8003ab8 <DS_SendCommand+0x42c>)
            TIM1->AF1 &= ~TIM1_AF1_BKINE;
 8003a1a:	6e0b      	ldr	r3, [r1, #96]	; 0x60
            delay_us(100000);
 8003a1c:	4827      	ldr	r0, [pc, #156]	; (8003abc <DS_SendCommand+0x430>)
            TIM1->AF1 &= ~TIM1_AF1_BKINE;
 8003a1e:	f023 0301 	bic.w	r3, r3, #1
 8003a22:	660b      	str	r3, [r1, #96]	; 0x60
            COMP7 ->CSR &= ~COMP_CSR_EN;
 8003a24:	f8d2 3218 	ldr.w	r3, [r2, #536]	; 0x218
 8003a28:	f023 0301 	bic.w	r3, r3, #1
 8003a2c:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218
            delay_us(100000);
 8003a30:	f001 fcae 	bl	8005390 <delay_us>
      	  uint32_t isrflags = HRTIM1->sCommonRegs.ISR;
 8003a34:	f8d4 3388 	ldr.w	r3, [r4, #904]	; 0x388
      	  uint32_t ierits   = HRTIM1->sCommonRegs.IER;
 8003a38:	f8d4 2390 	ldr.w	r2, [r4, #912]	; 0x390
      	  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8003a3c:	f013 0308 	ands.w	r3, r3, #8
 8003a40:	d01f      	beq.n	8003a82 <DS_SendCommand+0x3f6>
      	    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8003a42:	f012 0208 	ands.w	r2, r2, #8
 8003a46:	d11e      	bne.n	8003a86 <DS_SendCommand+0x3fa>
            nRet = DS_ERROR_NONE;
 8003a48:	4610      	mov	r0, r2
 8003a4a:	e753      	b.n	80038f4 <DS_SendCommand+0x268>
	    Error_Handler();
 8003a4c:	f001 fcb8 	bl	80053c0 <Error_Handler>
 8003a50:	e6c5      	b.n	80037de <DS_SendCommand+0x152>
	    Error_Handler();
 8003a52:	f001 fcb5 	bl	80053c0 <Error_Handler>
 8003a56:	e69e      	b.n	8003796 <DS_SendCommand+0x10a>
	    Error_Handler();
 8003a58:	f001 fcb2 	bl	80053c0 <Error_Handler>
 8003a5c:	e684      	b.n	8003768 <DS_SendCommand+0xdc>
	    Error_Handler();
 8003a5e:	f001 fcaf 	bl	80053c0 <Error_Handler>
 8003a62:	e674      	b.n	800374e <DS_SendCommand+0xc2>
	    Error_Handler();
 8003a64:	f001 fcac 	bl	80053c0 <Error_Handler>
 8003a68:	e665      	b.n	8003736 <DS_SendCommand+0xaa>
	    Error_Handler();
 8003a6a:	f001 fca9 	bl	80053c0 <Error_Handler>
 8003a6e:	e657      	b.n	8003720 <DS_SendCommand+0x94>
	    Error_Handler();
 8003a70:	f001 fca6 	bl	80053c0 <Error_Handler>
 8003a74:	e64d      	b.n	8003712 <DS_SendCommand+0x86>
	    Error_Handler();
 8003a76:	f001 fca3 	bl	80053c0 <Error_Handler>
 8003a7a:	e644      	b.n	8003706 <DS_SendCommand+0x7a>
	    Error_Handler();
 8003a7c:	f001 fca0 	bl	80053c0 <Error_Handler>
 8003a80:	e637      	b.n	80036f2 <DS_SendCommand+0x66>
            nRet = DS_ERROR_NONE;
 8003a82:	4618      	mov	r0, r3
 8003a84:	e736      	b.n	80038f4 <DS_SendCommand+0x268>
      	    	HRTIM1->sCommonRegs.ICR = HRTIM_ICR_FLT4C;
 8003a86:	2308      	movs	r3, #8
 8003a88:	f8c4 338c 	str.w	r3, [r4, #908]	; 0x38c
      	    	DCDC_TIMx_Configuration(); //added to riconfigure the timer for DCDC
 8003a8c:	f7fe fd4e 	bl	800252c <DCDC_TIMx_Configuration>
            nRet = DS_ERROR_NONE;
 8003a90:	4628      	mov	r0, r5
 8003a92:	e72f      	b.n	80038f4 <DS_SendCommand+0x268>
 8003a94:	40016800 	.word	0x40016800
 8003a98:	200112f0 	.word	0x200112f0
 8003a9c:	40016b00 	.word	0x40016b00
 8003aa0:	40013400 	.word	0x40013400
 8003aa4:	48000c00 	.word	0x48000c00
 8003aa8:	20011354 	.word	0x20011354
 8003aac:	40013c00 	.word	0x40013c00
 8003ab0:	40020000 	.word	0x40020000
 8003ab4:	40012c00 	.word	0x40012c00
 8003ab8:	40010000 	.word	0x40010000
 8003abc:	000186a0 	.word	0x000186a0

08003ac0 <DMA1_Channel2_IRQHandler>:
{
 8003ac0:	b508      	push	{r3, lr}
				if(Pulse2_IT==FALSE)
 8003ac2:	4b36      	ldr	r3, [pc, #216]	; (8003b9c <DMA1_Channel2_IRQHandler+0xdc>)
 8003ac4:	781a      	ldrb	r2, [r3, #0]
 8003ac6:	b102      	cbz	r2, 8003aca <DMA1_Channel2_IRQHandler+0xa>
				else if (Pulse2_IT==TRUE)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
				  SET_BIT(*pReg, HRTIM_MICR_MREP);
 8003aca:	4a35      	ldr	r2, [pc, #212]	; (8003ba0 <DMA1_Channel2_IRQHandler+0xe0>)
		  if (DMA1->ISR & DMA_ISR_TCIF2)
 8003acc:	4935      	ldr	r1, [pc, #212]	; (8003ba4 <DMA1_Channel2_IRQHandler+0xe4>)
				  SET_BIT(*pReg, HRTIM_MICR_MREP);
 8003ace:	f8d2 3b08 	ldr.w	r3, [r2, #2824]	; 0xb08
 8003ad2:	f043 0310 	orr.w	r3, r3, #16
 8003ad6:	f8c2 3b08 	str.w	r3, [r2, #2824]	; 0xb08
		  if (DMA1->ISR & DMA_ISR_TCIF2)
 8003ada:	680b      	ldr	r3, [r1, #0]
 8003adc:	069b      	lsls	r3, r3, #26
 8003ade:	d507      	bpl.n	8003af0 <DMA1_Channel2_IRQHandler+0x30>
				if (DataSensing.State == DS_Running)
 8003ae0:	4b31      	ldr	r3, [pc, #196]	; (8003ba8 <DMA1_Channel2_IRQHandler+0xe8>)
 8003ae2:	7c1a      	ldrb	r2, [r3, #16]
 8003ae4:	2a01      	cmp	r2, #1
 8003ae6:	d054      	beq.n	8003b92 <DMA1_Channel2_IRQHandler+0xd2>
			  DMA2_CLEAR_IT = 1;
 8003ae8:	4b30      	ldr	r3, [pc, #192]	; (8003bac <DMA1_Channel2_IRQHandler+0xec>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		  if (DMA1->ISR & DMA_ISR_TCIF1)
 8003af0:	4b2c      	ldr	r3, [pc, #176]	; (8003ba4 <DMA1_Channel2_IRQHandler+0xe4>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	0798      	lsls	r0, r3, #30
 8003af6:	d503      	bpl.n	8003b00 <DMA1_Channel2_IRQHandler+0x40>
		  DMA1_CLEAR_IT = 1;
 8003af8:	4b2c      	ldr	r3, [pc, #176]	; (8003bac <DMA1_Channel2_IRQHandler+0xec>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		  if (DMA1->ISR & DMA_ISR_TCIF5)
 8003b00:	4b28      	ldr	r3, [pc, #160]	; (8003ba4 <DMA1_Channel2_IRQHandler+0xe4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	0399      	lsls	r1, r3, #14
 8003b06:	d503      	bpl.n	8003b10 <DMA1_Channel2_IRQHandler+0x50>
		  DMA5_CLEAR_IT = 1;
 8003b08:	4b28      	ldr	r3, [pc, #160]	; (8003bac <DMA1_Channel2_IRQHandler+0xec>)
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		  if (DMA1->ISR & DMA_ISR_TCIF3)
 8003b10:	4b24      	ldr	r3, [pc, #144]	; (8003ba4 <DMA1_Channel2_IRQHandler+0xe4>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	059a      	lsls	r2, r3, #22
 8003b16:	d503      	bpl.n	8003b20 <DMA1_Channel2_IRQHandler+0x60>
			  DMA3_CLEAR_IT = 1;
 8003b18:	4b24      	ldr	r3, [pc, #144]	; (8003bac <DMA1_Channel2_IRQHandler+0xec>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		  if (DMA1->ISR & DMA_ISR_TCIF4)
 8003b20:	4b20      	ldr	r3, [pc, #128]	; (8003ba4 <DMA1_Channel2_IRQHandler+0xe4>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	049b      	lsls	r3, r3, #18
 8003b26:	d503      	bpl.n	8003b30 <DMA1_Channel2_IRQHandler+0x70>
			  DMA4_CLEAR_IT = 1;
 8003b28:	4b20      	ldr	r3, [pc, #128]	; (8003bac <DMA1_Channel2_IRQHandler+0xec>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		  if (DMA1->ISR & DMA_ISR_TCIF6)
 8003b30:	4b1c      	ldr	r3, [pc, #112]	; (8003ba4 <DMA1_Channel2_IRQHandler+0xe4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	0298      	lsls	r0, r3, #10
 8003b36:	d503      	bpl.n	8003b40 <DMA1_Channel2_IRQHandler+0x80>
			  DMA6_CLEAR_IT = 1;
 8003b38:	4b1c      	ldr	r3, [pc, #112]	; (8003bac <DMA1_Channel2_IRQHandler+0xec>)
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		  if ((DMA1->ISR & DMA_ISR_TCIF7) || (DMA1->ISR & DMA_ISR_HTIF7) || (DMA1->ISR & DMA_ISR_GIF7))
 8003b40:	4b18      	ldr	r3, [pc, #96]	; (8003ba4 <DMA1_Channel2_IRQHandler+0xe4>)
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	0191      	lsls	r1, r2, #6
 8003b46:	d402      	bmi.n	8003b4e <DMA1_Channel2_IRQHandler+0x8e>
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	0152      	lsls	r2, r2, #5
 8003b4c:	d51d      	bpl.n	8003b8a <DMA1_Channel2_IRQHandler+0xca>
			  DMA7_CLEAR_IT = 1;
 8003b4e:	4b17      	ldr	r3, [pc, #92]	; (8003bac <DMA1_Channel2_IRQHandler+0xec>)
 8003b50:	2201      	movs	r2, #1
			  DMA7_CLEAR_GIT = 1;
 8003b52:	e9c3 2238 	strd	r2, r2, [r3, #224]	; 0xe0
			  DMA7_CLEAR_HIT = 1;
 8003b56:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		  if ((DMA1->ISR & DMA_ISR_TCIF8) || (DMA1->ISR & DMA_ISR_HTIF8) || (DMA1->ISR & DMA_ISR_GIF8))
 8003b5a:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <DMA1_Channel2_IRQHandler+0xe4>)
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	0091      	lsls	r1, r2, #2
 8003b60:	d402      	bmi.n	8003b68 <DMA1_Channel2_IRQHandler+0xa8>
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	0052      	lsls	r2, r2, #1
 8003b66:	d506      	bpl.n	8003b76 <DMA1_Channel2_IRQHandler+0xb6>
			  DMA8_CLEAR_IT = 1;
 8003b68:	4b10      	ldr	r3, [pc, #64]	; (8003bac <DMA1_Channel2_IRQHandler+0xec>)
 8003b6a:	2201      	movs	r2, #1
			  DMA8_CLEAR_GIT = 1;
 8003b6c:	e9c3 223c 	strd	r2, r2, [r3, #240]	; 0xf0
			  DMA8_CLEAR_HIT = 1;
 8003b70:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
}
 8003b74:	bd08      	pop	{r3, pc}
		  if ((DMA1->ISR & DMA_ISR_TCIF8) || (DMA1->ISR & DMA_ISR_HTIF8) || (DMA1->ISR & DMA_ISR_GIF8))
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	d5fb      	bpl.n	8003b74 <DMA1_Channel2_IRQHandler+0xb4>
			  DMA8_CLEAR_IT = 1;
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <DMA1_Channel2_IRQHandler+0xec>)
 8003b7e:	2201      	movs	r2, #1
			  DMA8_CLEAR_GIT = 1;
 8003b80:	e9c3 223c 	strd	r2, r2, [r3, #240]	; 0xf0
			  DMA8_CLEAR_HIT = 1;
 8003b84:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 8003b88:	e7f4      	b.n	8003b74 <DMA1_Channel2_IRQHandler+0xb4>
		  if ((DMA1->ISR & DMA_ISR_TCIF7) || (DMA1->ISR & DMA_ISR_HTIF7) || (DMA1->ISR & DMA_ISR_GIF7))
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	01d8      	lsls	r0, r3, #7
 8003b8e:	d5e4      	bpl.n	8003b5a <DMA1_Channel2_IRQHandler+0x9a>
 8003b90:	e7dd      	b.n	8003b4e <DMA1_Channel2_IRQHandler+0x8e>
					if (DataSensing.Init.OnAcquisition)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0a7      	beq.n	8003ae8 <DMA1_Channel2_IRQHandler+0x28>
						DataSensing.Init.OnAcquisition();
 8003b98:	4798      	blx	r3
 8003b9a:	e7a5      	b.n	8003ae8 <DMA1_Channel2_IRQHandler+0x28>
 8003b9c:	20010e70 	.word	0x20010e70
 8003ba0:	40016000 	.word	0x40016000
 8003ba4:	40020000 	.word	0x40020000
 8003ba8:	20010e58 	.word	0x20010e58
 8003bac:	42400000 	.word	0x42400000

08003bb0 <PID_Init>:


//*********************************************************************************************************************
void PID_Init(PI_ControllerTYPEDEF *Direct_PID, PI_ControllerTYPEDEF *Quadrature_PID,PI_ControllerTYPEDEF *Reactive_PID,PI_ControllerTYPEDEF *Active_PID,PI_ControllerTYPEDEF *Bus_DC_PID, PI_ControllerTYPEDEF *PLL_PID,PI_ControllerTYPEDEF *MPPT_PID)

{
 8003bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bb4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
  PLL_PID->Reference =0;    //PID_DIRECT_VOLTAGE_REFERENCE;
  PLL_PID->Kp_Gain =2700;//2750;//405; //500//3000//450 //50Hz   //PID_DIRECT_VOLTAGE_KP_DEFAULT;8000
 8003bb8:	f640 288c 	movw	r8, #2700	; 0xa8c
 8003bbc:	f8a5 8002 	strh.w	r8, [r5, #2]
  PLL_PID->Reference =0;    //PID_DIRECT_VOLTAGE_REFERENCE;
 8003bc0:	2300      	movs	r3, #0
  PLL_PID->Ki_Gain =35;//35;//4; //10//100/20//50Hz;   //PID_DIRECT_VOLTAGE_KI_DEFAULT;500

  PLL_PID->Lower_Limit_Output=-S16_MAX;         //Lower Limit for Output limitation
  PLL_PID->Upper_Limit_Output=S16_MAX;          //Upper Limit for Output limitation
 8003bc2:	f647 7cff 	movw	ip, #32767	; 0x7fff
  PLL_PID->Lower_Limit_Output=-S16_MAX;         //Lower Limit for Output limitation
 8003bc6:	f248 0601 	movw	r6, #32769	; 0x8001
  PLL_PID->Ki_Gain =35;//35;//4; //10//100/20//50Hz;   //PID_DIRECT_VOLTAGE_KI_DEFAULT;500
 8003bca:	f04f 0823 	mov.w	r8, #35	; 0x23
  PLL_PID->Reference =0;    //PID_DIRECT_VOLTAGE_REFERENCE;
 8003bce:	802b      	strh	r3, [r5, #0]
  PLL_PID->Max_PID_Output = FALSE;
 8003bd0:	816b      	strh	r3, [r5, #10]
  PLL_PID->Upper_Limit_Output=S16_MAX;          //Upper Limit for Output limitation
 8003bd2:	f8a5 c008 	strh.w	ip, [r5, #8]
  PLL_PID->Lower_Limit_Output=-S16_MAX;         //Lower Limit for Output limitation
 8003bd6:	80ee      	strh	r6, [r5, #6]
  PLL_PID->Ki_Gain =35;//35;//4; //10//100/20//50Hz;   //PID_DIRECT_VOLTAGE_KI_DEFAULT;500
 8003bd8:	f8a5 8004 	strh.w	r8, [r5, #4]
  //PI Id
  Direct_PID->Reference =0;                       //Output_PID_Reactive_Power; //Brak zmian (load żarówki)
  Direct_PID->Kp_Gain = 200;//1100;//870;//2407;//3000;//9488;//7600;//4253428;//4100;//6500;  // filtro RIPEM 7500              //PID_KP_DEFAULT;
  Direct_PID->Ki_Gain = 1500;//2857;//4489;//425;//56;//200;//10;//20;//                     //PID_KI_DEFAULT;

  Direct_PID->Lower_Limit_Output=  -6900;//-8900;// -6900;       //Lower Limit for Output limitation
 8003bdc:	f24e 550c 	movw	r5, #58636	; 0xe50c
 8003be0:	80c5      	strh	r5, [r0, #6]
  Direct_PID->Ki_Gain = 1500;//2857;//4489;//425;//56;//200;//10;//20;//                     //PID_KI_DEFAULT;
 8003be2:	f240 5edc 	movw	lr, #1500	; 0x5dc
  Direct_PID->Kp_Gain = 200;//1100;//870;//2407;//3000;//9488;//7600;//4253428;//4100;//6500;  // filtro RIPEM 7500              //PID_KP_DEFAULT;
 8003be6:	27c8      	movs	r7, #200	; 0xc8
  Direct_PID->Upper_Limit_Output=  6900;// 8900;//6900;      //Upper Limit for Output limitation  THD
 8003be8:	f641 25f4 	movw	r5, #6900	; 0x1af4
  Direct_PID->Reference =0;                       //Output_PID_Reactive_Power; //Brak zmian (load żarówki)
 8003bec:	8003      	strh	r3, [r0, #0]
  Direct_PID->Kp_Gain = 200;//1100;//870;//2407;//3000;//9488;//7600;//4253428;//4100;//6500;  // filtro RIPEM 7500              //PID_KP_DEFAULT;
 8003bee:	8047      	strh	r7, [r0, #2]
  Direct_PID->Ki_Gain = 1500;//2857;//4489;//425;//56;//200;//10;//20;//                     //PID_KI_DEFAULT;
 8003bf0:	f8a0 e004 	strh.w	lr, [r0, #4]
  Direct_PID->Max_PID_Output =      FALSE;
 8003bf4:	8143      	strh	r3, [r0, #10]
  Direct_PID->Upper_Limit_Output=  6900;// 8900;//6900;      //Upper Limit for Output limitation  THD
 8003bf6:	8105      	strh	r5, [r0, #8]
  //PI Iq
  Quadrature_PID->Reference =0;           //PID_DEFAULT;
  Quadrature_PID->Kp_Gain = 200;//1178;//134;//1158;//3350;//3400;//4100;//6190;//4000;      // filtro RIPEM 12000  power factor
  Quadrature_PID->Ki_Gain = 1500;//3660;//7452;//700;//650;//700;//1;    //20   //PID_KI_DEFAULT;

  Quadrature_PID->Lower_Limit_Output=-32067;//-32030;    // Lower Limit for Output limitation
 8003bf8:	f248 20bd 	movw	r0, #33469	; 0x82bd
 8003bfc:	80c8      	strh	r0, [r1, #6]
  Quadrature_PID->Upper_Limit_Output= 32067;//32030;    //  Upper Limit for Output limitation
 8003bfe:	f647 5043 	movw	r0, #32067	; 0x7d43
 8003c02:	8108      	strh	r0, [r1, #8]
  Quadrature_PID->Kp_Gain = 200;//1178;//134;//1158;//3350;//3400;//4100;//6190;//4000;      // filtro RIPEM 12000  power factor
 8003c04:	804f      	strh	r7, [r1, #2]
  Quadrature_PID->Reference =0;           //PID_DEFAULT;
 8003c06:	800b      	strh	r3, [r1, #0]
  Quadrature_PID->Ki_Gain = 1500;//3660;//7452;//700;//650;//700;//1;    //20   //PID_KI_DEFAULT;
 8003c08:	f8a1 e004 	strh.w	lr, [r1, #4]
  Quadrature_PID->Max_PID_Output =     FALSE;
 8003c0c:	814b      	strh	r3, [r1, #10]
  Quadrature_PID->Min_PID_Output =     FALSE;

  // cambiamo il ref....
  Reactive_PID->Reference =0;//30               //PID REFERENCE DEFAULT
  Reactive_PID->Kp_Gain =1500; // filtro RIPEM 3400 //PID_KP_DEFAULT; //Brak zmian (load żarówki)
  Reactive_PID->Ki_Gain =10;                 //PID_KI_DEFAULT;      //Brak zmian (load żarówki)
 8003c0e:	200a      	movs	r0, #10
  Reactive_PID->Lower_Limit_Output=-32767;    //Lower Limit for Output limitation
  Reactive_PID->Upper_Limit_Output=32767;     //Upper Limit for Output limitation
  Reactive_PID->Max_PID_Output = FALSE;
  Reactive_PID->Min_PID_Output = FALSE;

  Bus_DC_PID->Reference = 10000;//11000; //7692; //8200;//8500; //13000; //15000  //Brak zmian (load żarówki)
 8003c10:	f242 7110 	movw	r1, #10000	; 0x2710
  Reactive_PID->Kp_Gain =1500; // filtro RIPEM 3400 //PID_KP_DEFAULT; //Brak zmian (load żarówki)
 8003c14:	f8a2 e002 	strh.w	lr, [r2, #2]
  Reactive_PID->Lower_Limit_Output=-32767;    //Lower Limit for Output limitation
 8003c18:	80d6      	strh	r6, [r2, #6]
  Reactive_PID->Reference =0;//30               //PID REFERENCE DEFAULT
 8003c1a:	8013      	strh	r3, [r2, #0]
  Reactive_PID->Upper_Limit_Output=32767;     //Upper Limit for Output limitation
 8003c1c:	f8a2 c008 	strh.w	ip, [r2, #8]
  Reactive_PID->Max_PID_Output = FALSE;
 8003c20:	8153      	strh	r3, [r2, #10]
  Reactive_PID->Ki_Gain =10;                 //PID_KI_DEFAULT;      //Brak zmian (load żarówki)
 8003c22:	8090      	strh	r0, [r2, #4]
  Bus_DC_PID->Reference = 10000;//11000; //7692; //8200;//8500; //13000; //15000  //Brak zmian (load żarówki)
 8003c24:	8021      	strh	r1, [r4, #0]
  Bus_DC_PID->Kp_Gain = 8000;//8116;//8100;//8100;//10000;//24000;   //5000      //PID_KP_DEFAULT;
  Bus_DC_PID->Ki_Gain = 400;//600;//200;//1050;//20//400;    //300   //PID_KI_DEFAULT;
 8003c26:	f44f 72c8 	mov.w	r2, #400	; 0x190
  Bus_DC_PID->Kp_Gain = 8000;//8116;//8100;//8100;//10000;//24000;   //5000      //PID_KP_DEFAULT;
 8003c2a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8003c2e:	8061      	strh	r1, [r4, #2]
  Bus_DC_PID->Ki_Gain = 400;//600;//200;//1050;//20//400;    //300   //PID_KI_DEFAULT;
 8003c30:	80a2      	strh	r2, [r4, #4]

  Bus_DC_PID->Lower_Limit_Output= 0;  //S16_MIN;     //Lower Limit for Output limitation
 8003c32:	80e3      	strh	r3, [r4, #6]
  Bus_DC_PID->Upper_Limit_Output= 32767; //Upper Limit for Output limitation
 8003c34:	f8a4 c008 	strh.w	ip, [r4, #8]
  Bus_DC_PID->Max_PID_Output = FALSE;
 8003c38:	8163      	strh	r3, [r4, #10]
  Bus_DC_PID->Min_PID_Output = FALSE;
}
 8003c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c3e:	bf00      	nop

08003c40 <PID_DirectCurrent>:
s16 PID_DirectCurrent(PI_ControllerTYPEDEF *Direct_PID, s16 qIdirect_Input)
{
  s32 wProportional_Term=0, wIntegral_Term=0, wIntegralTerm=0, wOutput_32,wIntegral_sum_temp=0;
  s32 Error;

  Error = (Direct_PID->Reference- qIdirect_Input); // Inverter_Current_Components
 8003c40:	f9b0 2000 	ldrsh.w	r2, [r0]

  /* Proportional term computation*/
  wProportional_Term = Direct_PID->Kp_Gain * Error;
 8003c44:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  Error = (Direct_PID->Reference- qIdirect_Input); // Inverter_Current_Components
 8003c48:	1a51      	subs	r1, r2, r1
  {
    wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = Direct_PID->Ki_Gain * Error;
 8003c4a:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
  wProportional_Term = Direct_PID->Kp_Gain * Error;
 8003c4e:	fb01 f303 	mul.w	r3, r1, r3
 /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/

  wOutput_32 = (wProportional_Term/4096) + (wIntegralTerm/4096);
 8003c52:	2b00      	cmp	r3, #0
    wIntegral_Term = Direct_PID->Ki_Gain * Error;
 8003c54:	fb02 f101 	mul.w	r1, r2, r1
  wOutput_32 = (wProportional_Term/4096) + (wIntegralTerm/4096);
 8003c58:	bfb8      	it	lt
 8003c5a:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 8003c5e:	2900      	cmp	r1, #0
 8003c60:	bfb8      	it	lt
 8003c62:	f601 71ff 	addwlt	r1, r1, #4095	; 0xfff

  if (wOutput_32 > Direct_PID->Upper_Limit_Output)
 8003c66:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
  wOutput_32 = (wProportional_Term/4096) + (wIntegralTerm/4096);
 8003c6a:	131b      	asrs	r3, r3, #12
 8003c6c:	eb03 3321 	add.w	r3, r3, r1, asr #12
  if (wOutput_32 > Direct_PID->Upper_Limit_Output)
 8003c70:	429a      	cmp	r2, r3
 8003c72:	db05      	blt.n	8003c80 <PID_DirectCurrent+0x40>
  {
    wOutput_32 = Direct_PID->Upper_Limit_Output;
  }
  else if (wOutput_32 < Direct_PID->Lower_Limit_Output)
 8003c74:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
    wOutput_32 = Direct_PID->Lower_Limit_Output;
  }
  else
  {}

  return((s16)(wOutput_32));
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	bfb8      	it	lt
 8003c7c:	4613      	movlt	r3, r2
 8003c7e:	b21a      	sxth	r2, r3
}
 8003c80:	4610      	mov	r0, r2
 8003c82:	4770      	bx	lr

08003c84 <PID_QuadratureCurrent>:
 8003c84:	f9b0 2000 	ldrsh.w	r2, [r0]
 8003c88:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8003c8c:	1a51      	subs	r1, r2, r1
 8003c8e:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8003c92:	fb01 f303 	mul.w	r3, r1, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	fb02 f101 	mul.w	r1, r2, r1
 8003c9c:	bfb8      	it	lt
 8003c9e:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 8003ca2:	2900      	cmp	r1, #0
 8003ca4:	bfb8      	it	lt
 8003ca6:	f601 71ff 	addwlt	r1, r1, #4095	; 0xfff
 8003caa:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8003cae:	131b      	asrs	r3, r3, #12
 8003cb0:	eb03 3321 	add.w	r3, r3, r1, asr #12
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	dc05      	bgt.n	8003cc4 <PID_QuadratureCurrent+0x40>
 8003cb8:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	bfb8      	it	lt
 8003cc0:	4613      	movlt	r3, r2
 8003cc2:	b21a      	sxth	r2, r3
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	4770      	bx	lr

08003cc8 <PID_Reactive_Power>:
s16 PID_Reactive_Power(PI_ControllerTYPEDEF *Reactive_PID, s16 qReactive_Input)
{
  s32 wProportional_Term=0, wIntegral_Term=0, wIntegralTerm=0, wOutput_32,wIntegral_sum_temp=0;
  s32 Error;

  Error = (Reactive_PID->Reference- qReactive_Input);
 8003cc8:	f9b0 2000 	ldrsh.w	r2, [r0]

  /* Proportional term computation*/
  wProportional_Term = Reactive_PID->Kp_Gain * Error;
 8003ccc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  Error = (Reactive_PID->Reference- qReactive_Input);
 8003cd0:	1a51      	subs	r1, r2, r1
  {
    wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = Reactive_PID->Ki_Gain * Error;
 8003cd2:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
  wProportional_Term = Reactive_PID->Kp_Gain * Error;
 8003cd6:	fb01 f303 	mul.w	r3, r1, r3
 /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/

  wOutput_32 = (wProportional_Term/4096) + (wIntegralTerm/32768);
 8003cda:	2b00      	cmp	r3, #0
    wIntegral_Term = Reactive_PID->Ki_Gain * Error;
 8003cdc:	fb02 f101 	mul.w	r1, r2, r1
  wOutput_32 = (wProportional_Term/4096) + (wIntegralTerm/32768);
 8003ce0:	bfb8      	it	lt
 8003ce2:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 8003ce6:	2900      	cmp	r1, #0
 8003ce8:	bfbc      	itt	lt
 8003cea:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 8003cee:	317f      	addlt	r1, #127	; 0x7f

  if (wOutput_32 > Reactive_PID->Upper_Limit_Output)
 8003cf0:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
  wOutput_32 = (wProportional_Term/4096) + (wIntegralTerm/32768);
 8003cf4:	131b      	asrs	r3, r3, #12
 8003cf6:	eb03 33e1 	add.w	r3, r3, r1, asr #15
  if (wOutput_32 > Reactive_PID->Upper_Limit_Output)
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	db05      	blt.n	8003d0a <PID_Reactive_Power+0x42>
  {
    wOutput_32 = Reactive_PID->Upper_Limit_Output;
  }
  else if (wOutput_32 < Reactive_PID->Lower_Limit_Output)
 8003cfe:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
    wOutput_32 = Reactive_PID->Lower_Limit_Output;
  }
  else
  {}

  return((s16)(wOutput_32));
 8003d02:	4293      	cmp	r3, r2
 8003d04:	bfb8      	it	lt
 8003d06:	4613      	movlt	r3, r2
 8003d08:	b21a      	sxth	r2, r3
}
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop

08003d10 <PID_Init_Integral_Part>:
*******************************************************************************/

//void PID_Init_Integral_Part(PI_ControllerTYPEDEF *Direct_PID, PI_ControllerTYPEDEF *Quadrature_PID,PI_ControllerTYPEDEF *Reactive_PID,PI_ControllerTYPEDEF *Active_PID)
void PID_Init_Integral_Part(void)
{
   Integral_Voltage = 0;  // reset integral value
 8003d10:	4902      	ldr	r1, [pc, #8]	; (8003d1c <PID_Init_Integral_Part+0xc>)
   Integral_MPPT = 0;
   Integral_Direct_Current=0;
   Integral_Quadrature_Current=0;
   Integral_Reactive_Power=0;
   Integral_Active_Power=0;
   Integral_Bus_Voltage=0;
 8003d12:	4a03      	ldr	r2, [pc, #12]	; (8003d20 <PID_Init_Integral_Part+0x10>)
   Integral_Voltage = 0;  // reset integral value
 8003d14:	2300      	movs	r3, #0
 8003d16:	600b      	str	r3, [r1, #0]
   Integral_Bus_Voltage=0;
 8003d18:	6013      	str	r3, [r2, #0]

}
 8003d1a:	4770      	bx	lr
 8003d1c:	20010e80 	.word	0x20010e80
 8003d20:	20010e7c 	.word	0x20010e7c

08003d24 <PLL_PID_Regulator>:
* Output         : s16
* Return         : None
*******************************************************************************/

s16 PLL_PID_Regulator(PI_ControllerTYPEDEF *PLL_PID, Volt_Components Grid_Voltage_Components_Input)
{
 8003d24:	b4f0      	push	{r4, r5, r6, r7}

Error = (PLL_PID->Reference - Grid_Voltage_Components_Input.qV_Direct); // Grid_Voltage_Components_Input

//*****************************************************************************
// *********************** PLL Ki reducing ************************************
if(PLL_par_red_ki==TRUE && PLL_par_red_ki_n==1750)
 8003d26:	4d53      	ldr	r5, [pc, #332]	; (8003e74 <PLL_PID_Regulator+0x150>)
Error = (PLL_PID->Reference - Grid_Voltage_Components_Input.qV_Direct); // Grid_Voltage_Components_Input
 8003d28:	f9b0 2000 	ldrsh.w	r2, [r0]
if(PLL_par_red_ki==TRUE && PLL_par_red_ki_n==1750)
 8003d2c:	782b      	ldrb	r3, [r5, #0]
{
 8003d2e:	b082      	sub	sp, #8
Error = (PLL_PID->Reference - Grid_Voltage_Components_Input.qV_Direct); // Grid_Voltage_Components_Input
 8003d30:	eba2 4221 	sub.w	r2, r2, r1, asr #16
if(PLL_par_red_ki==TRUE && PLL_par_red_ki_n==1750)
 8003d34:	b13b      	cbz	r3, 8003d46 <PLL_PID_Regulator+0x22>
 8003d36:	4950      	ldr	r1, [pc, #320]	; (8003e78 <PLL_PID_Regulator+0x154>)
 8003d38:	880b      	ldrh	r3, [r1, #0]
 8003d3a:	f240 64d6 	movw	r4, #1750	; 0x6d6
 8003d3e:	42a3      	cmp	r3, r4
 8003d40:	d068      	beq.n	8003e14 <PLL_PID_Regulator+0xf0>
   }
    PLL_par_red_ki_n=0;
}
else if(PLL_par_red_ki==TRUE && PLL_par_red_ki_n!=1750)
{
  PLL_par_red_ki_n++;
 8003d42:	3301      	adds	r3, #1
 8003d44:	800b      	strh	r3, [r1, #0]
}

//*********************** PLL Kp reducing ************************************
if(PLL_par_red_kp==TRUE && PLL_par_red_kp_n==1750 && PLL_PID->Ki_Gain==1)
 8003d46:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  // Proportional term computation
  Proportional_Term = PLL_PID->Kp_Gain * Error;

  // Integral term computation
  Integral_Term = PLL_PID->Ki_Gain * Error;
 8003d4a:	fb02 f403 	mul.w	r4, r2, r3
if(PLL_par_red_kp==TRUE && PLL_par_red_kp_n==1750 && PLL_PID->Ki_Gain==1)
 8003d4e:	4e4b      	ldr	r6, [pc, #300]	; (8003e7c <PLL_PID_Regulator+0x158>)
 8003d50:	7831      	ldrb	r1, [r6, #0]
 8003d52:	2900      	cmp	r1, #0
 8003d54:	d032      	beq.n	8003dbc <PLL_PID_Regulator+0x98>
 8003d56:	4f4a      	ldr	r7, [pc, #296]	; (8003e80 <PLL_PID_Regulator+0x15c>)
 8003d58:	8839      	ldrh	r1, [r7, #0]
 8003d5a:	f240 6cd6 	movw	ip, #1750	; 0x6d6
 8003d5e:	4561      	cmp	r1, ip
 8003d60:	d063      	beq.n	8003e2a <PLL_PID_Regulator+0x106>
else if(PLL_par_red_kp==TRUE && PLL_par_red_kp_n!=1750 && PLL_PID->Ki_Gain==1)
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d070      	beq.n	8003e48 <PLL_PID_Regulator+0x124>
if(PLL_PID->Kp_Gain==300 && PLL_PID->Ki_Gain==1 && PLL_reducing!=TRUE)
 8003d66:	f9b0 1002 	ldrsh.w	r1, [r0, #2]


 if ( (Integral_Voltage >= 0) && (Integral_Term >= 0) && (PLL_PID->Max_PID_Output == FALSE) )  // freeze integral term in case of over/underflow
 8003d6a:	4d46      	ldr	r5, [pc, #280]	; (8003e84 <PLL_PID_Regulator+0x160>)
 8003d6c:	682b      	ldr	r3, [r5, #0]
 8003d6e:	2b00      	cmp	r3, #0
  Proportional_Term = PLL_PID->Kp_Gain * Error;
 8003d70:	fb02 f101 	mul.w	r1, r2, r1
 if ( (Integral_Voltage >= 0) && (Integral_Term >= 0) && (PLL_PID->Max_PID_Output == FALSE) )  // freeze integral term in case of over/underflow
 8003d74:	db44      	blt.n	8003e00 <PLL_PID_Regulator+0xdc>
 8003d76:	2c00      	cmp	r4, #0
 8003d78:	db02      	blt.n	8003d80 <PLL_PID_Regulator+0x5c>
 8003d7a:	7a82      	ldrb	r2, [r0, #10]
 8003d7c:	2a00      	cmp	r2, #0
 8003d7e:	d135      	bne.n	8003dec <PLL_PID_Regulator+0xc8>
    {
     Integral_Voltage += Integral_Term;
    }
  else if ( (Integral_Voltage >= 0) && (Integral_Term <= 0) )
    {
     Integral_Voltage += Integral_Term;
 8003d80:	4423      	add	r3, r4
 8003d82:	602b      	str	r3, [r5, #0]
    }


  output_s32 = (Proportional_Term/8192 + Integral_Voltage/32768);
 8003d84:	2900      	cmp	r1, #0
 8003d86:	bfbc      	itt	lt
 8003d88:	f501 51ff 	addlt.w	r1, r1, #8160	; 0x1fe0
 8003d8c:	311f      	addlt	r1, #31
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	bfbc      	itt	lt
 8003d92:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 8003d96:	337f      	addlt	r3, #127	; 0x7f


    if (output_s32 >= (s32)(PLL_PID->Upper_Limit_Output))
 8003d98:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
  output_s32 = (Proportional_Term/8192 + Integral_Voltage/32768);
 8003d9c:	1349      	asrs	r1, r1, #13
 8003d9e:	eb01 31e3 	add.w	r1, r1, r3, asr #15
    if (output_s32 >= (s32)(PLL_PID->Upper_Limit_Output))
 8003da2:	428a      	cmp	r2, r1
 8003da4:	dd26      	ble.n	8003df4 <PLL_PID_Regulator+0xd0>
      {
      PLL_PID->Max_PID_Output = TRUE;
      return(PLL_PID->Upper_Limit_Output);
      }
    else if (output_s32 < (s32)(PLL_PID->Lower_Limit_Output))
 8003da6:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8003daa:	428a      	cmp	r2, r1
 8003dac:	dc18      	bgt.n	8003de0 <PLL_PID_Regulator+0xbc>
      return(PLL_PID->Lower_Limit_Output);
      }
    else
      {
      PLL_PID->Min_PID_Output = FALSE;
      PLL_PID->Max_PID_Output = FALSE;
 8003dae:	2300      	movs	r3, #0


      return((s16)(output_s32));
 8003db0:	b20a      	sxth	r2, r1
      PLL_PID->Max_PID_Output = FALSE;
 8003db2:	8143      	strh	r3, [r0, #10]
      }

}
 8003db4:	4610      	mov	r0, r2
 8003db6:	b002      	add	sp, #8
 8003db8:	bcf0      	pop	{r4, r5, r6, r7}
 8003dba:	4770      	bx	lr
if(PLL_PID->Kp_Gain==300 && PLL_PID->Ki_Gain==1 && PLL_reducing!=TRUE)
 8003dbc:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8003dc0:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
 8003dc4:	d1d1      	bne.n	8003d6a <PLL_PID_Regulator+0x46>
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d1cf      	bne.n	8003d6a <PLL_PID_Regulator+0x46>
 8003dca:	4f2f      	ldr	r7, [pc, #188]	; (8003e88 <PLL_PID_Regulator+0x164>)
 8003dcc:	783b      	ldrb	r3, [r7, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d148      	bne.n	8003e64 <PLL_PID_Regulator+0x140>
    PLL_par_red_kp=FALSE;
 8003dd2:	7033      	strb	r3, [r6, #0]
    PLL_par_red_ki=FALSE;
 8003dd4:	702b      	strb	r3, [r5, #0]
    PLL_reducing=TRUE;
 8003dd6:	2301      	movs	r3, #1
    PLL_par_red_ki=FALSE;
 8003dd8:	f44f 7196 	mov.w	r1, #300	; 0x12c
    PLL_reducing=TRUE;
 8003ddc:	703b      	strb	r3, [r7, #0]
    PLL_par_red_ki=FALSE;
 8003dde:	e7c4      	b.n	8003d6a <PLL_PID_Regulator+0x46>
      PLL_PID->Min_PID_Output = TRUE;
 8003de0:	2301      	movs	r3, #1
 8003de2:	72c3      	strb	r3, [r0, #11]
}
 8003de4:	4610      	mov	r0, r2
 8003de6:	b002      	add	sp, #8
 8003de8:	bcf0      	pop	{r4, r5, r6, r7}
 8003dea:	4770      	bx	lr
  else if ( (Integral_Voltage <= 0) && (Integral_Term <= 0) && (PLL_PID->Min_PID_Output == FALSE) )
 8003dec:	b143      	cbz	r3, 8003e00 <PLL_PID_Regulator+0xdc>
  else if ( (Integral_Voltage >= 0) && (Integral_Term <= 0) )
 8003dee:	2c00      	cmp	r4, #0
 8003df0:	d1c8      	bne.n	8003d84 <PLL_PID_Regulator+0x60>
 8003df2:	e7c5      	b.n	8003d80 <PLL_PID_Regulator+0x5c>
      PLL_PID->Max_PID_Output = TRUE;
 8003df4:	2301      	movs	r3, #1
 8003df6:	7283      	strb	r3, [r0, #10]
}
 8003df8:	4610      	mov	r0, r2
 8003dfa:	b002      	add	sp, #8
 8003dfc:	bcf0      	pop	{r4, r5, r6, r7}
 8003dfe:	4770      	bx	lr
  else if ( (Integral_Voltage <= 0) && (Integral_Term <= 0) && (PLL_PID->Min_PID_Output == FALSE) )
 8003e00:	2c00      	cmp	r4, #0
 8003e02:	dcbd      	bgt.n	8003d80 <PLL_PID_Regulator+0x5c>
 8003e04:	7ac2      	ldrb	r2, [r0, #11]
 8003e06:	2a00      	cmp	r2, #0
 8003e08:	d0ba      	beq.n	8003d80 <PLL_PID_Regulator+0x5c>
  else if ( (Integral_Voltage <= 0) && (Integral_Term >= 0) )
 8003e0a:	2c00      	cmp	r4, #0
 8003e0c:	d0b8      	beq.n	8003d80 <PLL_PID_Regulator+0x5c>
  else if ( (Integral_Voltage >= 0) && (Integral_Term <= 0) )
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	dbb8      	blt.n	8003d84 <PLL_PID_Regulator+0x60>
 8003e12:	e7b5      	b.n	8003d80 <PLL_PID_Regulator+0x5c>
  if((s16)(PLL_PID->Ki_Gain - 2)<=1)
 8003e14:	8883      	ldrh	r3, [r0, #4]
 8003e16:	3b02      	subs	r3, #2
 8003e18:	b21b      	sxth	r3, r3
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	dd1c      	ble.n	8003e58 <PLL_PID_Regulator+0x134>
    PLL_PID->Ki_Gain = PLL_PID->Ki_Gain - 2;
 8003e1e:	8083      	strh	r3, [r0, #4]
  Integral_Term = PLL_PID->Ki_Gain * Error;
 8003e20:	fb02 f403 	mul.w	r4, r2, r3
    PLL_par_red_ki_n=0;
 8003e24:	2600      	movs	r6, #0
 8003e26:	800e      	strh	r6, [r1, #0]
 8003e28:	e791      	b.n	8003d4e <PLL_PID_Regulator+0x2a>
if(PLL_par_red_kp==TRUE && PLL_par_red_kp_n==1750 && PLL_PID->Ki_Gain==1)
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d19b      	bne.n	8003d66 <PLL_PID_Regulator+0x42>
  if((s16)(PLL_PID->Kp_Gain - 30)<=300)
 8003e2e:	8843      	ldrh	r3, [r0, #2]
 8003e30:	3b1e      	subs	r3, #30
 8003e32:	b21b      	sxth	r3, r3
 8003e34:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003e38:	dc17      	bgt.n	8003e6a <PLL_PID_Regulator+0x146>
     PLL_par_red_kp=FALSE;
 8003e3a:	2300      	movs	r3, #0
    PLL_par_red_kp_n=0;
 8003e3c:	803b      	strh	r3, [r7, #0]
     PLL_par_red_kp=FALSE;
 8003e3e:	7033      	strb	r3, [r6, #0]
     PLL_PID->Kp_Gain=300;
 8003e40:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003e44:	8043      	strh	r3, [r0, #2]
if(PLL_PID->Kp_Gain==300 && PLL_PID->Ki_Gain==1 && PLL_reducing!=TRUE)
 8003e46:	e7c0      	b.n	8003dca <PLL_PID_Regulator+0xa6>
  PLL_par_red_kp_n++;
 8003e48:	3101      	adds	r1, #1
 8003e4a:	8039      	strh	r1, [r7, #0]
if(PLL_PID->Kp_Gain==300 && PLL_PID->Ki_Gain==1 && PLL_reducing!=TRUE)
 8003e4c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8003e50:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
 8003e54:	d189      	bne.n	8003d6a <PLL_PID_Regulator+0x46>
 8003e56:	e7b8      	b.n	8003dca <PLL_PID_Regulator+0xa6>
     PLL_par_red_ki=FALSE;
 8003e58:	2400      	movs	r4, #0
     PLL_PID->Ki_Gain=1;
 8003e5a:	2301      	movs	r3, #1
     PLL_par_red_ki=FALSE;
 8003e5c:	702c      	strb	r4, [r5, #0]
     PLL_PID->Ki_Gain=1;
 8003e5e:	8083      	strh	r3, [r0, #4]
     PLL_par_red_ki=FALSE;
 8003e60:	4614      	mov	r4, r2
 8003e62:	e7df      	b.n	8003e24 <PLL_PID_Regulator+0x100>
 8003e64:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003e68:	e77f      	b.n	8003d6a <PLL_PID_Regulator+0x46>
    PLL_PID->Kp_Gain = PLL_PID->Kp_Gain - 30;
 8003e6a:	8043      	strh	r3, [r0, #2]
  Proportional_Term = PLL_PID->Kp_Gain * Error;
 8003e6c:	4619      	mov	r1, r3
    PLL_par_red_kp_n=0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	803b      	strh	r3, [r7, #0]
if(PLL_PID->Kp_Gain==300 && PLL_PID->Ki_Gain==1 && PLL_reducing!=TRUE)
 8003e72:	e77a      	b.n	8003d6a <PLL_PID_Regulator+0x46>
 8003e74:	20000196 	.word	0x20000196
 8003e78:	20010e84 	.word	0x20010e84
 8003e7c:	20000197 	.word	0x20000197
 8003e80:	20010e86 	.word	0x20010e86
 8003e84:	20010e80 	.word	0x20010e80
 8003e88:	20000198 	.word	0x20000198

08003e8c <mul_q15_q15_q31>:

 void mul_q15_q15_q31(s16 Op1, s16 Op2, s32 *Out)
{
  s32 temp;

  temp = (s32)Op1*(s32)Op2;
 8003e8c:	fb00 f101 	mul.w	r1, r0, r1

  if (temp>=0x40000000)   /* Overflow (-1*-1) */
 8003e90:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  {
    temp=0x7fffffff;
  }
  else
  {
    temp=temp<<1;       /* One bit left shift to remove redondant sign bit */
 8003e94:	bf14      	ite	ne
 8003e96:	0049      	lslne	r1, r1, #1
    temp=0x7fffffff;
 8003e98:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000



  }
  *Out=temp;
 8003e9c:	6011      	str	r1, [r2, #0]

}
 8003e9e:	4770      	bx	lr

08003ea0 <SystemClock_Config>:
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8003ea0:	4a38      	ldr	r2, [pc, #224]	; (8003f84 <SystemClock_Config+0xe4>)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ea2:	b508      	push	{r3, lr}
 8003ea4:	6813      	ldr	r3, [r2, #0]
 8003ea6:	f023 030f 	bic.w	r3, r3, #15
 8003eaa:	f043 0304 	orr.w	r3, r3, #4
 8003eae:	6013      	str	r3, [r2, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8003eb0:	6813      	ldr	r3, [r2, #0]
 8003eb2:	f003 030f 	and.w	r3, r3, #15
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4)
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d1fa      	bne.n	8003eb0 <SystemClock_Config+0x10>
  * @rmtoll CR5          R1MODE        LL_PWR_EnableRange1BoostMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableRange1BoostMode(void)
{
  CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003eba:	4933      	ldr	r1, [pc, #204]	; (8003f88 <SystemClock_Config+0xe8>)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003ebc:	4b33      	ldr	r3, [pc, #204]	; (8003f8c <SystemClock_Config+0xec>)
 8003ebe:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 8003ec2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ec6:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003ed0:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	0392      	lsls	r2, r2, #14
 8003ed6:	d5fc      	bpl.n	8003ed2 <SystemClock_Config+0x32>
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8003ed8:	68d8      	ldr	r0, [r3, #12]
 8003eda:	4a2d      	ldr	r2, [pc, #180]	; (8003f90 <SystemClock_Config+0xf0>)
  *         @arg @ref LL_RCC_PLLP_DIV_31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_ADC(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLPDIV,
 8003edc:	492d      	ldr	r1, [pc, #180]	; (8003f94 <SystemClock_Config+0xf4>)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8003ede:	4002      	ands	r2, r0
 8003ee0:	f442 42aa 	orr.w	r2, r2, #21760	; 0x5500
 8003ee4:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8003ee8:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLPDIV,
 8003eea:	68d8      	ldr	r0, [r3, #12]
 8003eec:	4a2a      	ldr	r2, [pc, #168]	; (8003f98 <SystemClock_Config+0xf8>)
 8003eee:	4001      	ands	r1, r0
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	60da      	str	r2, [r3, #12]
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8003ef4:	68da      	ldr	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003ef6:	4925      	ldr	r1, [pc, #148]	; (8003f8c <SystemClock_Config+0xec>)
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8003ef8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003efc:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN);
 8003efe:	68da      	ldr	r2, [r3, #12]
 8003f00:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003f04:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003f0c:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003f0e:	680b      	ldr	r3, [r1, #0]
 8003f10:	019b      	lsls	r3, r3, #6
 8003f12:	d5fc      	bpl.n	8003f0e <SystemClock_Config+0x6e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003f14:	688b      	ldr	r3, [r1, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003f16:	4a1d      	ldr	r2, [pc, #116]	; (8003f8c <SystemClock_Config+0xec>)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003f18:	f043 0303 	orr.w	r3, r3, #3
 8003f1c:	608b      	str	r3, [r1, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003f1e:	688b      	ldr	r3, [r1, #8]
 8003f20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f28:	608b      	str	r3, [r1, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003f2a:	6893      	ldr	r3, [r2, #8]
 8003f2c:	f003 030c 	and.w	r3, r3, #12
  }

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003f30:	2b0c      	cmp	r3, #12
 8003f32:	d1fa      	bne.n	8003f2a <SystemClock_Config+0x8a>
  {
  }

  /* Insure 1�s transition state at intermediate medium speed clock based on DWT */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003f34:	4919      	ldr	r1, [pc, #100]	; (8003f9c <SystemClock_Config+0xfc>)
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003f36:	4a1a      	ldr	r2, [pc, #104]	; (8003fa0 <SystemClock_Config+0x100>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003f38:	f8d1 30fc 	ldr.w	r3, [r1, #252]	; 0xfc
 8003f3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f40:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003f44:	6813      	ldr	r3, [r2, #0]
  DWT->CYCCNT = 0;
 8003f46:	2000      	movs	r0, #0
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003f48:	f043 0301 	orr.w	r3, r3, #1
 8003f4c:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;
 8003f4e:	6050      	str	r0, [r2, #4]
  while(DWT->CYCCNT < 100);
 8003f50:	6853      	ldr	r3, [r2, #4]
 8003f52:	2b63      	cmp	r3, #99	; 0x63
 8003f54:	d9fc      	bls.n	8003f50 <SystemClock_Config+0xb0>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003f56:	4b0d      	ldr	r3, [pc, #52]	; (8003f8c <SystemClock_Config+0xec>)
  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_SetSystemCoreClock(170000000);
 8003f58:	4812      	ldr	r0, [pc, #72]	; (8003fa4 <SystemClock_Config+0x104>)
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003f60:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f68:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 8003f70:	609a      	str	r2, [r3, #8]
 8003f72:	f005 ffc5 	bl	8009f00 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8003f76:	200f      	movs	r0, #15
 8003f78:	f001 fd4c 	bl	8005a14 <HAL_InitTick>
 8003f7c:	b108      	cbz	r0, 8003f82 <SystemClock_Config+0xe2>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f7e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f80:	e7fe      	b.n	8003f80 <SystemClock_Config+0xe0>
}
 8003f82:	bd08      	pop	{r3, pc}
 8003f84:	40022000 	.word	0x40022000
 8003f88:	40007000 	.word	0x40007000
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	f9ff800c 	.word	0xf9ff800c
 8003f94:	07ff800c 	.word	0x07ff800c
 8003f98:	30005553 	.word	0x30005553
 8003f9c:	e000ed00 	.word	0xe000ed00
 8003fa0:	e0001000 	.word	0xe0001000
 8003fa4:	0a21fe80 	.word	0x0a21fe80

08003fa8 <main>:
{
 8003fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fac:	2400      	movs	r4, #0
{
 8003fae:	b0cb      	sub	sp, #300	; 0x12c
  HAL_Init();
 8003fb0:	f001 fd56 	bl	8005a60 <HAL_Init>
  SystemClock_Config();
 8003fb4:	f7ff ff74 	bl	8003ea0 <SystemClock_Config>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fb8:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 8003fbc:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003fc0:	4dbd      	ldr	r5, [pc, #756]	; (80042b8 <main+0x310>)
 8003fc2:	943f      	str	r4, [sp, #252]	; 0xfc
 8003fc4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003fc6:	f8df 8308 	ldr.w	r8, [pc, #776]	; 80042d0 <main+0x328>
 8003fca:	4ebc      	ldr	r6, [pc, #752]	; (80042bc <main+0x314>)
 8003fcc:	f8df 9304 	ldr.w	r9, [pc, #772]	; 80042d4 <main+0x32c>
  LL_GPIO_Init(IN_TOP_LF_MOS_GPIO_GPIO_Port, &GPIO_InitStruct);
 8003fd0:	48bb      	ldr	r0, [pc, #748]	; (80042c0 <main+0x318>)
 8003fd2:	f043 0310 	orr.w	r3, r3, #16
 8003fd6:	64eb      	str	r3, [r5, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003fd8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	9324      	str	r3, [sp, #144]	; 0x90
  (void)tmpreg;
 8003fe0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003fe2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003fe4:	f043 0304 	orr.w	r3, r3, #4
 8003fe8:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003fea:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	9325      	str	r3, [sp, #148]	; 0x94
  (void)tmpreg;
 8003ff2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003ff4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003ff6:	f04f 0b20 	mov.w	fp, #32
 8003ffa:	ea43 030b 	orr.w	r3, r3, fp
 8003ffe:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004000:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8004002:	ea03 030b 	and.w	r3, r3, fp
 8004006:	9326      	str	r3, [sp, #152]	; 0x98
  (void)tmpreg;
 8004008:	9b26      	ldr	r3, [sp, #152]	; 0x98
  SET_BIT(RCC->AHB2ENR, Periphs);
 800400a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800400c:	f043 0301 	orr.w	r3, r3, #1
 8004010:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004012:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	9327      	str	r3, [sp, #156]	; 0x9c
  (void)tmpreg;
 800401a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  SET_BIT(RCC->AHB2ENR, Periphs);
 800401c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800401e:	f043 0302 	orr.w	r3, r3, #2
 8004022:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004024:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	9328      	str	r3, [sp, #160]	; 0xa0
  (void)tmpreg;
 800402c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  SET_BIT(RCC->AHB2ENR, Periphs);
 800402e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8004030:	f043 0308 	orr.w	r3, r3, #8
 8004034:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004036:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8004038:	f003 0308 	and.w	r3, r3, #8
 800403c:	9329      	str	r3, [sp, #164]	; 0xa4
  (void)tmpreg;
 800403e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004040:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8004042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004046:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004048:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800404a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404e:	932a      	str	r3, [sp, #168]	; 0xa8
  (void)tmpreg;
 8004050:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004052:	f8c8 b028 	str.w	fp, [r8, #40]	; 0x28
 8004056:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800405a:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 800405e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004062:	2204      	movs	r2, #4
 8004064:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 8004068:	f04f 0a08 	mov.w	sl, #8
 800406c:	2310      	movs	r3, #16
 800406e:	62b2      	str	r2, [r6, #40]	; 0x28
 8004070:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
 8004074:	62b3      	str	r3, [r6, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800407a:	61b3      	str	r3, [r6, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 800407c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004080:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
 8004084:	a93e      	add	r1, sp, #248	; 0xf8
  GPIO_InitStruct.Pin = IN_TOP_LF_MOS_GPIO_Pin;
 8004086:	f8cd a0f8 	str.w	sl, [sp, #248]	; 0xf8
  LL_GPIO_Init(IN_TOP_LF_MOS_GPIO_GPIO_Port, &GPIO_InitStruct);
 800408a:	f005 fbc3 	bl	8009814 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = PGOOD_5V_Pin;
 800408e:	2310      	movs	r3, #16
  LL_GPIO_Init(PGOOD_5V_GPIO_Port, &GPIO_InitStruct);
 8004090:	a93e      	add	r1, sp, #248	; 0xf8
 8004092:	488b      	ldr	r0, [pc, #556]	; (80042c0 <main+0x318>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004094:	9442      	str	r4, [sp, #264]	; 0x108
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004096:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004098:	e9cd 343e 	strd	r3, r4, [sp, #248]	; 0xf8
  LL_GPIO_Init(PGOOD_5V_GPIO_Port, &GPIO_InitStruct);
 800409c:	f005 fbba 	bl	8009814 <LL_GPIO_Init>
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80040a0:	a93e      	add	r1, sp, #248	; 0xf8
 80040a2:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80040a4:	f8cd b0f8 	str.w	fp, [sp, #248]	; 0xf8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80040a8:	973f      	str	r7, [sp, #252]	; 0xfc
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80040aa:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80040ae:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80040b0:	f005 fbb0 	bl	8009814 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = STATUS2_LED_Pin;
 80040b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  LL_GPIO_Init(STATUS2_LED_GPIO_Port, &GPIO_InitStruct);
 80040b8:	a93e      	add	r1, sp, #248	; 0xf8
 80040ba:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80040bc:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80040c0:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80040c4:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(STATUS2_LED_GPIO_Port, &GPIO_InitStruct);
 80040c6:	f005 fba5 	bl	8009814 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = STATUS1_LED_Pin;
 80040ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  LL_GPIO_Init(STATUS1_LED_GPIO_Port, &GPIO_InitStruct);
 80040ce:	4640      	mov	r0, r8
 80040d0:	a93e      	add	r1, sp, #248	; 0xf8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80040d2:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80040d6:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80040da:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(STATUS1_LED_GPIO_Port, &GPIO_InitStruct);
 80040dc:	f005 fb9a 	bl	8009814 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = ESP_EN_Pin;
 80040e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  LL_GPIO_Init(ESP_EN_GPIO_Port, &GPIO_InitStruct);
 80040e4:	a93e      	add	r1, sp, #248	; 0xf8
 80040e6:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80040e8:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80040ec:	e9cd 4740 	strd	r4, r7, [sp, #256]	; 0x100
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80040f0:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(ESP_EN_GPIO_Port, &GPIO_InitStruct);
 80040f2:	f005 fb8f 	bl	8009814 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = HVDC_FUSE_MON_Pin;
 80040f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  LL_GPIO_Init(HVDC_FUSE_MON_GPIO_Port, &GPIO_InitStruct);
 80040fa:	a93e      	add	r1, sp, #248	; 0xf8
 80040fc:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80040fe:	e9cd 343e 	strd	r3, r4, [sp, #248]	; 0xf8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004102:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(HVDC_FUSE_MON_GPIO_Port, &GPIO_InitStruct);
 8004104:	f005 fb86 	bl	8009814 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = AC_FUSE_MON_Pin;
 8004108:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  LL_GPIO_Init(AC_FUSE_MON_GPIO_Port, &GPIO_InitStruct);
 800410c:	a93e      	add	r1, sp, #248	; 0xf8
 800410e:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = IN_BOTT_LF_MOS_GPIO_Pin;
 8004110:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Pin = AC_FUSE_MON_Pin;
 8004114:	933e      	str	r3, [sp, #248]	; 0xf8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004116:	943f      	str	r4, [sp, #252]	; 0xfc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004118:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(AC_FUSE_MON_GPIO_Port, &GPIO_InitStruct);
 800411a:	f005 fb7b 	bl	8009814 <LL_GPIO_Init>
  LL_GPIO_Init(IN_BOTT_LF_MOS_GPIO_GPIO_Port, &GPIO_InitStruct);
 800411e:	a93e      	add	r1, sp, #248	; 0xf8
 8004120:	4868      	ldr	r0, [pc, #416]	; (80042c4 <main+0x31c>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004122:	943f      	str	r4, [sp, #252]	; 0xfc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004124:	9442      	str	r4, [sp, #264]	; 0x108
  GPIO_InitStruct.Pin = IN_BOTT_LF_MOS_GPIO_Pin;
 8004126:	f8cd 80f8 	str.w	r8, [sp, #248]	; 0xf8
  LL_GPIO_Init(IN_BOTT_LF_MOS_GPIO_GPIO_Port, &GPIO_InitStruct);
 800412a:	f005 fb73 	bl	8009814 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800412e:	f44f 7380 	mov.w	r3, #256	; 0x100
  LL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8004132:	a93e      	add	r1, sp, #248	; 0xf8
 8004134:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004136:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800413a:	9742      	str	r7, [sp, #264]	; 0x108
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800413c:	e9cd 8440 	strd	r8, r4, [sp, #256]	; 0x100
  LL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8004140:	f005 fb68 	bl	8009814 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = EN_isoDCDC_Pin;
 8004144:	2204      	movs	r2, #4
  LL_GPIO_Init(EN_isoDCDC_GPIO_Port, &GPIO_InitStruct);
 8004146:	a93e      	add	r1, sp, #248	; 0xf8
 8004148:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800414a:	e9cd 273e 	strd	r2, r7, [sp, #248]	; 0xf8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800414e:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004152:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(EN_isoDCDC_GPIO_Port, &GPIO_InitStruct);
 8004154:	f005 fb5e 	bl	8009814 <LL_GPIO_Init>
  LL_GPIO_Init(RELAY_GRID_LVL2_GPIO_Port, &GPIO_InitStruct);
 8004158:	a93e      	add	r1, sp, #248	; 0xf8
 800415a:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800415c:	e9cd a73e 	strd	sl, r7, [sp, #248]	; 0xf8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004160:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004164:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(RELAY_GRID_LVL2_GPIO_Port, &GPIO_InitStruct);
 8004166:	f005 fb55 	bl	8009814 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = RELAY_GRID_Pin;
 800416a:	2310      	movs	r3, #16
  LL_GPIO_Init(RELAY_GRID_GPIO_Port, &GPIO_InitStruct);
 800416c:	a93e      	add	r1, sp, #248	; 0xf8
 800416e:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004170:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004174:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004178:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(RELAY_GRID_GPIO_Port, &GPIO_InitStruct);
 800417a:	f005 fb4b 	bl	8009814 <LL_GPIO_Init>
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800417e:	a93e      	add	r1, sp, #248	; 0xf8
 8004180:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004182:	e9cd b43e 	strd	fp, r4, [sp, #248]	; 0xf8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004186:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004188:	f005 fb44 	bl	8009814 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800418c:	2340      	movs	r3, #64	; 0x40
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800418e:	a93e      	add	r1, sp, #248	; 0xf8
 8004190:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8004192:	933e      	str	r3, [sp, #248]	; 0xf8
  GPIO_InitStruct.Pin = PGOOD_12V_Pin;
 8004194:	f04f 0b80 	mov.w	fp, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004198:	943f      	str	r4, [sp, #252]	; 0xfc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800419a:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800419c:	f005 fb3a 	bl	8009814 <LL_GPIO_Init>
  LL_GPIO_Init(PGOOD_12V_GPIO_Port, &GPIO_InitStruct);
 80041a0:	4630      	mov	r0, r6
 80041a2:	a93e      	add	r1, sp, #248	; 0xf8
  GPIO_InitStruct.Pin = PGOOD_12V_Pin;
 80041a4:	f8cd b0f8 	str.w	fp, [sp, #248]	; 0xf8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80041a8:	943f      	str	r4, [sp, #252]	; 0xfc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80041aa:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(PGOOD_12V_GPIO_Port, &GPIO_InitStruct);
 80041ac:	f005 fb32 	bl	8009814 <LL_GPIO_Init>
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041b0:	a93e      	add	r1, sp, #248	; 0xf8
 80041b2:	4843      	ldr	r0, [pc, #268]	; (80042c0 <main+0x318>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80041b4:	9442      	str	r4, [sp, #264]	; 0x108
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80041b6:	e9cd 743e 	strd	r7, r4, [sp, #248]	; 0xf8
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041ba:	f005 fb2b 	bl	8009814 <LL_GPIO_Init>
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041be:	a93e      	add	r1, sp, #248	; 0xf8
 80041c0:	483f      	ldr	r0, [pc, #252]	; (80042c0 <main+0x318>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80041c2:	9442      	str	r4, [sp, #264]	; 0x108
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80041c4:	e9cd 843e 	strd	r8, r4, [sp, #248]	; 0xf8
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041c8:	f005 fb24 	bl	8009814 <LL_GPIO_Init>
  SET_BIT(RCC->AHB1ENR, Periphs);
 80041cc:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80041ce:	f043 0304 	orr.w	r3, r3, #4
 80041d2:	64ab      	str	r3, [r5, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80041d4:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	9322      	str	r3, [sp, #136]	; 0x88
  (void)tmpreg;
 80041dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
  SET_BIT(RCC->AHB1ENR, Periphs);
 80041de:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80041e0:	433b      	orrs	r3, r7
 80041e2:	64ab      	str	r3, [r5, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80041e4:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80041e6:	403b      	ands	r3, r7
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 1, 0);
 80041e8:	4622      	mov	r2, r4
 80041ea:	4639      	mov	r1, r7
 80041ec:	9323      	str	r3, [sp, #140]	; 0x8c
 80041ee:	200c      	movs	r0, #12
  (void)tmpreg;
 80041f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 80041f2:	4f35      	ldr	r7, [pc, #212]	; (80042c8 <main+0x320>)
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 1, 0);
 80041f4:	f001 fc68 	bl	8005ac8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80041f8:	200c      	movs	r0, #12
 80041fa:	f001 fca3 	bl	8005b44 <HAL_NVIC_EnableIRQ>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80041fe:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8004202:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
 8004206:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
 800420a:	e9cd 443a 	strd	r4, r4, [sp, #232]	; 0xe8
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800420e:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 8004212:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8004216:	9432      	str	r4, [sp, #200]	; 0xc8
  MODIFY_REG(RCC->CCIPR, 3U << ((ADCxSource & 0x001F0000U) >> 16U), ((ADCxSource & 0x000000FFU) << ((ADCxSource & 0x001F0000U) >> 16U)));
 8004218:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800421c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004224:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004228:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800422a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800422e:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004230:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8004232:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004236:	9320      	str	r3, [sp, #128]	; 0x80
  (void)tmpreg;
 8004238:	9b20      	ldr	r3, [sp, #128]	; 0x80
  SET_BIT(RCC->AHB2ENR, Periphs);
 800423a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800423c:	f043 0304 	orr.w	r3, r3, #4
 8004240:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004242:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  GPIO_InitStruct.Pin = NTC_MOS_ADC2_IN7_COMP3_Pin;
 8004244:	f8cd 80f8 	str.w	r8, [sp, #248]	; 0xf8
 8004248:	f003 0304 	and.w	r3, r3, #4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800424c:	2603      	movs	r6, #3
 800424e:	9321      	str	r3, [sp, #132]	; 0x84
  LL_GPIO_Init(NTC_MOS_ADC2_IN7_COMP3_GPIO_Port, &GPIO_InitStruct);
 8004250:	a93e      	add	r1, sp, #248	; 0xf8
 8004252:	4648      	mov	r0, r9
  (void)tmpreg;
 8004254:	9b21      	ldr	r3, [sp, #132]	; 0x84
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004256:	963f      	str	r6, [sp, #252]	; 0xfc
  LL_GPIO_Init(NTC_MOS_ADC2_IN7_COMP3_GPIO_Port, &GPIO_InitStruct);
 8004258:	f005 fadc 	bl	8009814 <LL_GPIO_Init>
  LL_GPIO_Init(NTC_SHUNT_ADC2_IN9_GPIO_Port, &GPIO_InitStruct);
 800425c:	a93e      	add	r1, sp, #248	; 0xf8
 800425e:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004260:	e9cd a63e 	strd	sl, r6, [sp, #248]	; 0xf8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004264:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(NTC_SHUNT_ADC2_IN9_GPIO_Port, &GPIO_InitStruct);
 8004266:	f005 fad5 	bl	8009814 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = I_LLC_ADC2_IN5_Pin;
 800426a:	2310      	movs	r3, #16
  LL_GPIO_Init(I_LLC_ADC2_IN5_GPIO_Port, &GPIO_InitStruct);
 800426c:	4648      	mov	r0, r9
 800426e:	a93e      	add	r1, sp, #248	; 0xf8
  GPIO_InitStruct.Pin = I_LLC_ADC2_IN5_Pin;
 8004270:	933e      	str	r3, [sp, #248]	; 0xf8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004272:	963f      	str	r6, [sp, #252]	; 0xfc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004274:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(I_LLC_ADC2_IN5_GPIO_Port, &GPIO_InitStruct);
 8004276:	f005 facd 	bl	8009814 <LL_GPIO_Init>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 800427a:	4b14      	ldr	r3, [pc, #80]	; (80042cc <main+0x324>)
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800427c:	f8df a058 	ldr.w	sl, [pc, #88]	; 80042d8 <main+0x330>
 8004280:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 8004284:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004288:	f042 0224 	orr.w	r2, r2, #36	; 0x24
 800428c:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8004290:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004292:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004296:	f022 0210 	bic.w	r2, r2, #16
 800429a:	659a      	str	r2, [r3, #88]	; 0x58
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 800429c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800429e:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80042a2:	659a      	str	r2, [r3, #88]	; 0x58
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 80042a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80042a6:	f042 0220 	orr.w	r2, r2, #32
 80042aa:	659a      	str	r2, [r3, #88]	; 0x58
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 80042ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80042ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042b2:	659a      	str	r2, [r3, #88]	; 0x58
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 80042b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80042b6:	e011      	b.n	80042dc <main+0x334>
 80042b8:	40021000 	.word	0x40021000
 80042bc:	48000c00 	.word	0x48000c00
 80042c0:	48001000 	.word	0x48001000
 80042c4:	48001800 	.word	0x48001800
 80042c8:	50000100 	.word	0x50000100
 80042cc:	40020000 	.word	0x40020000
 80042d0:	48001400 	.word	0x48001400
 80042d4:	48000800 	.word	0x48000800
 80042d8:	5fffffc0 	.word	0x5fffffc0
 80042dc:	ea42 020b 	orr.w	r2, r2, fp
 80042e0:	659a      	str	r2, [r3, #88]	; 0x58
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 80042e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80042e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80042e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042ec:	659a      	str	r2, [r3, #88]	; 0x58
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 80042ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80042f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80042f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 80042f8:	4638      	mov	r0, r7
 80042fa:	659a      	str	r2, [r3, #88]	; 0x58
 80042fc:	a930      	add	r1, sp, #192	; 0xc0
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80042fe:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8004302:	9432      	str	r4, [sp, #200]	; 0xc8
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8004304:	f005 f9c8 	bl	8009698 <LL_ADC_Init>
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8004308:	4638      	mov	r0, r7
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_HRTIM_TRG3;
 800430a:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 800430e:	a936      	add	r1, sp, #216	; 0xd8
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_HRTIM_TRG3;
 8004310:	9236      	str	r2, [sp, #216]	; 0xd8
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8004312:	e9cd 4437 	strd	r4, r4, [sp, #220]	; 0xdc
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8004316:	e9cd 4639 	strd	r4, r6, [sp, #228]	; 0xe4
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 800431a:	943b      	str	r4, [sp, #236]	; 0xec
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 800431c:	f005 f9d6 	bl	80096cc <LL_ADC_REG_Init>
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8004320:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
  LL_GPIO_Init(VMON_V12_GPIO_Port, &GPIO_InitStruct);
 8004324:	48ca      	ldr	r0, [pc, #808]	; (8004650 <main+0x6a8>)
 8004326:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800432a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800432e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004338:	613b      	str	r3, [r7, #16]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004340:	f023 0303 	bic.w	r3, r3, #3
 8004344:	613b      	str	r3, [r7, #16]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800434c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004350:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	ea03 030a 	and.w	r3, r3, sl
 8004358:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(ADCx->CR,
 800435a:	68b9      	ldr	r1, [r7, #8]
 800435c:	4bbd      	ldr	r3, [pc, #756]	; (8004654 <main+0x6ac>)
 800435e:	4019      	ands	r1, r3
  MODIFY_REG(*preg,
 8004360:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
  MODIFY_REG(ADCx->CR,
 8004364:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004368:	60b9      	str	r1, [r7, #8]
  MODIFY_REG(*preg,
 800436a:	f8d9 1130 	ldr.w	r1, [r9, #304]	; 0x130
 800436e:	f421 61f8 	bic.w	r1, r1, #1984	; 0x7c0
 8004372:	f441 71a0 	orr.w	r1, r1, #320	; 0x140
 8004376:	f8c9 1130 	str.w	r1, [r9, #304]	; 0x130
  MODIFY_REG(*preg,
 800437a:	f8d9 1114 	ldr.w	r1, [r9, #276]	; 0x114
 800437e:	f421 3160 	bic.w	r1, r1, #229376	; 0x38000
 8004382:	f8c9 1114 	str.w	r1, [r9, #276]	; 0x114
    CLEAR_BIT(ADCx->DIFSEL,
 8004386:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800438a:	f021 0120 	bic.w	r1, r1, #32
 800438e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8004392:	e9cd 442b 	strd	r4, r4, [sp, #172]	; 0xac
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8004396:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
 800439a:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
 800439e:	e9cd 443a 	strd	r4, r4, [sp, #232]	; 0xe8
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80043a2:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
 80043a6:	e9cd 4432 	strd	r4, r4, [sp, #200]	; 0xc8
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80043aa:	942d      	str	r4, [sp, #180]	; 0xb4
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043ac:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 80043b0:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
 80043b4:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 80043b8:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 80043bc:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80043c0:	f8c5 1088 	str.w	r1, [r5, #136]	; 0x88
  SET_BIT(RCC->AHB2ENR, Periphs);
 80043c4:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80043c6:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80043ca:	64e9      	str	r1, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80043cc:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80043ce:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80043d2:	911e      	str	r1, [sp, #120]	; 0x78
  (void)tmpreg;
 80043d4:	991e      	ldr	r1, [sp, #120]	; 0x78
  SET_BIT(RCC->AHB2ENR, Periphs);
 80043d6:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80043d8:	f041 0110 	orr.w	r1, r1, #16
 80043dc:	64e9      	str	r1, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80043de:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
  GPIO_InitStruct.Pin = VMON_V12_Pin;
 80043e0:	f8cd b0f8 	str.w	fp, [sp, #248]	; 0xf8
 80043e4:	f001 0110 	and.w	r1, r1, #16
 80043e8:	911f      	str	r1, [sp, #124]	; 0x7c
  (void)tmpreg;
 80043ea:	991f      	ldr	r1, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80043ec:	963f      	str	r6, [sp, #252]	; 0xfc
  LL_GPIO_Init(VMON_V12_GPIO_Port, &GPIO_InitStruct);
 80043ee:	a93e      	add	r1, sp, #248	; 0xf8
 80043f0:	f005 fa10 	bl	8009814 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = NTC5_Pin;
 80043f4:	f44f 7380 	mov.w	r3, #256	; 0x100
  LL_GPIO_Init(NTC5_GPIO_Port, &GPIO_InitStruct);
 80043f8:	a93e      	add	r1, sp, #248	; 0xf8
 80043fa:	4895      	ldr	r0, [pc, #596]	; (8004650 <main+0x6a8>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80043fc:	9442      	str	r4, [sp, #264]	; 0x108
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80043fe:	e9cd 363e 	strd	r3, r6, [sp, #248]	; 0xf8
  LL_GPIO_Init(NTC5_GPIO_Port, &GPIO_InitStruct);
 8004402:	f005 fa07 	bl	8009814 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = NTC4_Pin;
 8004406:	f44f 6380 	mov.w	r3, #1024	; 0x400
  LL_GPIO_Init(NTC4_GPIO_Port, &GPIO_InitStruct);
 800440a:	a93e      	add	r1, sp, #248	; 0xf8
 800440c:	4890      	ldr	r0, [pc, #576]	; (8004650 <main+0x6a8>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800440e:	9442      	str	r4, [sp, #264]	; 0x108
  LL_ADC_Init(ADC3, &ADC_InitStruct);
 8004410:	f507 7740 	add.w	r7, r7, #768	; 0x300
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004414:	e9cd 363e 	strd	r3, r6, [sp, #248]	; 0xf8
  LL_GPIO_Init(NTC4_GPIO_Port, &GPIO_InitStruct);
 8004418:	f005 f9fc 	bl	8009814 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = NTC3_Pin;
 800441c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  LL_GPIO_Init(NTC3_GPIO_Port, &GPIO_InitStruct);
 8004420:	a93e      	add	r1, sp, #248	; 0xf8
 8004422:	488b      	ldr	r0, [pc, #556]	; (8004650 <main+0x6a8>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004424:	9442      	str	r4, [sp, #264]	; 0x108
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004426:	e9cd 363e 	strd	r3, r6, [sp, #248]	; 0xf8
  LL_GPIO_Init(NTC3_GPIO_Port, &GPIO_InitStruct);
 800442a:	f005 f9f3 	bl	8009814 <LL_GPIO_Init>
  LL_ADC_Init(ADC3, &ADC_InitStruct);
 800442e:	4638      	mov	r0, r7
 8004430:	a92b      	add	r1, sp, #172	; 0xac
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8004432:	e9cd 442b 	strd	r4, r4, [sp, #172]	; 0xac
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8004436:	942d      	str	r4, [sp, #180]	; 0xb4
  LL_ADC_Init(ADC3, &ADC_InitStruct);
 8004438:	f005 f92e 	bl	8009698 <LL_ADC_Init>
  LL_ADC_REG_Init(ADC3, &ADC_REG_InitStruct);
 800443c:	4638      	mov	r0, r7
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_HRTIM_TRG3;
 800443e:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
  LL_ADC_REG_Init(ADC3, &ADC_REG_InitStruct);
 8004442:	a936      	add	r1, sp, #216	; 0xd8
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8004444:	e9cd 2436 	strd	r2, r4, [sp, #216]	; 0xd8
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8004448:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 800444c:	e9cd 443a 	strd	r4, r4, [sp, #232]	; 0xe8
  LL_ADC_REG_Init(ADC3, &ADC_REG_InitStruct);
 8004450:	f005 f93c 	bl	80096cc <LL_ADC_REG_Init>
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8004454:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC3), &ADC_CommonInitStruct);
 8004458:	487f      	ldr	r0, [pc, #508]	; (8004658 <main+0x6b0>)
 800445a:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 800445e:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004462:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 8004466:	6939      	ldr	r1, [r7, #16]
 8004468:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800446c:	6139      	str	r1, [r7, #16]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 800446e:	6939      	ldr	r1, [r7, #16]
 8004470:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004474:	f021 0103 	bic.w	r1, r1, #3
 8004478:	6139      	str	r1, [r7, #16]
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 800447a:	f44f 3b40 	mov.w	fp, #196608	; 0x30000
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC3), &ADC_CommonInitStruct);
 800447e:	a930      	add	r1, sp, #192	; 0xc0
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8004480:	9431      	str	r4, [sp, #196]	; 0xc4
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8004482:	f8cd b0c0 	str.w	fp, [sp, #192]	; 0xc0
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC3), &ADC_CommonInitStruct);
 8004486:	f005 f8c5 	bl	8009614 <LL_ADC_CommonInit>
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
 800448a:	68f9      	ldr	r1, [r7, #12]
  MODIFY_REG(ADCx->CR,
 800448c:	4b71      	ldr	r3, [pc, #452]	; (8004654 <main+0x6ac>)
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
 800448e:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8004492:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8004496:	60f9      	str	r1, [r7, #12]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004498:	68b9      	ldr	r1, [r7, #8]
 800449a:	ea01 010a 	and.w	r1, r1, sl
 800449e:	60b9      	str	r1, [r7, #8]
  MODIFY_REG(ADCx->CR,
 80044a0:	68b9      	ldr	r1, [r7, #8]
 80044a2:	4019      	ands	r1, r3
 80044a4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80044a8:	60b9      	str	r1, [r7, #8]
  MODIFY_REG(*preg,
 80044aa:	f8d9 1430 	ldr.w	r1, [r9, #1072]	; 0x430
 80044ae:	f421 61f8 	bic.w	r1, r1, #1984	; 0x7c0
 80044b2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80044b6:	f8c9 1430 	str.w	r1, [r9, #1072]	; 0x430
  MODIFY_REG(*preg,
 80044ba:	f8d9 1414 	ldr.w	r1, [r9, #1044]	; 0x414
 80044be:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80044c2:	f8c9 1414 	str.w	r1, [r9, #1044]	; 0x414
    CLEAR_BIT(ADCx->DIFSEL,
 80044c6:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80044ca:	f021 0110 	bic.w	r1, r1, #16
 80044ce:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80044d2:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80044d6:	e9cd 443e 	strd	r4, r4, [sp, #248]	; 0xf8
 80044da:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 80044de:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80044e2:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
 80044e6:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80044ea:	9432      	str	r4, [sp, #200]	; 0xc8
 80044ec:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 80044f0:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 80044f4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80044f8:	f8c5 1088 	str.w	r1, [r5, #136]	; 0x88
  SET_BIT(RCC->AHB2ENR, Periphs);
 80044fc:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80044fe:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004502:	64e9      	str	r1, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004504:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8004506:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
  LL_ADC_Init(ADC5, &ADC_InitStruct);
 800450a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800450e:	911d      	str	r1, [sp, #116]	; 0x74
  (void)tmpreg;
 8004510:	991d      	ldr	r1, [sp, #116]	; 0x74
 8004512:	4638      	mov	r0, r7
 8004514:	a930      	add	r1, sp, #192	; 0xc0
 8004516:	f005 f8bf 	bl	8009698 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_HRTIM_TRG3;
 800451a:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
  LL_ADC_REG_Init(ADC5, &ADC_REG_InitStruct);
 800451e:	a93e      	add	r1, sp, #248	; 0xf8
 8004520:	4638      	mov	r0, r7
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8004522:	e9cd 243e 	strd	r2, r4, [sp, #248]	; 0xf8
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8004526:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 800452a:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  LL_ADC_REG_Init(ADC5, &ADC_REG_InitStruct);
 800452e:	f005 f8cd 	bl	80096cc <LL_ADC_REG_Init>
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8004532:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC5), &ADC_CommonInitStruct);
 8004536:	4848      	ldr	r0, [pc, #288]	; (8004658 <main+0x6b0>)
 8004538:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 800453c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8004540:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800454a:	613a      	str	r2, [r7, #16]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004552:	f022 0203 	bic.w	r2, r2, #3
 8004556:	613a      	str	r2, [r7, #16]
 8004558:	a936      	add	r1, sp, #216	; 0xd8
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 800455a:	f8cd b0d8 	str.w	fp, [sp, #216]	; 0xd8
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC5), &ADC_CommonInitStruct);
 800455e:	f005 f859 	bl	8009614 <LL_ADC_CommonInit>
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
 8004562:	68fa      	ldr	r2, [r7, #12]
  MODIFY_REG(ADCx->CR,
 8004564:	4b3b      	ldr	r3, [pc, #236]	; (8004654 <main+0x6ac>)
  LL_GPIO_Init(I_LLC_COMP1_GPIO_Port, &GPIO_InitStruct);
 8004566:	483d      	ldr	r0, [pc, #244]	; (800465c <main+0x6b4>)
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
 8004568:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800456c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004570:	60fa      	str	r2, [r7, #12]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	ea02 020a 	and.w	r2, r2, sl
 8004578:	60ba      	str	r2, [r7, #8]
  MODIFY_REG(ADCx->CR,
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	4013      	ands	r3, r2
 800457e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004582:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(*preg,
 8004584:	f8d9 3630 	ldr.w	r3, [r9, #1584]	; 0x630
 8004588:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 800458c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004590:	f8c9 3630 	str.w	r3, [r9, #1584]	; 0x630
  MODIFY_REG(*preg,
 8004594:	f8d9 3614 	ldr.w	r3, [r9, #1556]	; 0x614
 8004598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800459c:	f8c9 3614 	str.w	r3, [r9, #1556]	; 0x614
    CLEAR_BIT(ADCx->DIFSEL,
 80045a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80045a4:	f023 0310 	bic.w	r3, r3, #16
 80045a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 80045ac:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
 80045b0:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045b4:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 80045b8:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 80045bc:	943a      	str	r4, [sp, #232]	; 0xe8
  SET_BIT(RCC->AHB2ENR, Periphs);
 80045be:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80045c0:	ea43 0308 	orr.w	r3, r3, r8
 80045c4:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80045c6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80045c8:	4d25      	ldr	r5, [pc, #148]	; (8004660 <main+0x6b8>)
 80045ca:	ea03 0308 	and.w	r3, r3, r8
 80045ce:	931c      	str	r3, [sp, #112]	; 0x70
  LL_GPIO_Init(I_LLC_COMP1_GPIO_Port, &GPIO_InitStruct);
 80045d0:	a93e      	add	r1, sp, #248	; 0xf8
  (void)tmpreg;
 80045d2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80045d4:	e9cd 863e 	strd	r8, r6, [sp, #248]	; 0xf8
  LL_GPIO_Init(I_LLC_COMP1_GPIO_Port, &GPIO_InitStruct);
 80045d8:	f005 f91c 	bl	8009814 <LL_GPIO_Init>
  COMP_InitStruct.InputMinus = LL_COMP_INPUT_MINUS_DAC3_CH1;
 80045dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045e0:	2340      	movs	r3, #64	; 0x40
 80045e2:	e9cd 1336 	strd	r1, r3, [sp, #216]	; 0xd8
  LL_COMP_Init(COMP1, &COMP_InitStruct);
 80045e6:	481f      	ldr	r0, [pc, #124]	; (8004664 <main+0x6bc>)
  COMP_InitStruct.InputHysteresis = LL_COMP_HYSTERESIS_30MV;
 80045e8:	f8cd b0e0 	str.w	fp, [sp, #224]	; 0xe0
  COMP_InitStruct.OutputPolarity = LL_COMP_OUTPUTPOL_INVERTED;
 80045ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  LL_COMP_Init(COMP1, &COMP_InitStruct);
 80045f0:	a936      	add	r1, sp, #216	; 0xd8
  COMP_InitStruct.OutputBlankingSource = LL_COMP_BLANKINGSRC_NONE;
 80045f2:	e9cd 3439 	strd	r3, r4, [sp, #228]	; 0xe4
  LL_COMP_Init(COMP1, &COMP_InitStruct);
 80045f6:	f005 f899 	bl	800972c <LL_COMP_Init>
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80045fa:	4a1b      	ldr	r2, [pc, #108]	; (8004668 <main+0x6c0>)
 80045fc:	682b      	ldr	r3, [r5, #0]
  __IO uint32_t wait_loop_index = 0;
 80045fe:	941b      	str	r4, [sp, #108]	; 0x6c
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 8004600:	fba2 2303 	umull	r2, r3, r2, r3
 8004604:	0cdb      	lsrs	r3, r3, #19
 8004606:	22c8      	movs	r2, #200	; 0xc8
 8004608:	fb02 f303 	mul.w	r3, r2, r3
 800460c:	931b      	str	r3, [sp, #108]	; 0x6c
  while(wait_loop_index != 0)
 800460e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004610:	b12b      	cbz	r3, 800461e <main+0x676>
    wait_loop_index--;
 8004612:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004614:	3b01      	subs	r3, #1
 8004616:	931b      	str	r3, [sp, #108]	; 0x6c
  while(wait_loop_index != 0)
 8004618:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1f9      	bne.n	8004612 <main+0x66a>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800461e:	4b13      	ldr	r3, [pc, #76]	; (800466c <main+0x6c4>)
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8004626:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004628:	681a      	ldr	r2, [r3, #0]
  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 800462a:	2400      	movs	r4, #0
 800462c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
 8004636:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800463a:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 800463e:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004642:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 8004646:	943a      	str	r4, [sp, #232]	; 0xe8
 8004648:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	e00f      	b.n	8004670 <main+0x6c8>
 8004650:	48001000 	.word	0x48001000
 8004654:	6fffffc0 	.word	0x6fffffc0
 8004658:	50000700 	.word	0x50000700
 800465c:	48000400 	.word	0x48000400
 8004660:	2000002c 	.word	0x2000002c
 8004664:	40010200 	.word	0x40010200
 8004668:	431bde83 	.word	0x431bde83
 800466c:	40010400 	.word	0x40010400
 8004670:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	931a      	str	r3, [sp, #104]	; 0x68
  (void)tmpreg;
 800467a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  LL_GPIO_Init(I_PV_COMP2_GPIO_Port, &GPIO_InitStruct);
 800467c:	a93e      	add	r1, sp, #248	; 0xf8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800467e:	2303      	movs	r3, #3
 8004680:	f04f 0b80 	mov.w	fp, #128	; 0x80
  LL_GPIO_Init(I_PV_COMP2_GPIO_Port, &GPIO_InitStruct);
 8004684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004688:	e9cd b33e 	strd	fp, r3, [sp, #248]	; 0xf8
  LL_GPIO_Init(I_PV_COMP2_GPIO_Port, &GPIO_InitStruct);
 800468c:	f005 f8c2 	bl	8009814 <LL_GPIO_Init>
  COMP_InitStruct.InputHysteresis = LL_COMP_HYSTERESIS_30MV;
 8004690:	2250      	movs	r2, #80	; 0x50
 8004692:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  LL_COMP_Init(COMP2, &COMP_InitStruct);
 8004696:	48b4      	ldr	r0, [pc, #720]	; (8004968 <main+0x9c0>)
  COMP_InitStruct.InputPlus = LL_COMP_INPUT_PLUS_IO1;
 8004698:	9436      	str	r4, [sp, #216]	; 0xd8
  LL_COMP_Init(COMP2, &COMP_InitStruct);
 800469a:	a936      	add	r1, sp, #216	; 0xd8
  COMP_InitStruct.InputHysteresis = LL_COMP_HYSTERESIS_30MV;
 800469c:	e9cd 2337 	strd	r2, r3, [sp, #220]	; 0xdc
  COMP_InitStruct.OutputBlankingSource = LL_COMP_BLANKINGSRC_NONE;
 80046a0:	e9cd 4439 	strd	r4, r4, [sp, #228]	; 0xe4
  LL_COMP_Init(COMP2, &COMP_InitStruct);
 80046a4:	f005 f842 	bl	800972c <LL_COMP_Init>
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80046a8:	4ab0      	ldr	r2, [pc, #704]	; (800496c <main+0x9c4>)
 80046aa:	682b      	ldr	r3, [r5, #0]
  __IO uint32_t wait_loop_index = 0;
 80046ac:	9419      	str	r4, [sp, #100]	; 0x64
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80046ae:	fba2 2303 	umull	r2, r3, r2, r3
 80046b2:	0cdb      	lsrs	r3, r3, #19
 80046b4:	22c8      	movs	r2, #200	; 0xc8
 80046b6:	fb02 f303 	mul.w	r3, r2, r3
 80046ba:	9319      	str	r3, [sp, #100]	; 0x64
  while(wait_loop_index != 0)
 80046bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80046be:	b12b      	cbz	r3, 80046cc <main+0x724>
    wait_loop_index--;
 80046c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80046c2:	3b01      	subs	r3, #1
 80046c4:	9319      	str	r3, [sp, #100]	; 0x64
  while(wait_loop_index != 0)
 80046c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1f9      	bne.n	80046c0 <main+0x718>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80046cc:	4ba8      	ldr	r3, [pc, #672]	; (8004970 <main+0x9c8>)
  LL_GPIO_Init(I_LLC_OPAMP2_COMP4_GPIO_Port, &GPIO_InitStruct);
 80046ce:	48a9      	ldr	r0, [pc, #676]	; (8004974 <main+0x9cc>)
 80046d0:	689a      	ldr	r2, [r3, #8]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 80046d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80046d6:	430a      	orrs	r2, r1
 80046d8:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80046e0:	60da      	str	r2, [r3, #12]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80046e2:	6159      	str	r1, [r3, #20]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80046ea:	681a      	ldr	r2, [r3, #0]
  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 80046ec:	2400      	movs	r4, #0
 80046ee:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
 80046f8:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046fc:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 8004700:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004704:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 8004708:	943a      	str	r4, [sp, #232]	; 0xe8
 800470a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800470c:	f042 0202 	orr.w	r2, r2, #2
 8004710:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	9318      	str	r3, [sp, #96]	; 0x60
  (void)tmpreg;
 800471a:	9b18      	ldr	r3, [sp, #96]	; 0x60
  LL_GPIO_Init(I_LLC_OPAMP2_COMP4_GPIO_Port, &GPIO_InitStruct);
 800471c:	a93e      	add	r1, sp, #248	; 0xf8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800471e:	2303      	movs	r3, #3
 8004720:	f04f 0901 	mov.w	r9, #1
 8004724:	e9cd 933e 	strd	r9, r3, [sp, #248]	; 0xf8
  COMP_InitStruct.InputHysteresis = LL_COMP_HYSTERESIS_30MV;
 8004728:	f04f 0a40 	mov.w	sl, #64	; 0x40
  LL_GPIO_Init(I_LLC_OPAMP2_COMP4_GPIO_Port, &GPIO_InitStruct);
 800472c:	f005 f872 	bl	8009814 <LL_GPIO_Init>
  COMP_InitStruct.InputHysteresis = LL_COMP_HYSTERESIS_30MV;
 8004730:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  LL_COMP_Init(COMP4, &COMP_InitStruct);
 8004734:	4890      	ldr	r0, [pc, #576]	; (8004978 <main+0x9d0>)
  COMP_InitStruct.InputPlus = LL_COMP_INPUT_PLUS_IO1;
 8004736:	9436      	str	r4, [sp, #216]	; 0xd8
  LL_COMP_Init(COMP4, &COMP_InitStruct);
 8004738:	a936      	add	r1, sp, #216	; 0xd8
  COMP_InitStruct.InputHysteresis = LL_COMP_HYSTERESIS_30MV;
 800473a:	e9cd a337 	strd	sl, r3, [sp, #220]	; 0xdc
  COMP_InitStruct.OutputBlankingSource = LL_COMP_BLANKINGSRC_NONE;
 800473e:	e9cd 4439 	strd	r4, r4, [sp, #228]	; 0xe4
  LL_COMP_Init(COMP4, &COMP_InitStruct);
 8004742:	f004 fff3 	bl	800972c <LL_COMP_Init>
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 8004746:	4a89      	ldr	r2, [pc, #548]	; (800496c <main+0x9c4>)
 8004748:	682b      	ldr	r3, [r5, #0]
  __IO uint32_t wait_loop_index = 0;
 800474a:	9417      	str	r4, [sp, #92]	; 0x5c
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 800474c:	fba2 2303 	umull	r2, r3, r2, r3
 8004750:	0cdb      	lsrs	r3, r3, #19
 8004752:	22c8      	movs	r2, #200	; 0xc8
 8004754:	fb02 f303 	mul.w	r3, r2, r3
 8004758:	9317      	str	r3, [sp, #92]	; 0x5c
  while(wait_loop_index != 0)
 800475a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800475c:	b12b      	cbz	r3, 800476a <main+0x7c2>
    wait_loop_index--;
 800475e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004760:	3b01      	subs	r3, #1
 8004762:	9317      	str	r3, [sp, #92]	; 0x5c
  while(wait_loop_index != 0)
 8004764:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f9      	bne.n	800475e <main+0x7b6>
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800476a:	4b81      	ldr	r3, [pc, #516]	; (8004970 <main+0x9c8>)
  LL_GPIO_Init(RELAY_SENSE_COMP6_GPIO_Port, &GPIO_InitStruct);
 800476c:	4883      	ldr	r0, [pc, #524]	; (800497c <main+0x9d4>)
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8004774:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004776:	681a      	ldr	r2, [r3, #0]
  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 8004778:	2400      	movs	r4, #0
 800477a:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
 8004784:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004788:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 800478c:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004790:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 8004794:	943a      	str	r4, [sp, #232]	; 0xe8
 8004796:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004798:	f042 0208 	orr.w	r2, r2, #8
 800479c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800479e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a0:	f003 0308 	and.w	r3, r3, #8
 80047a4:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80047a6:	f44f 6e00 	mov.w	lr, #2048	; 0x800
  (void)tmpreg;
 80047aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
  LL_GPIO_Init(RELAY_SENSE_COMP6_GPIO_Port, &GPIO_InitStruct);
 80047ac:	a93e      	add	r1, sp, #248	; 0xf8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e9cd e33e 	strd	lr, r3, [sp, #248]	; 0xf8
  COMP_InitStruct.InputMinus = LL_COMP_INPUT_MINUS_DAC2_CH1;
 80047b4:	f44f 7880 	mov.w	r8, #256	; 0x100
  LL_GPIO_Init(RELAY_SENSE_COMP6_GPIO_Port, &GPIO_InitStruct);
 80047b8:	f005 f82c 	bl	8009814 <LL_GPIO_Init>
  COMP_InitStruct.InputMinus = LL_COMP_INPUT_MINUS_DAC2_CH1;
 80047bc:	2350      	movs	r3, #80	; 0x50
  LL_COMP_Init(COMP6, &COMP_InitStruct);
 80047be:	4870      	ldr	r0, [pc, #448]	; (8004980 <main+0x9d8>)
  COMP_InitStruct.OutputBlankingSource = LL_COMP_BLANKINGSRC_NONE;
 80047c0:	943a      	str	r4, [sp, #232]	; 0xe8
  LL_COMP_Init(COMP6, &COMP_InitStruct);
 80047c2:	a936      	add	r1, sp, #216	; 0xd8
  COMP_InitStruct.InputMinus = LL_COMP_INPUT_MINUS_DAC2_CH1;
 80047c4:	e9cd 8336 	strd	r8, r3, [sp, #216]	; 0xd8
  COMP_InitStruct.OutputPolarity = LL_COMP_OUTPUTPOL_NONINVERTED;
 80047c8:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
  LL_COMP_Init(COMP6, &COMP_InitStruct);
 80047cc:	f004 ffae 	bl	800972c <LL_COMP_Init>
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80047d0:	4a66      	ldr	r2, [pc, #408]	; (800496c <main+0x9c4>)
 80047d2:	682b      	ldr	r3, [r5, #0]
  __IO uint32_t wait_loop_index = 0;
 80047d4:	9415      	str	r4, [sp, #84]	; 0x54
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80047d6:	fba2 2303 	umull	r2, r3, r2, r3
 80047da:	0cdb      	lsrs	r3, r3, #19
 80047dc:	22c8      	movs	r2, #200	; 0xc8
 80047de:	fb02 f303 	mul.w	r3, r2, r3
 80047e2:	9315      	str	r3, [sp, #84]	; 0x54
  while(wait_loop_index != 0)
 80047e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80047e6:	b12b      	cbz	r3, 80047f4 <main+0x84c>
    wait_loop_index--;
 80047e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80047ea:	3b01      	subs	r3, #1
 80047ec:	9315      	str	r3, [sp, #84]	; 0x54
  while(wait_loop_index != 0)
 80047ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1f9      	bne.n	80047e8 <main+0x840>
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80047f4:	4b5e      	ldr	r3, [pc, #376]	; (8004970 <main+0x9c8>)
  LL_GPIO_Init(OC_OUT_GRID_GPIO_Port, &GPIO_InitStruct);
 80047f6:	4861      	ldr	r0, [pc, #388]	; (800497c <main+0x9d4>)
 80047f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047fa:	f022 0201 	bic.w	r2, r2, #1
 80047fe:	625a      	str	r2, [r3, #36]	; 0x24
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8004800:	6a1a      	ldr	r2, [r3, #32]
  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 8004802:	2400      	movs	r4, #0
 8004804:	f022 0201 	bic.w	r2, r2, #1
 8004808:	621a      	str	r2, [r3, #32]
 800480a:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
 800480e:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004812:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 8004816:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  SET_BIT(RCC->AHB2ENR, Periphs);
 800481a:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 800481e:	943a      	str	r4, [sp, #232]	; 0xe8
 8004820:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004822:	f042 0208 	orr.w	r2, r2, #8
 8004826:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800482a:	f003 0308 	and.w	r3, r3, #8
 800482e:	9314      	str	r3, [sp, #80]	; 0x50
  (void)tmpreg;
 8004830:	9b14      	ldr	r3, [sp, #80]	; 0x50
  LL_GPIO_Init(OC_OUT_GRID_GPIO_Port, &GPIO_InitStruct);
 8004832:	a93e      	add	r1, sp, #248	; 0xf8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004834:	2303      	movs	r3, #3
 8004836:	f44f 4780 	mov.w	r7, #16384	; 0x4000
 800483a:	e9cd 733e 	strd	r7, r3, [sp, #248]	; 0xf8
  LL_GPIO_Init(OC_OUT_GRID_GPIO_Port, &GPIO_InitStruct);
 800483e:	f004 ffe9 	bl	8009814 <LL_GPIO_Init>
  COMP_InitStruct.InputMinus = LL_COMP_INPUT_MINUS_DAC2_CH1;
 8004842:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8004846:	2350      	movs	r3, #80	; 0x50
 8004848:	e9cd c336 	strd	ip, r3, [sp, #216]	; 0xd8
  LL_COMP_Init(COMP7, &COMP_InitStruct);
 800484c:	484d      	ldr	r0, [pc, #308]	; (8004984 <main+0x9dc>)
  COMP_InitStruct.InputHysteresis = LL_COMP_HYSTERESIS_30MV;
 800484e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  LL_COMP_Init(COMP7, &COMP_InitStruct);
 8004852:	a936      	add	r1, sp, #216	; 0xd8
  COMP_InitStruct.InputHysteresis = LL_COMP_HYSTERESIS_30MV;
 8004854:	9338      	str	r3, [sp, #224]	; 0xe0
  COMP_InitStruct.OutputBlankingSource = LL_COMP_BLANKINGSRC_NONE;
 8004856:	e9cd 4439 	strd	r4, r4, [sp, #228]	; 0xe4
  LL_COMP_Init(COMP7, &COMP_InitStruct);
 800485a:	f004 ff67 	bl	800972c <LL_COMP_Init>
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 800485e:	4a43      	ldr	r2, [pc, #268]	; (800496c <main+0x9c4>)
 8004860:	682b      	ldr	r3, [r5, #0]
  __IO uint32_t wait_loop_index = 0;
 8004862:	9413      	str	r4, [sp, #76]	; 0x4c
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 8004864:	fba2 2303 	umull	r2, r3, r2, r3
 8004868:	0cdb      	lsrs	r3, r3, #19
 800486a:	22c8      	movs	r2, #200	; 0xc8
 800486c:	fb02 f303 	mul.w	r3, r2, r3
 8004870:	9313      	str	r3, [sp, #76]	; 0x4c
  while(wait_loop_index != 0)
 8004872:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004874:	b12b      	cbz	r3, 8004882 <main+0x8da>
    wait_loop_index--;
 8004876:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004878:	3b01      	subs	r3, #1
 800487a:	9313      	str	r3, [sp, #76]	; 0x4c
  while(wait_loop_index != 0)
 800487c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f9      	bne.n	8004876 <main+0x8ce>
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8004882:	4b3b      	ldr	r3, [pc, #236]	; (8004970 <main+0x9c8>)
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004884:	4f40      	ldr	r7, [pc, #256]	; (8004988 <main+0x9e0>)
 8004886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  *         @arg @ref LL_DAC_SIGNED_FORMAT_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_DAC_SetSignedFormat(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t SignedFormat)
{
  MODIFY_REG(DACx->MCR,
 8004888:	4e40      	ldr	r6, [pc, #256]	; (800498c <main+0x9e4>)
 800488a:	f022 0202 	bic.w	r2, r2, #2
 800488e:	625a      	str	r2, [r3, #36]	; 0x24
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8004890:	6a1a      	ldr	r2, [r3, #32]
  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 8004892:	2400      	movs	r4, #0
 8004894:	f022 0202 	bic.w	r2, r2, #2
 8004898:	621a      	str	r2, [r3, #32]
 800489a:	e9cd 443e 	strd	r4, r4, [sp, #248]	; 0xf8
 800489e:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 80048a2:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048a6:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
 80048aa:	e9cd 443a 	strd	r4, r4, [sp, #232]	; 0xe8
  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 80048ae:	9444      	str	r4, [sp, #272]	; 0x110
 80048b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80048b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048be:	9311      	str	r3, [sp, #68]	; 0x44
  (void)tmpreg;
 80048c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  SET_BIT(RCC->AHB2ENR, Periphs);
 80048c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c4:	f043 0301 	orr.w	r3, r3, #1
 80048c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80048ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80048d2:	f04f 0803 	mov.w	r8, #3
  (void)tmpreg;
 80048d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80048d8:	f8cd 80dc 	str.w	r8, [sp, #220]	; 0xdc
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80048dc:	2310      	movs	r3, #16
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048de:	a936      	add	r1, sp, #216	; 0xd8
 80048e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80048e4:	9336      	str	r3, [sp, #216]	; 0xd8
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048e6:	f004 ff95 	bl	8009814 <LL_GPIO_Init>
 80048ea:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 80048ec:	4928      	ldr	r1, [pc, #160]	; (8004990 <main+0x9e8>)
 80048ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048f2:	63f3      	str	r3, [r6, #60]	; 0x3c
 80048f4:	aa3e      	add	r2, sp, #248	; 0xf8
 80048f6:	4630      	mov	r0, r6
  DAC_InitStruct.TriggerSource2 = LL_DAC_TRIG_SOFTWARE;
 80048f8:	e9cd 443e 	strd	r4, r4, [sp, #248]	; 0xf8
  DAC_InitStruct.OutputConnection = LL_DAC_OUTPUT_CONNECT_GPIO;
 80048fc:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  DAC_InitStruct.WaveAutoGeneration = LL_DAC_WAVE_AUTO_GENERATION_NONE;
 8004900:	9440      	str	r4, [sp, #256]	; 0x100
  DAC_InitStruct.OutputMode = LL_DAC_OUTPUT_MODE_NORMAL;
 8004902:	9444      	str	r4, [sp, #272]	; 0x110
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8004904:	f004 ff2c 	bl	8009760 <LL_DAC_Init>
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_DisableTrigger(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  CLEAR_BIT(DACx->CR,
 8004908:	6833      	ldr	r3, [r6, #0]
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &DAC_InitStruct);
 800490a:	4922      	ldr	r1, [pc, #136]	; (8004994 <main+0x9ec>)
 800490c:	f023 0302 	bic.w	r3, r3, #2
 8004910:	6033      	str	r3, [r6, #0]
  CLEAR_BIT(DACx->MCR,
 8004912:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8004914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004918:	63f3      	str	r3, [r6, #60]	; 0x3c
  MODIFY_REG(DACx->MCR,
 800491a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800491c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  DAC_InitStruct.OutputConnection = LL_DAC_OUTPUT_CONNECT_INTERNAL;
 8004920:	f04f 0b01 	mov.w	fp, #1
 8004924:	f04f 0902 	mov.w	r9, #2
 8004928:	63f3      	str	r3, [r6, #60]	; 0x3c
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &DAC_InitStruct);
 800492a:	aa3e      	add	r2, sp, #248	; 0xf8
 800492c:	4630      	mov	r0, r6
  DAC_InitStruct.OutputConnection = LL_DAC_OUTPUT_CONNECT_INTERNAL;
 800492e:	e9cd 9b42 	strd	r9, fp, [sp, #264]	; 0x108
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &DAC_InitStruct);
 8004932:	f004 ff15 	bl	8009760 <LL_DAC_Init>
  CLEAR_BIT(DACx->CR,
 8004936:	6833      	ldr	r3, [r6, #0]
 8004938:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800493c:	6033      	str	r3, [r6, #0]
  CLEAR_BIT(DACx->MCR,
 800493e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8004940:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004944:	63f3      	str	r3, [r6, #60]	; 0x3c
  LL_OPAMP_InitTypeDef OPAMP_InitStruct = {0};
 8004946:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
 800494a:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800494e:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 8004952:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004958:	ea43 030b 	orr.w	r3, r3, fp
 800495c:	64fb      	str	r3, [r7, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800495e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004960:	ea03 030b 	and.w	r3, r3, fp
 8004964:	e018      	b.n	8004998 <main+0x9f0>
 8004966:	bf00      	nop
 8004968:	40010204 	.word	0x40010204
 800496c:	431bde83 	.word	0x431bde83
 8004970:	40010400 	.word	0x40010400
 8004974:	48000400 	.word	0x48000400
 8004978:	4001020c 	.word	0x4001020c
 800497c:	48000c00 	.word	0x48000c00
 8004980:	40010214 	.word	0x40010214
 8004984:	40010218 	.word	0x40010218
 8004988:	40021000 	.word	0x40021000
 800498c:	50000800 	.word	0x50000800
 8004990:	02110001 	.word	0x02110001
 8004994:	354200f2 	.word	0x354200f2
 8004998:	930f      	str	r3, [sp, #60]	; 0x3c
  (void)tmpreg;
 800499a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  SET_BIT(RCC->AHB2ENR, Periphs);
 800499c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800499e:	f043 0304 	orr.w	r3, r3, #4
 80049a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80049a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  GPIO_InitStruct.Pin = I_PV_OPAMP_VINP_Pin;
 80049a6:	f8cd 90f8 	str.w	r9, [sp, #248]	; 0xf8
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	9310      	str	r3, [sp, #64]	; 0x40
  LL_GPIO_Init(I_PV_OPAMP_VINP_GPIO_Port, &GPIO_InitStruct);
 80049b0:	a93e      	add	r1, sp, #248	; 0xf8
 80049b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  (void)tmpreg;
 80049b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80049b8:	f8cd 80fc 	str.w	r8, [sp, #252]	; 0xfc
  GPIO_InitStruct.Pin = I_PV_OPAMP1_OUT_Pin;
 80049bc:	f04f 0a04 	mov.w	sl, #4
  LL_GPIO_Init(I_PV_OPAMP_VINP_GPIO_Port, &GPIO_InitStruct);
 80049c0:	f004 ff28 	bl	8009814 <LL_GPIO_Init>
  LL_GPIO_Init(I_PV_OPAMP1_OUT_GPIO_Port, &GPIO_InitStruct);
 80049c4:	a93e      	add	r1, sp, #248	; 0xf8
 80049c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80049ca:	f8cd 80fc 	str.w	r8, [sp, #252]	; 0xfc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80049ce:	9442      	str	r4, [sp, #264]	; 0x108
  GPIO_InitStruct.Pin = I_PV_OPAMP1_OUT_Pin;
 80049d0:	f8cd a0f8 	str.w	sl, [sp, #248]	; 0xf8
  LL_GPIO_Init(I_PV_OPAMP1_OUT_GPIO_Port, &GPIO_InitStruct);
 80049d4:	f004 ff1e 	bl	8009814 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = I_PV_OPAMP_VINM0_Pin;
 80049d8:	2208      	movs	r2, #8
  LL_GPIO_Init(I_PV_OPAMP_VINM0_GPIO_Port, &GPIO_InitStruct);
 80049da:	a93e      	add	r1, sp, #248	; 0xf8
 80049dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = I_PV_OPAMP_VINM0_Pin;
 80049e0:	923e      	str	r2, [sp, #248]	; 0xf8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80049e2:	f8cd 80fc 	str.w	r8, [sp, #252]	; 0xfc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80049e6:	9442      	str	r4, [sp, #264]	; 0x108
  LL_OPAMP_Init(OPAMP1, &OPAMP_InitStruct);
 80049e8:	f106 4670 	add.w	r6, r6, #4026531840	; 0xf0000000
  LL_GPIO_Init(I_PV_OPAMP_VINM0_GPIO_Port, &GPIO_InitStruct);
 80049ec:	f004 ff12 	bl	8009814 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = I_PV_OPAMP_VINM1_Pin;
 80049f0:	2320      	movs	r3, #32
  LL_GPIO_Init(I_PV_OPAMP_VINM1_GPIO_Port, &GPIO_InitStruct);
 80049f2:	a93e      	add	r1, sp, #248	; 0xf8
 80049f4:	48a5      	ldr	r0, [pc, #660]	; (8004c8c <main+0xce4>)
  GPIO_InitStruct.Pin = I_PV_OPAMP_VINM1_Pin;
 80049f6:	933e      	str	r3, [sp, #248]	; 0xf8
  LL_OPAMP_Init(OPAMP1, &OPAMP_InitStruct);
 80049f8:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80049fc:	f8cd 80fc 	str.w	r8, [sp, #252]	; 0xfc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004a00:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(I_PV_OPAMP_VINM1_GPIO_Port, &GPIO_InitStruct);
 8004a02:	f004 ff07 	bl	8009814 <LL_GPIO_Init>
  OPAMP_InitStruct.PowerMode = LL_OPAMP_POWERMODE_HIGHSPEED;
 8004a06:	4aa2      	ldr	r2, [pc, #648]	; (8004c90 <main+0xce8>)
  OPAMP_InitStruct.InputNonInverting = LL_OPAMP_INPUT_NONINVERT_IO0;
 8004a08:	9438      	str	r4, [sp, #224]	; 0xe0
  OPAMP_InitStruct.PowerMode = LL_OPAMP_POWERMODE_HIGHSPEED;
 8004a0a:	2380      	movs	r3, #128	; 0x80
  LL_OPAMP_Init(OPAMP1, &OPAMP_InitStruct);
 8004a0c:	a936      	add	r1, sp, #216	; 0xd8
 8004a0e:	4630      	mov	r0, r6
  OPAMP_InitStruct.PowerMode = LL_OPAMP_POWERMODE_HIGHSPEED;
 8004a10:	e9cd 3236 	strd	r3, r2, [sp, #216]	; 0xd8
  LL_OPAMP_Init(OPAMP1, &OPAMP_InitStruct);
 8004a14:	f004 ffde 	bl	80099d4 <LL_OPAMP_Init>
  *         On this STM32 series, this value is not available on all devices. Refer to datasheet for details.
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetInputsMuxMode(OPAMP_TypeDef *OPAMPx, uint32_t InputsMuxMode)
{
  MODIFY_REG(OPAMPx->TCMR, OPAMP_TCMR_T1CMEN | OPAMP_TCMR_T8CMEN | OPAMP_TCMR_T20CMEN, InputsMuxMode);
 8004a18:	69b3      	ldr	r3, [r6, #24]
 8004a1a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004a1e:	61b3      	str	r3, [r6, #24]
  *         @arg @ref LL_OPAMP_INTERNAL_OUPUT_ENABLED
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetInternalOutput(OPAMP_TypeDef *OPAMPx, uint32_t InternalOutput)
{
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_OPAMPINTEN, InternalOutput);
 8004a20:	6833      	ldr	r3, [r6, #0]
 8004a22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a26:	6033      	str	r3, [r6, #0]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_PGGAIN_2 | OPAMP_CSR_PGGAIN_1 | OPAMP_CSR_PGGAIN_0, PGAGain);
 8004a28:	6833      	ldr	r3, [r6, #0]
 8004a2a:	f423 33e0 	bic.w	r3, r3, #114688	; 0x1c000
 8004a2e:	6033      	str	r3, [r6, #0]
  *         @arg @ref LL_OPAMP_TRIMMING_USER
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetTrimmingMode(OPAMP_TypeDef *OPAMPx, uint32_t TrimmingMode)
{
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_USERTRIM, TrimmingMode);
 8004a30:	6833      	ldr	r3, [r6, #0]
 8004a32:	f023 0310 	bic.w	r3, r3, #16
 8004a36:	6033      	str	r3, [r6, #0]
  LL_OPAMP_InitTypeDef OPAMP_InitStruct = {0};
 8004a38:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
 8004a3c:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a40:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 8004a44:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a4a:	ea43 030b 	orr.w	r3, r3, fp
 8004a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a52:	ea03 030b 	and.w	r3, r3, fp
 8004a56:	930d      	str	r3, [sp, #52]	; 0x34
  (void)tmpreg;
 8004a58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a5c:	ea43 0309 	orr.w	r3, r3, r9
 8004a60:	64fb      	str	r3, [r7, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004a64:	f8cd 80fc 	str.w	r8, [sp, #252]	; 0xfc
 8004a68:	ea03 0309 	and.w	r3, r3, r9
 8004a6c:	930e      	str	r3, [sp, #56]	; 0x38
  (void)tmpreg;
 8004a6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  LL_GPIO_Init(I_LLC_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8004a70:	a93e      	add	r1, sp, #248	; 0xf8
  GPIO_InitStruct.Pin = I_LLC_OPAMP2_OUT_Pin;
 8004a72:	2340      	movs	r3, #64	; 0x40
  LL_GPIO_Init(I_LLC_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8004a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = I_LLC_OPAMP2_OUT_Pin;
 8004a78:	933e      	str	r3, [sp, #248]	; 0xf8
  LL_GPIO_Init(I_LLC_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8004a7a:	f004 fecb 	bl	8009814 <LL_GPIO_Init>
  LL_GPIO_Init(I_LLC_OPAMP2_COMP4_GPIO_Port, &GPIO_InitStruct);
 8004a7e:	a93e      	add	r1, sp, #248	; 0xf8
 8004a80:	4884      	ldr	r0, [pc, #528]	; (8004c94 <main+0xcec>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004a82:	9442      	str	r4, [sp, #264]	; 0x108
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004a84:	e9cd b83e 	strd	fp, r8, [sp, #248]	; 0xf8
  LL_GPIO_Init(I_LLC_OPAMP2_COMP4_GPIO_Port, &GPIO_InitStruct);
 8004a88:	f004 fec4 	bl	8009814 <LL_GPIO_Init>
  OPAMP_InitStruct.InputNonInverting = LL_OPAMP_INPUT_NONINVERT_IO2;
 8004a8c:	2208      	movs	r2, #8
  OPAMP_InitStruct.FunctionalMode = LL_OPAMP_MODE_PGA;
 8004a8e:	2340      	movs	r3, #64	; 0x40
  LL_OPAMP_Init(OPAMP2, &OPAMP_InitStruct);
 8004a90:	a936      	add	r1, sp, #216	; 0xd8
 8004a92:	4881      	ldr	r0, [pc, #516]	; (8004c98 <main+0xcf0>)
  OPAMP_InitStruct.InputNonInverting = LL_OPAMP_INPUT_NONINVERT_IO2;
 8004a94:	9238      	str	r2, [sp, #224]	; 0xe0
  OPAMP_InitStruct.FunctionalMode = LL_OPAMP_MODE_PGA;
 8004a96:	9337      	str	r3, [sp, #220]	; 0xdc
  OPAMP_InitStruct.InputInverting = LL_OPAMP_INPUT_INVERT_CONNECT_NO;
 8004a98:	9339      	str	r3, [sp, #228]	; 0xe4
  OPAMP_InitStruct.PowerMode = LL_OPAMP_POWERMODE_NORMALSPEED;
 8004a9a:	9436      	str	r4, [sp, #216]	; 0xd8
  LL_OPAMP_Init(OPAMP2, &OPAMP_InitStruct);
 8004a9c:	f004 ff9a 	bl	80099d4 <LL_OPAMP_Init>
  MODIFY_REG(OPAMPx->TCMR, OPAMP_TCMR_T1CMEN | OPAMP_TCMR_T8CMEN | OPAMP_TCMR_T20CMEN, InputsMuxMode);
 8004aa0:	69f3      	ldr	r3, [r6, #28]
  LL_GPIO_Init(VPV_OPAMP4_VINM_GPIO_Port, &GPIO_InitStruct);
 8004aa2:	487c      	ldr	r0, [pc, #496]	; (8004c94 <main+0xcec>)
 8004aa4:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004aa8:	61f3      	str	r3, [r6, #28]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_OPAMPINTEN, InternalOutput);
 8004aaa:	6873      	ldr	r3, [r6, #4]
 8004aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ab0:	6073      	str	r3, [r6, #4]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_PGGAIN_2 | OPAMP_CSR_PGGAIN_1 | OPAMP_CSR_PGGAIN_0, PGAGain);
 8004ab2:	6873      	ldr	r3, [r6, #4]
 8004ab4:	f423 33e0 	bic.w	r3, r3, #114688	; 0x1c000
 8004ab8:	6073      	str	r3, [r6, #4]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_USERTRIM, TrimmingMode);
 8004aba:	6873      	ldr	r3, [r6, #4]
 8004abc:	f023 0310 	bic.w	r3, r3, #16
 8004ac0:	6073      	str	r3, [r6, #4]
  LL_OPAMP_InitTypeDef OPAMP_InitStruct = {0};
 8004ac2:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
 8004ac6:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aca:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 8004ace:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad4:	ea43 0309 	orr.w	r3, r3, r9
 8004ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004adc:	f8cd 80fc 	str.w	r8, [sp, #252]	; 0xfc
 8004ae0:	ea03 0309 	and.w	r3, r3, r9
 8004ae4:	930c      	str	r3, [sp, #48]	; 0x30
  (void)tmpreg;
 8004ae6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  LL_GPIO_Init(VPV_OPAMP4_VINM_GPIO_Port, &GPIO_InitStruct);
 8004ae8:	a93e      	add	r1, sp, #248	; 0xf8
  GPIO_InitStruct.Pin = VPV_OPAMP4_VINM_Pin;
 8004aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004aee:	933e      	str	r3, [sp, #248]	; 0xf8
  GPIO_InitStruct.Pin = VPV_OPAMP4_OUT_Pin;
 8004af0:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  LL_GPIO_Init(VPV_OPAMP4_VINM_GPIO_Port, &GPIO_InitStruct);
 8004af4:	f004 fe8e 	bl	8009814 <LL_GPIO_Init>
  LL_GPIO_Init(VPV_OPAMP4_OUT_GPIO_Port, &GPIO_InitStruct);
 8004af8:	a93e      	add	r1, sp, #248	; 0xf8
 8004afa:	4866      	ldr	r0, [pc, #408]	; (8004c94 <main+0xcec>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004afc:	f8cd 80fc 	str.w	r8, [sp, #252]	; 0xfc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004b00:	9442      	str	r4, [sp, #264]	; 0x108
  GPIO_InitStruct.Pin = VPV_OPAMP4_OUT_Pin;
 8004b02:	f8cd b0f8 	str.w	fp, [sp, #248]	; 0xf8
  LL_GPIO_Init(VPV_OPAMP4_OUT_GPIO_Port, &GPIO_InitStruct);
 8004b06:	f004 fe85 	bl	8009814 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = VPV_OPAMP4_INP_Pin;
 8004b0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  LL_GPIO_Init(VPV_OPAMP4_INP_GPIO_Port, &GPIO_InitStruct);
 8004b0e:	a93e      	add	r1, sp, #248	; 0xf8
 8004b10:	4860      	ldr	r0, [pc, #384]	; (8004c94 <main+0xcec>)
  GPIO_InitStruct.Pin = VPV_OPAMP4_INP_Pin;
 8004b12:	933e      	str	r3, [sp, #248]	; 0xf8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004b14:	f8cd 80fc 	str.w	r8, [sp, #252]	; 0xfc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004b18:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(VPV_OPAMP4_INP_GPIO_Port, &GPIO_InitStruct);
 8004b1a:	f004 fe7b 	bl	8009814 <LL_GPIO_Init>
  LL_OPAMP_Init(OPAMP4, &OPAMP_InitStruct);
 8004b1e:	a936      	add	r1, sp, #216	; 0xd8
 8004b20:	485e      	ldr	r0, [pc, #376]	; (8004c9c <main+0xcf4>)
  OPAMP_InitStruct.FunctionalMode = LL_OPAMP_MODE_STANDALONE;
 8004b22:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
  OPAMP_InitStruct.InputInverting = LL_OPAMP_INPUT_INVERT_IO0;
 8004b26:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
  LL_OPAMP_Init(OPAMP4, &OPAMP_InitStruct);
 8004b2a:	f004 ff53 	bl	80099d4 <LL_OPAMP_Init>
  MODIFY_REG(OPAMPx->TCMR, OPAMP_TCMR_T1CMEN | OPAMP_TCMR_T8CMEN | OPAMP_TCMR_T20CMEN, InputsMuxMode);
 8004b2e:	6a73      	ldr	r3, [r6, #36]	; 0x24
  LL_GPIO_Init(RELAY_SENSE_OPAMP5_GPIO_Port, &GPIO_InitStruct);
 8004b30:	485b      	ldr	r0, [pc, #364]	; (8004ca0 <main+0xcf8>)
 8004b32:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004b36:	6273      	str	r3, [r6, #36]	; 0x24
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_OPAMPINTEN, InternalOutput);
 8004b38:	68f3      	ldr	r3, [r6, #12]
 8004b3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b3e:	60f3      	str	r3, [r6, #12]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_USERTRIM, TrimmingMode);
 8004b40:	68f3      	ldr	r3, [r6, #12]
 8004b42:	f023 0310 	bic.w	r3, r3, #16
 8004b46:	60f3      	str	r3, [r6, #12]
  LL_OPAMP_InitTypeDef OPAMP_InitStruct = {0};
 8004b48:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
 8004b4c:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b50:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 8004b54:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b5a:	f043 0308 	orr.w	r3, r3, #8
 8004b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  GPIO_InitStruct.Pin = RELAY_SENSE_OPAMP5_Pin;
 8004b62:	f8cd b0f8 	str.w	fp, [sp, #248]	; 0xf8
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	930b      	str	r3, [sp, #44]	; 0x2c
  LL_GPIO_Init(RELAY_SENSE_OPAMP5_GPIO_Port, &GPIO_InitStruct);
 8004b6c:	a93e      	add	r1, sp, #248	; 0xf8
  (void)tmpreg;
 8004b6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004b70:	f8cd 80fc 	str.w	r8, [sp, #252]	; 0xfc
  LL_GPIO_Init(RELAY_SENSE_OPAMP5_GPIO_Port, &GPIO_InitStruct);
 8004b74:	f004 fe4e 	bl	8009814 <LL_GPIO_Init>
  OPAMP_InitStruct.FunctionalMode = LL_OPAMP_MODE_FOLLOWER;
 8004b78:	2360      	movs	r3, #96	; 0x60
  LL_OPAMP_Init(OPAMP5, &OPAMP_InitStruct);
 8004b7a:	484a      	ldr	r0, [pc, #296]	; (8004ca4 <main+0xcfc>)
  OPAMP_InitStruct.FunctionalMode = LL_OPAMP_MODE_FOLLOWER;
 8004b7c:	9337      	str	r3, [sp, #220]	; 0xdc
  LL_OPAMP_Init(OPAMP5, &OPAMP_InitStruct);
 8004b7e:	a936      	add	r1, sp, #216	; 0xd8
  OPAMP_InitStruct.InputNonInverting = LL_OPAMP_INPUT_NONINVERT_IO1;
 8004b80:	f8cd a0e0 	str.w	sl, [sp, #224]	; 0xe0
  OPAMP_InitStruct.PowerMode = LL_OPAMP_POWERMODE_NORMALSPEED;
 8004b84:	9436      	str	r4, [sp, #216]	; 0xd8
  LL_OPAMP_Init(OPAMP5, &OPAMP_InitStruct);
 8004b86:	f004 ff25 	bl	80099d4 <LL_OPAMP_Init>
  MODIFY_REG(OPAMPx->TCMR, OPAMP_TCMR_T1CMEN | OPAMP_TCMR_T8CMEN | OPAMP_TCMR_T20CMEN, InputsMuxMode);
 8004b8a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  hspi4.Instance = SPI4;
 8004b8c:	4846      	ldr	r0, [pc, #280]	; (8004ca8 <main+0xd00>)
 8004b8e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004b92:	62b3      	str	r3, [r6, #40]	; 0x28
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_OPAMPINTEN, InternalOutput);
 8004b94:	6933      	ldr	r3, [r6, #16]
 8004b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b9a:	6133      	str	r3, [r6, #16]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_USERTRIM, TrimmingMode);
 8004b9c:	6933      	ldr	r3, [r6, #16]
 8004b9e:	f023 0310 	bic.w	r3, r3, #16
 8004ba2:	6133      	str	r3, [r6, #16]
 8004ba4:	4b41      	ldr	r3, [pc, #260]	; (8004cac <main+0xd04>)
 8004ba6:	6003      	str	r3, [r0, #0]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8004ba8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8004bac:	60c3      	str	r3, [r0, #12]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8004bae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bb2:	6183      	str	r3, [r0, #24]
  hspi4.Init.CRCPolynomial = 7;
 8004bb4:	2307      	movs	r3, #7
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8004bb6:	e9c0 4401 	strd	r4, r4, [r0, #4]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004bba:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8004bbe:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004bc2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bc6:	6284      	str	r4, [r0, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8004bc8:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8004bca:	f003 f9c9 	bl	8007f60 <HAL_SPI_Init>
 8004bce:	b108      	cbz	r0, 8004bd4 <main+0xc2c>
 8004bd0:	b672      	cpsid	i
  while (1)
 8004bd2:	e7fe      	b.n	8004bd2 <main+0xc2a>
  huart3.Instance = USART3;
 8004bd4:	4c36      	ldr	r4, [pc, #216]	; (8004cb0 <main+0xd08>)
  huart3.Init.BaudRate = 115200;
 8004bd6:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8004cc0 <main+0xd18>
  huart3.Init.Parity = UART_PARITY_NONE;
 8004bda:	6120      	str	r0, [r4, #16]
  huart3.Init.BaudRate = 115200;
 8004bdc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004be0:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004be4:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004be8:	e9c4 0008 	strd	r0, r0, [r4, #32]
  huart3.Init.BaudRate = 115200;
 8004bec:	e9c4 a300 	strd	sl, r3, [r4]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004bf0:	62a0      	str	r0, [r4, #40]	; 0x28
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004bf2:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004bf4:	4620      	mov	r0, r4
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004bf6:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004bf8:	f004 fc46 	bl	8009488 <HAL_UART_Init>
 8004bfc:	b108      	cbz	r0, 8004c02 <main+0xc5a>
 8004bfe:	b672      	cpsid	i
  while (1)
 8004c00:	e7fe      	b.n	8004c00 <main+0xc58>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004c02:	4601      	mov	r1, r0
 8004c04:	4620      	mov	r0, r4
 8004c06:	f004 fcb1 	bl	800956c <HAL_UARTEx_SetTxFifoThreshold>
 8004c0a:	b108      	cbz	r0, 8004c10 <main+0xc68>
 8004c0c:	b672      	cpsid	i
  while (1)
 8004c0e:	e7fe      	b.n	8004c0e <main+0xc66>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004c10:	4601      	mov	r1, r0
 8004c12:	4620      	mov	r0, r4
 8004c14:	f004 fcd4 	bl	80095c0 <HAL_UARTEx_SetRxFifoThreshold>
 8004c18:	b108      	cbz	r0, 8004c1e <main+0xc76>
 8004c1a:	b672      	cpsid	i
  while (1)
 8004c1c:	e7fe      	b.n	8004c1c <main+0xc74>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004c1e:	4620      	mov	r0, r4
 8004c20:	f004 fc86 	bl	8009530 <HAL_UARTEx_DisableFifoMode>
 8004c24:	4604      	mov	r4, r0
 8004c26:	b108      	cbz	r0, 8004c2c <main+0xc84>
 8004c28:	b672      	cpsid	i
  while (1)
 8004c2a:	e7fe      	b.n	8004c2a <main+0xc82>
  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 8004c2c:	e9cd 0036 	strd	r0, r0, [sp, #216]	; 0xd8
 8004c30:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c34:	e9cd 0040 	strd	r0, r0, [sp, #256]	; 0x100
 8004c38:	e9cd 0042 	strd	r0, r0, [sp, #264]	; 0x108
  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 8004c3c:	903a      	str	r0, [sp, #232]	; 0xe8
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  LL_GPIO_Init(NTC_MOS_ADC2_IN7_COMP3_GPIO_Port, &GPIO_InitStruct);
 8004c40:	4812      	ldr	r0, [pc, #72]	; (8004c8c <main+0xce4>)
 8004c42:	f043 0304 	orr.w	r3, r3, #4
 8004c46:	64fb      	str	r3, [r7, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c4a:	f003 0304 	and.w	r3, r3, #4
 8004c4e:	930a      	str	r3, [sp, #40]	; 0x28
 8004c50:	a93e      	add	r1, sp, #248	; 0xf8
  (void)tmpreg;
 8004c52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004c54:	e9cd 983e 	strd	r9, r8, [sp, #248]	; 0xf8
  LL_GPIO_Init(NTC_MOS_ADC2_IN7_COMP3_GPIO_Port, &GPIO_InitStruct);
 8004c58:	f004 fddc 	bl	8009814 <LL_GPIO_Init>
  COMP_InitStruct.InputMinus = LL_COMP_INPUT_MINUS_VREFINT;
 8004c5c:	4b15      	ldr	r3, [pc, #84]	; (8004cb4 <main+0xd0c>)
 8004c5e:	9337      	str	r3, [sp, #220]	; 0xdc
  COMP_InitStruct.InputPlus = LL_COMP_INPUT_PLUS_IO2;
 8004c60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c64:	9336      	str	r3, [sp, #216]	; 0xd8
  LL_COMP_Init(COMP3, &COMP_InitStruct);
 8004c66:	a936      	add	r1, sp, #216	; 0xd8
  COMP_InitStruct.InputHysteresis = LL_COMP_HYSTERESIS_30MV;
 8004c68:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  LL_COMP_Init(COMP3, &COMP_InitStruct);
 8004c6c:	4812      	ldr	r0, [pc, #72]	; (8004cb8 <main+0xd10>)
  COMP_InitStruct.InputHysteresis = LL_COMP_HYSTERESIS_30MV;
 8004c6e:	9338      	str	r3, [sp, #224]	; 0xe0
  COMP_InitStruct.OutputBlankingSource = LL_COMP_BLANKINGSRC_NONE;
 8004c70:	e9cd 4439 	strd	r4, r4, [sp, #228]	; 0xe4
  LL_COMP_Init(COMP3, &COMP_InitStruct);
 8004c74:	f004 fd5a 	bl	800972c <LL_COMP_Init>
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 8004c78:	22c8      	movs	r2, #200	; 0xc8
 8004c7a:	682b      	ldr	r3, [r5, #0]
 8004c7c:	490f      	ldr	r1, [pc, #60]	; (8004cbc <main+0xd14>)
 8004c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c82:	fb02 f303 	mul.w	r3, r2, r3
  __IO uint32_t wait_loop_index = 0;
 8004c86:	9409      	str	r4, [sp, #36]	; 0x24
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 8004c88:	9309      	str	r3, [sp, #36]	; 0x24
  while(wait_loop_index != 0)
 8004c8a:	e01e      	b.n	8004cca <main+0xd22>
 8004c8c:	48000800 	.word	0x48000800
 8004c90:	00060040 	.word	0x00060040
 8004c94:	48000400 	.word	0x48000400
 8004c98:	40010304 	.word	0x40010304
 8004c9c:	4001030c 	.word	0x4001030c
 8004ca0:	48000c00 	.word	0x48000c00
 8004ca4:	40010310 	.word	0x40010310
 8004ca8:	200112f0 	.word	0x200112f0
 8004cac:	40013c00 	.word	0x40013c00
 8004cb0:	200113a0 	.word	0x200113a0
 8004cb4:	00800030 	.word	0x00800030
 8004cb8:	40010208 	.word	0x40010208
 8004cbc:	001e8480 	.word	0x001e8480
 8004cc0:	40004800 	.word	0x40004800
    wait_loop_index--;
 8004cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	9309      	str	r3, [sp, #36]	; 0x24
  while(wait_loop_index != 0)
 8004cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1f9      	bne.n	8004cc4 <main+0xd1c>
  hfdcan1.Instance = FDCAN1;
 8004cd0:	4820      	ldr	r0, [pc, #128]	; (8004d54 <main+0xdac>)
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004cd2:	4a21      	ldr	r2, [pc, #132]	; (8004d58 <main+0xdb0>)
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8004cd4:	8203      	strh	r3, [r0, #16]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8004cd6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hfdcan1.Init.ExtFiltersNbr = 0;
 8004cda:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan1.Init.ProtocolException = DISABLE;
 8004cde:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8004ce0:	63c3      	str	r3, [r0, #60]	; 0x3c
 8004ce2:	6853      	ldr	r3, [r2, #4]
 8004ce4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004ce8:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004cea:	6813      	ldr	r3, [r2, #0]
 8004cec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004cf0:	6013      	str	r3, [r2, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV30;
 8004cf2:	4b1a      	ldr	r3, [pc, #104]	; (8004d5c <main+0xdb4>)
  hfdcan1.Init.NominalPrescaler = 1;
 8004cf4:	2701      	movs	r7, #1
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8004cf6:	f04f 0a02 	mov.w	sl, #2
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV30;
 8004cfa:	260f      	movs	r6, #15
 8004cfc:	e9c0 3600 	strd	r3, r6, [r0]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8004d00:	e9c0 7705 	strd	r7, r7, [r0, #20]
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8004d04:	e9c0 7709 	strd	r7, r7, [r0, #36]	; 0x24
  hfdcan1.Init.DataTimeSeg2 = 1;
 8004d08:	e9c0 770b 	strd	r7, r7, [r0, #44]	; 0x2c
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8004d0c:	e9c0 aa07 	strd	sl, sl, [r0, #28]
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8004d10:	f001 f86c 	bl	8005dec <HAL_FDCAN_Init>
 8004d14:	4603      	mov	r3, r0
 8004d16:	b108      	cbz	r0, 8004d1c <main+0xd74>
 8004d18:	b672      	cpsid	i
  while (1)
 8004d1a:	e7fe      	b.n	8004d1a <main+0xd72>
  hspi3.Instance = SPI3;
 8004d1c:	4810      	ldr	r0, [pc, #64]	; (8004d60 <main+0xdb8>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004d1e:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004d22:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d26:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004d2a:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d2e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Instance = SPI3;
 8004d30:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <main+0xdbc>)
 8004d32:	6003      	str	r3, [r0, #0]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8004d34:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8004d38:	60c3      	str	r3, [r0, #12]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004d3a:	f44f 7800 	mov.w	r8, #512	; 0x200
  hspi3.Init.CRCPolynomial = 7;
 8004d3e:	2307      	movs	r3, #7
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004d40:	f8c0 8018 	str.w	r8, [r0, #24]
  hspi3.Init.CRCPolynomial = 7;
 8004d44:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004d46:	f003 f90b 	bl	8007f60 <HAL_SPI_Init>
 8004d4a:	4604      	mov	r4, r0
 8004d4c:	b160      	cbz	r0, 8004d68 <main+0xdc0>
 8004d4e:	b672      	cpsid	i
  while (1)
 8004d50:	e7fe      	b.n	8004d50 <main+0xda8>
 8004d52:	bf00      	nop
 8004d54:	200110c8 	.word	0x200110c8
 8004d58:	40010400 	.word	0x40010400
 8004d5c:	40006400 	.word	0x40006400
 8004d60:	2001128c 	.word	0x2001128c
 8004d64:	40003c00 	.word	0x40003c00
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8004d68:	4601      	mov	r1, r0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004d6a:	e9cd 002b 	strd	r0, r0, [sp, #172]	; 0xac
 8004d6e:	e9cd 002d 	strd	r0, r0, [sp, #180]	; 0xb4
 8004d72:	902f      	str	r0, [sp, #188]	; 0xbc
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8004d74:	2220      	movs	r2, #32
 8004d76:	a836      	add	r0, sp, #216	; 0xd8
 8004d78:	f005 ff04 	bl	800ab84 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8004d7c:	2230      	movs	r2, #48	; 0x30
 8004d7e:	4621      	mov	r1, r4
 8004d80:	a83e      	add	r0, sp, #248	; 0xf8
 8004d82:	f005 feff 	bl	800ab84 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d86:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
 8004d8a:	e9cd 4432 	strd	r4, r4, [sp, #200]	; 0xc8
 8004d8e:	e9cd 4434 	strd	r4, r4, [sp, #208]	; 0xd0
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004d92:	4dcc      	ldr	r5, [pc, #816]	; (80050c4 <main+0x111c>)
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 8004d94:	f8df 9348 	ldr.w	r9, [pc, #840]	; 80050e0 <main+0x1138>
 8004d98:	6e2b      	ldr	r3, [r5, #96]	; 0x60
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8004d9a:	f8df b348 	ldr.w	fp, [pc, #840]	; 80050e4 <main+0x113c>
 8004d9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004da2:	662b      	str	r3, [r5, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004da4:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8004da6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004daa:	9207      	str	r2, [sp, #28]
  (void)tmpreg;
 8004dac:	9a07      	ldr	r2, [sp, #28]
 8004dae:	a92b      	add	r1, sp, #172	; 0xac
  TIM_InitStruct.Autoreload = ISO_DCDC_PERIOD;
 8004db0:	f44f 7297 	mov.w	r2, #302	; 0x12e
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 8004db4:	4648      	mov	r0, r9
  TIM_InitStruct.Autoreload = ISO_DCDC_PERIOD;
 8004db6:	922d      	str	r2, [sp, #180]	; 0xb4
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 8004db8:	f004 fe36 	bl	8009a28 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004dbc:	f8d9 2000 	ldr.w	r2, [r9]
 8004dc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dc4:	f8c9 2000 	str.w	r2, [r9]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8004dc8:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8004dcc:	ea02 020b 	and.w	r2, r2, fp
 8004dd0:	f8c9 2008 	str.w	r2, [r9, #8]
  TIM_OC_InitStruct.CompareValue = ISO_DCDC_PERIOD*ISO_DCDC_DUTY;
 8004dd4:	9639      	str	r6, [sp, #228]	; 0xe4
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004dd6:	4ebc      	ldr	r6, [pc, #752]	; (80050c8 <main+0x1120>)
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004dd8:	6871      	ldr	r1, [r6, #4]
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8004dda:	2060      	movs	r0, #96	; 0x60
 8004ddc:	f041 0108 	orr.w	r1, r1, #8
 8004de0:	6071      	str	r1, [r6, #4]
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8004de2:	aa36      	add	r2, sp, #216	; 0xd8
 8004de4:	f44f 7180 	mov.w	r1, #256	; 0x100
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8004de8:	9036      	str	r0, [sp, #216]	; 0xd8
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8004dea:	4648      	mov	r0, r9
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004dec:	e9cd 4437 	strd	r4, r4, [sp, #220]	; 0xdc
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004df0:	e9cd 443a 	strd	r4, r4, [sp, #232]	; 0xe8
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8004df4:	e9cd 443c 	strd	r4, r4, [sp, #240]	; 0xf0
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8004df8:	f004 fe7c 	bl	8009af4 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8004dfc:	6872      	ldr	r2, [r6, #4]
 8004dfe:	f022 0204 	bic.w	r2, r2, #4
 8004e02:	6072      	str	r2, [r6, #4]
  *         @arg @ref LL_TIM_TRGO_ENCODERCLK
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004e04:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004e08:	4ab0      	ldr	r2, [pc, #704]	; (80050cc <main+0x1124>)
  LL_TIM_Init(TIM20, &TIM_InitStruct);
 8004e0a:	4eb1      	ldr	r6, [pc, #708]	; (80050d0 <main+0x1128>)
 8004e0c:	4011      	ands	r1, r2
 8004e0e:	f8c9 1004 	str.w	r1, [r9, #4]
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8004e12:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004e16:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8004e1a:	f8c9 1004 	str.w	r1, [r9, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8004e1e:	f8d9 1008 	ldr.w	r1, [r9, #8]
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8004e22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e26:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004e2a:	f8c9 1008 	str.w	r1, [r9, #8]
 8004e2e:	9342      	str	r3, [sp, #264]	; 0x108
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8004e30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  LL_TIM_BDTR_Init(TIM8, &TIM_BDTRInitStruct);
 8004e34:	a93e      	add	r1, sp, #248	; 0xf8
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8004e36:	9346      	str	r3, [sp, #280]	; 0x118
  LL_TIM_BDTR_Init(TIM8, &TIM_BDTRInitStruct);
 8004e38:	4648      	mov	r0, r9
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_ENABLE;
 8004e3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e3e:	9349      	str	r3, [sp, #292]	; 0x124
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8004e40:	e9cd 443e 	strd	r4, r4, [sp, #248]	; 0xf8
  TIM_BDTRInitStruct.BreakAFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8004e44:	e9cd 4443 	strd	r4, r4, [sp, #268]	; 0x10c
  TIM_BDTRInitStruct.Break2AFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8004e48:	e9cd 4447 	strd	r4, r4, [sp, #284]	; 0x11c
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8004e4c:	9440      	str	r4, [sp, #256]	; 0x100
  TIM_BDTRInitStruct.DeadTime = 0;
 8004e4e:	f88d 4104 	strb.w	r4, [sp, #260]	; 0x104
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8004e52:	f8ad 4106 	strh.w	r4, [sp, #262]	; 0x106
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8004e56:	9445      	str	r4, [sp, #276]	; 0x114
  LL_TIM_BDTR_Init(TIM8, &TIM_BDTRInitStruct);
 8004e58:	f005 f810 	bl	8009e7c <LL_TIM_BDTR_Init>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004e5c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  LL_GPIO_Init(PWM_isoDCDC_GPIO_Port, &GPIO_InitStruct);
 8004e5e:	489d      	ldr	r0, [pc, #628]	; (80050d4 <main+0x112c>)
 8004e60:	f043 0302 	orr.w	r3, r3, #2
 8004e64:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004e66:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  GPIO_InitStruct.Pin = PWM_isoDCDC_Pin;
 8004e68:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	9308      	str	r3, [sp, #32]
  (void)tmpreg;
 8004e72:	9b08      	ldr	r3, [sp, #32]
  LL_GPIO_Init(PWM_isoDCDC_GPIO_Port, &GPIO_InitStruct);
 8004e74:	a930      	add	r1, sp, #192	; 0xc0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 8004e76:	230a      	movs	r3, #10
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004e78:	e9cd a431 	strd	sl, r4, [sp, #196]	; 0xc4
  GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 8004e7c:	9335      	str	r3, [sp, #212]	; 0xd4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004e7e:	e9cd 4433 	strd	r4, r4, [sp, #204]	; 0xcc
  LL_GPIO_Init(PWM_isoDCDC_GPIO_Port, &GPIO_InitStruct);
 8004e82:	f004 fcc7 	bl	8009814 <LL_GPIO_Init>
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004e86:	e9cd 443e 	strd	r4, r4, [sp, #248]	; 0xf8
 8004e8a:	e9cd 4441 	strd	r4, r4, [sp, #260]	; 0x104
 8004e8e:	9440      	str	r4, [sp, #256]	; 0x100
  SET_BIT(RCC->APB2ENR, Periphs);
 8004e90:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8004e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e96:	662b      	str	r3, [r5, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004e98:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8004e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e9e:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
 8004ea0:	9b06      	ldr	r3, [sp, #24]
  LL_TIM_Init(TIM20, &TIM_InitStruct);
 8004ea2:	a93e      	add	r1, sp, #248	; 0xf8
  TIM_InitStruct.Autoreload = (uint16_t)(TIM20_PERIOD);
 8004ea4:	f645 03ef 	movw	r3, #22767	; 0x58ef
  LL_TIM_Init(TIM20, &TIM_InitStruct);
 8004ea8:	4630      	mov	r0, r6
  TIM_InitStruct.Autoreload = (uint16_t)(TIM20_PERIOD);
 8004eaa:	9340      	str	r3, [sp, #256]	; 0x100
  LL_TIM_Init(TIM20, &TIM_InitStruct);
 8004eac:	f004 fdbc 	bl	8009a28 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004eb0:	6833      	ldr	r3, [r6, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004eb2:	4a86      	ldr	r2, [pc, #536]	; (80050cc <main+0x1124>)
  LL_DAC_Init(DAC2, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8004eb4:	4988      	ldr	r1, [pc, #544]	; (80050d8 <main+0x1130>)
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004eb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eba:	6033      	str	r3, [r6, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8004ebc:	68b3      	ldr	r3, [r6, #8]
 8004ebe:	ea03 030b 	and.w	r3, r3, fp
 8004ec2:	60b3      	str	r3, [r6, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004ec4:	6873      	ldr	r3, [r6, #4]
  MODIFY_REG(DACx->MCR,
 8004ec6:	f8df b220 	ldr.w	fp, [pc, #544]	; 80050e8 <main+0x1140>
 8004eca:	4013      	ands	r3, r2
 8004ecc:	f043 0310 	orr.w	r3, r3, #16
 8004ed0:	6073      	str	r3, [r6, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8004ed2:	6873      	ldr	r3, [r6, #4]
 8004ed4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ed8:	6073      	str	r3, [r6, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8004eda:	68b3      	ldr	r3, [r6, #8]
 8004edc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ee0:	60b3      	str	r3, [r6, #8]
  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 8004ee2:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
 8004ee6:	e9cd 443e 	strd	r4, r4, [sp, #248]	; 0xf8
 8004eea:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 8004eee:	9444      	str	r4, [sp, #272]	; 0x110
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004ef0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8004ef2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ef6:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004ef8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8004efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004efe:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8004f00:	9b05      	ldr	r3, [sp, #20]
 8004f02:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8004f06:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f0a:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
  LL_DAC_Init(DAC2, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8004f0e:	4658      	mov	r0, fp
 8004f10:	aa3e      	add	r2, sp, #248	; 0xf8
  DAC_InitStruct.OutputConnection = LL_DAC_OUTPUT_CONNECT_INTERNAL;
 8004f12:	e9cd a742 	strd	sl, r7, [sp, #264]	; 0x108
  LL_DAC_Init(DAC2, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8004f16:	f004 fc23 	bl	8009760 <LL_DAC_Init>
  CLEAR_BIT(DACx->CR,
 8004f1a:	f8db 3000 	ldr.w	r3, [fp]
  LL_DAC_Init(DAC3, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8004f1e:	496e      	ldr	r1, [pc, #440]	; (80050d8 <main+0x1130>)
 8004f20:	f023 0302 	bic.w	r3, r3, #2
 8004f24:	f8cb 3000 	str.w	r3, [fp]
  CLEAR_BIT(DACx->MCR,
 8004f28:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8004f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f30:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 8004f34:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
 8004f38:	e9cd 443e 	strd	r4, r4, [sp, #248]	; 0xf8
 8004f3c:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 8004f40:	9444      	str	r4, [sp, #272]	; 0x110
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004f42:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8004f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f48:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004f4a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  MODIFY_REG(DACx->MCR,
 8004f4c:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8004f50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f54:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8004f56:	9b04      	ldr	r3, [sp, #16]
 8004f58:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8004f5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f60:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
  LL_DAC_Init(DAC3, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8004f64:	4658      	mov	r0, fp
 8004f66:	aa3e      	add	r2, sp, #248	; 0xf8
  DAC_InitStruct.OutputConnection = LL_DAC_OUTPUT_CONNECT_INTERNAL;
 8004f68:	e9cd a742 	strd	sl, r7, [sp, #264]	; 0x108
  LL_DAC_Init(DAC3, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8004f6c:	f004 fbf8 	bl	8009760 <LL_DAC_Init>
  CLEAR_BIT(DACx->CR,
 8004f70:	f8db 3000 	ldr.w	r3, [fp]
  LL_DAC_Init(DAC3, LL_DAC_CHANNEL_2, &DAC_InitStruct);
 8004f74:	4959      	ldr	r1, [pc, #356]	; (80050dc <main+0x1134>)
 8004f76:	f023 0302 	bic.w	r3, r3, #2
 8004f7a:	f8cb 3000 	str.w	r3, [fp]
  CLEAR_BIT(DACx->MCR,
 8004f7e:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8004f82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f86:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
  MODIFY_REG(DACx->MCR,
 8004f8a:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8004f8e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004f92:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 8004f96:	4658      	mov	r0, fp
 8004f98:	aa3e      	add	r2, sp, #248	; 0xf8
 8004f9a:	f004 fbe1 	bl	8009760 <LL_DAC_Init>
  CLEAR_BIT(DACx->CR,
 8004f9e:	f8db 3000 	ldr.w	r3, [fp]
  LL_DAC_Init(DAC4, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8004fa2:	494d      	ldr	r1, [pc, #308]	; (80050d8 <main+0x1130>)
 8004fa4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004fa8:	f8cb 3000 	str.w	r3, [fp]
  CLEAR_BIT(DACx->MCR,
 8004fac:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8004fb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fb4:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 8004fb8:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
 8004fbc:	e9cd 443e 	strd	r4, r4, [sp, #248]	; 0xf8
 8004fc0:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 8004fc4:	9444      	str	r4, [sp, #272]	; 0x110
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004fc6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8004fc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fcc:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004fce:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8004fd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fd4:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8004fd6:	9b03      	ldr	r3, [sp, #12]
  MODIFY_REG(DACx->MCR,
 8004fd8:	f8db 343c 	ldr.w	r3, [fp, #1084]	; 0x43c
 8004fdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fe0:	f8cb 343c 	str.w	r3, [fp, #1084]	; 0x43c
 8004fe4:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
  LL_DAC_Init(DAC4, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8004fe8:	aa3e      	add	r2, sp, #248	; 0xf8
 8004fea:	4658      	mov	r0, fp
  DAC_InitStruct.OutputConnection = LL_DAC_OUTPUT_CONNECT_INTERNAL;
 8004fec:	e9cd a742 	strd	sl, r7, [sp, #264]	; 0x108
  LL_DAC_Init(DAC4, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8004ff0:	f004 fbb6 	bl	8009760 <LL_DAC_Init>
  CLEAR_BIT(DACx->CR,
 8004ff4:	f8db 3000 	ldr.w	r3, [fp]
  LL_DAC_Init(DAC4, LL_DAC_CHANNEL_2, &DAC_InitStruct);
 8004ff8:	4938      	ldr	r1, [pc, #224]	; (80050dc <main+0x1134>)
 8004ffa:	f023 0302 	bic.w	r3, r3, #2
 8004ffe:	f8cb 3000 	str.w	r3, [fp]
  CLEAR_BIT(DACx->MCR,
 8005002:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8005006:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800500a:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
  MODIFY_REG(DACx->MCR,
 800500e:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8005012:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005016:	aa3e      	add	r2, sp, #248	; 0xf8
 8005018:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 800501c:	4658      	mov	r0, fp
 800501e:	f004 fb9f 	bl	8009760 <LL_DAC_Init>
  CLEAR_BIT(DACx->CR,
 8005022:	f8db 3000 	ldr.w	r3, [fp]
 8005026:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800502a:	f8cb 3000 	str.w	r3, [fp]
  CLEAR_BIT(DACx->MCR,
 800502e:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8005032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005036:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800503a:	e9cd 442b 	strd	r4, r4, [sp, #172]	; 0xac
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800503e:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
 8005042:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
 8005046:	e9cd 443a 	strd	r4, r4, [sp, #232]	; 0xe8
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800504a:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
 800504e:	e9cd 4432 	strd	r4, r4, [sp, #200]	; 0xc8
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005052:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 8005056:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800505a:	942d      	str	r4, [sp, #180]	; 0xb4
 800505c:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8005060:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005068:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
  SET_BIT(RCC->AHB2ENR, Periphs);
 800506c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800506e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005072:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005074:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005076:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800507a:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800507c:	9b00      	ldr	r3, [sp, #0]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800507e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005080:	f043 0301 	orr.w	r3, r3, #1
 8005084:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005086:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800508e:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005090:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005092:	f043 0302 	orr.w	r3, r3, #2
 8005096:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005098:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  GPIO_InitStruct.Pin = I_PV_ADC1_IN1_Pin;
 800509a:	973e      	str	r7, [sp, #248]	; 0xf8
 800509c:	f003 0302 	and.w	r3, r3, #2
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80050a0:	f04f 0b03 	mov.w	fp, #3
 80050a4:	9302      	str	r3, [sp, #8]
  LL_GPIO_Init(I_PV_ADC1_IN1_GPIO_Port, &GPIO_InitStruct);
 80050a6:	a93e      	add	r1, sp, #248	; 0xf8
 80050a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  (void)tmpreg;
 80050ac:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80050ae:	f8cd b0fc 	str.w	fp, [sp, #252]	; 0xfc
  GPIO_InitStruct.Pin = VPV_ADC1_IN14_Pin;
 80050b2:	f44f 6a00 	mov.w	sl, #2048	; 0x800
  LL_GPIO_Init(I_PV_ADC1_IN1_GPIO_Port, &GPIO_InitStruct);
 80050b6:	f004 fbad 	bl	8009814 <LL_GPIO_Init>
  LL_GPIO_Init(VPV_ADC1_IN14_GPIO_Port, &GPIO_InitStruct);
 80050ba:	a93e      	add	r1, sp, #248	; 0xf8
 80050bc:	4805      	ldr	r0, [pc, #20]	; (80050d4 <main+0x112c>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80050be:	f8cd b0fc 	str.w	fp, [sp, #252]	; 0xfc
 80050c2:	e013      	b.n	80050ec <main+0x1144>
 80050c4:	40021000 	.word	0x40021000
 80050c8:	40013418 	.word	0x40013418
 80050cc:	fdffff8f 	.word	0xfdffff8f
 80050d0:	40015000 	.word	0x40015000
 80050d4:	48000400 	.word	0x48000400
 80050d8:	02110001 	.word	0x02110001
 80050dc:	354200f2 	.word	0x354200f2
 80050e0:	40013400 	.word	0x40013400
 80050e4:	fffebff8 	.word	0xfffebff8
 80050e8:	50000c00 	.word	0x50000c00
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80050ec:	9442      	str	r4, [sp, #264]	; 0x108
  GPIO_InitStruct.Pin = VPV_ADC1_IN14_Pin;
 80050ee:	f8cd a0f8 	str.w	sl, [sp, #248]	; 0xf8
  LL_GPIO_Init(VPV_ADC1_IN14_GPIO_Port, &GPIO_InitStruct);
 80050f2:	f004 fb8f 	bl	8009814 <LL_GPIO_Init>
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 80050f6:	4b9a      	ldr	r3, [pc, #616]	; (8005360 <main+0x13b8>)
 80050f8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 80050fc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005100:	f042 0205 	orr.w	r2, r2, #5
 8005104:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800510e:	f022 0210 	bic.w	r2, r2, #16
 8005112:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8005114:	689a      	ldr	r2, [r3, #8]
 8005116:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800511a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800511e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8005120:	689a      	ldr	r2, [r3, #8]
 8005122:	f042 0220 	orr.w	r2, r2, #32
 8005126:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800512e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8005130:	689a      	ldr	r2, [r3, #8]
 8005132:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005136:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8005138:	689a      	ldr	r2, [r3, #8]
 800513a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800513e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005142:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 800514a:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
 800514e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005152:	609a      	str	r2, [r3, #8]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8005154:	a92b      	add	r1, sp, #172	; 0xac
 8005156:	4628      	mov	r0, r5
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8005158:	e9cd 442b 	strd	r4, r4, [sp, #172]	; 0xac
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800515c:	942d      	str	r4, [sp, #180]	; 0xb4
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800515e:	f004 fa9b 	bl	8009698 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_HRTIM_TRG1;
 8005162:	f44f 63d4 	mov.w	r3, #1696	; 0x6a0
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8005166:	a936      	add	r1, sp, #216	; 0xd8
 8005168:	4628      	mov	r0, r5
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_HRTIM_TRG1;
 800516a:	9336      	str	r3, [sp, #216]	; 0xd8
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 800516c:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8005170:	9737      	str	r7, [sp, #220]	; 0xdc
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8005172:	f8cd b0e8 	str.w	fp, [sp, #232]	; 0xe8
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8005176:	943b      	str	r4, [sp, #236]	; 0xec
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8005178:	f004 faa8 	bl	80096cc <LL_ADC_REG_Init>
 800517c:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8005180:	4878      	ldr	r0, [pc, #480]	; (8005364 <main+0x13bc>)
 8005182:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005186:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800518a:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 800518e:	692b      	ldr	r3, [r5, #16]
 8005190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005194:	612b      	str	r3, [r5, #16]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8005196:	692b      	ldr	r3, [r5, #16]
 8005198:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800519c:	f023 0303 	bic.w	r3, r3, #3
 80051a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051a4:	f043 0301 	orr.w	r3, r3, #1
 80051a8:	612b      	str	r3, [r5, #16]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | Ratio));
 80051aa:	692b      	ldr	r3, [r5, #16]
 80051ac:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 80051b0:	f043 0320 	orr.w	r3, r3, #32
 80051b4:	612b      	str	r3, [r5, #16]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TROVS, OverSamplingDiscont);
 80051b6:	692b      	ldr	r3, [r5, #16]
 80051b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051bc:	612b      	str	r3, [r5, #16]
 80051be:	a930      	add	r1, sp, #192	; 0xc0
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80051c0:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80051c4:	f004 fa26 	bl	8009614 <LL_ADC_CommonInit>
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
 80051c8:	68eb      	ldr	r3, [r5, #12]
  hspi1.Instance = SPI1;
 80051ca:	4867      	ldr	r0, [pc, #412]	; (8005368 <main+0x13c0>)
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80051cc:	4a67      	ldr	r2, [pc, #412]	; (800536c <main+0x13c4>)
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
 80051ce:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80051d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051d6:	60eb      	str	r3, [r5, #12]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80051d8:	68ab      	ldr	r3, [r5, #8]
 80051da:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80051de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80051e2:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(ADCx->CR,
 80051e4:	68ab      	ldr	r3, [r5, #8]
 80051e6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80051ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80051ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f2:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(*preg,
 80051f4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80051f6:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 80051fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051fe:	632b      	str	r3, [r5, #48]	; 0x30
  MODIFY_REG(*preg,
 8005200:	696b      	ldr	r3, [r5, #20]
 8005202:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8005206:	f043 0310 	orr.w	r3, r3, #16
 800520a:	616b      	str	r3, [r5, #20]
    CLEAR_BIT(ADCx->DIFSEL,
 800520c:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8005210:	f023 0302 	bic.w	r3, r3, #2
 8005214:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
  MODIFY_REG(*preg,
 8005218:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800521a:	f423 33f8 	bic.w	r3, r3, #126976	; 0x1f000
 800521e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005222:	632b      	str	r3, [r5, #48]	; 0x30
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005224:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005228:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800522c:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
  hspi1.Init.CRCPolynomial = 7;
 8005230:	2307      	movs	r3, #7
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005232:	f8c0 8018 	str.w	r8, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8005236:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005238:	6084      	str	r4, [r0, #8]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800523a:	6284      	str	r4, [r0, #40]	; 0x28
  MODIFY_REG(*preg,
 800523c:	6853      	ldr	r3, [r2, #4]
 800523e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005242:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005246:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(ADCx->DIFSEL,
 8005248:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800524c:	4a48      	ldr	r2, [pc, #288]	; (8005370 <main+0x13c8>)
 800524e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005252:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
 8005256:	f44f 7382 	mov.w	r3, #260	; 0x104
 800525a:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800525e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8005262:	2338      	movs	r3, #56	; 0x38
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005264:	60c2      	str	r2, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8005266:	61c3      	str	r3, [r0, #28]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005268:	f002 fe7a 	bl	8007f60 <HAL_SPI_Init>
 800526c:	b108      	cbz	r0, 8005272 <main+0x12ca>
 800526e:	b672      	cpsid	i
  while (1)
 8005270:	e7fe      	b.n	8005270 <main+0x12c8>
  if (MX_FATFS_Init() != APP_OK) {
 8005272:	f004 fe4b 	bl	8009f0c <MX_FATFS_Init>
 8005276:	b108      	cbz	r0, 800527c <main+0x12d4>
 8005278:	b672      	cpsid	i
  while (1)
 800527a:	e7fe      	b.n	800527a <main+0x12d2>
  TIM20->CCER |= TIM_CCER_CC2E; ////ENABLE CHANNEL 2
 800527c:	6a33      	ldr	r3, [r6, #32]
   OPAMP1->CSR |=OPAMP_CSR_OPAMPxEN; //OPAMP1 ENABLE   - PV CURRENT OPAMP
 800527e:	4a3d      	ldr	r2, [pc, #244]	; (8005374 <main+0x13cc>)
  TIM20->CCER |= TIM_CCER_CC2E; ////ENABLE CHANNEL 2
 8005280:	f043 0310 	orr.w	r3, r3, #16
 8005284:	6233      	str	r3, [r6, #32]
  TIM20->CCER |= TIM_CCER_CC2NE; ////ENABLE CHANNEL 2N
 8005286:	6a33      	ldr	r3, [r6, #32]
 8005288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800528c:	6233      	str	r3, [r6, #32]
  TIM20->CR1  |= (TIM_CR1_ARPE | TIM_CR1_CEN); // ENABLE AUTORELOAD PRELOAD AND TIMER COUNTER
 800528e:	6833      	ldr	r3, [r6, #0]
 8005290:	f043 0381 	orr.w	r3, r3, #129	; 0x81
 8005294:	6033      	str	r3, [r6, #0]
  TIM20->BDTR |= TIM_BDTR_MOE; //ENABLE ALL OUTPUTS
 8005296:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8005298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800529c:	6473      	str	r3, [r6, #68]	; 0x44
   OPAMP1->CSR |=OPAMP_CSR_OPAMPxEN; //OPAMP1 ENABLE   - PV CURRENT OPAMP
 800529e:	6811      	ldr	r1, [r2, #0]
   DAC1 ->DHR12R1 = (uint32_t)0X800; //DAC1 CHANNEL 1 SET VALUE //1.25V
 80052a0:	4b35      	ldr	r3, [pc, #212]	; (8005378 <main+0x13d0>)
   OPAMP1->CSR |=OPAMP_CSR_OPAMPxEN; //OPAMP1 ENABLE   - PV CURRENT OPAMP
 80052a2:	f041 0101 	orr.w	r1, r1, #1
 80052a6:	6011      	str	r1, [r2, #0]
   OPAMP4->CSR |=OPAMP_CSR_OPAMPxEN; //OPAMP4 ENABLE   - PV VOLTAGE OPAMP
 80052a8:	68d1      	ldr	r1, [r2, #12]
 80052aa:	f041 0101 	orr.w	r1, r1, #1
 80052ae:	60d1      	str	r1, [r2, #12]
   DAC1 ->DHR12R1 = (uint32_t)0X800; //DAC1 CHANNEL 1 SET VALUE //1.25V
 80052b0:	f8c3 a008 	str.w	sl, [r3, #8]
   DAC1->CR |= DAC_CR_EN1; //ENABLE DAC1 CHANNEL 1
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	f042 0201 	orr.w	r2, r2, #1
 80052ba:	601a      	str	r2, [r3, #0]
   while(!(DAC1->SR & DAC_SR_DAC1RDY)); //WAIT UNTIL DAC1 CHANNEL 1 IS READY
 80052bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052be:	0516      	lsls	r6, r2, #20
 80052c0:	d5fc      	bpl.n	80052bc <main+0x1314>
   DAC1 ->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 80052c2:	685a      	ldr	r2, [r3, #4]
   DAC1 ->DHR12R2 = (uint32_t)0XEFF; //DAC1 CHANNEL 2 SET VALUE // 11.3A
 80052c4:	f640 61ff 	movw	r1, #3839	; 0xeff
   DAC1 ->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 80052c8:	f042 0201 	orr.w	r2, r2, #1
 80052cc:	605a      	str	r2, [r3, #4]
   DAC1 ->DHR12R2 = (uint32_t)0XEFF; //DAC1 CHANNEL 2 SET VALUE // 11.3A
 80052ce:	6159      	str	r1, [r3, #20]
   DAC1->CR |= DAC_CR_EN2; //ENABLE DAC1 CHANNEL 2
 80052d0:	6819      	ldr	r1, [r3, #0]
   while(!(DAC1->SR & DAC_SR_DAC2RDY)); //WAIT UNTIL DAC1 CHANNEL 2 IS READY
 80052d2:	4a29      	ldr	r2, [pc, #164]	; (8005378 <main+0x13d0>)
   DAC1->CR |= DAC_CR_EN2; //ENABLE DAC1 CHANNEL 2
 80052d4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80052d8:	6019      	str	r1, [r3, #0]
   while(!(DAC1->SR & DAC_SR_DAC2RDY)); //WAIT UNTIL DAC1 CHANNEL 2 IS READY
 80052da:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80052dc:	011d      	lsls	r5, r3, #4
 80052de:	d5fc      	bpl.n	80052da <main+0x1332>
   DAC1 ->SWTRIGR |= DAC_SWTRIGR_SWTRIG2;
 80052e0:	6853      	ldr	r3, [r2, #4]
   DAC3 ->DHR12R1 = (uint32_t)(OVERCURRENT_MID - OVERCURRENT_THS); //DAC3 CHANNEL 2 SET VALUE
 80052e2:	4826      	ldr	r0, [pc, #152]	; (800537c <main+0x13d4>)
 80052e4:	4926      	ldr	r1, [pc, #152]	; (8005380 <main+0x13d8>)
   DAC1 ->SWTRIGR |= DAC_SWTRIGR_SWTRIG2;
 80052e6:	f043 0302 	orr.w	r3, r3, #2
 80052ea:	6053      	str	r3, [r2, #4]
   DAC3 ->DHR12R1 = (uint32_t)(OVERCURRENT_MID - OVERCURRENT_THS); //DAC3 CHANNEL 2 SET VALUE
 80052ec:	8802      	ldrh	r2, [r0, #0]
 80052ee:	8808      	ldrh	r0, [r1, #0]
 80052f0:	4b24      	ldr	r3, [pc, #144]	; (8005384 <main+0x13dc>)
 80052f2:	1a11      	subs	r1, r2, r0
 80052f4:	6099      	str	r1, [r3, #8]
   DAC3->CR |= DAC_CR_EN1; //ENABLE DAC1 CHANNEL 1
 80052f6:	6819      	ldr	r1, [r3, #0]
 80052f8:	f041 0101 	orr.w	r1, r1, #1
 80052fc:	6019      	str	r1, [r3, #0]
   while(!(DAC3->SR & DAC_SR_DAC1RDY)); //WAIT UNTIL DAC3 IS READY
 80052fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005300:	050c      	lsls	r4, r1, #20
 8005302:	d5fc      	bpl.n	80052fe <main+0x1356>
   DAC3 ->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 8005304:	6859      	ldr	r1, [r3, #4]
   DAC3 ->DHR12R2 = (uint32_t)(OVERCURRENT_MID + OVERCURRENT_THS); //DAC3 CHANNEL 2 SET VALUE // 70% max val
 8005306:	4402      	add	r2, r0
   DAC3 ->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 8005308:	f041 0101 	orr.w	r1, r1, #1
 800530c:	6059      	str	r1, [r3, #4]
   DAC3 ->DHR12R2 = (uint32_t)(OVERCURRENT_MID + OVERCURRENT_THS); //DAC3 CHANNEL 2 SET VALUE // 70% max val
 800530e:	615a      	str	r2, [r3, #20]
   DAC3->CR |= DAC_CR_EN2; //ENABLE DAC3 CHANNEL 2
 8005310:	6819      	ldr	r1, [r3, #0]
   while(!(DAC3->SR & DAC_SR_DAC2RDY)); //WAIT UNTIL DAC3 CHANNEL 2 IS READY
 8005312:	4a1c      	ldr	r2, [pc, #112]	; (8005384 <main+0x13dc>)
   DAC3->CR |= DAC_CR_EN2; //ENABLE DAC3 CHANNEL 2
 8005314:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8005318:	6019      	str	r1, [r3, #0]
   while(!(DAC3->SR & DAC_SR_DAC2RDY)); //WAIT UNTIL DAC3 CHANNEL 2 IS READY
 800531a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800531c:	0119      	lsls	r1, r3, #4
 800531e:	d5fc      	bpl.n	800531a <main+0x1372>
   DAC3 ->SWTRIGR |= DAC_SWTRIGR_SWTRIG2;
 8005320:	6851      	ldr	r1, [r2, #4]
   DAC2 ->DHR12R1 = (uint32_t)0XFF0; //0XF20 DAC2 CHANNEL 1 SET VALUE //1.73V
 8005322:	4b19      	ldr	r3, [pc, #100]	; (8005388 <main+0x13e0>)
   DAC3 ->SWTRIGR |= DAC_SWTRIGR_SWTRIG2;
 8005324:	f041 0102 	orr.w	r1, r1, #2
   DAC2 ->DHR12R1 = (uint32_t)0XFF0; //0XF20 DAC2 CHANNEL 1 SET VALUE //1.73V
 8005328:	f44f 607f 	mov.w	r0, #4080	; 0xff0
   DAC3 ->SWTRIGR |= DAC_SWTRIGR_SWTRIG2;
 800532c:	6051      	str	r1, [r2, #4]
   DAC2 ->DHR12R1 = (uint32_t)0XFF0; //0XF20 DAC2 CHANNEL 1 SET VALUE //1.73V
 800532e:	6098      	str	r0, [r3, #8]
   DAC2->CR |= DAC_CR_EN1; //ENABLE DAC2 CHANNEL 1
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	f042 0201 	orr.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]
   while(!(DAC2->SR & DAC_SR_DAC1RDY)); //WAIT UNTIL DAC2 CHANNEL 1 IS READY
 8005338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800533a:	0512      	lsls	r2, r2, #20
 800533c:	d5fc      	bpl.n	8005338 <main+0x1390>
   DAC2 ->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 800533e:	685a      	ldr	r2, [r3, #4]
   InitControl(OpenLoop);
 8005340:	2001      	movs	r0, #1
   DAC2 ->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 8005342:	4302      	orrs	r2, r0
 8005344:	605a      	str	r2, [r3, #4]
   InitControl(OpenLoop);
 8005346:	f7fc f8d3 	bl	80014f0 <InitControl>
   DS_SendCommand(DS_Start);
 800534a:	2000      	movs	r0, #0
 800534c:	f7fe f99e 	bl	800368c <DS_SendCommand>
   HRTIM1_COMMON->OENR |=HRTIM_OENR_TE2OEN; //TIME OUTPUT 2 ENABLE
 8005350:	4a0e      	ldr	r2, [pc, #56]	; (800538c <main+0x13e4>)
 8005352:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005356:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800535a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  while (1)
 800535e:	e7fe      	b.n	800535e <main+0x13b6>
 8005360:	40020000 	.word	0x40020000
 8005364:	50000300 	.word	0x50000300
 8005368:	20011228 	.word	0x20011228
 800536c:	50000014 	.word	0x50000014
 8005370:	40013000 	.word	0x40013000
 8005374:	40010300 	.word	0x40010300
 8005378:	50000800 	.word	0x50000800
 800537c:	20000028 	.word	0x20000028
 8005380:	2000002a 	.word	0x2000002a
 8005384:	50001000 	.word	0x50001000
 8005388:	50000c00 	.word	0x50000c00
 800538c:	40016b00 	.word	0x40016b00

08005390 <delay_us>:
{
 8005390:	b082      	sub	sp, #8
  for (num = 0; num < delay_us; num++)
 8005392:	2300      	movs	r3, #0
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	9b00      	ldr	r3, [sp, #0]
 8005398:	4298      	cmp	r0, r3
 800539a:	d90f      	bls.n	80053bc <delay_us+0x2c>
    t = 11;
 800539c:	220b      	movs	r2, #11
 800539e:	9201      	str	r2, [sp, #4]
    while (t != 0)
 80053a0:	9b01      	ldr	r3, [sp, #4]
 80053a2:	b12b      	cbz	r3, 80053b0 <delay_us+0x20>
      t--;
 80053a4:	9b01      	ldr	r3, [sp, #4]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	9301      	str	r3, [sp, #4]
    while (t != 0)
 80053aa:	9b01      	ldr	r3, [sp, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1f9      	bne.n	80053a4 <delay_us+0x14>
  for (num = 0; num < delay_us; num++)
 80053b0:	9b00      	ldr	r3, [sp, #0]
 80053b2:	3301      	adds	r3, #1
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	9b00      	ldr	r3, [sp, #0]
 80053b8:	4283      	cmp	r3, r0
 80053ba:	d3f0      	bcc.n	800539e <delay_us+0xe>
}
 80053bc:	b002      	add	sp, #8
 80053be:	4770      	bx	lr

080053c0 <Error_Handler>:
 80053c0:	b672      	cpsid	i
  while (1)
 80053c2:	e7fe      	b.n	80053c2 <Error_Handler+0x2>

080053c4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053c4:	4b0b      	ldr	r3, [pc, #44]	; (80053f4 <HAL_MspInit+0x30>)
 80053c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053c8:	f042 0201 	orr.w	r2, r2, #1
 80053cc:	661a      	str	r2, [r3, #96]	; 0x60
 80053ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80053d0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053d2:	f002 0201 	and.w	r2, r2, #1
 80053d6:	9200      	str	r2, [sp, #0]
 80053d8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80053da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80053dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80053e0:	659a      	str	r2, [r3, #88]	; 0x58
 80053e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053e8:	9301      	str	r3, [sp, #4]
 80053ea:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053ec:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 80053ee:	f002 bc67 	b.w	8007cc0 <HAL_PWREx_DisableUCPDDeadBattery>
 80053f2:	bf00      	nop
 80053f4:	40021000 	.word	0x40021000

080053f8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80053f8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hfdcan->Instance==FDCAN1)
 80053fa:	4a1b      	ldr	r2, [pc, #108]	; (8005468 <HAL_FDCAN_MspInit+0x70>)
 80053fc:	6801      	ldr	r1, [r0, #0]
{
 80053fe:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005400:	2300      	movs	r3, #0
  if(hfdcan->Instance==FDCAN1)
 8005402:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005404:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8005408:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800540c:	9307      	str	r3, [sp, #28]
  if(hfdcan->Instance==FDCAN1)
 800540e:	d001      	beq.n	8005414 <HAL_FDCAN_MspInit+0x1c>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8005410:	b008      	add	sp, #32
 8005412:	bd10      	pop	{r4, pc}
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_FDCANSEL, FDCANxSource);
 8005414:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005418:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800541c:	2003      	movs	r0, #3
 800541e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005422:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005426:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800542a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800542e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005430:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005434:	659a      	str	r2, [r3, #88]	; 0x58
 8005436:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005438:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800543c:	9201      	str	r2, [sp, #4]
 800543e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005440:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005442:	f042 0208 	orr.w	r2, r2, #8
 8005446:	64da      	str	r2, [r3, #76]	; 0x4c
 8005448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800544a:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800544c:	f003 0308 	and.w	r3, r3, #8
 8005450:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005452:	4806      	ldr	r0, [pc, #24]	; (800546c <HAL_FDCAN_MspInit+0x74>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005454:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8005456:	2309      	movs	r3, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005458:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800545a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800545c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800545e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005460:	f000 fdfe 	bl	8006060 <HAL_GPIO_Init>
}
 8005464:	b008      	add	sp, #32
 8005466:	bd10      	pop	{r4, pc}
 8005468:	40006400 	.word	0x40006400
 800546c:	48000c00 	.word	0x48000c00

08005470 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8005470:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hhrtim->Instance==HRTIM1)
 8005472:	4b39      	ldr	r3, [pc, #228]	; (8005558 <HAL_HRTIM_MspInit+0xe8>)
 8005474:	6802      	ldr	r2, [r0, #0]
{
 8005476:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005478:	2400      	movs	r4, #0
  if(hhrtim->Instance==HRTIM1)
 800547a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800547c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005480:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8005484:	9407      	str	r4, [sp, #28]
  if(hhrtim->Instance==HRTIM1)
 8005486:	d001      	beq.n	800548c <HAL_HRTIM_MspInit+0x1c>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8005488:	b008      	add	sp, #32
 800548a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 800548c:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
 8005490:	4605      	mov	r5, r0
 8005492:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    hdma_hrtim1_d.Instance = DMA1_Channel7;
 8005494:	4e31      	ldr	r6, [pc, #196]	; (800555c <HAL_HRTIM_MspInit+0xec>)
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8005496:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800549a:	661a      	str	r2, [r3, #96]	; 0x60
 800549c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800549e:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80054a2:	9201      	str	r2, [sp, #4]
 80054a4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054a8:	f042 0201 	orr.w	r2, r2, #1
 80054ac:	64da      	str	r2, [r3, #76]	; 0x4c
 80054ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80054b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ba:	9303      	str	r3, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054bc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054be:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054c6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80054c8:	230d      	movs	r3, #13
 80054ca:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054cc:	f000 fdc8 	bl	8006060 <HAL_GPIO_Init>
    hdma_hrtim1_d.Init.Request = DMA_REQUEST_HRTIM1_D;
 80054d0:	4a23      	ldr	r2, [pc, #140]	; (8005560 <HAL_HRTIM_MspInit+0xf0>)
 80054d2:	2363      	movs	r3, #99	; 0x63
 80054d4:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_hrtim1_d.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80054d8:	2210      	movs	r2, #16
    hdma_hrtim1_d.Init.MemInc = DMA_MINC_ENABLE;
 80054da:	2380      	movs	r3, #128	; 0x80
    hdma_hrtim1_d.Init.PeriphInc = DMA_PINC_DISABLE;
 80054dc:	e9c6 2402 	strd	r2, r4, [r6, #8]
    hdma_hrtim1_d.Init.MemInc = DMA_MINC_ENABLE;
 80054e0:	6133      	str	r3, [r6, #16]
    hdma_hrtim1_d.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80054e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054ea:	e9c6 2305 	strd	r2, r3, [r6, #20]
    if (HAL_DMA_Init(&hdma_hrtim1_d) != HAL_OK)
 80054ee:	4630      	mov	r0, r6
    hdma_hrtim1_d.Init.Mode = DMA_CIRCULAR;
 80054f0:	2320      	movs	r3, #32
    hdma_hrtim1_d.Init.Priority = DMA_PRIORITY_LOW;
 80054f2:	e9c6 3407 	strd	r3, r4, [r6, #28]
    if (HAL_DMA_Init(&hdma_hrtim1_d) != HAL_OK)
 80054f6:	f000 fb4d 	bl	8005b94 <HAL_DMA_Init>
 80054fa:	bb38      	cbnz	r0, 800554c <HAL_HRTIM_MspInit+0xdc>
    hdma_hrtim1_f.Instance = DMA1_Channel8;
 80054fc:	4c19      	ldr	r4, [pc, #100]	; (8005564 <HAL_HRTIM_MspInit+0xf4>)
 80054fe:	491a      	ldr	r1, [pc, #104]	; (8005568 <HAL_HRTIM_MspInit+0xf8>)
    __HAL_LINKDMA(hhrtim,hdmaTimerD,hdma_hrtim1_d);
 8005500:	f8c5 60f0 	str.w	r6, [r5, #240]	; 0xf0
    hdma_hrtim1_f.Init.Request = DMA_REQUEST_HRTIM1_F;
 8005504:	2265      	movs	r2, #101	; 0x65
 8005506:	e9c4 1200 	strd	r1, r2, [r4]
    hdma_hrtim1_f.Init.PeriphInc = DMA_PINC_DISABLE;
 800550a:	2300      	movs	r3, #0
    hdma_hrtim1_f.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800550c:	2110      	movs	r1, #16
    hdma_hrtim1_f.Init.MemInc = DMA_MINC_ENABLE;
 800550e:	2280      	movs	r2, #128	; 0x80
    hdma_hrtim1_f.Init.PeriphInc = DMA_PINC_DISABLE;
 8005510:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_hrtim1_f.Init.MemInc = DMA_MINC_ENABLE;
 8005514:	6122      	str	r2, [r4, #16]
    hdma_hrtim1_f.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005516:	f44f 7100 	mov.w	r1, #512	; 0x200
 800551a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800551e:	e9c4 1205 	strd	r1, r2, [r4, #20]
    if (HAL_DMA_Init(&hdma_hrtim1_f) != HAL_OK)
 8005522:	4620      	mov	r0, r4
    hdma_hrtim1_f.Init.Mode = DMA_CIRCULAR;
 8005524:	2220      	movs	r2, #32
    hdma_hrtim1_f.Init.Priority = DMA_PRIORITY_LOW;
 8005526:	e9c4 2307 	strd	r2, r3, [r4, #28]
    __HAL_LINKDMA(hhrtim,hdmaTimerD,hdma_hrtim1_d);
 800552a:	62b5      	str	r5, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_hrtim1_f) != HAL_OK)
 800552c:	f000 fb32 	bl	8005b94 <HAL_DMA_Init>
 8005530:	b978      	cbnz	r0, 8005552 <HAL_HRTIM_MspInit+0xe2>
    HAL_NVIC_SetPriority(HRTIM1_TIMF_IRQn, 0, 0);
 8005532:	2200      	movs	r2, #0
 8005534:	4611      	mov	r1, r2
 8005536:	204a      	movs	r0, #74	; 0x4a
    __HAL_LINKDMA(hhrtim,hdmaTimerF,hdma_hrtim1_f);
 8005538:	f8c5 40f8 	str.w	r4, [r5, #248]	; 0xf8
 800553c:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(HRTIM1_TIMF_IRQn, 0, 0);
 800553e:	f000 fac3 	bl	8005ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMF_IRQn);
 8005542:	204a      	movs	r0, #74	; 0x4a
 8005544:	f000 fafe 	bl	8005b44 <HAL_NVIC_EnableIRQ>
}
 8005548:	b008      	add	sp, #32
 800554a:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800554c:	f7ff ff38 	bl	80053c0 <Error_Handler>
 8005550:	e7d4      	b.n	80054fc <HAL_HRTIM_MspInit+0x8c>
      Error_Handler();
 8005552:	f7ff ff35 	bl	80053c0 <Error_Handler>
 8005556:	e7ec      	b.n	8005532 <HAL_HRTIM_MspInit+0xc2>
 8005558:	40016800 	.word	0x40016800
 800555c:	20010e88 	.word	0x20010e88
 8005560:	40020080 	.word	0x40020080
 8005564:	20010ee8 	.word	0x20010ee8
 8005568:	40020094 	.word	0x40020094

0800556c <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 800556c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hhrtim->Instance==HRTIM1)
 800556e:	4b2d      	ldr	r3, [pc, #180]	; (8005624 <HAL_HRTIM_MspPostInit+0xb8>)
 8005570:	6802      	ldr	r2, [r0, #0]
{
 8005572:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005574:	2400      	movs	r4, #0
  if(hhrtim->Instance==HRTIM1)
 8005576:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005578:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800557c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8005580:	9407      	str	r4, [sp, #28]
  if(hhrtim->Instance==HRTIM1)
 8005582:	d001      	beq.n	8005588 <HAL_HRTIM_MspPostInit+0x1c>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8005584:	b009      	add	sp, #36	; 0x24
 8005586:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005588:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800558c:	2503      	movs	r5, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800558e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005590:	4825      	ldr	r0, [pc, #148]	; (8005628 <HAL_HRTIM_MspPostInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005592:	f042 0202 	orr.w	r2, r2, #2
 8005596:	64da      	str	r2, [r3, #76]	; 0x4c
 8005598:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800559a:	f002 0202 	and.w	r2, r2, #2
 800559e:	9200      	str	r2, [sp, #0]
 80055a0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80055a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055a4:	f042 0204 	orr.w	r2, r2, #4
 80055a8:	64da      	str	r2, [r3, #76]	; 0x4c
 80055aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055ac:	f002 0204 	and.w	r2, r2, #4
 80055b0:	9201      	str	r2, [sp, #4]
 80055b2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055b6:	f042 0201 	orr.w	r2, r2, #1
 80055ba:	64da      	str	r2, [r3, #76]	; 0x4c
 80055bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055be:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055c0:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055c4:	2602      	movs	r6, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055c6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80055c8:	270d      	movs	r7, #13
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055ca:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80055cc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80055d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055d2:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055d4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80055d6:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055d8:	f000 fd42 	bl	8006060 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055dc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80055de:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055e0:	4812      	ldr	r0, [pc, #72]	; (800562c <HAL_HRTIM_MspPostInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80055e2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e4:	e9cd 6404 	strd	r6, r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80055e8:	e9cd 5706 	strd	r5, r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055ec:	f000 fd38 	bl	8006060 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055f0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80055f2:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055f6:	480d      	ldr	r0, [pc, #52]	; (800562c <HAL_HRTIM_MspPostInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80055f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055fa:	e9cd 6404 	strd	r6, r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_HRTIM1;
 80055fe:	e9cd 5506 	strd	r5, r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005602:	f000 fd2d 	bl	8006060 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8005606:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800560a:	a903      	add	r1, sp, #12
 800560c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005610:	e9cd 4505 	strd	r4, r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005614:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8005616:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8005618:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800561a:	f000 fd21 	bl	8006060 <HAL_GPIO_Init>
}
 800561e:	b009      	add	sp, #36	; 0x24
 8005620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005622:	bf00      	nop
 8005624:	40016800 	.word	0x40016800
 8005628:	48000400 	.word	0x48000400
 800562c:	48000800 	.word	0x48000800

08005630 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 8005634:	6803      	ldr	r3, [r0, #0]
 8005636:	4a76      	ldr	r2, [pc, #472]	; (8005810 <HAL_SPI_MspInit+0x1e0>)
{
 8005638:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800563a:	2400      	movs	r4, #0
  if(hspi->Instance==SPI1)
 800563c:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800563e:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8005642:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8005646:	940b      	str	r4, [sp, #44]	; 0x2c
  if(hspi->Instance==SPI1)
 8005648:	d00a      	beq.n	8005660 <HAL_SPI_MspInit+0x30>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 800564a:	4a72      	ldr	r2, [pc, #456]	; (8005814 <HAL_SPI_MspInit+0x1e4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	4605      	mov	r5, r0
 8005650:	d02a      	beq.n	80056a8 <HAL_SPI_MspInit+0x78>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
  else if(hspi->Instance==SPI4)
 8005652:	4a71      	ldr	r2, [pc, #452]	; (8005818 <HAL_SPI_MspInit+0x1e8>)
 8005654:	4293      	cmp	r3, r2
 8005656:	f000 8097 	beq.w	8005788 <HAL_SPI_MspInit+0x158>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800565a:	b00c      	add	sp, #48	; 0x30
 800565c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005660:	4b6e      	ldr	r3, [pc, #440]	; (800581c <HAL_SPI_MspInit+0x1ec>)
 8005662:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005664:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005668:	661a      	str	r2, [r3, #96]	; 0x60
 800566a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800566c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005670:	9200      	str	r2, [sp, #0]
 8005672:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005674:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005676:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800567a:	64da      	str	r2, [r3, #76]	; 0x4c
 800567c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800567e:	201c      	movs	r0, #28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005684:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005686:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005688:	eb0d 0100 	add.w	r1, sp, r0
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800568c:	9007      	str	r0, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800568e:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005690:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005692:	4863      	ldr	r0, [pc, #396]	; (8005820 <HAL_SPI_MspInit+0x1f0>)
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005694:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005696:	e9cd 4208 	strd	r4, r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800569a:	e9cd 430a 	strd	r4, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800569e:	f000 fcdf 	bl	8006060 <HAL_GPIO_Init>
}
 80056a2:	b00c      	add	sp, #48	; 0x30
 80056a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 80056a8:	4b5c      	ldr	r3, [pc, #368]	; (800581c <HAL_SPI_MspInit+0x1ec>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056aa:	485e      	ldr	r0, [pc, #376]	; (8005824 <HAL_SPI_MspInit+0x1f4>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80056ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_spi3_rx.Instance = DMA1_Channel4;
 80056ae:	4e5e      	ldr	r6, [pc, #376]	; (8005828 <HAL_SPI_MspInit+0x1f8>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80056b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056b4:	659a      	str	r2, [r3, #88]	; 0x58
 80056b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80056b8:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80056bc:	9202      	str	r2, [sp, #8]
 80056be:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80056c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056c2:	f042 0204 	orr.w	r2, r2, #4
 80056c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80056c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056ca:	f002 0204 	and.w	r2, r2, #4
 80056ce:	9203      	str	r2, [sp, #12]
 80056d0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80056d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80056da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056e0:	2702      	movs	r7, #2
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80056e2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80056e4:	f04f 0806 	mov.w	r8, #6
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80056e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056ec:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80056ee:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80056f0:	e9cd 780a 	strd	r7, r8, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80056f4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056f6:	9708      	str	r7, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056f8:	f000 fcb2 	bl	8006060 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80056fc:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005700:	4847      	ldr	r0, [pc, #284]	; (8005820 <HAL_SPI_MspInit+0x1f0>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005702:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005704:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005706:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800570a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800570c:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800570e:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005710:	f000 fca6 	bl	8006060 <HAL_GPIO_Init>
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8005714:	4a45      	ldr	r2, [pc, #276]	; (800582c <HAL_SPI_MspInit+0x1fc>)
 8005716:	230e      	movs	r3, #14
 8005718:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800571c:	2380      	movs	r3, #128	; 0x80
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800571e:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005722:	6133      	str	r3, [r6, #16]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005728:	e9c6 1305 	strd	r1, r3, [r6, #20]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 800572c:	2220      	movs	r2, #32
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800572e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8005732:	4630      	mov	r0, r6
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005734:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005738:	e9c6 2307 	strd	r2, r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800573c:	f000 fa2a 	bl	8005b94 <HAL_DMA_Init>
 8005740:	2800      	cmp	r0, #0
 8005742:	d15f      	bne.n	8005804 <HAL_SPI_MspInit+0x1d4>
    hdma_spi3_tx.Instance = DMA1_Channel6;
 8005744:	4c3a      	ldr	r4, [pc, #232]	; (8005830 <HAL_SPI_MspInit+0x200>)
 8005746:	4b3b      	ldr	r3, [pc, #236]	; (8005834 <HAL_SPI_MspInit+0x204>)
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8005748:	65ae      	str	r6, [r5, #88]	; 0x58
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 800574a:	210f      	movs	r1, #15
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 800574c:	62b5      	str	r5, [r6, #40]	; 0x28
    hdma_spi4_tx.Instance = DMA1_Channel3;
 800574e:	6023      	str	r3, [r4, #0]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005750:	2310      	movs	r3, #16
 8005752:	e9c4 1301 	strd	r1, r3, [r4, #4]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005756:	2200      	movs	r2, #0
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005758:	2380      	movs	r3, #128	; 0x80
 800575a:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800575e:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005766:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hdma_spi4_tx.Init.Mode = DMA_CIRCULAR;
 800576a:	2220      	movs	r2, #32
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800576c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005770:	e9c4 2307 	strd	r2, r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8005774:	4620      	mov	r0, r4
 8005776:	f000 fa0d 	bl	8005b94 <HAL_DMA_Init>
 800577a:	2800      	cmp	r0, #0
 800577c:	d13f      	bne.n	80057fe <HAL_SPI_MspInit+0x1ce>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 800577e:	656c      	str	r4, [r5, #84]	; 0x54
 8005780:	62a5      	str	r5, [r4, #40]	; 0x28
}
 8005782:	b00c      	add	sp, #48	; 0x30
 8005784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005788:	4b24      	ldr	r3, [pc, #144]	; (800581c <HAL_SPI_MspInit+0x1ec>)
    hdma_spi4_rx.Instance = DMA1_Channel2;
 800578a:	4e2b      	ldr	r6, [pc, #172]	; (8005838 <HAL_SPI_MspInit+0x208>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 800578c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800578e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005792:	661a      	str	r2, [r3, #96]	; 0x60
 8005794:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005796:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800579a:	9205      	str	r2, [sp, #20]
 800579c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800579e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057a0:	f042 0210 	orr.w	r2, r2, #16
 80057a4:	64da      	str	r2, [r3, #76]	; 0x4c
 80057a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057a8:	f003 0310 	and.w	r3, r3, #16
 80057ac:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80057ae:	2264      	movs	r2, #100	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057b0:	2302      	movs	r3, #2
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80057b2:	9806      	ldr	r0, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80057b4:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80057b6:	4821      	ldr	r0, [pc, #132]	; (800583c <HAL_SPI_MspInit+0x20c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057b8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80057ba:	2205      	movs	r2, #5
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80057bc:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80057be:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80057c2:	f000 fc4d 	bl	8006060 <HAL_GPIO_Init>
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 80057c6:	4a1e      	ldr	r2, [pc, #120]	; (8005840 <HAL_SPI_MspInit+0x210>)
 80057c8:	236a      	movs	r3, #106	; 0x6a
 80057ca:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80057ce:	2380      	movs	r3, #128	; 0x80
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80057d0:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80057d4:	6133      	str	r3, [r6, #16]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80057d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057da:	e9c6 1305 	strd	r1, r3, [r6, #20]
    hdma_spi4_rx.Init.Mode = DMA_CIRCULAR;
 80057de:	2220      	movs	r2, #32
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80057e0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 80057e4:	4630      	mov	r0, r6
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057e6:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80057ea:	e9c6 2307 	strd	r2, r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 80057ee:	f000 f9d1 	bl	8005b94 <HAL_DMA_Init>
 80057f2:	b950      	cbnz	r0, 800580a <HAL_SPI_MspInit+0x1da>
    hdma_spi4_tx.Instance = DMA1_Channel3;
 80057f4:	4c13      	ldr	r4, [pc, #76]	; (8005844 <HAL_SPI_MspInit+0x214>)
 80057f6:	4b14      	ldr	r3, [pc, #80]	; (8005848 <HAL_SPI_MspInit+0x218>)
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 80057f8:	65ae      	str	r6, [r5, #88]	; 0x58
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 80057fa:	216b      	movs	r1, #107	; 0x6b
 80057fc:	e7a6      	b.n	800574c <HAL_SPI_MspInit+0x11c>
      Error_Handler();
 80057fe:	f7ff fddf 	bl	80053c0 <Error_Handler>
 8005802:	e7bc      	b.n	800577e <HAL_SPI_MspInit+0x14e>
      Error_Handler();
 8005804:	f7ff fddc 	bl	80053c0 <Error_Handler>
 8005808:	e79c      	b.n	8005744 <HAL_SPI_MspInit+0x114>
      Error_Handler();
 800580a:	f7ff fdd9 	bl	80053c0 <Error_Handler>
 800580e:	e7f1      	b.n	80057f4 <HAL_SPI_MspInit+0x1c4>
 8005810:	40013000 	.word	0x40013000
 8005814:	40003c00 	.word	0x40003c00
 8005818:	40013c00 	.word	0x40013c00
 800581c:	40021000 	.word	0x40021000
 8005820:	48001800 	.word	0x48001800
 8005824:	48000800 	.word	0x48000800
 8005828:	20010f48 	.word	0x20010f48
 800582c:	40020044 	.word	0x40020044
 8005830:	20010fa8 	.word	0x20010fa8
 8005834:	4002006c 	.word	0x4002006c
 8005838:	20011008 	.word	0x20011008
 800583c:	48001000 	.word	0x48001000
 8005840:	4002001c 	.word	0x4002001c
 8005844:	20011068 	.word	0x20011068
 8005848:	40020030 	.word	0x40020030

0800584c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800584c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 800584e:	4a18      	ldr	r2, [pc, #96]	; (80058b0 <HAL_TIM_Base_MspInit+0x64>)
 8005850:	6801      	ldr	r1, [r0, #0]
{
 8005852:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005854:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 8005856:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005858:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800585c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005860:	9307      	str	r3, [sp, #28]
  if(htim_base->Instance==TIM1)
 8005862:	d001      	beq.n	8005868 <HAL_TIM_Base_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8005864:	b008      	add	sp, #32
 8005866:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005868:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800586c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005870:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005874:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800587a:	661a      	str	r2, [r3, #96]	; 0x60
 800587c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800587e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005882:	9201      	str	r2, [sp, #4]
 8005884:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005886:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005888:	f042 0210 	orr.w	r2, r2, #16
 800588c:	64da      	str	r2, [r3, #76]	; 0x4c
 800588e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005890:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005892:	f003 0310 	and.w	r3, r3, #16
 8005896:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005898:	4806      	ldr	r0, [pc, #24]	; (80058b4 <HAL_TIM_Base_MspInit+0x68>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800589a:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800589c:	2302      	movs	r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800589e:	2412      	movs	r4, #18
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80058a0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80058a2:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80058a4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80058a6:	f000 fbdb 	bl	8006060 <HAL_GPIO_Init>
}
 80058aa:	b008      	add	sp, #32
 80058ac:	bd10      	pop	{r4, pc}
 80058ae:	bf00      	nop
 80058b0:	40012c00 	.word	0x40012c00
 80058b4:	48001000 	.word	0x48001000

080058b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80058b8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 80058ba:	4a13      	ldr	r2, [pc, #76]	; (8005908 <HAL_TIM_MspPostInit+0x50>)
 80058bc:	6801      	ldr	r1, [r0, #0]
{
 80058be:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058c0:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80058c2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058c4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80058c8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80058cc:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 80058ce:	d001      	beq.n	80058d4 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80058d0:	b007      	add	sp, #28
 80058d2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80058d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80058d8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058dc:	2402      	movs	r4, #2
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80058de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80058e0:	480a      	ldr	r0, [pc, #40]	; (800590c <HAL_TIM_MspPostInit+0x54>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80058e2:	f042 0210 	orr.w	r2, r2, #16
 80058e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80058e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80058ea:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80058ec:	f003 0310 	and.w	r3, r3, #16
 80058f0:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80058f2:	f44f 5540 	mov.w	r5, #12288	; 0x3000
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80058f6:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058f8:	e9cd 5401 	strd	r5, r4, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80058fc:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80058fe:	f000 fbaf 	bl	8006060 <HAL_GPIO_Init>
}
 8005902:	b007      	add	sp, #28
 8005904:	bd30      	pop	{r4, r5, pc}
 8005906:	bf00      	nop
 8005908:	40012c00 	.word	0x40012c00
 800590c:	48001000 	.word	0x48001000

08005910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005910:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART3)
 8005912:	4a1b      	ldr	r2, [pc, #108]	; (8005980 <HAL_UART_MspInit+0x70>)
 8005914:	6801      	ldr	r1, [r0, #0]
{
 8005916:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005918:	2300      	movs	r3, #0
  if(huart->Instance==USART3)
 800591a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800591c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8005920:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005924:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART3)
 8005926:	d001      	beq.n	800592c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005928:	b008      	add	sp, #32
 800592a:	bd10      	pop	{r4, pc}
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 800592c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005930:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005934:	f44f 7040 	mov.w	r0, #768	; 0x300
 8005938:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800593c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8005940:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    __HAL_RCC_USART3_CLK_ENABLE();
 8005944:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005946:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800594a:	659a      	str	r2, [r3, #88]	; 0x58
 800594c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800594e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8005952:	9201      	str	r2, [sp, #4]
 8005954:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005956:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005958:	f042 0208 	orr.w	r2, r2, #8
 800595c:	64da      	str	r2, [r3, #76]	; 0x4c
 800595e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005960:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005968:	4806      	ldr	r0, [pc, #24]	; (8005984 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800596a:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800596c:	2307      	movs	r3, #7
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800596e:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005970:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005972:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005974:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005976:	f000 fb73 	bl	8006060 <HAL_GPIO_Init>
}
 800597a:	b008      	add	sp, #32
 800597c:	bd10      	pop	{r4, pc}
 800597e:	bf00      	nop
 8005980:	40004800 	.word	0x40004800
 8005984:	48000c00 	.word	0x48000c00

08005988 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005988:	e7fe      	b.n	8005988 <NMI_Handler>
 800598a:	bf00      	nop

0800598c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800598c:	e7fe      	b.n	800598c <HardFault_Handler>
 800598e:	bf00      	nop

08005990 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005990:	e7fe      	b.n	8005990 <MemManage_Handler>
 8005992:	bf00      	nop

08005994 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005994:	e7fe      	b.n	8005994 <BusFault_Handler>
 8005996:	bf00      	nop

08005998 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005998:	e7fe      	b.n	8005998 <UsageFault_Handler>
 800599a:	bf00      	nop

0800599c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop

080059a0 <DebugMon_Handler>:
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop

080059a4 <PendSV_Handler>:
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop

080059a8 <SysTick_Handler>:
//	  {
//	    FatFsCnt = 0;
//	    SDTimer_Handler();
//	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80059a8:	f000 b86a 	b.w	8005a80 <HAL_IncTick>

080059ac <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80059ac:	4a03      	ldr	r2, [pc, #12]	; (80059bc <SystemInit+0x10>)
 80059ae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80059b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80059ba:	4770      	bx	lr
 80059bc:	e000ed00 	.word	0xe000ed00

080059c0 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 80059c0:	480d      	ldr	r0, [pc, #52]	; (80059f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80059c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80059c4:	480d      	ldr	r0, [pc, #52]	; (80059fc <LoopForever+0x6>)
  ldr r1, =_edata
 80059c6:	490e      	ldr	r1, [pc, #56]	; (8005a00 <LoopForever+0xa>)
  ldr r2, =_sidata
 80059c8:	4a0e      	ldr	r2, [pc, #56]	; (8005a04 <LoopForever+0xe>)
  movs r3, #0
 80059ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80059cc:	e002      	b.n	80059d4 <LoopCopyDataInit>

080059ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80059ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80059d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80059d2:	3304      	adds	r3, #4

080059d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80059d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80059d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80059d8:	d3f9      	bcc.n	80059ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80059da:	4a0b      	ldr	r2, [pc, #44]	; (8005a08 <LoopForever+0x12>)
  ldr r4, =_ebss
 80059dc:	4c0b      	ldr	r4, [pc, #44]	; (8005a0c <LoopForever+0x16>)
  movs r3, #0
 80059de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80059e0:	e001      	b.n	80059e6 <LoopFillZerobss>

080059e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80059e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059e4:	3204      	adds	r2, #4

080059e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80059e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80059e8:	d3fb      	bcc.n	80059e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80059ea:	f7ff ffdf 	bl	80059ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80059ee:	f005 f8a5 	bl	800ab3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80059f2:	f7fe fad9 	bl	8003fa8 <main>

080059f6 <LoopForever>:

LoopForever:
    b LoopForever
 80059f6:	e7fe      	b.n	80059f6 <LoopForever>
  ldr   r0, =_estack
 80059f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80059fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a00:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8005a04:	0800b120 	.word	0x0800b120
  ldr r2, =_sbss
 8005a08:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8005a0c:	20011454 	.word	0x20011454

08005a10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005a10:	e7fe      	b.n	8005a10 <ADC1_2_IRQHandler>
	...

08005a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a14:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8005a16:	4b0f      	ldr	r3, [pc, #60]	; (8005a54 <HAL_InitTick+0x40>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	b90b      	cbnz	r3, 8005a20 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8005a1c:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8005a1e:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005a20:	490d      	ldr	r1, [pc, #52]	; (8005a58 <HAL_InitTick+0x44>)
 8005a22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a26:	4605      	mov	r5, r0
 8005a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2c:	6808      	ldr	r0, [r1, #0]
 8005a2e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005a32:	f000 f895 	bl	8005b60 <HAL_SYSTICK_Config>
 8005a36:	4604      	mov	r4, r0
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	d1ef      	bne.n	8005a1c <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a3c:	2d0f      	cmp	r5, #15
 8005a3e:	d8ed      	bhi.n	8005a1c <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a40:	4602      	mov	r2, r0
 8005a42:	4629      	mov	r1, r5
 8005a44:	f04f 30ff 	mov.w	r0, #4294967295
 8005a48:	f000 f83e 	bl	8005ac8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005a4c:	4b03      	ldr	r3, [pc, #12]	; (8005a5c <HAL_InitTick+0x48>)
 8005a4e:	4620      	mov	r0, r4
 8005a50:	601d      	str	r5, [r3, #0]
}
 8005a52:	bd38      	pop	{r3, r4, r5, pc}
 8005a54:	20000030 	.word	0x20000030
 8005a58:	2000002c 	.word	0x2000002c
 8005a5c:	20000034 	.word	0x20000034

08005a60 <HAL_Init>:
{
 8005a60:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a62:	2003      	movs	r0, #3
 8005a64:	f000 f81e 	bl	8005aa4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005a68:	200f      	movs	r0, #15
 8005a6a:	f7ff ffd3 	bl	8005a14 <HAL_InitTick>
 8005a6e:	b110      	cbz	r0, 8005a76 <HAL_Init+0x16>
    status = HAL_ERROR;
 8005a70:	2401      	movs	r4, #1
}
 8005a72:	4620      	mov	r0, r4
 8005a74:	bd10      	pop	{r4, pc}
 8005a76:	4604      	mov	r4, r0
    HAL_MspInit();
 8005a78:	f7ff fca4 	bl	80053c4 <HAL_MspInit>
}
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	bd10      	pop	{r4, pc}

08005a80 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005a80:	4a03      	ldr	r2, [pc, #12]	; (8005a90 <HAL_IncTick+0x10>)
 8005a82:	4904      	ldr	r1, [pc, #16]	; (8005a94 <HAL_IncTick+0x14>)
 8005a84:	6813      	ldr	r3, [r2, #0]
 8005a86:	6809      	ldr	r1, [r1, #0]
 8005a88:	440b      	add	r3, r1
 8005a8a:	6013      	str	r3, [r2, #0]
}
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	20011430 	.word	0x20011430
 8005a94:	20000030 	.word	0x20000030

08005a98 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005a98:	4b01      	ldr	r3, [pc, #4]	; (8005aa0 <HAL_GetTick+0x8>)
 8005a9a:	6818      	ldr	r0, [r3, #0]
}
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	20011430 	.word	0x20011430

08005aa4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005aa4:	4907      	ldr	r1, [pc, #28]	; (8005ac4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005aa6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005aa8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005aaa:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005aae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ab2:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ab4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ab6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005abe:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	e000ed00 	.word	0xe000ed00

08005ac8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ac8:	4b1c      	ldr	r3, [pc, #112]	; (8005b3c <HAL_NVIC_SetPriority+0x74>)
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ad0:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ad2:	f1c3 0e07 	rsb	lr, r3, #7
 8005ad6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ada:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ade:	bf28      	it	cs
 8005ae0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ae4:	f1bc 0f06 	cmp.w	ip, #6
 8005ae8:	d91b      	bls.n	8005b22 <HAL_NVIC_SetPriority+0x5a>
 8005aea:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005aec:	f04f 3cff 	mov.w	ip, #4294967295
 8005af0:	fa0c fc03 	lsl.w	ip, ip, r3
 8005af4:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005af8:	f04f 3cff 	mov.w	ip, #4294967295
 8005afc:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005b00:	ea21 010c 	bic.w	r1, r1, ip
 8005b04:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8005b06:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b08:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8005b0c:	db0c      	blt.n	8005b28 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b0e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005b12:	0109      	lsls	r1, r1, #4
 8005b14:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005b18:	b2c9      	uxtb	r1, r1
 8005b1a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005b1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b22:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b24:	4613      	mov	r3, r2
 8005b26:	e7e7      	b.n	8005af8 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b28:	4b05      	ldr	r3, [pc, #20]	; (8005b40 <HAL_NVIC_SetPriority+0x78>)
 8005b2a:	f000 000f 	and.w	r0, r0, #15
 8005b2e:	0109      	lsls	r1, r1, #4
 8005b30:	4403      	add	r3, r0
 8005b32:	b2c9      	uxtb	r1, r1
 8005b34:	7619      	strb	r1, [r3, #24]
 8005b36:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b3a:	bf00      	nop
 8005b3c:	e000ed00 	.word	0xe000ed00
 8005b40:	e000ecfc 	.word	0xe000ecfc

08005b44 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005b44:	2800      	cmp	r0, #0
 8005b46:	db08      	blt.n	8005b5a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b48:	4a04      	ldr	r2, [pc, #16]	; (8005b5c <HAL_NVIC_EnableIRQ+0x18>)
 8005b4a:	0941      	lsrs	r1, r0, #5
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	f000 001f 	and.w	r0, r0, #31
 8005b52:	fa03 f000 	lsl.w	r0, r3, r0
 8005b56:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005b5a:	4770      	bx	lr
 8005b5c:	e000e100 	.word	0xe000e100

08005b60 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b60:	3801      	subs	r0, #1
 8005b62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005b66:	d210      	bcs.n	8005b8a <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b68:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b6a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b6e:	4c08      	ldr	r4, [pc, #32]	; (8005b90 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b70:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b72:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8005b76:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b7a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b7c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b7e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b80:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8005b82:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b86:	6119      	str	r1, [r3, #16]
 8005b88:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005b8a:	2001      	movs	r0, #1
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	e000ed00 	.word	0xe000ed00

08005b94 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005b94:	2800      	cmp	r0, #0
 8005b96:	d07a      	beq.n	8005c8e <HAL_DMA_Init+0xfa>
{
 8005b98:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005b9a:	4b3e      	ldr	r3, [pc, #248]	; (8005c94 <HAL_DMA_Init+0x100>)
 8005b9c:	6804      	ldr	r4, [r0, #0]
 8005b9e:	429c      	cmp	r4, r3
 8005ba0:	d95f      	bls.n	8005c62 <HAL_DMA_Init+0xce>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005ba2:	4a3d      	ldr	r2, [pc, #244]	; (8005c98 <HAL_DMA_Init+0x104>)
 8005ba4:	4b3d      	ldr	r3, [pc, #244]	; (8005c9c <HAL_DMA_Init+0x108>)
 8005ba6:	4422      	add	r2, r4
 8005ba8:	fba3 3202 	umull	r3, r2, r3, r2
 8005bac:	0912      	lsrs	r2, r2, #4
    hdma->DmaBaseAddress = DMA2;
 8005bae:	4b3c      	ldr	r3, [pc, #240]	; (8005ca0 <HAL_DMA_Init+0x10c>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005bb0:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA2;
 8005bb2:	e9c0 3210 	strd	r3, r2, [r0, #64]	; 0x40
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005bb6:	e9d0 5302 	ldrd	r5, r3, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8005bba:	2102      	movs	r1, #2
 8005bbc:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bc0:	6901      	ldr	r1, [r0, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bc2:	69c6      	ldr	r6, [r0, #28]
  tmp |=  hdma->Init.Direction        |
 8005bc4:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bc6:	430b      	orrs	r3, r1
 8005bc8:	6941      	ldr	r1, [r0, #20]
 8005bca:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bcc:	6981      	ldr	r1, [r0, #24]
 8005bce:	430b      	orrs	r3, r1
 8005bd0:	4333      	orrs	r3, r6
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005bd2:	fa5f fc84 	uxtb.w	ip, r4
 8005bd6:	4e31      	ldr	r6, [pc, #196]	; (8005c9c <HAL_DMA_Init+0x108>)
  tmp = hdma->Instance->CCR;
 8005bd8:	6821      	ldr	r1, [r4, #0]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005bda:	f1ac 0c08 	sub.w	ip, ip, #8
 8005bde:	fba6 6c0c 	umull	r6, ip, r6, ip
          hdma->Init.Mode                | hdma->Init.Priority;
 8005be2:	6a06      	ldr	r6, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005be4:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8005be8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bec:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 8005bee:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 8005bf0:	6023      	str	r3, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005bf2:	4e2c      	ldr	r6, [pc, #176]	; (8005ca4 <HAL_DMA_Init+0x110>)
 8005bf4:	4b27      	ldr	r3, [pc, #156]	; (8005c94 <HAL_DMA_Init+0x100>)
 8005bf6:	492c      	ldr	r1, [pc, #176]	; (8005ca8 <HAL_DMA_Init+0x114>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005bf8:	f3cc 1c04 	ubfx	ip, ip, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005bfc:	429c      	cmp	r4, r3
 8005bfe:	bf98      	it	ls
 8005c00:	4631      	movls	r1, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005c02:	f04f 0e01 	mov.w	lr, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005c06:	4c29      	ldr	r4, [pc, #164]	; (8005cac <HAL_DMA_Init+0x118>)
 8005c08:	64c4      	str	r4, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005c0a:	fa0e f30c 	lsl.w	r3, lr, ip
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005c0e:	1854      	adds	r4, r2, r1
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005c10:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005c14:	6503      	str	r3, [r0, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005c16:	6484      	str	r4, [r0, #72]	; 0x48
 8005c18:	ea4f 0292 	mov.w	r2, r2, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005c1c:	d02c      	beq.n	8005c78 <HAL_DMA_Init+0xe4>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005c1e:	6845      	ldr	r5, [r0, #4]
 8005c20:	b2ec      	uxtb	r4, r5
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005c22:	3d01      	subs	r5, #1
 8005c24:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005c26:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c2a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005c2e:	d829      	bhi.n	8005c84 <HAL_DMA_Init+0xf0>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005c30:	4b1f      	ldr	r3, [pc, #124]	; (8005cb0 <HAL_DMA_Init+0x11c>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005c32:	4920      	ldr	r1, [pc, #128]	; (8005cb4 <HAL_DMA_Init+0x120>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005c34:	4423      	add	r3, r4

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005c36:	3c01      	subs	r4, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005c38:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005c3a:	f004 041f 	and.w	r4, r4, #31
 8005c3e:	fa0e f404 	lsl.w	r4, lr, r4
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c42:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005c44:	e9c0 3115 	strd	r3, r1, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005c48:	65c4      	str	r4, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c4a:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c4c:	4b1a      	ldr	r3, [pc, #104]	; (8005cb8 <HAL_DMA_Init+0x124>)
 8005c4e:	645c      	str	r4, [r3, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c50:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8005c52:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c54:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8005c56:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8005c5a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  return HAL_OK;
 8005c5e:	4618      	mov	r0, r3
}
 8005c60:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005c62:	4a16      	ldr	r2, [pc, #88]	; (8005cbc <HAL_DMA_Init+0x128>)
 8005c64:	4b0d      	ldr	r3, [pc, #52]	; (8005c9c <HAL_DMA_Init+0x108>)
 8005c66:	4422      	add	r2, r4
 8005c68:	fba3 3202 	umull	r3, r2, r3, r2
 8005c6c:	0912      	lsrs	r2, r2, #4
    hdma->DmaBaseAddress = DMA1;
 8005c6e:	4b14      	ldr	r3, [pc, #80]	; (8005cc0 <HAL_DMA_Init+0x12c>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005c70:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 8005c72:	e9c0 3210 	strd	r3, r2, [r0, #64]	; 0x40
 8005c76:	e79e      	b.n	8005bb6 <HAL_DMA_Init+0x22>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005c78:	2400      	movs	r4, #0
 8005c7a:	6044      	str	r4, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005c7c:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c80:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    hdma->DMAmuxRequestGen = 0U;
 8005c84:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8005c86:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c8a:	65c3      	str	r3, [r0, #92]	; 0x5c
 8005c8c:	e7e0      	b.n	8005c50 <HAL_DMA_Init+0xbc>
    return HAL_ERROR;
 8005c8e:	2001      	movs	r0, #1
}
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	40020407 	.word	0x40020407
 8005c98:	bffdfbf8 	.word	0xbffdfbf8
 8005c9c:	cccccccd 	.word	0xcccccccd
 8005ca0:	40020400 	.word	0x40020400
 8005ca4:	40020800 	.word	0x40020800
 8005ca8:	40020820 	.word	0x40020820
 8005cac:	40020880 	.word	0x40020880
 8005cb0:	1000823f 	.word	0x1000823f
 8005cb4:	40020940 	.word	0x40020940
 8005cb8:	40020900 	.word	0x40020900
 8005cbc:	bffdfff8 	.word	0xbffdfff8
 8005cc0:	40020000 	.word	0x40020000

08005cc4 <HAL_DMA_Start_IT>:
{
 8005cc4:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8005cc6:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8005cca:	2c01      	cmp	r4, #1
 8005ccc:	d051      	beq.n	8005d72 <HAL_DMA_Start_IT+0xae>
 8005cce:	2401      	movs	r4, #1
 8005cd0:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8005cd4:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8005cd8:	2c01      	cmp	r4, #1
 8005cda:	d005      	beq.n	8005ce8 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8005cdc:	2300      	movs	r3, #0
 8005cde:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8005ce2:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8005ce4:	2002      	movs	r0, #2
}
 8005ce6:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ce8:	2402      	movs	r4, #2
 8005cea:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cee:	2400      	movs	r4, #0
 8005cf0:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8005cf2:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cf4:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    __HAL_DMA_DISABLE(hdma);
 8005cf6:	6825      	ldr	r5, [r4, #0]
 8005cf8:	f025 0501 	bic.w	r5, r5, #1
 8005cfc:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cfe:	e9d0 7514 	ldrd	r7, r5, [r0, #80]	; 0x50
 8005d02:	6077      	str	r7, [r6, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 8005d04:	b115      	cbz	r5, 8005d0c <HAL_DMA_Start_IT+0x48>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d06:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	; 0x58
 8005d0a:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d0c:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8005d0e:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8005d10:	f006 0c1f 	and.w	ip, r6, #31
 8005d14:	2601      	movs	r6, #1
 8005d16:	fa06 f60c 	lsl.w	r6, r6, ip
 8005d1a:	607e      	str	r6, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8005d1c:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d1e:	6883      	ldr	r3, [r0, #8]
 8005d20:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 8005d22:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->Instance->CPAR = DstAddress;
 8005d24:	bf0b      	itete	eq
 8005d26:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8005d28:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8005d2a:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8005d2c:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8005d2e:	b1bb      	cbz	r3, 8005d60 <HAL_DMA_Start_IT+0x9c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d30:	6823      	ldr	r3, [r4, #0]
 8005d32:	f043 030e 	orr.w	r3, r3, #14
 8005d36:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d38:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	03d2      	lsls	r2, r2, #15
 8005d3e:	d503      	bpl.n	8005d48 <HAL_DMA_Start_IT+0x84>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d46:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8005d48:	b11d      	cbz	r5, 8005d52 <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d4a:	682b      	ldr	r3, [r5, #0]
 8005d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d50:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8005d52:	6823      	ldr	r3, [r4, #0]
 8005d54:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8005d58:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8005d5a:	6023      	str	r3, [r4, #0]
}
 8005d5c:	bcf0      	pop	{r4, r5, r6, r7}
 8005d5e:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	f023 0304 	bic.w	r3, r3, #4
 8005d66:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	f043 030a 	orr.w	r3, r3, #10
 8005d6e:	6023      	str	r3, [r4, #0]
 8005d70:	e7e2      	b.n	8005d38 <HAL_DMA_Start_IT+0x74>
  __HAL_LOCK(hdma);
 8005d72:	2002      	movs	r0, #2
}
 8005d74:	bcf0      	pop	{r4, r5, r6, r7}
 8005d76:	4770      	bx	lr

08005d78 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d78:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8005d7c:	2a02      	cmp	r2, #2
{
 8005d7e:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d80:	d009      	beq.n	8005d96 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d82:	2204      	movs	r2, #4
 8005d84:	63c2      	str	r2, [r0, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8005d86:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8005d88:	2200      	movs	r2, #0
    status = HAL_ERROR;
 8005d8a:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 8005d8c:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8005d90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8005d94:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d96:	6802      	ldr	r2, [r0, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d98:	6c59      	ldr	r1, [r3, #68]	; 0x44
{
 8005d9a:	b430      	push	{r4, r5}
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d9c:	6c84      	ldr	r4, [r0, #72]	; 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d9e:	6810      	ldr	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005da0:	6c1d      	ldr	r5, [r3, #64]	; 0x40
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005da2:	f020 000e 	bic.w	r0, r0, #14
 8005da6:	6010      	str	r0, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005da8:	6820      	ldr	r0, [r4, #0]
 8005daa:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8005dae:	6020      	str	r0, [r4, #0]
     __HAL_DMA_DISABLE(hdma);
 8005db0:	6810      	ldr	r0, [r2, #0]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005db2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
     __HAL_DMA_DISABLE(hdma);
 8005db4:	f020 0001 	bic.w	r0, r0, #1
 8005db8:	6010      	str	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005dba:	f001 011f 	and.w	r1, r1, #31
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	408a      	lsls	r2, r1
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005dc2:	e9d3 1014 	ldrd	r1, r0, [r3, #80]	; 0x50
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005dc6:	606a      	str	r2, [r5, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005dc8:	6061      	str	r1, [r4, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 8005dca:	b138      	cbz	r0, 8005ddc <HAL_DMA_Abort+0x64>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005dcc:	6802      	ldr	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005dce:	e9d3 1416 	ldrd	r1, r4, [r3, #88]	; 0x58
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005dd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dd6:	6002      	str	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005dd8:	604c      	str	r4, [r1, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dda:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8005ddc:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8005dde:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 8005de0:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8005de4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8005de8:	bc30      	pop	{r4, r5}
 8005dea:	4770      	bx	lr

08005dec <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005dec:	2800      	cmp	r0, #0
 8005dee:	f000 8109 	beq.w	8006004 <HAL_FDCAN_Init+0x218>
{
 8005df2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005df6:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d073      	beq.n	8005eec <HAL_FDCAN_Init+0x100>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005e04:	6822      	ldr	r2, [r4, #0]
 8005e06:	6993      	ldr	r3, [r2, #24]
 8005e08:	f023 0310 	bic.w	r3, r3, #16
 8005e0c:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e0e:	f7ff fe43 	bl	8005a98 <HAL_GetTick>
 8005e12:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005e14:	e004      	b.n	8005e20 <HAL_FDCAN_Init+0x34>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005e16:	f7ff fe3f 	bl	8005a98 <HAL_GetTick>
 8005e1a:	1b43      	subs	r3, r0, r5
 8005e1c:	2b0a      	cmp	r3, #10
 8005e1e:	d85b      	bhi.n	8005ed8 <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005e20:	6823      	ldr	r3, [r4, #0]
 8005e22:	699a      	ldr	r2, [r3, #24]
 8005e24:	0712      	lsls	r2, r2, #28
 8005e26:	d4f6      	bmi.n	8005e16 <HAL_FDCAN_Init+0x2a>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005e28:	699a      	ldr	r2, [r3, #24]
 8005e2a:	f042 0201 	orr.w	r2, r2, #1
 8005e2e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e30:	f7ff fe32 	bl	8005a98 <HAL_GetTick>
 8005e34:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005e36:	e004      	b.n	8005e42 <HAL_FDCAN_Init+0x56>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005e38:	f7ff fe2e 	bl	8005a98 <HAL_GetTick>
 8005e3c:	1b40      	subs	r0, r0, r5
 8005e3e:	280a      	cmp	r0, #10
 8005e40:	d84a      	bhi.n	8005ed8 <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005e42:	6822      	ldr	r2, [r4, #0]
 8005e44:	6993      	ldr	r3, [r2, #24]
 8005e46:	07db      	lsls	r3, r3, #31
 8005e48:	d5f6      	bpl.n	8005e38 <HAL_FDCAN_Init+0x4c>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005e4a:	6993      	ldr	r3, [r2, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005e4c:	4976      	ldr	r1, [pc, #472]	; (8006028 <HAL_FDCAN_Init+0x23c>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005e4e:	f043 0302 	orr.w	r3, r3, #2
  if (hfdcan->Instance == FDCAN1)
 8005e52:	428a      	cmp	r2, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005e54:	6193      	str	r3, [r2, #24]
  if (hfdcan->Instance == FDCAN1)
 8005e56:	f000 80d0 	beq.w	8005ffa <HAL_FDCAN_Init+0x20e>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005e5a:	7c23      	ldrb	r3, [r4, #16]
 8005e5c:	2b01      	cmp	r3, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005e5e:	6993      	ldr	r3, [r2, #24]
 8005e60:	bf0c      	ite	eq
 8005e62:	f023 0340 	biceq.w	r3, r3, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005e66:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8005e6a:	6193      	str	r3, [r2, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005e6c:	7c63      	ldrb	r3, [r4, #17]
 8005e6e:	2b01      	cmp	r3, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005e70:	6993      	ldr	r3, [r2, #24]
 8005e72:	bf0c      	ite	eq
 8005e74:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005e78:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
 8005e7c:	6193      	str	r3, [r2, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005e7e:	7ca3      	ldrb	r3, [r4, #18]
 8005e80:	2b01      	cmp	r3, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005e82:	6993      	ldr	r3, [r2, #24]
 8005e84:	bf0c      	ite	eq
 8005e86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005e8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e8e:	6193      	str	r3, [r2, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005e90:	6993      	ldr	r3, [r2, #24]
 8005e92:	68a0      	ldr	r0, [r4, #8]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005e94:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e9a:	4303      	orrs	r3, r0
 8005e9c:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005e9e:	6993      	ldr	r3, [r2, #24]
 8005ea0:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 8005ea4:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005ea6:	6913      	ldr	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005ea8:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005eaa:	f023 0310 	bic.w	r3, r3, #16
 8005eae:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005eb0:	d021      	beq.n	8005ef6 <HAL_FDCAN_Init+0x10a>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005eb2:	b321      	cbz	r1, 8005efe <HAL_FDCAN_Init+0x112>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005eb4:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005eb6:	6993      	ldr	r3, [r2, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005eb8:	f000 80b1 	beq.w	800601e <HAL_FDCAN_Init+0x232>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec0:	6193      	str	r3, [r2, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005ec2:	6913      	ldr	r3, [r2, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005ec4:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005ec6:	f043 0310 	orr.w	r3, r3, #16
 8005eca:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005ecc:	d117      	bne.n	8005efe <HAL_FDCAN_Init+0x112>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005ece:	6993      	ldr	r3, [r2, #24]
 8005ed0:	f043 0320 	orr.w	r3, r3, #32
 8005ed4:	6193      	str	r3, [r2, #24]
 8005ed6:	e012      	b.n	8005efe <HAL_FDCAN_Init+0x112>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005ed8:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005eda:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005edc:	f043 0301 	orr.w	r3, r3, #1
 8005ee0:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005ee2:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8005ee6:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8005ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8005eec:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8005ef0:	f7ff fa82 	bl	80053f8 <HAL_FDCAN_MspInit>
 8005ef4:	e786      	b.n	8005e04 <HAL_FDCAN_Init+0x18>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005ef6:	6993      	ldr	r3, [r2, #24]
 8005ef8:	f043 0304 	orr.w	r3, r3, #4
 8005efc:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005efe:	e9d4 1306 	ldrd	r1, r3, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005f02:	3b01      	subs	r3, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005f04:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005f06:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005f08:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005f0c:	6a21      	ldr	r1, [r4, #32]
 8005f0e:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005f10:	430b      	orrs	r3, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005f12:	6961      	ldr	r1, [r4, #20]
 8005f14:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005f16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005f1a:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005f1e:	61d3      	str	r3, [r2, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005f20:	d10e      	bne.n	8005f40 <HAL_FDCAN_Init+0x154>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005f22:	e9d4 030b 	ldrd	r0, r3, [r4, #44]	; 0x2c
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005f26:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005f28:	3b01      	subs	r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005f2a:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005f2c:	011b      	lsls	r3, r3, #4
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005f2e:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005f30:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005f34:	430b      	orrs	r3, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005f36:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005f38:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005f3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005f3e:	60d3      	str	r3, [r2, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005f40:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8005f44:	6be0      	ldr	r0, [r4, #60]	; 0x3c
{
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005f46:	4939      	ldr	r1, [pc, #228]	; (800602c <HAL_FDCAN_Init+0x240>)
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005f48:	4303      	orrs	r3, r0
  if (hfdcan->Instance == FDCAN2)
 8005f4a:	428a      	cmp	r2, r1
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005f4c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  if (hfdcan->Instance == FDCAN2)
 8005f50:	d05a      	beq.n	8006008 <HAL_FDCAN_Init+0x21c>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8005f52:	4b37      	ldr	r3, [pc, #220]	; (8006030 <HAL_FDCAN_Init+0x244>)
 8005f54:	4e37      	ldr	r6, [pc, #220]	; (8006034 <HAL_FDCAN_Init+0x248>)
 8005f56:	4f38      	ldr	r7, [pc, #224]	; (8006038 <HAL_FDCAN_Init+0x24c>)
 8005f58:	4d38      	ldr	r5, [pc, #224]	; (800603c <HAL_FDCAN_Init+0x250>)
 8005f5a:	4839      	ldr	r0, [pc, #228]	; (8006040 <HAL_FDCAN_Init+0x254>)
 8005f5c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005f60:	428a      	cmp	r2, r1
 8005f62:	bf18      	it	ne
 8005f64:	4699      	movne	r9, r3
 8005f66:	f1a3 0318 	sub.w	r3, r3, #24
 8005f6a:	bf18      	it	ne
 8005f6c:	461e      	movne	r6, r3
 8005f6e:	f1a3 03d8 	sub.w	r3, r3, #216	; 0xd8
 8005f72:	bf18      	it	ne
 8005f74:	461f      	movne	r7, r3
 8005f76:	f501 517d 	add.w	r1, r1, #16192	; 0x3f40
 8005f7a:	f1a3 03d8 	sub.w	r3, r3, #216	; 0xd8
 8005f7e:	f101 0110 	add.w	r1, r1, #16
 8005f82:	bf18      	it	ne
 8005f84:	469c      	movne	ip, r3
 8005f86:	f1a3 0340 	sub.w	r3, r3, #64	; 0x40
 8005f8a:	bf0c      	ite	eq
 8005f8c:	468c      	moveq	ip, r1
 8005f8e:	4698      	movne	r8, r3
 8005f90:	f1a1 0140 	sub.w	r1, r1, #64	; 0x40
 8005f94:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8005f98:	bf04      	itt	eq
 8005f9a:	4688      	moveq	r8, r1
 8005f9c:	46a9      	moveq	r9, r5
 8005f9e:	f501 7138 	add.w	r1, r1, #736	; 0x2e0
 8005fa2:	bf18      	it	ne
 8005fa4:	4619      	movne	r1, r3
 8005fa6:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8005faa:	bf08      	it	eq
 8005fac:	4603      	moveq	r3, r0

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005fae:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005fb2:	6423      	str	r3, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005fb4:	f420 1ef8 	bic.w	lr, r0, #2031616	; 0x1f0000
 8005fb8:	6b60      	ldr	r0, [r4, #52]	; 0x34

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005fba:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005fbc:	ea4e 4000 	orr.w	r0, lr, r0, lsl #16
 8005fc0:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005fc4:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005fc8:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005fcc:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8005fd0:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 8005fd4:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005fd8:	e9c4 c712 	strd	ip, r7, [r4, #72]	; 0x48

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005fdc:	e9c4 6914 	strd	r6, r9, [r4, #80]	; 0x50

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f843 2b04 	str.w	r2, [r3], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005fe6:	428b      	cmp	r3, r1
 8005fe8:	d3fb      	bcc.n	8005fe2 <HAL_FDCAN_Init+0x1f6>
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005fea:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005fec:	6622      	str	r2, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005fee:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 8005ff2:	65a2      	str	r2, [r4, #88]	; 0x58
  return HAL_OK;
 8005ff4:	2000      	movs	r0, #0
}
 8005ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005ffa:	4b12      	ldr	r3, [pc, #72]	; (8006044 <HAL_FDCAN_Init+0x258>)
 8005ffc:	6861      	ldr	r1, [r4, #4]
 8005ffe:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
 8006002:	e72a      	b.n	8005e5a <HAL_FDCAN_Init+0x6e>
    return HAL_ERROR;
 8006004:	2001      	movs	r0, #1
}
 8006006:	4770      	bx	lr
 8006008:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8006054 <HAL_FDCAN_Init+0x268>
 800600c:	4e0e      	ldr	r6, [pc, #56]	; (8006048 <HAL_FDCAN_Init+0x25c>)
 800600e:	4f0f      	ldr	r7, [pc, #60]	; (800604c <HAL_FDCAN_Init+0x260>)
 8006010:	f8df c044 	ldr.w	ip, [pc, #68]	; 8006058 <HAL_FDCAN_Init+0x26c>
 8006014:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800605c <HAL_FDCAN_Init+0x270>
 8006018:	4909      	ldr	r1, [pc, #36]	; (8006040 <HAL_FDCAN_Init+0x254>)
    SramCanInstanceBase += SRAMCAN_SIZE;
 800601a:	4b0d      	ldr	r3, [pc, #52]	; (8006050 <HAL_FDCAN_Init+0x264>)
 800601c:	e7c7      	b.n	8005fae <HAL_FDCAN_Init+0x1c2>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800601e:	f043 0320 	orr.w	r3, r3, #32
 8006022:	6193      	str	r3, [r2, #24]
 8006024:	e76b      	b.n	8005efe <HAL_FDCAN_Init+0x112>
 8006026:	bf00      	nop
 8006028:	40006400 	.word	0x40006400
 800602c:	40006800 	.word	0x40006800
 8006030:	4000a678 	.word	0x4000a678
 8006034:	4000ad00 	.word	0x4000ad00
 8006038:	4000ac28 	.word	0x4000ac28
 800603c:	4000ad18 	.word	0x4000ad18
 8006040:	4000aaa0 	.word	0x4000aaa0
 8006044:	40006000 	.word	0x40006000
 8006048:	4000a9b0 	.word	0x4000a9b0
 800604c:	4000a8d8 	.word	0x4000a8d8
 8006050:	4000a750 	.word	0x4000a750
 8006054:	4000a9c8 	.word	0x4000a9c8
 8006058:	4000a800 	.word	0x4000a800
 800605c:	4000a7c0 	.word	0x4000a7c0

08006060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006064:	680c      	ldr	r4, [r1, #0]
{
 8006066:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006068:	2c00      	cmp	r4, #0
 800606a:	f000 8083 	beq.w	8006174 <HAL_GPIO_Init+0x114>
 800606e:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006072:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 800624c <HAL_GPIO_Init+0x1ec>
  uint32_t position = 0x00U;
 8006076:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006078:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800607c:	4689      	mov	r9, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800607e:	fa0b f503 	lsl.w	r5, fp, r3
    if (iocurrent != 0x00u)
 8006082:	ea15 0804 	ands.w	r8, r5, r4
 8006086:	d06f      	beq.n	8006168 <HAL_GPIO_Init+0x108>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006088:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800608c:	f007 0203 	and.w	r2, r7, #3
 8006090:	1e51      	subs	r1, r2, #1
 8006092:	2901      	cmp	r1, #1
 8006094:	d971      	bls.n	800617a <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006096:	2a03      	cmp	r2, #3
 8006098:	f040 80b0 	bne.w	80061fc <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800609c:	fa02 f20c 	lsl.w	r2, r2, ip
 80060a0:	43d1      	mvns	r1, r2
      temp = GPIOx->MODER;
 80060a2:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80060a4:	4029      	ands	r1, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80060a6:	430a      	orrs	r2, r1
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80060a8:	f417 3f40 	tst.w	r7, #196608	; 0x30000
      GPIOx->MODER = temp;
 80060ac:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80060ae:	d05b      	beq.n	8006168 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060b0:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 80060b4:	f042 0201 	orr.w	r2, r2, #1
 80060b8:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
 80060bc:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 80060c0:	f002 0201 	and.w	r2, r2, #1
 80060c4:	9203      	str	r2, [sp, #12]
 80060c6:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80060c8:	f023 0203 	bic.w	r2, r3, #3
 80060cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80060d0:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80060d4:	f003 0503 	and.w	r5, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80060d8:	6891      	ldr	r1, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80060da:	00ad      	lsls	r5, r5, #2
 80060dc:	260f      	movs	r6, #15
 80060de:	fa06 fe05 	lsl.w	lr, r6, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80060e2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80060e6:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80060ea:	d019      	beq.n	8006120 <HAL_GPIO_Init+0xc0>
 80060ec:	4e51      	ldr	r6, [pc, #324]	; (8006234 <HAL_GPIO_Init+0x1d4>)
 80060ee:	42b0      	cmp	r0, r6
 80060f0:	f000 808f 	beq.w	8006212 <HAL_GPIO_Init+0x1b2>
 80060f4:	4e50      	ldr	r6, [pc, #320]	; (8006238 <HAL_GPIO_Init+0x1d8>)
 80060f6:	42b0      	cmp	r0, r6
 80060f8:	f000 808f 	beq.w	800621a <HAL_GPIO_Init+0x1ba>
 80060fc:	4e4f      	ldr	r6, [pc, #316]	; (800623c <HAL_GPIO_Init+0x1dc>)
 80060fe:	42b0      	cmp	r0, r6
 8006100:	f000 8081 	beq.w	8006206 <HAL_GPIO_Init+0x1a6>
 8006104:	4e4e      	ldr	r6, [pc, #312]	; (8006240 <HAL_GPIO_Init+0x1e0>)
 8006106:	42b0      	cmp	r0, r6
 8006108:	f000 808d 	beq.w	8006226 <HAL_GPIO_Init+0x1c6>
 800610c:	4e4d      	ldr	r6, [pc, #308]	; (8006244 <HAL_GPIO_Init+0x1e4>)
 800610e:	42b0      	cmp	r0, r6
 8006110:	bf0c      	ite	eq
 8006112:	f04f 0e05 	moveq.w	lr, #5
 8006116:	f04f 0e06 	movne.w	lr, #6
 800611a:	fa0e f505 	lsl.w	r5, lr, r5
 800611e:	4329      	orrs	r1, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006120:	6091      	str	r1, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006122:	4a49      	ldr	r2, [pc, #292]	; (8006248 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8006124:	4948      	ldr	r1, [pc, #288]	; (8006248 <HAL_GPIO_Init+0x1e8>)
        temp = EXTI->RTSR1;
 8006126:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
 8006128:	ea6f 0508 	mvn.w	r5, r8
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800612c:	02fe      	lsls	r6, r7, #11
        temp &= ~(iocurrent);
 800612e:	bf54      	ite	pl
 8006130:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8006132:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR1 = temp;
 8006136:	608a      	str	r2, [r1, #8]

        temp = EXTI->FTSR1;
 8006138:	68ca      	ldr	r2, [r1, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800613a:	02b9      	lsls	r1, r7, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 800613c:	4942      	ldr	r1, [pc, #264]	; (8006248 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 800613e:	bf54      	ite	pl
 8006140:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8006142:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 8006146:	60ca      	str	r2, [r1, #12]

        temp = EXTI->EMR1;
 8006148:	6849      	ldr	r1, [r1, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 800614a:	4a3f      	ldr	r2, [pc, #252]	; (8006248 <HAL_GPIO_Init+0x1e8>)
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800614c:	03be      	lsls	r6, r7, #14
        temp &= ~(iocurrent);
 800614e:	bf54      	ite	pl
 8006150:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8006152:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->EMR1 = temp;
 8006156:	6051      	str	r1, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006158:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800615a:	03f9      	lsls	r1, r7, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 800615c:	493a      	ldr	r1, [pc, #232]	; (8006248 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 800615e:	bf54      	ite	pl
 8006160:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8006162:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR1 = temp;
 8006166:	600a      	str	r2, [r1, #0]
      }
    }

    position++;
 8006168:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 800616a:	fa34 f203 	lsrs.w	r2, r4, r3
 800616e:	f10c 0c02 	add.w	ip, ip, #2
 8006172:	d184      	bne.n	800607e <HAL_GPIO_Init+0x1e>
  }
}
 8006174:	b005      	add	sp, #20
 8006176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800617a:	6881      	ldr	r1, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800617c:	f8d9 600c 	ldr.w	r6, [r9, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006180:	f04f 0e03 	mov.w	lr, #3
 8006184:	fa0e fe0c 	lsl.w	lr, lr, ip
 8006188:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 800618c:	fa06 f60c 	lsl.w	r6, r6, ip
 8006190:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 8006192:	6081      	str	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006194:	ea6f 010e 	mvn.w	r1, lr
        temp = GPIOx->OTYPER;
 8006198:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800619c:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061a0:	f3c7 1500 	ubfx	r5, r7, #4, #1
 80061a4:	409d      	lsls	r5, r3
 80061a6:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = temp;
 80061aa:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 80061ac:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80061ae:	ea05 0e01 	and.w	lr, r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061b2:	f8d9 5008 	ldr.w	r5, [r9, #8]
 80061b6:	fa05 f50c 	lsl.w	r5, r5, ip
 80061ba:	ea45 050e 	orr.w	r5, r5, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061be:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80061c0:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061c2:	fa02 f20c 	lsl.w	r2, r2, ip
 80061c6:	f47f af6c 	bne.w	80060a2 <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 80061ca:	08dd      	lsrs	r5, r3, #3
 80061cc:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80061d0:	9501      	str	r5, [sp, #4]
 80061d2:	6a2e      	ldr	r6, [r5, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80061d4:	f8d9 5010 	ldr.w	r5, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 80061d8:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80061da:	f003 0e07 	and.w	lr, r3, #7
 80061de:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80061e2:	260f      	movs	r6, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80061e4:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80061e8:	fa06 fe0e 	lsl.w	lr, r6, lr
 80061ec:	9e00      	ldr	r6, [sp, #0]
 80061ee:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 80061f2:	9e01      	ldr	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80061f4:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 80061f8:	6235      	str	r5, [r6, #32]
 80061fa:	e752      	b.n	80060a2 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80061fc:	2103      	movs	r1, #3
 80061fe:	fa01 f10c 	lsl.w	r1, r1, ip
 8006202:	43c9      	mvns	r1, r1
 8006204:	e7d2      	b.n	80061ac <HAL_GPIO_Init+0x14c>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006206:	f04f 0e03 	mov.w	lr, #3
 800620a:	fa0e f505 	lsl.w	r5, lr, r5
 800620e:	4329      	orrs	r1, r5
 8006210:	e786      	b.n	8006120 <HAL_GPIO_Init+0xc0>
 8006212:	fa0b f505 	lsl.w	r5, fp, r5
 8006216:	4329      	orrs	r1, r5
 8006218:	e782      	b.n	8006120 <HAL_GPIO_Init+0xc0>
 800621a:	f04f 0e02 	mov.w	lr, #2
 800621e:	fa0e f505 	lsl.w	r5, lr, r5
 8006222:	4329      	orrs	r1, r5
 8006224:	e77c      	b.n	8006120 <HAL_GPIO_Init+0xc0>
 8006226:	f04f 0e04 	mov.w	lr, #4
 800622a:	fa0e f505 	lsl.w	r5, lr, r5
 800622e:	4329      	orrs	r1, r5
 8006230:	e776      	b.n	8006120 <HAL_GPIO_Init+0xc0>
 8006232:	bf00      	nop
 8006234:	48000400 	.word	0x48000400
 8006238:	48000800 	.word	0x48000800
 800623c:	48000c00 	.word	0x48000c00
 8006240:	48001000 	.word	0x48001000
 8006244:	48001400 	.word	0x48001400
 8006248:	40010400 	.word	0x40010400
 800624c:	40021000 	.word	0x40021000

08006250 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006250:	b10a      	cbz	r2, 8006256 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006252:	6181      	str	r1, [r0, #24]
 8006254:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006256:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop

0800625c <HRTIM_OutputConfig>:
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800625c:	6800      	ldr	r0, [r0, #0]
 800625e:	ea4f 1cc1 	mov.w	ip, r1, lsl #7
 8006262:	eb00 11c1 	add.w	r1, r0, r1, lsl #7
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;

  switch (Output)
 8006266:	2a40      	cmp	r2, #64	; 0x40
{
 8006268:	b5f0      	push	{r4, r5, r6, r7, lr}
  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800626a:	f8d1 50e4 	ldr.w	r5, [r1, #228]	; 0xe4
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 800626e:	f8d1 40b8 	ldr.w	r4, [r1, #184]	; 0xb8
  switch (Output)
 8006272:	d04e      	beq.n	8006312 <HRTIM_OutputConfig+0xb6>
 8006274:	d832      	bhi.n	80062dc <HRTIM_OutputConfig+0x80>
 8006276:	3a01      	subs	r2, #1
 8006278:	2a1f      	cmp	r2, #31
 800627a:	d813      	bhi.n	80062a4 <HRTIM_OutputConfig+0x48>
 800627c:	2a1f      	cmp	r2, #31
 800627e:	d811      	bhi.n	80062a4 <HRTIM_OutputConfig+0x48>
 8006280:	e8df f002 	tbb	[pc, r2]
 8006284:	47103647 	.word	0x47103647
 8006288:	36101010 	.word	0x36101010
 800628c:	10101010 	.word	0x10101010
 8006290:	47101010 	.word	0x47101010
 8006294:	10101010 	.word	0x10101010
 8006298:	10101010 	.word	0x10101010
 800629c:	10101010 	.word	0x10101010
 80062a0:	36101010 	.word	0x36101010
 80062a4:	f06f 02fe 	mvn.w	r2, #254	; 0xfe
 80062a8:	2100      	movs	r1, #0
  default:
    break;
  }

  /* Clear output config */
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 80062aa:	4015      	ands	r5, r2
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 80062ac:	681a      	ldr	r2, [r3, #0]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 80062ae:	699f      	ldr	r7, [r3, #24]
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 80062b0:	408a      	lsls	r2, r1
 80062b2:	432a      	orrs	r2, r5
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 80062b4:	68dd      	ldr	r5, [r3, #12]
 80062b6:	408d      	lsls	r5, r1
 80062b8:	432a      	orrs	r2, r5
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 80062ba:	e9d3 6504 	ldrd	r6, r5, [r3, #16]
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 80062be:	fa07 fe01 	lsl.w	lr, r7, r1
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 80062c2:	fa06 f701 	lsl.w	r7, r6, r1
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 80062c6:	408d      	lsls	r5, r1
 80062c8:	433a      	orrs	r2, r7
 80062ca:	432a      	orrs	r2, r5
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80062cc:	2e08      	cmp	r6, #8
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 80062ce:	ea4e 0202 	orr.w	r2, lr, r2
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80062d2:	d02a      	beq.n	800632a <HRTIM_OutputConfig+0xce>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80062d4:	4460      	add	r0, ip
 80062d6:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
}
 80062da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (Output)
 80062dc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80062e0:	d006      	beq.n	80062f0 <HRTIM_OutputConfig+0x94>
 80062e2:	d911      	bls.n	8006308 <HRTIM_OutputConfig+0xac>
 80062e4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80062e8:	d013      	beq.n	8006312 <HRTIM_OutputConfig+0xb6>
 80062ea:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80062ee:	d1d9      	bne.n	80062a4 <HRTIM_OutputConfig+0x48>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80062f0:	eb00 020c 	add.w	r2, r0, ip
 80062f4:	6859      	ldr	r1, [r3, #4]
 80062f6:	f8c2 10c4 	str.w	r1, [r2, #196]	; 0xc4
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 80062fa:	6899      	ldr	r1, [r3, #8]
 80062fc:	f8c2 10c8 	str.w	r1, [r2, #200]	; 0xc8
      break;
 8006300:	f46f 027e 	mvn.w	r2, #16646144	; 0xfe0000
      shift = 16U;
 8006304:	2110      	movs	r1, #16
      break;
 8006306:	e7d0      	b.n	80062aa <HRTIM_OutputConfig+0x4e>
  switch (Output)
 8006308:	2a80      	cmp	r2, #128	; 0x80
 800630a:	d0f1      	beq.n	80062f0 <HRTIM_OutputConfig+0x94>
 800630c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8006310:	d1c8      	bne.n	80062a4 <HRTIM_OutputConfig+0x48>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8006312:	eb00 020c 	add.w	r2, r0, ip
 8006316:	6859      	ldr	r1, [r3, #4]
 8006318:	f8c2 10bc 	str.w	r1, [r2, #188]	; 0xbc
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 800631c:	6899      	ldr	r1, [r3, #8]
 800631e:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
      break;
 8006322:	f06f 02fe 	mvn.w	r2, #254	; 0xfe
  uint32_t shift = 0U;
 8006326:	2100      	movs	r1, #0
      break;
 8006328:	e7bf      	b.n	80062aa <HRTIM_OutputConfig+0x4e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800632a:	f014 2f02 	tst.w	r4, #33554944	; 0x2000200
 800632e:	d1d1      	bne.n	80062d4 <HRTIM_OutputConfig+0x78>
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8006330:	69db      	ldr	r3, [r3, #28]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8006332:	4460      	add	r0, ip
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8006334:	fa03 f101 	lsl.w	r1, r3, r1
 8006338:	430a      	orrs	r2, r1
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 800633a:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
}
 800633e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006340 <HRTIM_EventConfig>:
  * @retval None
  */
static void HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                              uint32_t Event,
                              HRTIM_EventCfgTypeDef *pEventCfg)
{
 8006340:	b430      	push	{r4, r5}
  uint32_t hrtim_eecr1;
  uint32_t hrtim_eecr2;
  uint32_t hrtim_eecr3;

  /* Configure external event channel */
  hrtim_eecr1 = hhrtim->Instance->sCommonRegs.EECR1;
 8006342:	6805      	ldr	r5, [r0, #0]
 8006344:	f8d5 43b0 	ldr.w	r4, [r5, #944]	; 0x3b0
  hrtim_eecr2 = hhrtim->Instance->sCommonRegs.EECR2;
 8006348:	f8d5 03b4 	ldr.w	r0, [r5, #948]	; 0x3b4
  hrtim_eecr3 = hhrtim->Instance->sCommonRegs.EECR3;
 800634c:	f8d5 33b8 	ldr.w	r3, [r5, #952]	; 0x3b8

  switch (Event)
 8006350:	290a      	cmp	r1, #10
 8006352:	d829      	bhi.n	80063a8 <HRTIM_EventConfig+0x68>
 8006354:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006358:	0032002a 	.word	0x0032002a
 800635c:	00630049 	.word	0x00630049
 8006360:	0099007e 	.word	0x0099007e
 8006364:	00ce00b4 	.word	0x00ce00b4
 8006368:	010800eb 	.word	0x010800eb
 800636c:	000b      	.short	0x000b
    }

  case HRTIM_EVENT_10:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE10SRC | HRTIM_EECR2_EE10POL | HRTIM_EECR2_EE10SNS);
      hrtim_eecr2 |= ((pEventCfg->Source << 24U) & HRTIM_EECR2_EE10SRC);
 800636e:	6811      	ldr	r1, [r2, #0]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR2_EE10POL);
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE10F);
 8006370:	f023 6c70 	bic.w	ip, r3, #251658240	; 0xf000000
      hrtim_eecr2 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR2_EE10POL);
 8006374:	6853      	ldr	r3, [r2, #4]
      hrtim_eecr2 |= ((pEventCfg->Source << 24U) & HRTIM_EECR2_EE10SRC);
 8006376:	0609      	lsls	r1, r1, #24
      hrtim_eecr2 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR2_EE10POL);
 8006378:	061b      	lsls	r3, r3, #24
 800637a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      hrtim_eecr2 |= ((pEventCfg->Source << 24U) & HRTIM_EECR2_EE10SRC);
 800637e:	f001 7140 	and.w	r1, r1, #50331648	; 0x3000000
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
 8006382:	4319      	orrs	r1, r3
      hrtim_eecr3 |= ((pEventCfg->Filter << 24U) & HRTIM_EECR3_EE10F);
 8006384:	e9d2 4302 	ldrd	r4, r3, [r2, #8]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
 8006388:	0622      	lsls	r2, r4, #24
 800638a:	f002 52c0 	and.w	r2, r2, #402653184	; 0x18000000
      hrtim_eecr3 |= ((pEventCfg->Filter << 24U) & HRTIM_EECR3_EE10F);
 800638e:	061b      	lsls	r3, r3, #24
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE10SRC | HRTIM_EECR2_EE10POL | HRTIM_EECR2_EE10SNS);
 8006390:	f020 50f8 	bic.w	r0, r0, #520093696	; 0x1f000000
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
 8006394:	430a      	orrs	r2, r1
      hrtim_eecr3 |= ((pEventCfg->Filter << 24U) & HRTIM_EECR3_EE10F);
 8006396:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
 800639a:	4310      	orrs	r0, r2
      hrtim_eecr3 |= ((pEventCfg->Filter << 24U) & HRTIM_EECR3_EE10F);
 800639c:	ea43 030c 	orr.w	r3, r3, ip
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 80063a0:	f8c5 03b4 	str.w	r0, [r5, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 80063a4:	f8c5 33b8 	str.w	r3, [r5, #952]	; 0x3b8
    }

  default:
    break;
  }
}
 80063a8:	bc30      	pop	{r4, r5}
 80063aa:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.EECR1 = 0U;
 80063ac:	2300      	movs	r3, #0
 80063ae:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
      hhrtim->Instance->sCommonRegs.EECR2 = 0U;
 80063b2:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = 0U;
 80063b6:	f8c5 33b8 	str.w	r3, [r5, #952]	; 0x3b8
      break;
 80063ba:	e7f5      	b.n	80063a8 <HRTIM_EventConfig+0x68>
      hrtim_eecr1 |= (pEventCfg->Polarity & HRTIM_EECR1_EE1POL);
 80063bc:	e9d2 3100 	ldrd	r3, r1, [r2]
 80063c0:	f001 0104 	and.w	r1, r1, #4
      hrtim_eecr1 |= (pEventCfg->Source & HRTIM_EECR1_EE1SRC);
 80063c4:	f003 0303 	and.w	r3, r3, #3
      hrtim_eecr1 |= (pEventCfg->Sensitivity & HRTIM_EECR1_EE1SNS);
 80063c8:	430b      	orrs	r3, r1
 80063ca:	6891      	ldr	r1, [r2, #8]
      hrtim_eecr1 |= (pEventCfg->FastMode  & HRTIM_EECR1_EE1FAST);
 80063cc:	6912      	ldr	r2, [r2, #16]
      hrtim_eecr1 |= (pEventCfg->Sensitivity & HRTIM_EECR1_EE1SNS);
 80063ce:	f001 0118 	and.w	r1, r1, #24
 80063d2:	430b      	orrs	r3, r1
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE1SRC | HRTIM_EECR1_EE1POL | HRTIM_EECR1_EE1SNS | HRTIM_EECR1_EE1FAST);
 80063d4:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
      hrtim_eecr1 |= (pEventCfg->Sensitivity & HRTIM_EECR1_EE1SNS);
 80063d8:	431c      	orrs	r4, r3
      hrtim_eecr1 |= (pEventCfg->FastMode  & HRTIM_EECR1_EE1FAST);
 80063da:	f002 0320 	and.w	r3, r2, #32
 80063de:	4323      	orrs	r3, r4
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80063e0:	f8c5 43b0 	str.w	r4, [r5, #944]	; 0x3b0
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80063e4:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
      break;
 80063e8:	e7de      	b.n	80063a8 <HRTIM_EventConfig+0x68>
      hrtim_eecr1 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR1_EE2POL);
 80063ea:	e9d2 3100 	ldrd	r3, r1, [r2]
      hrtim_eecr1 |= ((pEventCfg->Source << 6U) & HRTIM_EECR1_EE2SRC);
 80063ee:	019b      	lsls	r3, r3, #6
      hrtim_eecr1 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR1_EE2POL);
 80063f0:	0189      	lsls	r1, r1, #6
 80063f2:	f401 7180 	and.w	r1, r1, #256	; 0x100
      hrtim_eecr1 |= ((pEventCfg->Source << 6U) & HRTIM_EECR1_EE2SRC);
 80063f6:	b2db      	uxtb	r3, r3
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR1_EE2SNS);
 80063f8:	430b      	orrs	r3, r1
 80063fa:	6891      	ldr	r1, [r2, #8]
      hrtim_eecr1 |= ((pEventCfg->FastMode << 6U) & HRTIM_EECR1_EE2FAST);
 80063fc:	6912      	ldr	r2, [r2, #16]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR1_EE2SNS);
 80063fe:	0189      	lsls	r1, r1, #6
 8006400:	f401 61c0 	and.w	r1, r1, #1536	; 0x600
 8006404:	430b      	orrs	r3, r1
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE2SRC | HRTIM_EECR1_EE2POL | HRTIM_EECR1_EE2SNS | HRTIM_EECR1_EE2FAST);
 8006406:	f424 647c 	bic.w	r4, r4, #4032	; 0xfc0
      hrtim_eecr1 |= ((pEventCfg->FastMode << 6U) & HRTIM_EECR1_EE2FAST);
 800640a:	0192      	lsls	r2, r2, #6
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR1_EE2SNS);
 800640c:	431c      	orrs	r4, r3
      hrtim_eecr1 |= ((pEventCfg->FastMode << 6U) & HRTIM_EECR1_EE2FAST);
 800640e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006412:	4323      	orrs	r3, r4
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8006414:	f8c5 43b0 	str.w	r4, [r5, #944]	; 0x3b0
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8006418:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
      break;
 800641c:	e7c4      	b.n	80063a8 <HRTIM_EventConfig+0x68>
      hrtim_eecr1 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR1_EE3POL);
 800641e:	e9d2 3100 	ldrd	r3, r1, [r2]
      hrtim_eecr1 |= ((pEventCfg->Source << 12U) & HRTIM_EECR1_EE3SRC);
 8006422:	031b      	lsls	r3, r3, #12
      hrtim_eecr1 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR1_EE3POL);
 8006424:	0309      	lsls	r1, r1, #12
 8006426:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
      hrtim_eecr1 |= ((pEventCfg->Source << 12U) & HRTIM_EECR1_EE3SRC);
 800642a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR1_EE3SNS);
 800642e:	430b      	orrs	r3, r1
 8006430:	6891      	ldr	r1, [r2, #8]
      hrtim_eecr1 |= ((pEventCfg->FastMode << 12U) & HRTIM_EECR1_EE3FAST);
 8006432:	6912      	ldr	r2, [r2, #16]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR1_EE3SNS);
 8006434:	0309      	lsls	r1, r1, #12
 8006436:	f401 31c0 	and.w	r1, r1, #98304	; 0x18000
 800643a:	430b      	orrs	r3, r1
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE3SRC | HRTIM_EECR1_EE3POL | HRTIM_EECR1_EE3SNS | HRTIM_EECR1_EE3FAST);
 800643c:	f424 347c 	bic.w	r4, r4, #258048	; 0x3f000
      hrtim_eecr1 |= ((pEventCfg->FastMode << 12U) & HRTIM_EECR1_EE3FAST);
 8006440:	0312      	lsls	r2, r2, #12
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR1_EE3SNS);
 8006442:	431c      	orrs	r4, r3
      hrtim_eecr1 |= ((pEventCfg->FastMode << 12U) & HRTIM_EECR1_EE3FAST);
 8006444:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006448:	4323      	orrs	r3, r4
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800644a:	f8c5 43b0 	str.w	r4, [r5, #944]	; 0x3b0
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800644e:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
      break;
 8006452:	e7a9      	b.n	80063a8 <HRTIM_EventConfig+0x68>
      hrtim_eecr1 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR1_EE4POL);
 8006454:	e9d2 3100 	ldrd	r3, r1, [r2]
      hrtim_eecr1 |= ((pEventCfg->Source << 18U) & HRTIM_EECR1_EE4SRC);
 8006458:	049b      	lsls	r3, r3, #18
      hrtim_eecr1 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR1_EE4POL);
 800645a:	0489      	lsls	r1, r1, #18
 800645c:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
      hrtim_eecr1 |= ((pEventCfg->Source << 18U) & HRTIM_EECR1_EE4SRC);
 8006460:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR1_EE4SNS);
 8006464:	430b      	orrs	r3, r1
 8006466:	6891      	ldr	r1, [r2, #8]
      hrtim_eecr1 |= ((pEventCfg->FastMode << 18U) & HRTIM_EECR1_EE4FAST);
 8006468:	6912      	ldr	r2, [r2, #16]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR1_EE4SNS);
 800646a:	0489      	lsls	r1, r1, #18
 800646c:	f401 01c0 	and.w	r1, r1, #6291456	; 0x600000
 8006470:	430b      	orrs	r3, r1
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE4SRC | HRTIM_EECR1_EE4POL | HRTIM_EECR1_EE4SNS | HRTIM_EECR1_EE4FAST);
 8006472:	f424 047c 	bic.w	r4, r4, #16515072	; 0xfc0000
      hrtim_eecr1 |= ((pEventCfg->FastMode << 18U) & HRTIM_EECR1_EE4FAST);
 8006476:	0492      	lsls	r2, r2, #18
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR1_EE4SNS);
 8006478:	431c      	orrs	r4, r3
      hrtim_eecr1 |= ((pEventCfg->FastMode << 18U) & HRTIM_EECR1_EE4FAST);
 800647a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800647e:	4323      	orrs	r3, r4
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8006480:	f8c5 43b0 	str.w	r4, [r5, #944]	; 0x3b0
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8006484:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
      break;
 8006488:	e78e      	b.n	80063a8 <HRTIM_EventConfig+0x68>
      hrtim_eecr1 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR1_EE5POL);
 800648a:	e9d2 3100 	ldrd	r3, r1, [r2]
      hrtim_eecr1 |= ((pEventCfg->Source << 24U) & HRTIM_EECR1_EE5SRC);
 800648e:	061b      	lsls	r3, r3, #24
      hrtim_eecr1 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR1_EE5POL);
 8006490:	0609      	lsls	r1, r1, #24
 8006492:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
      hrtim_eecr1 |= ((pEventCfg->Source << 24U) & HRTIM_EECR1_EE5SRC);
 8006496:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR1_EE5SNS);
 800649a:	430b      	orrs	r3, r1
 800649c:	6891      	ldr	r1, [r2, #8]
      hrtim_eecr1 |= ((pEventCfg->FastMode << 24U) & HRTIM_EECR1_EE5FAST);
 800649e:	6912      	ldr	r2, [r2, #16]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR1_EE5SNS);
 80064a0:	0609      	lsls	r1, r1, #24
 80064a2:	f001 51c0 	and.w	r1, r1, #402653184	; 0x18000000
 80064a6:	430b      	orrs	r3, r1
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE5SRC | HRTIM_EECR1_EE5POL | HRTIM_EECR1_EE5SNS | HRTIM_EECR1_EE5FAST);
 80064a8:	f024 547c 	bic.w	r4, r4, #1056964608	; 0x3f000000
      hrtim_eecr1 |= ((pEventCfg->FastMode << 24U) & HRTIM_EECR1_EE5FAST);
 80064ac:	0612      	lsls	r2, r2, #24
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR1_EE5SNS);
 80064ae:	431c      	orrs	r4, r3
      hrtim_eecr1 |= ((pEventCfg->FastMode << 24U) & HRTIM_EECR1_EE5FAST);
 80064b0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80064b4:	4323      	orrs	r3, r4
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80064b6:	f8c5 43b0 	str.w	r4, [r5, #944]	; 0x3b0
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80064ba:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
      break;
 80064be:	e773      	b.n	80063a8 <HRTIM_EventConfig+0x68>
      hrtim_eecr2 |= (pEventCfg->Source & HRTIM_EECR2_EE6SRC);
 80064c0:	6811      	ldr	r1, [r2, #0]
      hrtim_eecr2 |= (pEventCfg->Polarity & HRTIM_EECR2_EE6POL);
 80064c2:	6854      	ldr	r4, [r2, #4]
      hrtim_eecr2 |= (pEventCfg->Source & HRTIM_EECR2_EE6SRC);
 80064c4:	f001 0103 	and.w	r1, r1, #3
      hrtim_eecr2 |= (pEventCfg->Polarity & HRTIM_EECR2_EE6POL);
 80064c8:	f004 0404 	and.w	r4, r4, #4
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE6F);
 80064cc:	f023 0c0f 	bic.w	ip, r3, #15
      hrtim_eecr2 |= (pEventCfg->Sensitivity & HRTIM_EECR2_EE6SNS);
 80064d0:	4321      	orrs	r1, r4
      hrtim_eecr3 |= (pEventCfg->Filter & HRTIM_EECR3_EE6F);
 80064d2:	e9d2 4302 	ldrd	r4, r3, [r2, #8]
      hrtim_eecr2 |= (pEventCfg->Sensitivity & HRTIM_EECR2_EE6SNS);
 80064d6:	f004 0218 	and.w	r2, r4, #24
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE6SRC | HRTIM_EECR2_EE6POL | HRTIM_EECR2_EE6SNS);
 80064da:	f020 001f 	bic.w	r0, r0, #31
      hrtim_eecr2 |= (pEventCfg->Sensitivity & HRTIM_EECR2_EE6SNS);
 80064de:	4311      	orrs	r1, r2
      hrtim_eecr3 |= (pEventCfg->Filter & HRTIM_EECR3_EE6F);
 80064e0:	f003 030f 	and.w	r3, r3, #15
      hrtim_eecr2 |= (pEventCfg->Sensitivity & HRTIM_EECR2_EE6SNS);
 80064e4:	4308      	orrs	r0, r1
      hrtim_eecr3 |= (pEventCfg->Filter & HRTIM_EECR3_EE6F);
 80064e6:	ea43 030c 	orr.w	r3, r3, ip
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 80064ea:	f8c5 03b4 	str.w	r0, [r5, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 80064ee:	f8c5 33b8 	str.w	r3, [r5, #952]	; 0x3b8
      break;
 80064f2:	e759      	b.n	80063a8 <HRTIM_EventConfig+0x68>
      hrtim_eecr2 |= ((pEventCfg->Source << 6U) & HRTIM_EECR2_EE7SRC);
 80064f4:	6811      	ldr	r1, [r2, #0]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE7F);
 80064f6:	f423 7c70 	bic.w	ip, r3, #960	; 0x3c0
      hrtim_eecr2 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR2_EE7POL);
 80064fa:	6853      	ldr	r3, [r2, #4]
      hrtim_eecr2 |= ((pEventCfg->Source << 6U) & HRTIM_EECR2_EE7SRC);
 80064fc:	0189      	lsls	r1, r1, #6
      hrtim_eecr2 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR2_EE7POL);
 80064fe:	019b      	lsls	r3, r3, #6
 8006500:	f403 7380 	and.w	r3, r3, #256	; 0x100
      hrtim_eecr2 |= ((pEventCfg->Source << 6U) & HRTIM_EECR2_EE7SRC);
 8006504:	b2c9      	uxtb	r1, r1
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR2_EE7SNS);
 8006506:	4319      	orrs	r1, r3
      hrtim_eecr3 |= ((pEventCfg->Filter << 6U) & HRTIM_EECR3_EE7F);
 8006508:	e9d2 4302 	ldrd	r4, r3, [r2, #8]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR2_EE7SNS);
 800650c:	01a2      	lsls	r2, r4, #6
 800650e:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
      hrtim_eecr3 |= ((pEventCfg->Filter << 6U) & HRTIM_EECR3_EE7F);
 8006512:	019b      	lsls	r3, r3, #6
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE7SRC | HRTIM_EECR2_EE7POL | HRTIM_EECR2_EE7SNS);
 8006514:	f420 60f8 	bic.w	r0, r0, #1984	; 0x7c0
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR2_EE7SNS);
 8006518:	430a      	orrs	r2, r1
      hrtim_eecr3 |= ((pEventCfg->Filter << 6U) & HRTIM_EECR3_EE7F);
 800651a:	f403 7370 	and.w	r3, r3, #960	; 0x3c0
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR2_EE7SNS);
 800651e:	4310      	orrs	r0, r2
      hrtim_eecr3 |= ((pEventCfg->Filter << 6U) & HRTIM_EECR3_EE7F);
 8006520:	ea43 030c 	orr.w	r3, r3, ip
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8006524:	f8c5 03b4 	str.w	r0, [r5, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8006528:	f8c5 33b8 	str.w	r3, [r5, #952]	; 0x3b8
      break;
 800652c:	e73c      	b.n	80063a8 <HRTIM_EventConfig+0x68>
      hrtim_eecr2 |= ((pEventCfg->Source << 12U) & HRTIM_EECR2_EE8SRC);
 800652e:	6811      	ldr	r1, [r2, #0]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE8F);
 8006530:	f423 4c70 	bic.w	ip, r3, #61440	; 0xf000
      hrtim_eecr2 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR2_EE8POL);
 8006534:	6853      	ldr	r3, [r2, #4]
      hrtim_eecr2 |= ((pEventCfg->Source << 12U) & HRTIM_EECR2_EE8SRC);
 8006536:	0309      	lsls	r1, r1, #12
      hrtim_eecr2 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR2_EE8POL);
 8006538:	031b      	lsls	r3, r3, #12
 800653a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      hrtim_eecr2 |= ((pEventCfg->Source << 12U) & HRTIM_EECR2_EE8SRC);
 800653e:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR2_EE8SNS);
 8006542:	4319      	orrs	r1, r3
      hrtim_eecr3 |= ((pEventCfg->Filter << 12U) & HRTIM_EECR3_EE8F );
 8006544:	e9d2 4302 	ldrd	r4, r3, [r2, #8]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR2_EE8SNS);
 8006548:	0322      	lsls	r2, r4, #12
 800654a:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
      hrtim_eecr3 |= ((pEventCfg->Filter << 12U) & HRTIM_EECR3_EE8F );
 800654e:	031b      	lsls	r3, r3, #12
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE8SRC | HRTIM_EECR2_EE8POL | HRTIM_EECR2_EE8SNS);
 8006550:	f420 30f8 	bic.w	r0, r0, #126976	; 0x1f000
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR2_EE8SNS);
 8006554:	430a      	orrs	r2, r1
      hrtim_eecr3 |= ((pEventCfg->Filter << 12U) & HRTIM_EECR3_EE8F );
 8006556:	b29b      	uxth	r3, r3
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR2_EE8SNS);
 8006558:	4310      	orrs	r0, r2
      hrtim_eecr3 |= ((pEventCfg->Filter << 12U) & HRTIM_EECR3_EE8F );
 800655a:	ea43 030c 	orr.w	r3, r3, ip
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 800655e:	f8c5 03b4 	str.w	r0, [r5, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8006562:	f8c5 33b8 	str.w	r3, [r5, #952]	; 0x3b8
      break;
 8006566:	e71f      	b.n	80063a8 <HRTIM_EventConfig+0x68>
      hrtim_eecr2 |= ((pEventCfg->Source << 18U) & HRTIM_EECR2_EE9SRC);
 8006568:	6811      	ldr	r1, [r2, #0]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE9F);
 800656a:	f423 1c70 	bic.w	ip, r3, #3932160	; 0x3c0000
      hrtim_eecr2 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR2_EE9POL);
 800656e:	6853      	ldr	r3, [r2, #4]
      hrtim_eecr2 |= ((pEventCfg->Source << 18U) & HRTIM_EECR2_EE9SRC);
 8006570:	0489      	lsls	r1, r1, #18
      hrtim_eecr2 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR2_EE9POL);
 8006572:	049b      	lsls	r3, r3, #18
 8006574:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
      hrtim_eecr2 |= ((pEventCfg->Source << 18U) & HRTIM_EECR2_EE9SRC);
 8006578:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR2_EE9SNS);
 800657c:	4319      	orrs	r1, r3
      hrtim_eecr3 |= ((pEventCfg->Filter << 18U) & HRTIM_EECR3_EE9F);
 800657e:	e9d2 4302 	ldrd	r4, r3, [r2, #8]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR2_EE9SNS);
 8006582:	04a2      	lsls	r2, r4, #18
 8006584:	f402 02c0 	and.w	r2, r2, #6291456	; 0x600000
      hrtim_eecr3 |= ((pEventCfg->Filter << 18U) & HRTIM_EECR3_EE9F);
 8006588:	049b      	lsls	r3, r3, #18
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE9SRC | HRTIM_EECR2_EE9POL | HRTIM_EECR2_EE9SNS);
 800658a:	f420 00f8 	bic.w	r0, r0, #8126464	; 0x7c0000
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR2_EE9SNS);
 800658e:	430a      	orrs	r2, r1
      hrtim_eecr3 |= ((pEventCfg->Filter << 18U) & HRTIM_EECR3_EE9F);
 8006590:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR2_EE9SNS);
 8006594:	4310      	orrs	r0, r2
      hrtim_eecr3 |= ((pEventCfg->Filter << 18U) & HRTIM_EECR3_EE9F);
 8006596:	ea43 030c 	orr.w	r3, r3, ip
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 800659a:	f8c5 03b4 	str.w	r0, [r5, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 800659e:	f8c5 33b8 	str.w	r3, [r5, #952]	; 0x3b8
      break;
 80065a2:	e701      	b.n	80063a8 <HRTIM_EventConfig+0x68>

080065a4 <HRTIM_GetDMAHandleFromTimerIdx>:
static DMA_HandleTypeDef * HRTIM_GetDMAHandleFromTimerIdx(HRTIM_HandleTypeDef * hhrtim,
                                                          uint32_t TimerIdx)
{
  DMA_HandleTypeDef * hdma = (DMA_HandleTypeDef *)NULL;

  switch (TimerIdx)
 80065a4:	2906      	cmp	r1, #6
 80065a6:	d81a      	bhi.n	80065de <HRTIM_GetDMAHandleFromTimerIdx+0x3a>
 80065a8:	e8df f001 	tbb	[pc, r1]
 80065ac:	100d0a07 	.word	0x100d0a07
 80065b0:	1613      	.short	0x1613
 80065b2:	04          	.byte	0x04
 80065b3:	00          	.byte	0x00
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hdma = hhrtim->hdmaMaster;
 80065b4:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
      break;
 80065b8:	4770      	bx	lr
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hdma = hhrtim->hdmaTimerA;
 80065ba:	f8d0 00e4 	ldr.w	r0, [r0, #228]	; 0xe4
      break;
 80065be:	4770      	bx	lr
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hdma = hhrtim->hdmaTimerB;
 80065c0:	f8d0 00e8 	ldr.w	r0, [r0, #232]	; 0xe8
      break;
 80065c4:	4770      	bx	lr
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hdma = hhrtim->hdmaTimerC;
 80065c6:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
      break;
 80065ca:	4770      	bx	lr
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hdma = hhrtim->hdmaTimerD;
 80065cc:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
      break;
 80065d0:	4770      	bx	lr
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hdma = hhrtim->hdmaTimerE;
 80065d2:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
      break;
 80065d6:	4770      	bx	lr
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hdma = hhrtim->hdmaTimerF;
 80065d8:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
      break;
 80065dc:	4770      	bx	lr
  switch (TimerIdx)
 80065de:	2000      	movs	r0, #0
  default:
    break;
  }

  return hdma;
}
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop

080065e4 <HRTIM_ForceRegistersUpdate>:
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
  switch (TimerIdx)
 80065e4:	2906      	cmp	r1, #6
 80065e6:	d80c      	bhi.n	8006602 <HRTIM_ForceRegistersUpdate+0x1e>
 80065e8:	e8df f001 	tbb	[pc, r1]
 80065ec:	2c241c14 	.word	0x2c241c14
 80065f0:	0434      	.short	0x0434
 80065f2:	0c          	.byte	0x0c
 80065f3:	00          	.byte	0x00
      break;
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 80065f4:	6802      	ldr	r2, [r0, #0]
 80065f6:	f8d2 3384 	ldr.w	r3, [r2, #900]	; 0x384
 80065fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065fe:	f8c2 3384 	str.w	r3, [r2, #900]	; 0x384
    }

  default:
    break;
  }
}
 8006602:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8006604:	6802      	ldr	r2, [r0, #0]
 8006606:	f8d2 3384 	ldr.w	r3, [r2, #900]	; 0x384
 800660a:	f043 0301 	orr.w	r3, r3, #1
 800660e:	f8c2 3384 	str.w	r3, [r2, #900]	; 0x384
      break;
 8006612:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8006614:	6802      	ldr	r2, [r0, #0]
 8006616:	f8d2 3384 	ldr.w	r3, [r2, #900]	; 0x384
 800661a:	f043 0302 	orr.w	r3, r3, #2
 800661e:	f8c2 3384 	str.w	r3, [r2, #900]	; 0x384
      break;
 8006622:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8006624:	6802      	ldr	r2, [r0, #0]
 8006626:	f8d2 3384 	ldr.w	r3, [r2, #900]	; 0x384
 800662a:	f043 0304 	orr.w	r3, r3, #4
 800662e:	f8c2 3384 	str.w	r3, [r2, #900]	; 0x384
      break;
 8006632:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8006634:	6802      	ldr	r2, [r0, #0]
 8006636:	f8d2 3384 	ldr.w	r3, [r2, #900]	; 0x384
 800663a:	f043 0308 	orr.w	r3, r3, #8
 800663e:	f8c2 3384 	str.w	r3, [r2, #900]	; 0x384
      break;
 8006642:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8006644:	6802      	ldr	r2, [r0, #0]
 8006646:	f8d2 3384 	ldr.w	r3, [r2, #900]	; 0x384
 800664a:	f043 0310 	orr.w	r3, r3, #16
 800664e:	f8c2 3384 	str.w	r3, [r2, #900]	; 0x384
      break;
 8006652:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8006654:	6802      	ldr	r2, [r0, #0]
 8006656:	f8d2 3384 	ldr.w	r3, [r2, #900]	; 0x384
 800665a:	f043 0320 	orr.w	r3, r3, #32
 800665e:	f8c2 3384 	str.w	r3, [r2, #900]	; 0x384
      break;
 8006662:	4770      	bx	lr

08006664 <HAL_HRTIM_Init>:
  if(hhrtim == NULL)
 8006664:	2800      	cmp	r0, #0
 8006666:	d046      	beq.n	80066f6 <HAL_HRTIM_Init+0x92>
{
 8006668:	b510      	push	{r4, lr}
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800666a:	6882      	ldr	r2, [r0, #8]
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 800666c:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800666e:	2102      	movs	r1, #2
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8006670:	07d2      	lsls	r2, r2, #31
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8006672:	e9c0 3338 	strd	r3, r3, [r0, #224]	; 0xe0
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8006676:	e9c0 333a 	strd	r3, r3, [r0, #232]	; 0xe8
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 800667a:	e9c0 333c 	strd	r3, r3, [r0, #240]	; 0xf0
{
 800667e:	b082      	sub	sp, #8
 8006680:	4604      	mov	r4, r0
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006682:	f880 10dd 	strb.w	r1, [r0, #221]	; 0xdd
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8006686:	f8c0 30f8 	str.w	r3, [r0, #248]	; 0xf8
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800668a:	d50f      	bpl.n	80066ac <HAL_HRTIM_Init+0x48>
    if (hhrtim->Instance == HRTIM1)
 800668c:	6801      	ldr	r1, [r0, #0]
 800668e:	4b21      	ldr	r3, [pc, #132]	; (8006714 <HAL_HRTIM_Init+0xb0>)
 8006690:	4299      	cmp	r1, r3
 8006692:	d032      	beq.n	80066fa <HAL_HRTIM_Init+0x96>
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8006694:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006698:	680a      	ldr	r2, [r1, #0]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 800669a:	f400 4040 	and.w	r0, r0, #49152	; 0xc000
 800669e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80066a2:	4302      	orrs	r2, r0
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80066a4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80066a8:	4313      	orrs	r3, r2
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80066aa:	600b      	str	r3, [r1, #0]
  HAL_HRTIM_MspInit(hhrtim);
 80066ac:	4620      	mov	r0, r4
 80066ae:	f7fe fedf 	bl	8005470 <HAL_HRTIM_MspInit>
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 80066b2:	68a3      	ldr	r3, [r4, #8]
 80066b4:	079b      	lsls	r3, r3, #30
 80066b6:	d414      	bmi.n	80066e2 <HAL_HRTIM_Init+0x7e>
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80066b8:	2101      	movs	r1, #1
  __HAL_UNLOCK(hhrtim);
 80066ba:	2200      	movs	r2, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80066bc:	f884 10dd 	strb.w	r1, [r4, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 80066c0:	4623      	mov	r3, r4
 80066c2:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 80066c6:	f104 01c4 	add.w	r1, r4, #196	; 0xc4
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80066ca:	629a      	str	r2, [r3, #40]	; 0x28
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80066cc:	631a      	str	r2, [r3, #48]	; 0x30
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80066ce:	e9c3 2206 	strd	r2, r2, [r3, #24]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80066d2:	e9c3 2208 	strd	r2, r2, [r3, #32]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80066d6:	331c      	adds	r3, #28
 80066d8:	428b      	cmp	r3, r1
 80066da:	d1f6      	bne.n	80066ca <HAL_HRTIM_Init+0x66>
  return HAL_OK;
 80066dc:	2000      	movs	r0, #0
}
 80066de:	b002      	add	sp, #8
 80066e0:	bd10      	pop	{r4, pc}
    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80066e2:	6821      	ldr	r1, [r4, #0]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80066e4:	68e3      	ldr	r3, [r4, #12]
    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80066e6:	680a      	ldr	r2, [r1, #0]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80066e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80066ec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80066f0:	4313      	orrs	r3, r2
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80066f2:	600b      	str	r3, [r1, #0]
 80066f4:	e7e0      	b.n	80066b8 <HAL_HRTIM_Init+0x54>
    return HAL_ERROR;
 80066f6:	2001      	movs	r0, #1
}
 80066f8:	4770      	bx	lr
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80066fa:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
 80066fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006700:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006704:	661a      	str	r2, [r3, #96]	; 0x60
 8006706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006708:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800670c:	9301      	str	r3, [sp, #4]
 800670e:	9b01      	ldr	r3, [sp, #4]
 8006710:	e7c0      	b.n	8006694 <HAL_HRTIM_Init+0x30>
 8006712:	bf00      	nop
 8006714:	40016800 	.word	0x40016800

08006718 <HAL_HRTIM_DLLCalibrationStart>:
  __HAL_LOCK(hhrtim);
 8006718:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 800671c:	2b01      	cmp	r3, #1
 800671e:	d030      	beq.n	8006782 <HAL_HRTIM_DLLCalibrationStart+0x6a>
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006720:	2302      	movs	r3, #2
  __HAL_LOCK(hhrtim);
 8006722:	2201      	movs	r2, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006724:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8006728:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hhrtim);
 800672a:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 800672e:	f1b1 3fff 	cmp.w	r1, #4294967295
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8006732:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8006736:	d015      	beq.n	8006764 <HAL_HRTIM_DLLCalibrationStart+0x4c>
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8006738:	f042 0202 	orr.w	r2, r2, #2
 800673c:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8006740:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8006744:	f022 020c 	bic.w	r2, r2, #12
 8006748:	4311      	orrs	r1, r2
 800674a:	f8c3 13cc 	str.w	r1, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 800674e:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8006752:	f042 0201 	orr.w	r2, r2, #1
 8006756:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800675a:	2301      	movs	r3, #1
 800675c:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  return HAL_OK;
 8006760:	2000      	movs	r0, #0
 8006762:	4770      	bx	lr
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8006764:	f022 0202 	bic.w	r2, r2, #2
 8006768:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 800676c:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8006770:	f042 0201 	orr.w	r2, r2, #1
 8006774:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006778:	2301      	movs	r3, #1
 800677a:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  return HAL_OK;
 800677e:	2000      	movs	r0, #0
 8006780:	4770      	bx	lr
  __HAL_LOCK(hhrtim);
 8006782:	2002      	movs	r0, #2
}
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop

08006788 <HAL_HRTIM_PollForDLLCalibration>:
{
 8006788:	b570      	push	{r4, r5, r6, lr}
 800678a:	4605      	mov	r5, r0
 800678c:	460c      	mov	r4, r1
  tickstart = HAL_GetTick();
 800678e:	f7ff f983 	bl	8005a98 <HAL_GetTick>
 8006792:	4606      	mov	r6, r0
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8006794:	682a      	ldr	r2, [r5, #0]
 8006796:	e001      	b.n	800679c <HAL_HRTIM_PollForDLLCalibration+0x14>
    if (Timeout != HAL_MAX_DELAY)
 8006798:	1c61      	adds	r1, r4, #1
 800679a:	d10a      	bne.n	80067b2 <HAL_HRTIM_PollForDLLCalibration+0x2a>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 800679c:	f8d2 3388 	ldr.w	r3, [r2, #904]	; 0x388
 80067a0:	03db      	lsls	r3, r3, #15
 80067a2:	d5f9      	bpl.n	8006798 <HAL_HRTIM_PollForDLLCalibration+0x10>
  __HAL_UNLOCK(hhrtim);
 80067a4:	2000      	movs	r0, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80067a6:	2301      	movs	r3, #1
 80067a8:	f885 30dd 	strb.w	r3, [r5, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 80067ac:	f885 00dc 	strb.w	r0, [r5, #220]	; 0xdc
}
 80067b0:	bd70      	pop	{r4, r5, r6, pc}
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 80067b2:	f7ff f971 	bl	8005a98 <HAL_GetTick>
 80067b6:	1b80      	subs	r0, r0, r6
 80067b8:	42a0      	cmp	r0, r4
 80067ba:	d801      	bhi.n	80067c0 <HAL_HRTIM_PollForDLLCalibration+0x38>
 80067bc:	2c00      	cmp	r4, #0
 80067be:	d1e9      	bne.n	8006794 <HAL_HRTIM_PollForDLLCalibration+0xc>
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80067c0:	2307      	movs	r3, #7
 80067c2:	f885 30dd 	strb.w	r3, [r5, #221]	; 0xdd
        return HAL_TIMEOUT;
 80067c6:	2003      	movs	r0, #3
}
 80067c8:	bd70      	pop	{r4, r5, r6, pc}
 80067ca:	bf00      	nop

080067cc <HAL_HRTIM_TimeBaseConfig>:
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80067cc:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d033      	beq.n	800683c <HAL_HRTIM_TimeBaseConfig+0x70>
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80067d4:	2302      	movs	r3, #2
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80067d6:	2906      	cmp	r1, #6
{
 80067d8:	b410      	push	{r4}
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80067da:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80067de:	d01d      	beq.n	800681c <HAL_HRTIM_TimeBaseConfig+0x50>
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80067e0:	6803      	ldr	r3, [r0, #0]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80067e2:	6894      	ldr	r4, [r2, #8]
 80067e4:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80067e8:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80067ec:	f023 0307 	bic.w	r3, r3, #7
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80067f0:	4323      	orrs	r3, r4
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80067f2:	68d4      	ldr	r4, [r2, #12]
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80067f4:	f023 0318 	bic.w	r3, r3, #24
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80067f8:	4323      	orrs	r3, r4
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 80067fa:	e9d2 4200 	ldrd	r4, r2, [r2]
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80067fe:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8006802:	f8c1 4094 	str.w	r4, [r1, #148]	; 0x94
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8006806:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800680a:	2301      	movs	r3, #1
 800680c:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  return HAL_OK;
 8006810:	f04f 0c00 	mov.w	ip, #0
}
 8006814:	4660      	mov	r0, ip
 8006816:	f85d 4b04 	ldr.w	r4, [sp], #4
 800681a:	4770      	bx	lr
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800681c:	6801      	ldr	r1, [r0, #0]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800681e:	6894      	ldr	r4, [r2, #8]
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006820:	680b      	ldr	r3, [r1, #0]
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8006822:	f023 0307 	bic.w	r3, r3, #7
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8006826:	4323      	orrs	r3, r4
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8006828:	68d4      	ldr	r4, [r2, #12]
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 800682a:	f023 0318 	bic.w	r3, r3, #24
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 800682e:	4323      	orrs	r3, r4
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8006830:	e9d2 4200 	ldrd	r4, r2, [r2]
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006834:	600b      	str	r3, [r1, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8006836:	614c      	str	r4, [r1, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8006838:	618a      	str	r2, [r1, #24]
}
 800683a:	e7e6      	b.n	800680a <HAL_HRTIM_TimeBaseConfig+0x3e>
 800683c:	fa5f fc83 	uxtb.w	ip, r3
}
 8006840:	4660      	mov	r0, ip
 8006842:	4770      	bx	lr

08006844 <HAL_HRTIM_EventConfig>:
{
 8006844:	b538      	push	{r3, r4, r5, lr}
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006846:	f890 c0dd 	ldrb.w	ip, [r0, #221]	; 0xdd
 800684a:	f1bc 0f02 	cmp.w	ip, #2
 800684e:	fa5f f38c 	uxtb.w	r3, ip
 8006852:	d011      	beq.n	8006878 <HAL_HRTIM_EventConfig+0x34>
  __HAL_LOCK(hhrtim);
 8006854:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 8006858:	2b01      	cmp	r3, #1
 800685a:	4604      	mov	r4, r0
 800685c:	d00e      	beq.n	800687c <HAL_HRTIM_EventConfig+0x38>
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800685e:	2302      	movs	r3, #2
  __HAL_LOCK(hhrtim);
 8006860:	2501      	movs	r5, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006862:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  __HAL_LOCK(hhrtim);
 8006866:	f880 50dc 	strb.w	r5, [r0, #220]	; 0xdc
  HRTIM_EventConfig(hhrtim, Event, pEventCfg);
 800686a:	f7ff fd69 	bl	8006340 <HRTIM_EventConfig>
  __HAL_UNLOCK(hhrtim);
 800686e:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006870:	f884 50dd 	strb.w	r5, [r4, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 8006874:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
 8006878:	4618      	mov	r0, r3
 800687a:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_BUSY;
 800687c:	2302      	movs	r3, #2
}
 800687e:	4618      	mov	r0, r3
 8006880:	bd38      	pop	{r3, r4, r5, pc}
 8006882:	bf00      	nop

08006884 <HAL_HRTIM_EventPrescalerConfig>:
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006884:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 8006888:	2b02      	cmp	r3, #2
 800688a:	b2da      	uxtb	r2, r3
 800688c:	d018      	beq.n	80068c0 <HAL_HRTIM_EventPrescalerConfig+0x3c>
  __HAL_LOCK(hhrtim);
 800688e:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 8006892:	2b01      	cmp	r3, #1
 8006894:	d016      	beq.n	80068c4 <HAL_HRTIM_EventPrescalerConfig+0x40>
  MODIFY_REG(hhrtim->Instance->sCommonRegs.EECR3, HRTIM_EECR3_EEVSD, (Prescaler & HRTIM_EECR3_EEVSD));
 8006896:	6802      	ldr	r2, [r0, #0]
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006898:	2302      	movs	r3, #2
 800689a:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  MODIFY_REG(hhrtim->Instance->sCommonRegs.EECR3, HRTIM_EECR3_EEVSD, (Prescaler & HRTIM_EECR3_EEVSD));
 800689e:	f8d2 33b8 	ldr.w	r3, [r2, #952]	; 0x3b8
 80068a2:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 80068a6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
  __HAL_UNLOCK(hhrtim);
 80068aa:	f04f 0c00 	mov.w	ip, #0
  MODIFY_REG(hhrtim->Instance->sCommonRegs.EECR3, HRTIM_EECR3_EEVSD, (Prescaler & HRTIM_EECR3_EEVSD));
 80068ae:	4319      	orrs	r1, r3
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80068b0:	2301      	movs	r3, #1
  MODIFY_REG(hhrtim->Instance->sCommonRegs.EECR3, HRTIM_EECR3_EEVSD, (Prescaler & HRTIM_EECR3_EEVSD));
 80068b2:	f8c2 13b8 	str.w	r1, [r2, #952]	; 0x3b8
  return HAL_OK;
 80068b6:	4662      	mov	r2, ip
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80068b8:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 80068bc:	f880 c0dc 	strb.w	ip, [r0, #220]	; 0xdc
}
 80068c0:	4610      	mov	r0, r2
 80068c2:	4770      	bx	lr
     return HAL_BUSY;
 80068c4:	2202      	movs	r2, #2
}
 80068c6:	4610      	mov	r0, r2
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop

080068cc <HAL_HRTIM_FaultConfig>:
{
 80068cc:	b570      	push	{r4, r5, r6, lr}
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80068ce:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	b2dc      	uxtb	r4, r3
 80068d6:	d055      	beq.n	8006984 <HAL_HRTIM_FaultConfig+0xb8>
  __HAL_LOCK(hhrtim);
 80068d8:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 80068dc:	2b01      	cmp	r3, #1
 80068de:	f000 80e9 	beq.w	8006ab4 <HAL_HRTIM_FaultConfig+0x1e8>
 80068e2:	2401      	movs	r4, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80068e4:	2302      	movs	r3, #2
  __HAL_LOCK(hhrtim);
 80068e6:	f880 40dc 	strb.w	r4, [r0, #220]	; 0xdc
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80068ea:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  hrtim_fltinr1 = hhrtim->Instance->sCommonRegs.FLTINR1;
 80068ee:	6804      	ldr	r4, [r0, #0]
  source0 =  (pFaultCfg->Source & 1U);
 80068f0:	6815      	ldr	r5, [r2, #0]
  switch (Fault)
 80068f2:	f101 3cff 	add.w	ip, r1, #4294967295
  source0 =  (pFaultCfg->Source & 1U);
 80068f6:	f005 0e01 	and.w	lr, r5, #1
  hrtim_fltinr1 = hhrtim->Instance->sCommonRegs.FLTINR1;
 80068fa:	f8d4 13d0 	ldr.w	r1, [r4, #976]	; 0x3d0
  hrtim_fltinr2 = hhrtim->Instance->sCommonRegs.FLTINR2;
 80068fe:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
  source1 = ((pFaultCfg->Source & 2U) >> 1);
 8006902:	f3c5 0540 	ubfx	r5, r5, #1, #1
  switch (Fault)
 8006906:	f1bc 0f1f 	cmp.w	ip, #31
 800690a:	d811      	bhi.n	8006930 <HAL_HRTIM_FaultConfig+0x64>
 800690c:	e8df f00c 	tbb	[pc, ip]
 8006910:	6f10563c 	.word	0x6f10563c
 8006914:	88101010 	.word	0x88101010
 8006918:	10101010 	.word	0x10101010
 800691c:	a1101010 	.word	0xa1101010
 8006920:	10101010 	.word	0x10101010
 8006924:	10101010 	.word	0x10101010
 8006928:	10101010 	.word	0x10101010
 800692c:	b8101010 	.word	0xb8101010
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006930:	2207      	movs	r2, #7
 8006932:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
      __HAL_UNLOCK(hhrtim);
 8006936:	2200      	movs	r2, #0
 8006938:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800693c:	f890 20dd 	ldrb.w	r2, [r0, #221]	; 0xdd
 8006940:	2a07      	cmp	r2, #7
 8006942:	d038      	beq.n	80069b6 <HAL_HRTIM_FaultConfig+0xea>
  hhrtim->Instance->sCommonRegs.FLTINR1 = (hrtim_fltinr1 & (~(HRTIM_FLTINR1_FLTxLCK)));
 8006944:	f001 327f 	and.w	r2, r1, #2139062143	; 0x7f7f7f7f
 8006948:	f8c4 23d0 	str.w	r2, [r4, #976]	; 0x3d0
  hhrtim->Instance->sCommonRegs.FLTINR2 = (hrtim_fltinr2 & (~(HRTIM_FLTINR2_FLTxLCK)));
 800694c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006950:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006954:	f8c4 23d4 	str.w	r2, [r4, #980]	; 0x3d4
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR1,(hrtim_fltinr1 & HRTIM_FLTINR1_FLTxLCK));
 8006958:	f8d4 23d0 	ldr.w	r2, [r4, #976]	; 0x3d0
 800695c:	f001 3180 	and.w	r1, r1, #2155905152	; 0x80808080
 8006960:	4311      	orrs	r1, r2
 8006962:	f8c4 13d0 	str.w	r1, [r4, #976]	; 0x3d0
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR2,(hrtim_fltinr2 & HRTIM_FLTINR2_FLTxLCK));
 8006966:	f8d4 13d4 	ldr.w	r1, [r4, #980]	; 0x3d4
 800696a:	f248 0280 	movw	r2, #32896	; 0x8080
 800696e:	4013      	ands	r3, r2
 8006970:	430b      	orrs	r3, r1
  __HAL_UNLOCK(hhrtim);
 8006972:	2200      	movs	r2, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006974:	2101      	movs	r1, #1
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR2,(hrtim_fltinr2 & HRTIM_FLTINR2_FLTxLCK));
 8006976:	f8c4 33d4 	str.w	r3, [r4, #980]	; 0x3d4
  return HAL_OK;
 800697a:	4614      	mov	r4, r2
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800697c:	f880 10dd 	strb.w	r1, [r0, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 8006980:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
}
 8006984:	4620      	mov	r0, r4
 8006986:	bd70      	pop	{r4, r5, r6, pc}
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT1SRC_1_Pos);
 8006988:	f365 4310 	bfi	r3, r5, #16, #1
      hrtim_fltinr1 |= (pFaultCfg->Polarity & HRTIM_FLTINR1_FLT1P);
 800698c:	6855      	ldr	r5, [r2, #4]
      hrtim_fltinr1 |= (pFaultCfg->Lock & HRTIM_FLTINR1_FLT1LCK);
 800698e:	e9d2 6202 	ldrd	r6, r2, [r2, #8]
      hrtim_fltinr1 |= (pFaultCfg->Polarity & HRTIM_FLTINR1_FLT1P);
 8006992:	f005 0502 	and.w	r5, r5, #2
      hrtim_fltinr1 |= (pFaultCfg->Filter & HRTIM_FLTINR1_FLT1F);
 8006996:	f006 0678 	and.w	r6, r6, #120	; 0x78
      hrtim_fltinr1 |= (pFaultCfg->Lock & HRTIM_FLTINR1_FLT1LCK);
 800699a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800699e:	4335      	orrs	r5, r6
 80069a0:	4315      	orrs	r5, r2
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80069a2:	f890 20dd 	ldrb.w	r2, [r0, #221]	; 0xdd
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT1P | HRTIM_FLTINR1_FLT1SRC_0 | HRTIM_FLTINR1_FLT1F | HRTIM_FLTINR1_FLT1LCK);
 80069a6:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
      hrtim_fltinr1 |= (pFaultCfg->Lock & HRTIM_FLTINR1_FLT1LCK);
 80069aa:	ea45 0e8e 	orr.w	lr, r5, lr, lsl #2
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80069ae:	2a07      	cmp	r2, #7
      hrtim_fltinr1 |= (pFaultCfg->Lock & HRTIM_FLTINR1_FLT1LCK);
 80069b0:	ea4e 0101 	orr.w	r1, lr, r1
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80069b4:	d1c6      	bne.n	8006944 <HAL_HRTIM_FaultConfig+0x78>
     return HAL_ERROR;
 80069b6:	2401      	movs	r4, #1
}
 80069b8:	4620      	mov	r0, r4
 80069ba:	bd70      	pop	{r4, r5, r6, pc}
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT2SRC_1_Pos);
 80069bc:	f365 4351 	bfi	r3, r5, #17, #1
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR1_FLT2P);
 80069c0:	6855      	ldr	r5, [r2, #4]
 80069c2:	022d      	lsls	r5, r5, #8
 80069c4:	f405 7500 	and.w	r5, r5, #512	; 0x200
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR1_FLT2LCK);
 80069c8:	ea45 2e8e 	orr.w	lr, r5, lr, lsl #10
 80069cc:	e9d2 5202 	ldrd	r5, r2, [r2, #8]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR1_FLT2F);
 80069d0:	022d      	lsls	r5, r5, #8
 80069d2:	f405 45f0 	and.w	r5, r5, #30720	; 0x7800
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR1_FLT2LCK);
 80069d6:	0212      	lsls	r2, r2, #8
 80069d8:	ea4e 0e05 	orr.w	lr, lr, r5
 80069dc:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT2P | HRTIM_FLTINR1_FLT2SRC_0 | HRTIM_FLTINR1_FLT2F | HRTIM_FLTINR1_FLT2LCK);
 80069e0:	f421 417e 	bic.w	r1, r1, #65024	; 0xfe00
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR1_FLT2LCK);
 80069e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80069e8:	ea4e 0101 	orr.w	r1, lr, r1
      break;
 80069ec:	e7a6      	b.n	800693c <HAL_HRTIM_FaultConfig+0x70>
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT3SRC_1_Pos);
 80069ee:	f365 4392 	bfi	r3, r5, #18, #1
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 16U) & HRTIM_FLTINR1_FLT3P);
 80069f2:	6855      	ldr	r5, [r2, #4]
 80069f4:	042d      	lsls	r5, r5, #16
 80069f6:	f405 3500 	and.w	r5, r5, #131072	; 0x20000
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 16U) & HRTIM_FLTINR1_FLT3LCK);
 80069fa:	ea45 4e8e 	orr.w	lr, r5, lr, lsl #18
 80069fe:	e9d2 5202 	ldrd	r5, r2, [r2, #8]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 16U) & HRTIM_FLTINR1_FLT3F);
 8006a02:	042d      	lsls	r5, r5, #16
 8006a04:	f405 05f0 	and.w	r5, r5, #7864320	; 0x780000
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 16U) & HRTIM_FLTINR1_FLT3LCK);
 8006a08:	0412      	lsls	r2, r2, #16
 8006a0a:	ea4e 0e05 	orr.w	lr, lr, r5
 8006a0e:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT3P | HRTIM_FLTINR1_FLT3SRC_0 | HRTIM_FLTINR1_FLT3F | HRTIM_FLTINR1_FLT3LCK);
 8006a12:	f421 017e 	bic.w	r1, r1, #16646144	; 0xfe0000
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 16U) & HRTIM_FLTINR1_FLT3LCK);
 8006a16:	ea4e 0e02 	orr.w	lr, lr, r2
 8006a1a:	ea4e 0101 	orr.w	r1, lr, r1
      break;
 8006a1e:	e78d      	b.n	800693c <HAL_HRTIM_FaultConfig+0x70>
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT4SRC_1_Pos);
 8006a20:	f365 43d3 	bfi	r3, r5, #19, #1
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 24U) & HRTIM_FLTINR1_FLT4P);
 8006a24:	6855      	ldr	r5, [r2, #4]
 8006a26:	062d      	lsls	r5, r5, #24
 8006a28:	f005 7500 	and.w	r5, r5, #33554432	; 0x2000000
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 24U) & HRTIM_FLTINR1_FLT4LCK);
 8006a2c:	ea45 6e8e 	orr.w	lr, r5, lr, lsl #26
 8006a30:	e9d2 5202 	ldrd	r5, r2, [r2, #8]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 24U) & HRTIM_FLTINR1_FLT4F);
 8006a34:	062d      	lsls	r5, r5, #24
 8006a36:	f005 45f0 	and.w	r5, r5, #2013265920	; 0x78000000
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 24U) & HRTIM_FLTINR1_FLT4LCK);
 8006a3a:	0612      	lsls	r2, r2, #24
 8006a3c:	ea4e 0e05 	orr.w	lr, lr, r5
 8006a40:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT4P | HRTIM_FLTINR1_FLT4SRC_0 | HRTIM_FLTINR1_FLT4F | HRTIM_FLTINR1_FLT4LCK);
 8006a44:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 24U) & HRTIM_FLTINR1_FLT4LCK);
 8006a48:	ea4e 0e02 	orr.w	lr, lr, r2
 8006a4c:	ea4e 0101 	orr.w	r1, lr, r1
      break;
 8006a50:	e774      	b.n	800693c <HAL_HRTIM_FaultConfig+0x70>
      hrtim_fltinr2 |= (pFaultCfg->Polarity & HRTIM_FLTINR2_FLT5P);
 8006a52:	6856      	ldr	r6, [r2, #4]
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT5SRC_0_Pos);
 8006a54:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
      hrtim_fltinr2 |= (pFaultCfg->Polarity & HRTIM_FLTINR2_FLT5P);
 8006a58:	f006 0602 	and.w	r6, r6, #2
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT5SRC_0_Pos);
 8006a5c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006a60:	ea46 0e8e 	orr.w	lr, r6, lr, lsl #2
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT5SRC_1);
 8006a64:	ea43 0e0e 	orr.w	lr, r3, lr
      hrtim_fltinr2 |= (pFaultCfg->Lock & HRTIM_FLTINR2_FLT5LCK);
 8006a68:	e9d2 6302 	ldrd	r6, r3, [r2, #8]
      hrtim_fltinr2 |= (pFaultCfg->Filter & HRTIM_FLTINR2_FLT5F);
 8006a6c:	f006 0278 	and.w	r2, r6, #120	; 0x78
      hrtim_fltinr2 |= (pFaultCfg->Lock & HRTIM_FLTINR2_FLT5LCK);
 8006a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a74:	4313      	orrs	r3, r2
 8006a76:	ea43 5505 	orr.w	r5, r3, r5, lsl #20
 8006a7a:	ea45 030e 	orr.w	r3, r5, lr
      break;
 8006a7e:	e75d      	b.n	800693c <HAL_HRTIM_FaultConfig+0x70>
      hrtim_fltinr2 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR2_FLT6P);
 8006a80:	6856      	ldr	r6, [r2, #4]
 8006a82:	0236      	lsls	r6, r6, #8
 8006a84:	f406 7600 	and.w	r6, r6, #512	; 0x200
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT6SRC_0_Pos);
 8006a88:	f423 1303 	bic.w	r3, r3, #2146304	; 0x20c000
 8006a8c:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8006a90:	ea46 2e8e 	orr.w	lr, r6, lr, lsl #10
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT6SRC_1);
 8006a94:	ea43 0e0e 	orr.w	lr, r3, lr
      hrtim_fltinr2 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR2_FLT6LCK);
 8006a98:	e9d2 6302 	ldrd	r6, r3, [r2, #8]
      hrtim_fltinr2 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR2_FLT6F);
 8006a9c:	0232      	lsls	r2, r6, #8
      hrtim_fltinr2 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR2_FLT6LCK);
 8006a9e:	021b      	lsls	r3, r3, #8
      hrtim_fltinr2 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR2_FLT6F);
 8006aa0:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
      hrtim_fltinr2 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR2_FLT6LCK);
 8006aa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	ea43 5545 	orr.w	r5, r3, r5, lsl #21
 8006aae:	ea45 030e 	orr.w	r3, r5, lr
      break;
 8006ab2:	e743      	b.n	800693c <HAL_HRTIM_FaultConfig+0x70>
     return HAL_BUSY;
 8006ab4:	2402      	movs	r4, #2
}
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	bd70      	pop	{r4, r5, r6, pc}
 8006aba:	bf00      	nop

08006abc <HAL_HRTIM_FaultPrescalerConfig>:
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006abc:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	d018      	beq.n	8006af8 <HAL_HRTIM_FaultPrescalerConfig+0x3c>
  __HAL_LOCK(hhrtim);
 8006ac6:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d016      	beq.n	8006afc <HAL_HRTIM_FaultPrescalerConfig+0x40>
  MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLTSD, (Prescaler & HRTIM_FLTINR2_FLTSD));
 8006ace:	6802      	ldr	r2, [r0, #0]
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLTSD, (Prescaler & HRTIM_FLTINR2_FLTSD));
 8006ad6:	f8d2 33d4 	ldr.w	r3, [r2, #980]	; 0x3d4
 8006ada:	f001 7140 	and.w	r1, r1, #50331648	; 0x3000000
 8006ade:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
  __HAL_UNLOCK(hhrtim);
 8006ae2:	f04f 0c00 	mov.w	ip, #0
  MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLTSD, (Prescaler & HRTIM_FLTINR2_FLTSD));
 8006ae6:	4319      	orrs	r1, r3
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006ae8:	2301      	movs	r3, #1
  MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLTSD, (Prescaler & HRTIM_FLTINR2_FLTSD));
 8006aea:	f8c2 13d4 	str.w	r1, [r2, #980]	; 0x3d4
  return HAL_OK;
 8006aee:	4662      	mov	r2, ip
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006af0:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 8006af4:	f880 c0dc 	strb.w	ip, [r0, #220]	; 0xdc
}
 8006af8:	4610      	mov	r0, r2
 8006afa:	4770      	bx	lr
     return HAL_BUSY;
 8006afc:	2202      	movs	r2, #2
}
 8006afe:	4610      	mov	r0, r2
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop

08006b04 <HAL_HRTIM_FaultBlankingConfigAndEnable>:
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006b04:	f890 c0dd 	ldrb.w	ip, [r0, #221]	; 0xdd
 8006b08:	f1bc 0f02 	cmp.w	ip, #2
 8006b0c:	fa5f f38c 	uxtb.w	r3, ip
 8006b10:	d030      	beq.n	8006b74 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x70>
  __HAL_LOCK(hhrtim);
 8006b12:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	f000 8082 	beq.w	8006c20 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x11c>
 8006b1c:	f04f 0c01 	mov.w	ip, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006b20:	2302      	movs	r3, #2
  switch (Fault)
 8006b22:	3901      	subs	r1, #1
  __HAL_LOCK(hhrtim);
 8006b24:	f880 c0dc 	strb.w	ip, [r0, #220]	; 0xdc
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006b28:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  switch (Fault)
 8006b2c:	291f      	cmp	r1, #31
 8006b2e:	d811      	bhi.n	8006b54 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x50>
 8006b30:	e8df f001 	tbb	[pc, r1]
 8006b34:	42103522 	.word	0x42103522
 8006b38:	4f101010 	.word	0x4f101010
 8006b3c:	10101010 	.word	0x10101010
 8006b40:	5c101010 	.word	0x5c101010
 8006b44:	10101010 	.word	0x10101010
 8006b48:	10101010 	.word	0x10101010
 8006b4c:	10101010 	.word	0x10101010
 8006b50:	69101010 	.word	0x69101010
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006b54:	2207      	movs	r2, #7
      __HAL_UNLOCK(hhrtim);
 8006b56:	2300      	movs	r3, #0
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006b58:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
      __HAL_UNLOCK(hhrtim);
 8006b5c:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006b60:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 8006b64:	2b07      	cmp	r3, #7
 8006b66:	d017      	beq.n	8006b98 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x94>
  __HAL_UNLOCK(hhrtim);
 8006b68:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 8006b70:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	4770      	bx	lr
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8006b78:	6801      	ldr	r1, [r0, #0]
 8006b7a:	6892      	ldr	r2, [r2, #8]
 8006b7c:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
 8006b80:	f023 0303 	bic.w	r3, r3, #3
 8006b84:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8006b88:	f043 0301 	orr.w	r3, r3, #1
 8006b8c:	f8c1 3408 	str.w	r3, [r1, #1032]	; 0x408
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006b90:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 8006b94:	2b07      	cmp	r3, #7
 8006b96:	d1e7      	bne.n	8006b68 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x64>
     return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	4770      	bx	lr
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8006b9e:	6801      	ldr	r1, [r0, #0]
 8006ba0:	6892      	ldr	r2, [r2, #8]
 8006ba2:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
 8006ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006baa:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8006bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bb2:	f8c1 3408 	str.w	r3, [r1, #1032]	; 0x408
       break;
 8006bb6:	e7d3      	b.n	8006b60 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x5c>
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8006bb8:	6801      	ldr	r1, [r0, #0]
 8006bba:	6892      	ldr	r2, [r2, #8]
 8006bbc:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
 8006bc0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006bc4:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8006bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bcc:	f8c1 3408 	str.w	r3, [r1, #1032]	; 0x408
       break;
 8006bd0:	e7c6      	b.n	8006b60 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x5c>
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8006bd2:	6801      	ldr	r1, [r0, #0]
 8006bd4:	6892      	ldr	r2, [r2, #8]
 8006bd6:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
 8006bda:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8006bde:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8006be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006be6:	f8c1 3408 	str.w	r3, [r1, #1032]	; 0x408
       break;
 8006bea:	e7b9      	b.n	8006b60 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x5c>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8006bec:	6801      	ldr	r1, [r0, #0]
 8006bee:	6892      	ldr	r2, [r2, #8]
 8006bf0:	f8d1 340c 	ldr.w	r3, [r1, #1036]	; 0x40c
 8006bf4:	f023 0303 	bic.w	r3, r3, #3
 8006bf8:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8006bfc:	f043 0301 	orr.w	r3, r3, #1
 8006c00:	f8c1 340c 	str.w	r3, [r1, #1036]	; 0x40c
      break;
 8006c04:	e7ac      	b.n	8006b60 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x5c>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8006c06:	6801      	ldr	r1, [r0, #0]
 8006c08:	6892      	ldr	r2, [r2, #8]
 8006c0a:	f8d1 340c 	ldr.w	r3, [r1, #1036]	; 0x40c
 8006c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c12:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8006c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c1a:	f8c1 340c 	str.w	r3, [r1, #1036]	; 0x40c
      break;
 8006c1e:	e79f      	b.n	8006b60 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x5c>
     return HAL_BUSY;
 8006c20:	2302      	movs	r3, #2
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop

08006c28 <HAL_HRTIM_FaultCounterConfig>:
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006c28:	f890 c0dd 	ldrb.w	ip, [r0, #221]	; 0xdd
 8006c2c:	f1bc 0f02 	cmp.w	ip, #2
 8006c30:	fa5f f38c 	uxtb.w	r3, ip
 8006c34:	f000 8093 	beq.w	8006d5e <HAL_HRTIM_FaultCounterConfig+0x136>
  __HAL_LOCK(hhrtim);
 8006c38:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	f000 808d 	beq.w	8006d5c <HAL_HRTIM_FaultCounterConfig+0x134>
 8006c42:	f04f 0c01 	mov.w	ip, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006c46:	2302      	movs	r3, #2
  switch (Fault)
 8006c48:	3901      	subs	r1, #1
{
 8006c4a:	b410      	push	{r4}
  __HAL_LOCK(hhrtim);
 8006c4c:	f880 c0dc 	strb.w	ip, [r0, #220]	; 0xdc
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006c50:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  switch (Fault)
 8006c54:	291f      	cmp	r1, #31
 8006c56:	d811      	bhi.n	8006c7c <HAL_HRTIM_FaultCounterConfig+0x54>
 8006c58:	e8df f001 	tbb	[pc, r1]
 8006c5c:	3a107224 	.word	0x3a107224
 8006c60:	48101010 	.word	0x48101010
 8006c64:	10101010 	.word	0x10101010
 8006c68:	56101010 	.word	0x56101010
 8006c6c:	10101010 	.word	0x10101010
 8006c70:	10101010 	.word	0x10101010
 8006c74:	10101010 	.word	0x10101010
 8006c78:	64101010 	.word	0x64101010
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006c7c:	2207      	movs	r2, #7
      __HAL_UNLOCK(hhrtim);
 8006c7e:	2300      	movs	r3, #0
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006c80:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
      __HAL_UNLOCK(hhrtim);
 8006c84:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006c88:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 8006c8c:	2b07      	cmp	r3, #7
 8006c8e:	d01a      	beq.n	8006cc6 <HAL_HRTIM_FaultCounterConfig+0x9e>
  __HAL_UNLOCK(hhrtim);
 8006c90:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006c92:	2201      	movs	r2, #1
 8006c94:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 8006c98:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
}
 8006c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	4770      	bx	lr
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8006ca4:	e9d2 4300 	ldrd	r4, r3, [r2]
 8006ca8:	6801      	ldr	r1, [r0, #0]
 8006caa:	f8d1 2408 	ldr.w	r2, [r1, #1032]	; 0x408
 8006cae:	01db      	lsls	r3, r3, #7
 8006cb0:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 8006cb4:	f022 02bc 	bic.w	r2, r2, #188	; 0xbc
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	f8c1 3408 	str.w	r3, [r1, #1032]	; 0x408
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006cbe:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 8006cc2:	2b07      	cmp	r3, #7
 8006cc4:	d1e4      	bne.n	8006c90 <HAL_HRTIM_FaultCounterConfig+0x68>
     return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cce:	4770      	bx	lr
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8006cd0:	e9d2 4300 	ldrd	r4, r3, [r2]
 8006cd4:	6801      	ldr	r1, [r0, #0]
 8006cd6:	f8d1 2408 	ldr.w	r2, [r1, #1032]	; 0x408
 8006cda:	05db      	lsls	r3, r3, #23
 8006cdc:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8006ce0:	f422 023c 	bic.w	r2, r2, #12320768	; 0xbc0000
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	f8c1 3408 	str.w	r3, [r1, #1032]	; 0x408
       break;
 8006cea:	e7cd      	b.n	8006c88 <HAL_HRTIM_FaultCounterConfig+0x60>
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8006cec:	e9d2 4300 	ldrd	r4, r3, [r2]
 8006cf0:	6801      	ldr	r1, [r0, #0]
 8006cf2:	f8d1 2408 	ldr.w	r2, [r1, #1032]	; 0x408
 8006cf6:	07db      	lsls	r3, r3, #31
 8006cf8:	ea43 6384 	orr.w	r3, r3, r4, lsl #26
 8006cfc:	f022 423c 	bic.w	r2, r2, #3154116608	; 0xbc000000
 8006d00:	4313      	orrs	r3, r2
 8006d02:	f8c1 3408 	str.w	r3, [r1, #1032]	; 0x408
       break;
 8006d06:	e7bf      	b.n	8006c88 <HAL_HRTIM_FaultCounterConfig+0x60>
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8006d08:	e9d2 4300 	ldrd	r4, r3, [r2]
 8006d0c:	6801      	ldr	r1, [r0, #0]
 8006d0e:	f8d1 240c 	ldr.w	r2, [r1, #1036]	; 0x40c
 8006d12:	01db      	lsls	r3, r3, #7
 8006d14:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 8006d18:	f022 02bc 	bic.w	r2, r2, #188	; 0xbc
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	f8c1 340c 	str.w	r3, [r1, #1036]	; 0x40c
       break;
 8006d22:	e7b1      	b.n	8006c88 <HAL_HRTIM_FaultCounterConfig+0x60>
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8006d24:	e9d2 4300 	ldrd	r4, r3, [r2]
 8006d28:	6801      	ldr	r1, [r0, #0]
 8006d2a:	f8d1 240c 	ldr.w	r2, [r1, #1036]	; 0x40c
 8006d2e:	03db      	lsls	r3, r3, #15
 8006d30:	ea43 2384 	orr.w	r3, r3, r4, lsl #10
 8006d34:	f422 423c 	bic.w	r2, r2, #48128	; 0xbc00
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	f8c1 340c 	str.w	r3, [r1, #1036]	; 0x40c
       break;
 8006d3e:	e7a3      	b.n	8006c88 <HAL_HRTIM_FaultCounterConfig+0x60>
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8006d40:	e9d2 4300 	ldrd	r4, r3, [r2]
 8006d44:	6801      	ldr	r1, [r0, #0]
 8006d46:	f8d1 2408 	ldr.w	r2, [r1, #1032]	; 0x408
 8006d4a:	03db      	lsls	r3, r3, #15
 8006d4c:	ea43 2384 	orr.w	r3, r3, r4, lsl #10
 8006d50:	f422 423c 	bic.w	r2, r2, #48128	; 0xbc00
 8006d54:	4313      	orrs	r3, r2
 8006d56:	f8c1 3408 	str.w	r3, [r1, #1032]	; 0x408
       break;
 8006d5a:	e795      	b.n	8006c88 <HAL_HRTIM_FaultCounterConfig+0x60>
     return HAL_BUSY;
 8006d5c:	2302      	movs	r3, #2
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop

08006d64 <HAL_HRTIM_FaultModeCtl>:
{
 8006d64:	b410      	push	{r4}
  if ((Faults & HRTIM_FAULT_1) != (uint32_t)RESET)
 8006d66:	07cc      	lsls	r4, r1, #31
 8006d68:	d50a      	bpl.n	8006d80 <HAL_HRTIM_FaultModeCtl+0x1c>
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT1E, (Enable & HRTIM_FLTINR1_FLT1E));
 8006d6a:	6804      	ldr	r4, [r0, #0]
 8006d6c:	f8d4 33d0 	ldr.w	r3, [r4, #976]	; 0x3d0
 8006d70:	f002 0c01 	and.w	ip, r2, #1
 8006d74:	f023 0301 	bic.w	r3, r3, #1
 8006d78:	ea43 030c 	orr.w	r3, r3, ip
 8006d7c:	f8c4 33d0 	str.w	r3, [r4, #976]	; 0x3d0
  if ((Faults & HRTIM_FAULT_2) != (uint32_t)RESET)
 8006d80:	078b      	lsls	r3, r1, #30
 8006d82:	d50b      	bpl.n	8006d9c <HAL_HRTIM_FaultModeCtl+0x38>
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT2E, ((Enable << 8U) & HRTIM_FLTINR1_FLT2E));
 8006d84:	6804      	ldr	r4, [r0, #0]
 8006d86:	f8d4 33d0 	ldr.w	r3, [r4, #976]	; 0x3d0
 8006d8a:	f423 7c80 	bic.w	ip, r3, #256	; 0x100
 8006d8e:	0213      	lsls	r3, r2, #8
 8006d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d94:	ea43 030c 	orr.w	r3, r3, ip
 8006d98:	f8c4 33d0 	str.w	r3, [r4, #976]	; 0x3d0
  if ((Faults & HRTIM_FAULT_3) != (uint32_t)RESET)
 8006d9c:	074c      	lsls	r4, r1, #29
 8006d9e:	d50b      	bpl.n	8006db8 <HAL_HRTIM_FaultModeCtl+0x54>
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT3E, ((Enable << 16U) & HRTIM_FLTINR1_FLT3E));
 8006da0:	6804      	ldr	r4, [r0, #0]
 8006da2:	f8d4 33d0 	ldr.w	r3, [r4, #976]	; 0x3d0
 8006da6:	f423 3c80 	bic.w	ip, r3, #65536	; 0x10000
 8006daa:	0413      	lsls	r3, r2, #16
 8006dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006db0:	ea43 030c 	orr.w	r3, r3, ip
 8006db4:	f8c4 33d0 	str.w	r3, [r4, #976]	; 0x3d0
  if ((Faults & HRTIM_FAULT_4) != (uint32_t)RESET)
 8006db8:	070b      	lsls	r3, r1, #28
 8006dba:	d50b      	bpl.n	8006dd4 <HAL_HRTIM_FaultModeCtl+0x70>
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT4E, ((Enable << 24U) & HRTIM_FLTINR1_FLT4E));
 8006dbc:	6804      	ldr	r4, [r0, #0]
 8006dbe:	f8d4 33d0 	ldr.w	r3, [r4, #976]	; 0x3d0
 8006dc2:	f023 7c80 	bic.w	ip, r3, #16777216	; 0x1000000
 8006dc6:	0613      	lsls	r3, r2, #24
 8006dc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dcc:	ea43 030c 	orr.w	r3, r3, ip
 8006dd0:	f8c4 33d0 	str.w	r3, [r4, #976]	; 0x3d0
  if ((Faults & HRTIM_FAULT_5) != (uint32_t)RESET)
 8006dd4:	06cc      	lsls	r4, r1, #27
 8006dd6:	d50a      	bpl.n	8006dee <HAL_HRTIM_FaultModeCtl+0x8a>
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLT5E, ((Enable) & HRTIM_FLTINR2_FLT5E));
 8006dd8:	6804      	ldr	r4, [r0, #0]
 8006dda:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8006dde:	f002 0c01 	and.w	ip, r2, #1
 8006de2:	f023 0301 	bic.w	r3, r3, #1
 8006de6:	ea43 030c 	orr.w	r3, r3, ip
 8006dea:	f8c4 33d4 	str.w	r3, [r4, #980]	; 0x3d4
  if ((Faults & HRTIM_FAULT_6) != (uint32_t)RESET)
 8006dee:	068b      	lsls	r3, r1, #26
 8006df0:	d50a      	bpl.n	8006e08 <HAL_HRTIM_FaultModeCtl+0xa4>
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLT6E, ((Enable << 8U) & HRTIM_FLTINR2_FLT6E));
 8006df2:	6801      	ldr	r1, [r0, #0]
 8006df4:	f8d1 33d4 	ldr.w	r3, [r1, #980]	; 0x3d4
 8006df8:	0212      	lsls	r2, r2, #8
 8006dfa:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8006dfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e02:	431a      	orrs	r2, r3
 8006e04:	f8c1 23d4 	str.w	r2, [r1, #980]	; 0x3d4
}
 8006e08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop

08006e10 <HAL_HRTIM_ADCTriggerConfig>:
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006e10:	f890 c0dd 	ldrb.w	ip, [r0, #221]	; 0xdd
 8006e14:	f1bc 0f02 	cmp.w	ip, #2
 8006e18:	fa5f f38c 	uxtb.w	r3, ip
 8006e1c:	f000 80f8 	beq.w	8007010 <HAL_HRTIM_ADCTriggerConfig+0x200>
  __HAL_LOCK(hhrtim);
 8006e20:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	f000 80f2 	beq.w	800700e <HAL_HRTIM_ADCTriggerConfig+0x1fe>
 8006e2a:	2301      	movs	r3, #1
{
 8006e2c:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hhrtim);
 8006e2e:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 8006e32:	6804      	ldr	r4, [r0, #0]
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006e34:	2302      	movs	r3, #2
 8006e36:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  switch (ADCTrigger)
 8006e3a:	2920      	cmp	r1, #32
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 8006e3c:	f8d4 6380 	ldr.w	r6, [r4, #896]	; 0x380
  hrtim_adcur = hhrtim->Instance->sCommonRegs.ADCUR;
 8006e40:	f8d4 53fc 	ldr.w	r5, [r4, #1020]	; 0x3fc
  switch (ADCTrigger)
 8006e44:	d818      	bhi.n	8006e78 <HAL_HRTIM_ADCTriggerConfig+0x68>
 8006e46:	2900      	cmp	r1, #0
 8006e48:	f000 80fa 	beq.w	8007040 <HAL_HRTIM_ADCTriggerConfig+0x230>
 8006e4c:	1e4b      	subs	r3, r1, #1
 8006e4e:	2b1f      	cmp	r3, #31
 8006e50:	f200 80f6 	bhi.w	8007040 <HAL_HRTIM_ADCTriggerConfig+0x230>
 8006e54:	e8df f003 	tbb	[pc, r3]
 8006e58:	b6f4ab9b 	.word	0xb6f4ab9b
 8006e5c:	c1f4f4f4 	.word	0xc1f4f4f4
 8006e60:	f4f4f4f4 	.word	0xf4f4f4f4
 8006e64:	72f4f4f4 	.word	0x72f4f4f4
 8006e68:	f4f4f4f4 	.word	0xf4f4f4f4
 8006e6c:	f4f4f4f4 	.word	0xf4f4f4f4
 8006e70:	f4f4f4f4 	.word	0xf4f4f4f4
 8006e74:	84f4f4f4 	.word	0x84f4f4f4
 8006e78:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006e7c:	f000 80ca 	beq.w	8007014 <HAL_HRTIM_ADCTriggerConfig+0x204>
 8006e80:	d929      	bls.n	8006ed6 <HAL_HRTIM_ADCTriggerConfig+0xc6>
 8006e82:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006e86:	f040 80b3 	bne.w	8006ff0 <HAL_HRTIM_ADCTriggerConfig+0x1e0>
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 8006e8a:	e9d2 1300 	ldrd	r1, r3, [r2]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource << 4U) & HRTIM_ADCUR_AD10USRC);
 8006e8e:	010a      	lsls	r2, r1, #4
 8006e90:	f402 02e0 	and.w	r2, r2, #7340032	; 0x700000
      hrtim_adcur &= ~(HRTIM_ADCUR_AD10USRC);
 8006e94:	f425 05e0 	bic.w	r5, r5, #7340032	; 0x700000
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource << 4U) & HRTIM_ADCUR_AD10USRC);
 8006e98:	4315      	orrs	r5, r2
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD10TRG);
 8006e9a:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	; 0x3f8
 8006e9e:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 8006ea2:	f8c4 23f8 	str.w	r2, [r4, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 8006ea6:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	; 0x3f8
 8006eaa:	069b      	lsls	r3, r3, #26
 8006eac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006eb6:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 8006eba:	2b07      	cmp	r3, #7
 8006ebc:	f000 80a3 	beq.w	8007006 <HAL_HRTIM_ADCTriggerConfig+0x1f6>
   hhrtim->Instance->sCommonRegs.ADCUR = hrtim_adcur;
 8006ec0:	f8c4 53fc 	str.w	r5, [r4, #1020]	; 0x3fc
  __HAL_UNLOCK(hhrtim);
 8006ec4:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 8006ecc:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
}
 8006ed0:	bc70      	pop	{r4, r5, r6}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	4770      	bx	lr
  switch (ADCTrigger)
 8006ed6:	2940      	cmp	r1, #64	; 0x40
 8006ed8:	d019      	beq.n	8006f0e <HAL_HRTIM_ADCTriggerConfig+0xfe>
 8006eda:	2980      	cmp	r1, #128	; 0x80
 8006edc:	f040 8088 	bne.w	8006ff0 <HAL_HRTIM_ADCTriggerConfig+0x1e0>
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 8006ee0:	e9d2 1300 	ldrd	r1, r3, [r2]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 4U) & HRTIM_ADCUR_AD8USRC);
 8006ee4:	090a      	lsrs	r2, r1, #4
 8006ee6:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
      hrtim_adcur &= ~(HRTIM_ADCUR_AD8USRC);
 8006eea:	f425 45e0 	bic.w	r5, r5, #28672	; 0x7000
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 4U) & HRTIM_ADCUR_AD8USRC);
 8006eee:	4315      	orrs	r5, r2
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD8TRG);
 8006ef0:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	; 0x3f8
 8006ef4:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8006ef8:	f8c4 23f8 	str.w	r2, [r4, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 8006efc:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	; 0x3f8
 8006f00:	041b      	lsls	r3, r3, #16
 8006f02:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006f06:	4313      	orrs	r3, r2
 8006f08:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
      break;
 8006f0c:	e7d3      	b.n	8006eb6 <HAL_HRTIM_ADCTriggerConfig+0xa6>
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 8006f0e:	e9d2 1300 	ldrd	r1, r3, [r2]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 8U) & HRTIM_ADCUR_AD7USRC);
 8006f12:	0a0a      	lsrs	r2, r1, #8
 8006f14:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
      hrtim_adcur &= ~(HRTIM_ADCUR_AD7USRC);
 8006f18:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 8U) & HRTIM_ADCUR_AD7USRC);
 8006f1c:	4315      	orrs	r5, r2
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD7TRG);
 8006f1e:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	; 0x3f8
 8006f22:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006f26:	f8c4 23f8 	str.w	r2, [r4, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 8006f2a:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	; 0x3f8
 8006f2e:	029b      	lsls	r3, r3, #10
 8006f30:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8006f34:	4313      	orrs	r3, r2
 8006f36:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
      break;
 8006f3a:	e7bc      	b.n	8006eb6 <HAL_HRTIM_ADCTriggerConfig+0xa6>
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 16U) & HRTIM_ADCUR_AD5USRC);
 8006f3c:	8851      	ldrh	r1, [r2, #2]
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 8006f3e:	6853      	ldr	r3, [r2, #4]
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD5TRG);
 8006f40:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	; 0x3f8
 8006f44:	f022 021f 	bic.w	r2, r2, #31
 8006f48:	f8c4 23f8 	str.w	r2, [r4, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 8006f4c:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	; 0x3f8
 8006f50:	f003 031f 	and.w	r3, r3, #31
 8006f54:	4313      	orrs	r3, r2
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 16U) & HRTIM_ADCUR_AD5USRC);
 8006f56:	f361 0502 	bfi	r5, r1, #0, #3
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 8006f5a:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
      break;
 8006f5e:	e7aa      	b.n	8006eb6 <HAL_HRTIM_ADCTriggerConfig+0xa6>
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 8006f60:	e9d2 1300 	ldrd	r1, r3, [r2]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 12U) & HRTIM_ADCUR_AD6USRC);
 8006f64:	0b0a      	lsrs	r2, r1, #12
 8006f66:	f002 0270 	and.w	r2, r2, #112	; 0x70
      hrtim_adcur &= ~(HRTIM_ADCUR_AD6USRC);
 8006f6a:	f025 0570 	bic.w	r5, r5, #112	; 0x70
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 12U) & HRTIM_ADCUR_AD6USRC);
 8006f6e:	4315      	orrs	r5, r2
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD6TRG);
 8006f70:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	; 0x3f8
 8006f74:	f422 7278 	bic.w	r2, r2, #992	; 0x3e0
 8006f78:	f8c4 23f8 	str.w	r2, [r4, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 8006f7c:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	; 0x3f8
 8006f80:	015b      	lsls	r3, r3, #5
 8006f82:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
 8006f86:	4313      	orrs	r3, r2
 8006f88:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
      break;
 8006f8c:	e793      	b.n	8006eb6 <HAL_HRTIM_ADCTriggerConfig+0xa6>
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 8006f8e:	e9d2 3200 	ldrd	r3, r2, [r2]
      hrtim_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 8006f92:	f426 26e0 	bic.w	r6, r6, #458752	; 0x70000
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 8006f96:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006f9a:	431e      	orrs	r6, r3
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 8006f9c:	f8c4 23bc 	str.w	r2, [r4, #956]	; 0x3bc
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006fa0:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 8006fa4:	2b07      	cmp	r3, #7
 8006fa6:	d02e      	beq.n	8007006 <HAL_HRTIM_ADCTriggerConfig+0x1f6>
   hhrtim->Instance->sCommonRegs.CR1 = hrtim_cr1;
 8006fa8:	f8c4 6380 	str.w	r6, [r4, #896]	; 0x380
 8006fac:	e78a      	b.n	8006ec4 <HAL_HRTIM_ADCTriggerConfig+0xb4>
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 8006fae:	e9d2 3200 	ldrd	r3, r2, [r2]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 8006fb2:	00db      	lsls	r3, r3, #3
      hrtim_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 8006fb4:	f426 1660 	bic.w	r6, r6, #3670016	; 0x380000
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 8006fb8:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8006fbc:	431e      	orrs	r6, r3
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 8006fbe:	f8c4 23c0 	str.w	r2, [r4, #960]	; 0x3c0
      break;
 8006fc2:	e7ed      	b.n	8006fa0 <HAL_HRTIM_ADCTriggerConfig+0x190>
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 8006fc4:	e9d2 3200 	ldrd	r3, r2, [r2]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 8006fc8:	019b      	lsls	r3, r3, #6
      hrtim_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 8006fca:	f026 76e0 	bic.w	r6, r6, #29360128	; 0x1c00000
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 8006fce:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
 8006fd2:	431e      	orrs	r6, r3
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 8006fd4:	f8c4 23c4 	str.w	r2, [r4, #964]	; 0x3c4
      break;
 8006fd8:	e7e2      	b.n	8006fa0 <HAL_HRTIM_ADCTriggerConfig+0x190>
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 8006fda:	e9d2 3200 	ldrd	r3, r2, [r2]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 8006fde:	025b      	lsls	r3, r3, #9
      hrtim_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 8006fe0:	f026 6660 	bic.w	r6, r6, #234881024	; 0xe000000
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 8006fe4:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
 8006fe8:	431e      	orrs	r6, r3
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 8006fea:	f8c4 23c8 	str.w	r2, [r4, #968]	; 0x3c8
      break;
 8006fee:	e7d7      	b.n	8006fa0 <HAL_HRTIM_ADCTriggerConfig+0x190>
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006ff0:	2307      	movs	r3, #7
 8006ff2:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006ff6:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
      __HAL_UNLOCK(hhrtim);
 8006ffa:	2200      	movs	r2, #0
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006ffc:	2b07      	cmp	r3, #7
      __HAL_UNLOCK(hhrtim);
 8006ffe:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007002:	f47f af5d 	bne.w	8006ec0 <HAL_HRTIM_ADCTriggerConfig+0xb0>
     return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
}
 8007008:	4618      	mov	r0, r3
 800700a:	bc70      	pop	{r4, r5, r6}
 800700c:	4770      	bx	lr
     return HAL_BUSY;
 800700e:	2302      	movs	r3, #2
}
 8007010:	4618      	mov	r0, r3
 8007012:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD9TRG_Pos) & HRTIM_ADCER_AD9TRG);
 8007014:	e9d2 1300 	ldrd	r1, r3, [r2]
      hrtim_adcur &= ~(HRTIM_ADCUR_AD9USRC);
 8007018:	f425 25e0 	bic.w	r5, r5, #458752	; 0x70000
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource) & HRTIM_ADCUR_AD9USRC);
 800701c:	f401 22e0 	and.w	r2, r1, #458752	; 0x70000
 8007020:	4315      	orrs	r5, r2
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD9TRG);
 8007022:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	; 0x3f8
 8007026:	f022 7278 	bic.w	r2, r2, #65011712	; 0x3e00000
 800702a:	f8c4 23f8 	str.w	r2, [r4, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD9TRG_Pos) & HRTIM_ADCER_AD9TRG);
 800702e:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	; 0x3f8
 8007032:	055b      	lsls	r3, r3, #21
 8007034:	f003 7378 	and.w	r3, r3, #65011712	; 0x3e00000
 8007038:	4313      	orrs	r3, r2
 800703a:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
      break;
 800703e:	e73a      	b.n	8006eb6 <HAL_HRTIM_ADCTriggerConfig+0xa6>
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007040:	2307      	movs	r3, #7
 8007042:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007046:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
      __HAL_UNLOCK(hhrtim);
 800704a:	2200      	movs	r2, #0
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800704c:	2b07      	cmp	r3, #7
      __HAL_UNLOCK(hhrtim);
 800704e:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007052:	d0d8      	beq.n	8007006 <HAL_HRTIM_ADCTriggerConfig+0x1f6>
  if (ADCTrigger < HRTIM_ADCTRIGGER_5)
 8007054:	290f      	cmp	r1, #15
 8007056:	d9a7      	bls.n	8006fa8 <HAL_HRTIM_ADCTriggerConfig+0x198>
 8007058:	e732      	b.n	8006ec0 <HAL_HRTIM_ADCTriggerConfig+0xb0>
 800705a:	bf00      	nop

0800705c <HAL_HRTIM_ADCPostScalerConfig>:
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800705c:	f890 c0dd 	ldrb.w	ip, [r0, #221]	; 0xdd
 8007060:	f1bc 0f02 	cmp.w	ip, #2
 8007064:	fa5f f38c 	uxtb.w	r3, ip
 8007068:	f000 80b6 	beq.w	80071d8 <HAL_HRTIM_ADCPostScalerConfig+0x17c>
  __HAL_LOCK(hhrtim);
 800706c:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 8007070:	2b01      	cmp	r3, #1
 8007072:	f000 80b0 	beq.w	80071d6 <HAL_HRTIM_ADCPostScalerConfig+0x17a>
 8007076:	f04f 0c01 	mov.w	ip, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800707a:	2302      	movs	r3, #2
  switch (ADCTrigger)
 800707c:	2920      	cmp	r1, #32
{
 800707e:	b410      	push	{r4}
  __HAL_LOCK(hhrtim);
 8007080:	f880 c0dc 	strb.w	ip, [r0, #220]	; 0xdc
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007084:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  switch (ADCTrigger)
 8007088:	d816      	bhi.n	80070b8 <HAL_HRTIM_ADCPostScalerConfig+0x5c>
 800708a:	2900      	cmp	r1, #0
 800708c:	d045      	beq.n	800711a <HAL_HRTIM_ADCPostScalerConfig+0xbe>
 800708e:	3901      	subs	r1, #1
 8007090:	291f      	cmp	r1, #31
 8007092:	d842      	bhi.n	800711a <HAL_HRTIM_ADCPostScalerConfig+0xbe>
 8007094:	e8df f001 	tbb	[pc, r1]
 8007098:	8e418277 	.word	0x8e418277
 800709c:	5f414141 	.word	0x5f414141
 80070a0:	41414141 	.word	0x41414141
 80070a4:	6b414141 	.word	0x6b414141
 80070a8:	41414141 	.word	0x41414141
 80070ac:	41414141 	.word	0x41414141
 80070b0:	41414141 	.word	0x41414141
 80070b4:	54414141 	.word	0x54414141
 80070b8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80070bc:	f000 808e 	beq.w	80071dc <HAL_HRTIM_ADCPostScalerConfig+0x180>
 80070c0:	d91b      	bls.n	80070fa <HAL_HRTIM_ADCPostScalerConfig+0x9e>
 80070c2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80070c6:	d128      	bne.n	800711a <HAL_HRTIM_ADCPostScalerConfig+0xbe>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD10PSC, ((Postscaler << HRTIM_ADCPS2_AD10PSC_Pos) & HRTIM_ADCPS2_AD10PSC));
 80070c8:	6801      	ldr	r1, [r0, #0]
 80070ca:	0613      	lsls	r3, r2, #24
 80070cc:	f8d1 2404 	ldr.w	r2, [r1, #1028]	; 0x404
 80070d0:	f003 53f8 	and.w	r3, r3, #520093696	; 0x1f000000
 80070d4:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
 80070d8:	4313      	orrs	r3, r2
 80070da:	f8c1 3404 	str.w	r3, [r1, #1028]	; 0x404
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80070de:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 80070e2:	2b07      	cmp	r3, #7
 80070e4:	d072      	beq.n	80071cc <HAL_HRTIM_ADCPostScalerConfig+0x170>
  __HAL_UNLOCK(hhrtim);
 80070e6:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80070e8:	2201      	movs	r2, #1
 80070ea:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 80070ee:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
}
 80070f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070f6:	4618      	mov	r0, r3
 80070f8:	4770      	bx	lr
  switch (ADCTrigger)
 80070fa:	2940      	cmp	r1, #64	; 0x40
 80070fc:	d014      	beq.n	8007128 <HAL_HRTIM_ADCPostScalerConfig+0xcc>
 80070fe:	2980      	cmp	r1, #128	; 0x80
 8007100:	d10b      	bne.n	800711a <HAL_HRTIM_ADCPostScalerConfig+0xbe>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD8PSC, ((Postscaler << HRTIM_ADCPS2_AD8PSC_Pos) & HRTIM_ADCPS2_AD8PSC));
 8007102:	6801      	ldr	r1, [r0, #0]
 8007104:	f8d1 3404 	ldr.w	r3, [r1, #1028]	; 0x404
 8007108:	0312      	lsls	r2, r2, #12
 800710a:	f402 32f8 	and.w	r2, r2, #126976	; 0x1f000
 800710e:	f423 33f8 	bic.w	r3, r3, #126976	; 0x1f000
 8007112:	431a      	orrs	r2, r3
 8007114:	f8c1 2404 	str.w	r2, [r1, #1028]	; 0x404
      break;
 8007118:	e7e1      	b.n	80070de <HAL_HRTIM_ADCPostScalerConfig+0x82>
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800711a:	2207      	movs	r2, #7
      __HAL_UNLOCK(hhrtim);
 800711c:	2300      	movs	r3, #0
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800711e:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
      __HAL_UNLOCK(hhrtim);
 8007122:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
      break;
 8007126:	e7da      	b.n	80070de <HAL_HRTIM_ADCPostScalerConfig+0x82>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD7PSC, ((Postscaler << HRTIM_ADCPS2_AD7PSC_Pos) & HRTIM_ADCPS2_AD7PSC));
 8007128:	6801      	ldr	r1, [r0, #0]
 800712a:	f8d1 3404 	ldr.w	r3, [r1, #1028]	; 0x404
 800712e:	0192      	lsls	r2, r2, #6
 8007130:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 8007134:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 8007138:	431a      	orrs	r2, r3
 800713a:	f8c1 2404 	str.w	r2, [r1, #1028]	; 0x404
      break;
 800713e:	e7ce      	b.n	80070de <HAL_HRTIM_ADCPostScalerConfig+0x82>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD6PSC, ((Postscaler << HRTIM_ADCPS2_AD6PSC_Pos) & HRTIM_ADCPS2_AD6PSC));
 8007140:	6804      	ldr	r4, [r0, #0]
 8007142:	f8d4 1404 	ldr.w	r1, [r4, #1028]	; 0x404
 8007146:	f002 021f 	and.w	r2, r2, #31
 800714a:	f021 011f 	bic.w	r1, r1, #31
 800714e:	430a      	orrs	r2, r1
 8007150:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
      break;
 8007154:	e7c3      	b.n	80070de <HAL_HRTIM_ADCPostScalerConfig+0x82>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD4PSC, ((Postscaler << HRTIM_ADCPS1_AD4PSC_Pos) & HRTIM_ADCPS1_AD4PSC));
 8007156:	6801      	ldr	r1, [r0, #0]
 8007158:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
 800715c:	0492      	lsls	r2, r2, #18
 800715e:	f402 02f8 	and.w	r2, r2, #8126464	; 0x7c0000
 8007162:	f423 03f8 	bic.w	r3, r3, #8126464	; 0x7c0000
 8007166:	431a      	orrs	r2, r3
 8007168:	f8c1 2400 	str.w	r2, [r1, #1024]	; 0x400
      break;
 800716c:	e7b7      	b.n	80070de <HAL_HRTIM_ADCPostScalerConfig+0x82>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD5PSC, ((Postscaler << HRTIM_ADCPS1_AD5PSC_Pos) & HRTIM_ADCPS1_AD5PSC));
 800716e:	6801      	ldr	r1, [r0, #0]
 8007170:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
 8007174:	0612      	lsls	r2, r2, #24
 8007176:	f002 52f8 	and.w	r2, r2, #520093696	; 0x1f000000
 800717a:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800717e:	431a      	orrs	r2, r3
 8007180:	f8c1 2400 	str.w	r2, [r1, #1024]	; 0x400
      break;
 8007184:	e7ab      	b.n	80070de <HAL_HRTIM_ADCPostScalerConfig+0x82>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD1PSC, (Postscaler & HRTIM_ADCPS1_AD1PSC));
 8007186:	6804      	ldr	r4, [r0, #0]
 8007188:	f8d4 1400 	ldr.w	r1, [r4, #1024]	; 0x400
 800718c:	f002 021f 	and.w	r2, r2, #31
 8007190:	f021 011f 	bic.w	r1, r1, #31
 8007194:	430a      	orrs	r2, r1
 8007196:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
      break;
 800719a:	e7a0      	b.n	80070de <HAL_HRTIM_ADCPostScalerConfig+0x82>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD2PSC, ((Postscaler << HRTIM_ADCPS1_AD2PSC_Pos) & HRTIM_ADCPS1_AD2PSC));
 800719c:	6801      	ldr	r1, [r0, #0]
 800719e:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
 80071a2:	0192      	lsls	r2, r2, #6
 80071a4:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 80071a8:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 80071ac:	431a      	orrs	r2, r3
 80071ae:	f8c1 2400 	str.w	r2, [r1, #1024]	; 0x400
      break;
 80071b2:	e794      	b.n	80070de <HAL_HRTIM_ADCPostScalerConfig+0x82>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD3PSC, ((Postscaler << HRTIM_ADCPS1_AD3PSC_Pos) & HRTIM_ADCPS1_AD3PSC));
 80071b4:	6801      	ldr	r1, [r0, #0]
 80071b6:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
 80071ba:	0312      	lsls	r2, r2, #12
 80071bc:	f402 32f8 	and.w	r2, r2, #126976	; 0x1f000
 80071c0:	f423 33f8 	bic.w	r3, r3, #126976	; 0x1f000
 80071c4:	431a      	orrs	r2, r3
 80071c6:	f8c1 2400 	str.w	r2, [r1, #1024]	; 0x400
      break;
 80071ca:	e788      	b.n	80070de <HAL_HRTIM_ADCPostScalerConfig+0x82>
     return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071d4:	4770      	bx	lr
     return HAL_BUSY;
 80071d6:	2302      	movs	r3, #2
}
 80071d8:	4618      	mov	r0, r3
 80071da:	4770      	bx	lr
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD9PSC, ((Postscaler << HRTIM_ADCPS2_AD9PSC_Pos) & HRTIM_ADCPS2_AD9PSC));
 80071dc:	6801      	ldr	r1, [r0, #0]
 80071de:	f8d1 3404 	ldr.w	r3, [r1, #1028]	; 0x404
 80071e2:	0492      	lsls	r2, r2, #18
 80071e4:	f402 02f8 	and.w	r2, r2, #8126464	; 0x7c0000
 80071e8:	f423 03f8 	bic.w	r3, r3, #8126464	; 0x7c0000
 80071ec:	431a      	orrs	r2, r3
 80071ee:	f8c1 2404 	str.w	r2, [r1, #1028]	; 0x404
      break;
 80071f2:	e774      	b.n	80070de <HAL_HRTIM_ADCPostScalerConfig+0x82>

080071f4 <HAL_HRTIM_RollOverModeConfig>:
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80071f4:	f890 c0dd 	ldrb.w	ip, [r0, #221]	; 0xdd
 80071f8:	f1bc 0f02 	cmp.w	ip, #2
 80071fc:	fa5f f38c 	uxtb.w	r3, ip
 8007200:	d015      	beq.n	800722e <HAL_HRTIM_RollOverModeConfig+0x3a>
  __HAL_LOCK(hhrtim);
 8007202:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 8007206:	2b01      	cmp	r3, #1
 8007208:	d01f      	beq.n	800724a <HAL_HRTIM_RollOverModeConfig+0x56>
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 800720a:	6803      	ldr	r3, [r0, #0]
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800720c:	f04f 0c02 	mov.w	ip, #2
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8007210:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007214:	f880 c0dd 	strb.w	ip, [r0, #221]	; 0xdd
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8007218:	f8d1 30ec 	ldr.w	r3, [r1, #236]	; 0xec
  if ((hrtim_timcr2 & HRTIM_TIMCR2_UDM) != 0U)
 800721c:	f013 0f10 	tst.w	r3, #16
 8007220:	d107      	bne.n	8007232 <HAL_HRTIM_RollOverModeConfig+0x3e>
  __HAL_UNLOCK(hhrtim);
 8007222:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007224:	2201      	movs	r2, #1
 8007226:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 800722a:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
}
 800722e:	4618      	mov	r0, r3
 8007230:	4770      	bx	lr
       hrtim_timcr2 &= ~(HRTIM_TIMCR2_ROM | HRTIM_TIMCR2_OUTROM |
 8007232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
       hrtim_timcr2 |= pRollOverMode & (HRTIM_TIMCR2_ROM | HRTIM_TIMCR2_OUTROM |
 8007236:	f64f 7cc0 	movw	ip, #65472	; 0xffc0
       hrtim_timcr2 &= ~(HRTIM_TIMCR2_ROM | HRTIM_TIMCR2_OUTROM |
 800723a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
       hrtim_timcr2 |= pRollOverMode & (HRTIM_TIMCR2_ROM | HRTIM_TIMCR2_OUTROM |
 800723e:	ea02 020c 	and.w	r2, r2, ip
 8007242:	431a      	orrs	r2, r3
       hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2 = hrtim_timcr2;
 8007244:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
 8007248:	e7eb      	b.n	8007222 <HAL_HRTIM_RollOverModeConfig+0x2e>
     return HAL_BUSY;
 800724a:	2302      	movs	r3, #2
}
 800724c:	4618      	mov	r0, r3
 800724e:	4770      	bx	lr

08007250 <HAL_HRTIM_WaveformTimerConfig>:
{
 8007250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007254:	f890 50dd 	ldrb.w	r5, [r0, #221]	; 0xdd
 8007258:	2d02      	cmp	r5, #2
 800725a:	b2eb      	uxtb	r3, r5
 800725c:	d071      	beq.n	8007342 <HAL_HRTIM_WaveformTimerConfig+0xf2>
  __HAL_LOCK(hhrtim);
 800725e:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 8007262:	2b01      	cmp	r3, #1
 8007264:	f000 814b 	beq.w	80074fe <HAL_HRTIM_WaveformTimerConfig+0x2ae>
 8007268:	4614      	mov	r4, r2
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800726a:	2302      	movs	r3, #2
  __HAL_LOCK(hhrtim);
 800726c:	2201      	movs	r2, #1
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800726e:	2906      	cmp	r1, #6
  __HAL_LOCK(hhrtim);
 8007270:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007274:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007278:	f000 80d4 	beq.w	8007424 <HAL_HRTIM_WaveformTimerConfig+0x1d4>
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 800727c:	6805      	ldr	r5, [r0, #0]
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 800727e:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8007282:	eb05 1cc1 	add.w	ip, r5, r1, lsl #7
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8007286:	f1b8 0f20 	cmp.w	r8, #32
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 800728a:	f8dc 3080 	ldr.w	r3, [ip, #128]	; 0x80
 800728e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007292:	f8cc 3080 	str.w	r3, [ip, #128]	; 0x80
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8007296:	f8dc 3080 	ldr.w	r3, [ip, #128]	; 0x80
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 800729a:	f8dc 90e8 	ldr.w	r9, [ip, #232]	; 0xe8
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800729e:	f8dc 70e4 	ldr.w	r7, [ip, #228]	; 0xe4
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80072a2:	f8d5 23a0 	ldr.w	r2, [r5, #928]	; 0x3a0
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80072a6:	f023 0e20 	bic.w	lr, r3, #32
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 80072aa:	ea4f 16c1 	mov.w	r6, r1, lsl #7
 80072ae:	ea4e 0e08 	orr.w	lr, lr, r8
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 80072b2:	d049      	beq.n	8007348 <HAL_HRTIM_WaveformTimerConfig+0xf8>
 80072b4:	f8d4 8018 	ldr.w	r8, [r4, #24]
 80072b8:	f1b8 0f02 	cmp.w	r8, #2
 80072bc:	d044      	beq.n	8007348 <HAL_HRTIM_WaveformTimerConfig+0xf8>
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 80072be:	f1b8 0f03 	cmp.w	r8, #3
 80072c2:	f000 8117 	beq.w	80074f4 <HAL_HRTIM_WaveformTimerConfig+0x2a4>
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 80072c6:	f1b8 0f04 	cmp.w	r8, #4
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 80072ca:	bf06      	itte	eq
 80072cc:	f02e 0e80 	biceq.w	lr, lr, #128	; 0x80
 80072d0:	f44e 7e80 	orreq.w	lr, lr, #256	; 0x100
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 80072d4:	f42e 7ed0 	bicne.w	lr, lr, #416	; 0x1a0
 80072d8:	e03a      	b.n	8007350 <HAL_HRTIM_WaveformTimerConfig+0x100>
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 80072da:	6b23      	ldr	r3, [r4, #48]	; 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 80072dc:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 80072e0:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80072e4:	f8cc 8080 	str.w	r8, [ip, #128]	; 0x80
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80072e8:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80072ec:	eb05 0c06 	add.w	ip, r5, r6
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80072f0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80072f4:	f8cc a0e8 	str.w	sl, [ip, #232]	; 0xe8
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80072f8:	f8cc 70e4 	str.w	r7, [ip, #228]	; 0xe4
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 80072fc:	f8cc e0d4 	str.w	lr, [ip, #212]	; 0xd4
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8007300:	f8c5 23a0 	str.w	r2, [r5, #928]	; 0x3a0
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8007304:	6822      	ldr	r2, [r4, #0]
 8007306:	621a      	str	r2, [r3, #32]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8007308:	6862      	ldr	r2, [r4, #4]
 800730a:	625a      	str	r2, [r3, #36]	; 0x24
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 800730c:	68a2      	ldr	r2, [r4, #8]
 800730e:	629a      	str	r2, [r3, #40]	; 0x28
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8007310:	68e2      	ldr	r2, [r4, #12]
 8007312:	62da      	str	r2, [r3, #44]	; 0x2c
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8007314:	6922      	ldr	r2, [r4, #16]
 8007316:	631a      	str	r2, [r3, #48]	; 0x30
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8007318:	f7ff f964 	bl	80065e4 <HRTIM_ForceRegistersUpdate>
   && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 800731c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800731e:	b953      	cbnz	r3, 8007336 <HAL_HRTIM_WaveformTimerConfig+0xe6>
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 8007320:	6802      	ldr	r2, [r0, #0]
 8007322:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007324:	4416      	add	r6, r2
 8007326:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800732a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800732e:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8007332:	f8c6 3080 	str.w	r3, [r6, #128]	; 0x80
  __HAL_UNLOCK(hhrtim);
 8007336:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007338:	2201      	movs	r2, #1
 800733a:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 800733e:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
}
 8007342:	4618      	mov	r0, r3
 8007344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8007348:	f42e 7ec0 	bic.w	lr, lr, #384	; 0x180
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 800734c:	f04e 0e20 	orr.w	lr, lr, #32
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8007350:	69e3      	ldr	r3, [r4, #28]
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8007352:	f42e 6e00 	bic.w	lr, lr, #2048	; 0x800
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8007356:	ea4e 0e03 	orr.w	lr, lr, r3
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 800735a:	6a23      	ldr	r3, [r4, #32]
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 800735c:	f42e 6e80 	bic.w	lr, lr, #1024	; 0x400
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8007360:	ea4e 0e03 	orr.w	lr, lr, r3
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8007364:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8007366:	f02e 6ec0 	bic.w	lr, lr, #100663296	; 0x6000000
  hrtim_timcr |= pTimerCfg->DACSynchro;
 800736a:	ea4e 0e03 	orr.w	lr, lr, r3
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 800736e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8007370:	f02e 6e00 	bic.w	lr, lr, #134217728	; 0x8000000
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8007374:	ea4e 0e03 	orr.w	lr, lr, r3
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8007378:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 800737a:	f02e 4e70 	bic.w	lr, lr, #4026531840	; 0xf0000000
  hrtim_timcr |= pTimerCfg->UpdateGating;
 800737e:	ea4e 0e03 	orr.w	lr, lr, r3
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8007382:	6b63      	ldr	r3, [r4, #52]	; 0x34
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8007384:	f42e 3e00 	bic.w	lr, lr, #131072	; 0x20000
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8007388:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 800738c:	bf08      	it	eq
 800738e:	f44e 3e00 	orreq.w	lr, lr, #131072	; 0x20000
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8007392:	f02e 0840 	bic.w	r8, lr, #64	; 0x40
  hrtim_timcr |= pTimerCfg->PushPull;
 8007396:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 800739a:	6da3      	ldr	r3, [r4, #88]	; 0x58
  hrtim_timcr |= pTimerCfg->PushPull;
 800739c:	ea48 080e 	orr.w	r8, r8, lr
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 80073a0:	f428 2880 	bic.w	r8, r8, #262144	; 0x40000
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 80073a4:	ea48 0803 	orr.w	r8, r8, r3
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80073a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80073aa:	f029 4a00 	bic.w	sl, r9, #2147483648	; 0x80000000
 80073ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073b2:	f02a 0a3f 	bic.w	sl, sl, #63	; 0x3f
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 80073b6:	ea4a 0a03 	orr.w	sl, sl, r3
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 80073ba:	f028 78fc 	bic.w	r8, r8, #33030144	; 0x1f80000
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 80073be:	6d23      	ldr	r3, [r4, #80]	; 0x50
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 80073c0:	f8d4 9048 	ldr.w	r9, [r4, #72]	; 0x48
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 80073c4:	f428 3880 	bic.w	r8, r8, #65536	; 0x10000
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 80073c8:	ea48 0803 	orr.w	r8, r8, r3
  hrtim_timfltr |= pTimerCfg->FaultLock;
 80073cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073ce:	ea4a 0a03 	orr.w	sl, sl, r3
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 80073d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 80073d4:	f427 7780 	bic.w	r7, r7, #256	; 0x100
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 80073d8:	431f      	orrs	r7, r3
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 80073da:	f429 5380 	bic.w	r3, r9, #4096	; 0x1000
 80073de:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 80073e2:	d01b      	beq.n	800741c <HAL_HRTIM_WaveformTimerConfig+0x1cc>
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 80073e4:	f427 57f0 	bic.w	r7, r7, #7680	; 0x1e00
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 80073e8:	ea49 0707 	orr.w	r7, r9, r7
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 80073ec:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 80073ee:	f8d4 e054 	ldr.w	lr, [r4, #84]	; 0x54
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 80073f2:	f427 4780 	bic.w	r7, r7, #16384	; 0x4000
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 80073f6:	431f      	orrs	r7, r3
  switch (TimerIdx)
 80073f8:	2905      	cmp	r1, #5
 80073fa:	f63f af73 	bhi.w	80072e4 <HAL_HRTIM_WaveformTimerConfig+0x94>
 80073fe:	a301      	add	r3, pc, #4	; (adr r3, 8007404 <HAL_HRTIM_WaveformTimerConfig+0x1b4>)
 8007400:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8007404:	080074b9 	.word	0x080074b9
 8007408:	080074e9 	.word	0x080074e9
 800740c:	080074dd 	.word	0x080074dd
 8007410:	080074d1 	.word	0x080074d1
 8007414:	080074c5 	.word	0x080074c5
 8007418:	080072db 	.word	0x080072db
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 800741c:	f1be 0f40 	cmp.w	lr, #64	; 0x40
 8007420:	d1e4      	bne.n	80073ec <HAL_HRTIM_WaveformTimerConfig+0x19c>
 8007422:	e7df      	b.n	80073e4 <HAL_HRTIM_WaveformTimerConfig+0x194>
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007424:	6801      	ldr	r1, [r0, #0]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8007426:	6966      	ldr	r6, [r4, #20]
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007428:	680b      	ldr	r3, [r1, #0]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800742a:	f8d1 23a0 	ldr.w	r2, [r1, #928]	; 0x3a0
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 800742e:	f023 0320 	bic.w	r3, r3, #32
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8007432:	ea43 0506 	orr.w	r5, r3, r6
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8007436:	2e20      	cmp	r6, #32
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8007438:	f025 03c0 	bic.w	r3, r5, #192	; 0xc0
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 800743c:	d039      	beq.n	80074b2 <HAL_HRTIM_WaveformTimerConfig+0x262>
 800743e:	69a6      	ldr	r6, [r4, #24]
 8007440:	2e02      	cmp	r6, #2
 8007442:	d036      	beq.n	80074b2 <HAL_HRTIM_WaveformTimerConfig+0x262>
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8007444:	2e03      	cmp	r6, #3
 8007446:	d05e      	beq.n	8007506 <HAL_HRTIM_WaveformTimerConfig+0x2b6>
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8007448:	2e04      	cmp	r6, #4
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 800744a:	bf0c      	ite	eq
 800744c:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8007450:	f025 03e0 	bicne.w	r3, r5, #224	; 0xe0
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8007454:	69e5      	ldr	r5, [r4, #28]
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8007456:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hrtim_mcr |= pTimerCfg->StartOnSync;
 800745a:	432b      	orrs	r3, r5
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 800745c:	6a25      	ldr	r5, [r4, #32]
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 800745e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8007462:	432b      	orrs	r3, r5
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8007464:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8007466:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
  hrtim_mcr |= pTimerCfg->DACSynchro;
 800746a:	432b      	orrs	r3, r5
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 800746c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 800746e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8007472:	432b      	orrs	r3, r5
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8007474:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8007476:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 800747a:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 800747e:	6b65      	ldr	r5, [r4, #52]	; 0x34
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8007480:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8007484:	432b      	orrs	r3, r5
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8007486:	6b25      	ldr	r5, [r4, #48]	; 0x30
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007488:	600b      	str	r3, [r1, #0]
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 800748a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  hrtim_bmcr |= pTimerCfg->BurstMode;
 800748e:	432a      	orrs	r2, r5
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8007490:	6825      	ldr	r5, [r4, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8007492:	f8c1 23a0 	str.w	r2, [r1, #928]	; 0x3a0
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8007496:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 800749a:	e9c0 5332 	strd	r5, r3, [r0, #200]	; 0xc8
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 800749e:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80074a2:	e9c0 1234 	strd	r1, r2, [r0, #208]	; 0xd0
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80074a6:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80074aa:	2106      	movs	r1, #6
 80074ac:	f7ff f89a 	bl	80065e4 <HRTIM_ForceRegistersUpdate>
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 80074b0:	e741      	b.n	8007336 <HAL_HRTIM_WaveformTimerConfig+0xe6>
    hrtim_mcr |= (HRTIM_MCR_HALF);
 80074b2:	f043 0320 	orr.w	r3, r3, #32
 80074b6:	e7cd      	b.n	8007454 <HAL_HRTIM_WaveformTimerConfig+0x204>
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 80074b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 80074ba:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 80074be:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
      break;
 80074c2:	e70f      	b.n	80072e4 <HAL_HRTIM_WaveformTimerConfig+0x94>
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80074c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 80074c6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80074ca:	ea42 1243 	orr.w	r2, r2, r3, lsl #5
      break;
 80074ce:	e709      	b.n	80072e4 <HAL_HRTIM_WaveformTimerConfig+0x94>
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 80074d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 80074d2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 80074d6:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
      break;
 80074da:	e703      	b.n	80072e4 <HAL_HRTIM_WaveformTimerConfig+0x94>
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80074dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 80074de:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80074e2:	ea42 02c3 	orr.w	r2, r2, r3, lsl #3
      break;
 80074e6:	e6fd      	b.n	80072e4 <HAL_HRTIM_WaveformTimerConfig+0x94>
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 80074e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 80074ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 80074ee:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
      break;
 80074f2:	e6f7      	b.n	80072e4 <HAL_HRTIM_WaveformTimerConfig+0x94>
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 80074f4:	f42e 7e80 	bic.w	lr, lr, #256	; 0x100
 80074f8:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
 80074fc:	e728      	b.n	8007350 <HAL_HRTIM_WaveformTimerConfig+0x100>
     return HAL_BUSY;
 80074fe:	2302      	movs	r3, #2
}
 8007500:	4618      	mov	r0, r3
 8007502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8007506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 800750a:	e7a3      	b.n	8007454 <HAL_HRTIM_WaveformTimerConfig+0x204>

0800750c <HAL_HRTIM_WaveformTimerControl>:
{
 800750c:	b538      	push	{r3, r4, r5, lr}
    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800750e:	f890 40dd 	ldrb.w	r4, [r0, #221]	; 0xdd
 8007512:	2c02      	cmp	r4, #2
 8007514:	b2e3      	uxtb	r3, r4
 8007516:	d02f      	beq.n	8007578 <HAL_HRTIM_WaveformTimerControl+0x6c>
    __HAL_LOCK(hhrtim);
 8007518:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 800751c:	2b01      	cmp	r3, #1
 800751e:	d038      	beq.n	8007592 <HAL_HRTIM_WaveformTimerControl+0x86>
 8007520:	2301      	movs	r3, #1
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8007522:	6804      	ldr	r4, [r0, #0]
    __HAL_LOCK(hhrtim);
 8007524:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007528:	2302      	movs	r3, #2
 800752a:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 800752e:	eb04 13c1 	add.w	r3, r4, r1, lsl #7
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8007532:	6815      	ldr	r5, [r2, #0]
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8007534:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8007538:	f023 0310 	bic.w	r3, r3, #16
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 800753c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8007540:	6855      	ldr	r5, [r2, #4]
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 8007542:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8007546:	432b      	orrs	r3, r5
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 8007548:	68d5      	ldr	r5, [r2, #12]
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 800754a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 800754e:	432b      	orrs	r3, r5
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 8007550:	6895      	ldr	r5, [r2, #8]
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8007552:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 8007556:	432b      	orrs	r3, r5
   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8007558:	6995      	ldr	r5, [r2, #24]
 800755a:	2d01      	cmp	r5, #1
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 800755c:	ea4f 1cc1 	mov.w	ip, r1, lsl #7
   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8007560:	d00c      	beq.n	800757c <HAL_HRTIM_WaveformTimerControl+0x70>
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8007562:	4464      	add	r4, ip
 8007564:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8007568:	f7ff f83c 	bl	80065e4 <HRTIM_ForceRegistersUpdate>
    __HAL_UNLOCK(hhrtim);
 800756c:	2300      	movs	r3, #0
    hhrtim->State = HAL_HRTIM_STATE_READY;
 800756e:	2201      	movs	r2, #1
 8007570:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
    __HAL_UNLOCK(hhrtim);
 8007574:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
}
 8007578:	4618      	mov	r0, r3
 800757a:	bd38      	pop	{r3, r4, r5, pc}
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 800757c:	6915      	ldr	r5, [r2, #16]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 800757e:	6952      	ldr	r2, [r2, #20]
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 8007580:	f023 0304 	bic.w	r3, r3, #4
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8007584:	432b      	orrs	r3, r5
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 8007586:	f023 0302 	bic.w	r3, r3, #2
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 800758a:	4313      	orrs	r3, r2
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 800758c:	f043 0301 	orr.w	r3, r3, #1
 8007590:	e7e7      	b.n	8007562 <HAL_HRTIM_WaveformTimerControl+0x56>
       return HAL_BUSY;
 8007592:	2302      	movs	r3, #2
}
 8007594:	4618      	mov	r0, r3
 8007596:	bd38      	pop	{r3, r4, r5, pc}

08007598 <HAL_HRTIM_TimerEventFilteringConfig>:
{
 8007598:	b510      	push	{r4, lr}
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800759a:	f890 e0dd 	ldrb.w	lr, [r0, #221]	; 0xdd
 800759e:	f1be 0f02 	cmp.w	lr, #2
 80075a2:	fa5f fc8e 	uxtb.w	ip, lr
 80075a6:	d032      	beq.n	800760e <HAL_HRTIM_TimerEventFilteringConfig+0x76>
  __HAL_LOCK(hhrtim);
 80075a8:	f890 c0dc 	ldrb.w	ip, [r0, #220]	; 0xdc
 80075ac:	f1bc 0f01 	cmp.w	ip, #1
 80075b0:	f000 80c1 	beq.w	8007736 <HAL_HRTIM_TimerEventFilteringConfig+0x19e>
 80075b4:	f04f 0c01 	mov.w	ip, #1
 80075b8:	f880 c0dc 	strb.w	ip, [r0, #220]	; 0xdc
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80075bc:	f04f 0c02 	mov.w	ip, #2
 80075c0:	f880 c0dd 	strb.w	ip, [r0, #221]	; 0xdd
  switch (Event)
 80075c4:	2a0a      	cmp	r2, #10
 80075c6:	f200 80ba 	bhi.w	800773e <HAL_HRTIM_TimerEventFilteringConfig+0x1a6>
 80075ca:	e8df f002 	tbb	[pc, r2]
 80075ce:	2b22      	.short	0x2b22
 80075d0:	66574839 	.word	0x66574839
 80075d4:	a1928375 	.word	0xa1928375
 80075d8:	06          	.byte	0x06
 80075d9:	00          	.byte	0x00
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR2, (HRTIM_EEFR2_EE10FLTR | HRTIM_EEFR2_EE10LTCH), ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 24U) );
 80075da:	6802      	ldr	r2, [r0, #0]
 80075dc:	681c      	ldr	r4, [r3, #0]
 80075de:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 80075e2:	685a      	ldr	r2, [r3, #4]
 80075e4:	f8d1 30d0 	ldr.w	r3, [r1, #208]	; 0xd0
 80075e8:	4322      	orrs	r2, r4
 80075ea:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80075ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80075f2:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80075f6:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 80075fa:	2b07      	cmp	r3, #7
 80075fc:	f000 8097 	beq.w	800772e <HAL_HRTIM_TimerEventFilteringConfig+0x196>
  __HAL_UNLOCK(hhrtim);
 8007600:	f04f 0c00 	mov.w	ip, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007604:	2301      	movs	r3, #1
 8007606:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 800760a:	f880 c0dc 	strb.w	ip, [r0, #220]	; 0xdc
}
 800760e:	4660      	mov	r0, ip
 8007610:	bd10      	pop	{r4, pc}
      CLEAR_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR1);
 8007612:	6803      	ldr	r3, [r0, #0]
 8007614:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
 8007618:	2200      	movs	r2, #0
 800761a:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
      CLEAR_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR2);
 800761e:	f8c1 20d0 	str.w	r2, [r1, #208]	; 0xd0
      break;
 8007622:	e7e8      	b.n	80075f6 <HAL_HRTIM_TimerEventFilteringConfig+0x5e>
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR1, (HRTIM_EEFR1_EE1FLTR | HRTIM_EEFR1_EE1LTCH), (pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch));
 8007624:	6804      	ldr	r4, [r0, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	eb04 11c1 	add.w	r1, r4, r1, lsl #7
 800762e:	4313      	orrs	r3, r2
 8007630:	f8d1 20cc 	ldr.w	r2, [r1, #204]	; 0xcc
 8007634:	f022 021f 	bic.w	r2, r2, #31
 8007638:	4313      	orrs	r3, r2
 800763a:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
      break;
 800763e:	e7da      	b.n	80075f6 <HAL_HRTIM_TimerEventFilteringConfig+0x5e>
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR1, (HRTIM_EEFR1_EE2FLTR | HRTIM_EEFR1_EE2LTCH), ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 6U) );
 8007640:	6802      	ldr	r2, [r0, #0]
 8007642:	681c      	ldr	r4, [r3, #0]
 8007644:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 8007648:	685a      	ldr	r2, [r3, #4]
 800764a:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
 800764e:	4322      	orrs	r2, r4
 8007650:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 8007654:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8007658:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
      break;
 800765c:	e7cb      	b.n	80075f6 <HAL_HRTIM_TimerEventFilteringConfig+0x5e>
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR1, (HRTIM_EEFR1_EE3FLTR | HRTIM_EEFR1_EE3LTCH), ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 12U) );
 800765e:	6802      	ldr	r2, [r0, #0]
 8007660:	681c      	ldr	r4, [r3, #0]
 8007662:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 8007666:	685a      	ldr	r2, [r3, #4]
 8007668:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
 800766c:	4322      	orrs	r2, r4
 800766e:	f423 33f8 	bic.w	r3, r3, #126976	; 0x1f000
 8007672:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8007676:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
      break;
 800767a:	e7bc      	b.n	80075f6 <HAL_HRTIM_TimerEventFilteringConfig+0x5e>
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR1, (HRTIM_EEFR1_EE4FLTR | HRTIM_EEFR1_EE4LTCH), ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 18U) );
 800767c:	6802      	ldr	r2, [r0, #0]
 800767e:	681c      	ldr	r4, [r3, #0]
 8007680:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 8007684:	685a      	ldr	r2, [r3, #4]
 8007686:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
 800768a:	4322      	orrs	r2, r4
 800768c:	f423 03f8 	bic.w	r3, r3, #8126464	; 0x7c0000
 8007690:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8007694:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
      break;
 8007698:	e7ad      	b.n	80075f6 <HAL_HRTIM_TimerEventFilteringConfig+0x5e>
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR1, (HRTIM_EEFR1_EE5FLTR | HRTIM_EEFR1_EE5LTCH), ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 24U) );
 800769a:	6802      	ldr	r2, [r0, #0]
 800769c:	681c      	ldr	r4, [r3, #0]
 800769e:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 80076a2:	685a      	ldr	r2, [r3, #4]
 80076a4:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
 80076a8:	4322      	orrs	r2, r4
 80076aa:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80076ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80076b2:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
      break;
 80076b6:	e79e      	b.n	80075f6 <HAL_HRTIM_TimerEventFilteringConfig+0x5e>
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR2, (HRTIM_EEFR2_EE6FLTR | HRTIM_EEFR2_EE6LTCH), (pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) );
 80076b8:	6804      	ldr	r4, [r0, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	eb04 11c1 	add.w	r1, r4, r1, lsl #7
 80076c2:	4313      	orrs	r3, r2
 80076c4:	f8d1 20d0 	ldr.w	r2, [r1, #208]	; 0xd0
 80076c8:	f022 021f 	bic.w	r2, r2, #31
 80076cc:	4313      	orrs	r3, r2
 80076ce:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
      break;
 80076d2:	e790      	b.n	80075f6 <HAL_HRTIM_TimerEventFilteringConfig+0x5e>
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR2, (HRTIM_EEFR2_EE7FLTR | HRTIM_EEFR2_EE7LTCH), ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 6U) );
 80076d4:	6802      	ldr	r2, [r0, #0]
 80076d6:	681c      	ldr	r4, [r3, #0]
 80076d8:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 80076dc:	685a      	ldr	r2, [r3, #4]
 80076de:	f8d1 30d0 	ldr.w	r3, [r1, #208]	; 0xd0
 80076e2:	4322      	orrs	r2, r4
 80076e4:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 80076e8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80076ec:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
      break;
 80076f0:	e781      	b.n	80075f6 <HAL_HRTIM_TimerEventFilteringConfig+0x5e>
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR2, (HRTIM_EEFR2_EE8FLTR | HRTIM_EEFR2_EE8LTCH), ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 12U) );
 80076f2:	6802      	ldr	r2, [r0, #0]
 80076f4:	681c      	ldr	r4, [r3, #0]
 80076f6:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	f8d1 30d0 	ldr.w	r3, [r1, #208]	; 0xd0
 8007700:	4322      	orrs	r2, r4
 8007702:	f423 33f8 	bic.w	r3, r3, #126976	; 0x1f000
 8007706:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800770a:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
      break;
 800770e:	e772      	b.n	80075f6 <HAL_HRTIM_TimerEventFilteringConfig+0x5e>
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR2, (HRTIM_EEFR2_EE9FLTR | HRTIM_EEFR2_EE9LTCH), ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 18U) );
 8007710:	6802      	ldr	r2, [r0, #0]
 8007712:	681c      	ldr	r4, [r3, #0]
 8007714:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 8007718:	685a      	ldr	r2, [r3, #4]
 800771a:	f8d1 30d0 	ldr.w	r3, [r1, #208]	; 0xd0
 800771e:	4322      	orrs	r2, r4
 8007720:	f423 03f8 	bic.w	r3, r3, #8126464	; 0x7c0000
 8007724:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8007728:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
      break;
 800772c:	e763      	b.n	80075f6 <HAL_HRTIM_TimerEventFilteringConfig+0x5e>
     return HAL_ERROR;
 800772e:	f04f 0c01 	mov.w	ip, #1
}
 8007732:	4660      	mov	r0, ip
 8007734:	bd10      	pop	{r4, pc}
     return HAL_BUSY;
 8007736:	f04f 0c02 	mov.w	ip, #2
}
 800773a:	4660      	mov	r0, ip
 800773c:	bd10      	pop	{r4, pc}
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800773e:	2207      	movs	r2, #7
      __HAL_UNLOCK(hhrtim);
 8007740:	2300      	movs	r3, #0
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007742:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
      __HAL_UNLOCK(hhrtim);
 8007746:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
      break;
 800774a:	e754      	b.n	80075f6 <HAL_HRTIM_TimerEventFilteringConfig+0x5e>

0800774c <HAL_HRTIM_DeadTimeConfig>:
{
 800774c:	b430      	push	{r4, r5}
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800774e:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 8007752:	2b02      	cmp	r3, #2
 8007754:	b2dc      	uxtb	r4, r3
 8007756:	d041      	beq.n	80077dc <HAL_HRTIM_DeadTimeConfig+0x90>
  __HAL_LOCK(hhrtim);
 8007758:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 800775c:	2b01      	cmp	r3, #1
 800775e:	d040      	beq.n	80077e2 <HAL_HRTIM_DeadTimeConfig+0x96>
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007760:	2302      	movs	r3, #2
 8007762:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 8007766:	6854      	ldr	r4, [r2, #4]
  hrtim_dtr  = (pDeadTimeCfg->Prescaler & HRTIM_DTR_DTPRSC);
 8007768:	6813      	ldr	r3, [r2, #0]
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 800776a:	6955      	ldr	r5, [r2, #20]
  hrtim_dtr  = (pDeadTimeCfg->Prescaler & HRTIM_DTR_DTPRSC);
 800776c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 8007770:	f3c4 0c08 	ubfx	ip, r4, #0, #9
 8007774:	ea4c 0c03 	orr.w	ip, ip, r3
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 8007778:	6893      	ldr	r3, [r2, #8]
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 800777a:	6994      	ldr	r4, [r2, #24]
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 800777c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007780:	ea43 0c0c 	orr.w	ip, r3, ip
  hrtim_dtr |= (pDeadTimeCfg->RisingSignLock & HRTIM_DTR_DTRSLK);
 8007784:	6913      	ldr	r3, [r2, #16]
 8007786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800778a:	ea43 0c0c 	orr.w	ip, r3, ip
  hrtim_dtr |= (pDeadTimeCfg->RisingLock & HRTIM_DTR_DTRLK);
 800778e:	68d3      	ldr	r3, [r2, #12]
 8007790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007794:	ea43 030c 	orr.w	r3, r3, ip
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 8007798:	f004 7400 	and.w	r4, r4, #33554432	; 0x2000000
 800779c:	4323      	orrs	r3, r4
  hrtim_dtr |= (pDeadTimeCfg->FallingSignLock & HRTIM_DTR_DTFSLK);
 800779e:	6a14      	ldr	r4, [r2, #32]
 80077a0:	f004 4480 	and.w	r4, r4, #1073741824	; 0x40000000
 80077a4:	4323      	orrs	r3, r4
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 80077a6:	69d4      	ldr	r4, [r2, #28]
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 80077a8:	6802      	ldr	r2, [r0, #0]
 80077aa:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 80077ae:	4a0f      	ldr	r2, [pc, #60]	; (80077ec <HAL_HRTIM_DeadTimeConfig+0xa0>)
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 80077b0:	f004 4c00 	and.w	ip, r4, #2147483648	; 0x80000000
 80077b4:	ea43 030c 	orr.w	r3, r3, ip
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 80077b8:	ea02 4205 	and.w	r2, r2, r5, lsl #16
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 80077bc:	f8d1 40b8 	ldr.w	r4, [r1, #184]	; 0xb8
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 80077c0:	4313      	orrs	r3, r2
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 80077c2:	4a0b      	ldr	r2, [pc, #44]	; (80077f0 <HAL_HRTIM_DeadTimeConfig+0xa4>)
 80077c4:	4022      	ands	r2, r4
  __HAL_UNLOCK(hhrtim);
 80077c6:	f04f 0c00 	mov.w	ip, #0
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 80077ca:	4313      	orrs	r3, r2
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80077cc:	2201      	movs	r2, #1
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 80077ce:	f8c1 30b8 	str.w	r3, [r1, #184]	; 0xb8
  return HAL_OK;
 80077d2:	4664      	mov	r4, ip
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80077d4:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 80077d8:	f880 c0dc 	strb.w	ip, [r0, #220]	; 0xdc
}
 80077dc:	4620      	mov	r0, r4
 80077de:	bc30      	pop	{r4, r5}
 80077e0:	4770      	bx	lr
     return HAL_BUSY;
 80077e2:	2402      	movs	r4, #2
}
 80077e4:	4620      	mov	r0, r4
 80077e6:	bc30      	pop	{r4, r5}
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	01ff0000 	.word	0x01ff0000
 80077f0:	3c002000 	.word	0x3c002000

080077f4 <HAL_HRTIM_WaveformCompareConfig>:
{
 80077f4:	b510      	push	{r4, lr}
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80077f6:	f890 e0dd 	ldrb.w	lr, [r0, #221]	; 0xdd
 80077fa:	f1be 0f02 	cmp.w	lr, #2
 80077fe:	fa5f fc8e 	uxtb.w	ip, lr
 8007802:	d02a      	beq.n	800785a <HAL_HRTIM_WaveformCompareConfig+0x66>
  __HAL_LOCK(hhrtim);
 8007804:	f890 c0dc 	ldrb.w	ip, [r0, #220]	; 0xdc
 8007808:	f1bc 0f01 	cmp.w	ip, #1
 800780c:	f000 809b 	beq.w	8007946 <HAL_HRTIM_WaveformCompareConfig+0x152>
 8007810:	f04f 0c01 	mov.w	ip, #1
 8007814:	f880 c0dc 	strb.w	ip, [r0, #220]	; 0xdc
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007818:	2906      	cmp	r1, #6
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800781a:	f04f 0c02 	mov.w	ip, #2
 800781e:	f880 c0dd 	strb.w	ip, [r0, #221]	; 0xdd
    switch (CompareUnit)
 8007822:	f102 32ff 	add.w	r2, r2, #4294967295
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007826:	d01a      	beq.n	800785e <HAL_HRTIM_WaveformCompareConfig+0x6a>
    switch (CompareUnit)
 8007828:	2a07      	cmp	r2, #7
 800782a:	d805      	bhi.n	8007838 <HAL_HRTIM_WaveformCompareConfig+0x44>
 800782c:	e8df f002 	tbb	[pc, r2]
 8007830:	3a04602c 	.word	0x3a04602c
 8007834:	41040404 	.word	0x41040404
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007838:	2207      	movs	r2, #7
        __HAL_UNLOCK(hhrtim);
 800783a:	2300      	movs	r3, #0
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800783c:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
        __HAL_UNLOCK(hhrtim);
 8007840:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007844:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 8007848:	2b07      	cmp	r3, #7
 800784a:	d027      	beq.n	800789c <HAL_HRTIM_WaveformCompareConfig+0xa8>
  __HAL_UNLOCK(hhrtim);
 800784c:	f04f 0c00 	mov.w	ip, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007850:	2301      	movs	r3, #1
 8007852:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 8007856:	f880 c0dc 	strb.w	ip, [r0, #220]	; 0xdc
}
 800785a:	4660      	mov	r0, ip
 800785c:	bd10      	pop	{r4, pc}
    switch (CompareUnit)
 800785e:	2a07      	cmp	r2, #7
 8007860:	d8ea      	bhi.n	8007838 <HAL_HRTIM_WaveformCompareConfig+0x44>
 8007862:	a101      	add	r1, pc, #4	; (adr r1, 8007868 <HAL_HRTIM_WaveformCompareConfig+0x74>)
 8007864:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007868:	08007937 	.word	0x08007937
 800786c:	0800792f 	.word	0x0800792f
 8007870:	08007839 	.word	0x08007839
 8007874:	0800793f 	.word	0x0800793f
 8007878:	08007839 	.word	0x08007839
 800787c:	08007839 	.word	0x08007839
 8007880:	08007839 	.word	0x08007839
 8007884:	08007927 	.word	0x08007927
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8007888:	6802      	ldr	r2, [r0, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 8007890:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007894:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 8007898:	2b07      	cmp	r3, #7
 800789a:	d1d7      	bne.n	800784c <HAL_HRTIM_WaveformCompareConfig+0x58>
     return HAL_ERROR;
 800789c:	f04f 0c01 	mov.w	ip, #1
}
 80078a0:	4660      	mov	r0, ip
 80078a2:	bd10      	pop	{r4, pc}
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 80078a4:	6802      	ldr	r2, [r0, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 80078ac:	f8c1 30a8 	str.w	r3, [r1, #168]	; 0xa8
        break;
 80078b0:	e7c8      	b.n	8007844 <HAL_HRTIM_WaveformCompareConfig+0x50>
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80078b2:	6802      	ldr	r2, [r0, #0]
 80078b4:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 80078b8:	e9d3 4200 	ldrd	r4, r2, [r3]
 80078bc:	f8c1 40ac 	str.w	r4, [r1, #172]	; 0xac
        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80078c0:	2a00      	cmp	r2, #0
 80078c2:	d04b      	beq.n	800795c <HAL_HRTIM_WaveformCompareConfig+0x168>
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 80078c4:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
 80078c8:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
 80078cc:	f8c1 4080 	str.w	r4, [r1, #128]	; 0x80
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80078d0:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80078d4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80078d8:	ea44 0482 	orr.w	r4, r4, r2, lsl #2
 80078dc:	f8c1 4080 	str.w	r4, [r1, #128]	; 0x80
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80078e0:	d01d      	beq.n	800791e <HAL_HRTIM_WaveformCompareConfig+0x12a>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80078e2:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80078e6:	d1ad      	bne.n	8007844 <HAL_HRTIM_WaveformCompareConfig+0x50>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f8c1 30a8 	str.w	r3, [r1, #168]	; 0xa8
 80078ee:	e7a9      	b.n	8007844 <HAL_HRTIM_WaveformCompareConfig+0x50>
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 80078f0:	6802      	ldr	r2, [r0, #0]
 80078f2:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 80078f6:	e9d3 4200 	ldrd	r4, r2, [r3]
 80078fa:	f8c1 40a4 	str.w	r4, [r1, #164]	; 0xa4
        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80078fe:	b332      	cbz	r2, 800794e <HAL_HRTIM_WaveformCompareConfig+0x15a>
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8007900:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
 8007904:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
 8007908:	f8c1 4080 	str.w	r4, [r1, #128]	; 0x80
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 800790c:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8007910:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8007914:	ea44 0402 	orr.w	r4, r4, r2
 8007918:	f8c1 4080 	str.w	r4, [r1, #128]	; 0x80
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 800791c:	d1e1      	bne.n	80078e2 <HAL_HRTIM_WaveformCompareConfig+0xee>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007924:	e78e      	b.n	8007844 <HAL_HRTIM_WaveformCompareConfig+0x50>
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8007926:	6802      	ldr	r2, [r0, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800792c:	e78a      	b.n	8007844 <HAL_HRTIM_WaveformCompareConfig+0x50>
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 800792e:	6802      	ldr	r2, [r0, #0]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6253      	str	r3, [r2, #36]	; 0x24
        break;
 8007934:	e786      	b.n	8007844 <HAL_HRTIM_WaveformCompareConfig+0x50>
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8007936:	6802      	ldr	r2, [r0, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	61d3      	str	r3, [r2, #28]
        break;
 800793c:	e782      	b.n	8007844 <HAL_HRTIM_WaveformCompareConfig+0x50>
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 800793e:	6802      	ldr	r2, [r0, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8007944:	e77e      	b.n	8007844 <HAL_HRTIM_WaveformCompareConfig+0x50>
     return HAL_BUSY;
 8007946:	f04f 0c02 	mov.w	ip, #2
}
 800794a:	4660      	mov	r0, ip
 800794c:	bd10      	pop	{r4, pc}
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 800794e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8007952:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007956:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 800795a:	e773      	b.n	8007844 <HAL_HRTIM_WaveformCompareConfig+0x50>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 800795c:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8007960:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007964:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 8007968:	e76c      	b.n	8007844 <HAL_HRTIM_WaveformCompareConfig+0x50>
 800796a:	bf00      	nop

0800796c <HAL_HRTIM_WaveformOutputConfig>:
{
 800796c:	b538      	push	{r3, r4, r5, lr}
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800796e:	f890 e0dd 	ldrb.w	lr, [r0, #221]	; 0xdd
 8007972:	f1be 0f02 	cmp.w	lr, #2
 8007976:	fa5f fc8e 	uxtb.w	ip, lr
 800797a:	d013      	beq.n	80079a4 <HAL_HRTIM_WaveformOutputConfig+0x38>
  __HAL_LOCK(hhrtim);
 800797c:	f890 50dc 	ldrb.w	r5, [r0, #220]	; 0xdc
 8007980:	2d01      	cmp	r5, #1
 8007982:	4604      	mov	r4, r0
 8007984:	d010      	beq.n	80079a8 <HAL_HRTIM_WaveformOutputConfig+0x3c>
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007986:	f04f 0c02 	mov.w	ip, #2
  __HAL_LOCK(hhrtim);
 800798a:	2501      	movs	r5, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800798c:	f880 c0dd 	strb.w	ip, [r0, #221]	; 0xdd
  __HAL_LOCK(hhrtim);
 8007990:	f880 50dc 	strb.w	r5, [r0, #220]	; 0xdc
  HRTIM_OutputConfig(hhrtim,
 8007994:	f7fe fc62 	bl	800625c <HRTIM_OutputConfig>
  __HAL_UNLOCK(hhrtim);
 8007998:	f04f 0c00 	mov.w	ip, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800799c:	f884 50dd 	strb.w	r5, [r4, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 80079a0:	f884 c0dc 	strb.w	ip, [r4, #220]	; 0xdc
}
 80079a4:	4660      	mov	r0, ip
 80079a6:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_BUSY;
 80079a8:	f04f 0c02 	mov.w	ip, #2
}
 80079ac:	4660      	mov	r0, ip
 80079ae:	bd38      	pop	{r3, r4, r5, pc}

080079b0 <HAL_HRTIM_WaveformCountStart_DMA>:
{
 80079b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80079b4:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d05f      	beq.n	8007a7c <HAL_HRTIM_WaveformCountStart_DMA+0xcc>
  __HAL_LOCK(hhrtim);
 80079bc:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80079c0:	2202      	movs	r2, #2
  __HAL_LOCK(hhrtim);
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	4605      	mov	r5, r0
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80079c6:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
  __HAL_LOCK(hhrtim);
 80079ca:	d057      	beq.n	8007a7c <HAL_HRTIM_WaveformCountStart_DMA+0xcc>
 80079cc:	2401      	movs	r4, #1
  if (((Timers & HRTIM_TIMERID_MASTER) != (uint32_t)RESET) &&
 80079ce:	03cb      	lsls	r3, r1, #15
 80079d0:	460f      	mov	r7, r1
  __HAL_LOCK(hhrtim);
 80079d2:	f880 40dc 	strb.w	r4, [r0, #220]	; 0xdc
  if (((Timers & HRTIM_TIMERID_MASTER) != (uint32_t)RESET) &&
 80079d6:	d439      	bmi.n	8007a4c <HAL_HRTIM_WaveformCountStart_DMA+0x9c>
 80079d8:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8007ab8 <HAL_HRTIM_WaveformCountStart_DMA+0x108>
      hdma->XferErrorCallback = HRTIM_DMAError ;
 80079dc:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8007ab0 <HAL_HRTIM_WaveformCountStart_DMA+0x100>
      hdma->XferCpltCallback = HRTIM_DMATimerxCplt;
 80079e0:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007abc <HAL_HRTIM_WaveformCountStart_DMA+0x10c>
 80079e4:	462c      	mov	r4, r5
 80079e6:	f105 09a8 	add.w	r9, r5, #168	; 0xa8
{
 80079ea:	2600      	movs	r6, #0
 80079ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079f0:	e001      	b.n	80079f6 <HAL_HRTIM_WaveformCountStart_DMA+0x46>
    if (((Timers & TimerIdxToTimerId[timer_idx]) != (uint32_t)RESET) &&
 80079f2:	f858 3f04 	ldr.w	r3, [r8, #4]!
 80079f6:	421f      	tst	r7, r3
 80079f8:	d01b      	beq.n	8007a32 <HAL_HRTIM_WaveformCountStart_DMA+0x82>
 80079fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hdma = HRTIM_GetDMAHandleFromTimerIdx(hhrtim, timer_idx);
 80079fc:	4631      	mov	r1, r6
    if (((Timers & TimerIdxToTimerId[timer_idx]) != (uint32_t)RESET) &&
 80079fe:	b1c3      	cbz	r3, 8007a32 <HAL_HRTIM_WaveformCountStart_DMA+0x82>
      hdma = HRTIM_GetDMAHandleFromTimerIdx(hhrtim, timer_idx);
 8007a00:	4628      	mov	r0, r5
 8007a02:	f7fe fdcf 	bl	80065a4 <HRTIM_GetDMAHandleFromTimerIdx>
      if (hdma == NULL)
 8007a06:	2800      	cmp	r0, #0
 8007a08:	d043      	beq.n	8007a92 <HAL_HRTIM_WaveformCountStart_DMA+0xe2>
      if (HAL_DMA_Start_IT(hdma,
 8007a0a:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
 8007a0e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      hdma->XferErrorCallback = HRTIM_DMAError ;
 8007a10:	f8c0 b034 	str.w	fp, [r0, #52]	; 0x34
      hdma->XferCpltCallback = HRTIM_DMATimerxCplt;
 8007a14:	f8c0 a02c 	str.w	sl, [r0, #44]	; 0x2c
      if (HAL_DMA_Start_IT(hdma,
 8007a18:	f7fe f954 	bl	8005cc4 <HAL_DMA_Start_IT>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	d13f      	bne.n	8007aa0 <HAL_HRTIM_WaveformCountStart_DMA+0xf0>
      __HAL_HRTIM_TIMER_ENABLE_DMA(hhrtim,
 8007a20:	682b      	ldr	r3, [r5, #0]
 8007a22:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007a24:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
 8007a28:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007a32:	341c      	adds	r4, #28
 8007a34:	454c      	cmp	r4, r9
 8007a36:	f106 0601 	add.w	r6, r6, #1
 8007a3a:	d1da      	bne.n	80079f2 <HAL_HRTIM_WaveformCountStart_DMA+0x42>
  __HAL_UNLOCK(hhrtim);
 8007a3c:	2000      	movs	r0, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	f885 30dd 	strb.w	r3, [r5, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 8007a44:	f885 00dc 	strb.w	r0, [r5, #220]	; 0xdc
}
 8007a48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (((Timers & HRTIM_TIMERID_MASTER) != (uint32_t)RESET) &&
 8007a4c:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d0c1      	beq.n	80079d8 <HAL_HRTIM_WaveformCountStart_DMA+0x28>
      hhrtim->hdmaMaster->XferErrorCallback = HRTIM_DMAError ;
 8007a54:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
 8007a58:	4b15      	ldr	r3, [pc, #84]	; (8007ab0 <HAL_HRTIM_WaveformCountStart_DMA+0x100>)
 8007a5a:	6343      	str	r3, [r0, #52]	; 0x34
      hhrtim->hdmaMaster->XferCpltCallback = HRTIM_DMAMasterCplt;
 8007a5c:	4b15      	ldr	r3, [pc, #84]	; (8007ab4 <HAL_HRTIM_WaveformCountStart_DMA+0x104>)
 8007a5e:	62c3      	str	r3, [r0, #44]	; 0x2c
      if (HAL_DMA_Start_IT(hhrtim->hdmaMaster,
 8007a60:	f8d5 10d0 	ldr.w	r1, [r5, #208]	; 0xd0
 8007a64:	e9d5 2335 	ldrd	r2, r3, [r5, #212]	; 0xd4
 8007a68:	f7fe f92c 	bl	8005cc4 <HAL_DMA_Start_IT>
 8007a6c:	b948      	cbnz	r0, 8007a82 <HAL_HRTIM_WaveformCountStart_DMA+0xd2>
      __HAL_HRTIM_MASTER_ENABLE_DMA(hhrtim,
 8007a6e:	682a      	ldr	r2, [r5, #0]
 8007a70:	f8d5 10cc 	ldr.w	r1, [r5, #204]	; 0xcc
 8007a74:	68d3      	ldr	r3, [r2, #12]
 8007a76:	430b      	orrs	r3, r1
 8007a78:	60d3      	str	r3, [r2, #12]
 8007a7a:	e7ad      	b.n	80079d8 <HAL_HRTIM_WaveformCountStart_DMA+0x28>
     return HAL_BUSY;
 8007a7c:	2002      	movs	r0, #2
}
 8007a7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007a82:	2207      	movs	r2, #7
            __HAL_UNLOCK(hhrtim);
 8007a84:	2300      	movs	r3, #0
            hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007a86:	f885 20dd 	strb.w	r2, [r5, #221]	; 0xdd
            __HAL_UNLOCK(hhrtim);
 8007a8a:	f885 30dc 	strb.w	r3, [r5, #220]	; 0xdc
            return HAL_ERROR;
 8007a8e:	4620      	mov	r0, r4
 8007a90:	e7da      	b.n	8007a48 <HAL_HRTIM_WaveformCountStart_DMA+0x98>
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007a92:	2207      	movs	r2, #7
        __HAL_UNLOCK(hhrtim);
 8007a94:	f885 00dc 	strb.w	r0, [r5, #220]	; 0xdc
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007a98:	f885 20dd 	strb.w	r2, [r5, #221]	; 0xdd
        return HAL_ERROR;
 8007a9c:	2001      	movs	r0, #1
 8007a9e:	e7d3      	b.n	8007a48 <HAL_HRTIM_WaveformCountStart_DMA+0x98>
              hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007aa0:	2207      	movs	r2, #7
              __HAL_UNLOCK(hhrtim);
 8007aa2:	2300      	movs	r3, #0
              hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007aa4:	f885 20dd 	strb.w	r2, [r5, #221]	; 0xdd
              __HAL_UNLOCK(hhrtim);
 8007aa8:	f885 30dc 	strb.w	r3, [r5, #220]	; 0xdc
              return HAL_ERROR;
 8007aac:	2001      	movs	r0, #1
 8007aae:	e7cb      	b.n	8007a48 <HAL_HRTIM_WaveformCountStart_DMA+0x98>
 8007ab0:	08007cb5 	.word	0x08007cb5
 8007ab4:	08007add 	.word	0x08007add
 8007ab8:	0800b0b8 	.word	0x0800b0b8
 8007abc:	08007b65 	.word	0x08007b65

08007ac0 <HAL_HRTIM_SynchronizationEventCallback>:
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop

08007ac4 <HAL_HRTIM_RegistersUpdateCallback>:
}
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop

08007ac8 <HAL_HRTIM_RepetitionEventCallback>:
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop

08007acc <HAL_HRTIM_Compare1EventCallback>:
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop

08007ad0 <HAL_HRTIM_Compare2EventCallback>:
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop

08007ad4 <HAL_HRTIM_Compare3EventCallback>:
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop

08007ad8 <HAL_HRTIM_Compare4EventCallback>:
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop

08007adc <HRTIM_DMAMasterCplt>:
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void HRTIM_DMAMasterCplt(DMA_HandleTypeDef *hdma)
{
  HRTIM_HandleTypeDef * hrtim = (HRTIM_HandleTypeDef *)((DMA_HandleTypeDef* )hdma)->Parent;
 8007adc:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8007ade:	b508      	push	{r3, lr}

  if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP1) != (uint32_t)RESET)
 8007ae0:	6803      	ldr	r3, [r0, #0]
 8007ae2:	68da      	ldr	r2, [r3, #12]
 8007ae4:	03d1      	lsls	r1, r2, #15
 8007ae6:	d416      	bmi.n	8007b16 <HRTIM_DMAMasterCplt+0x3a>
    hrtim->Compare1EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
#else
    HAL_HRTIM_Compare1EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP2) != (uint32_t)RESET)
 8007ae8:	68da      	ldr	r2, [r3, #12]
 8007aea:	0392      	lsls	r2, r2, #14
 8007aec:	d40f      	bmi.n	8007b0e <HRTIM_DMAMasterCplt+0x32>
    hrtim->Compare2EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
#else
    HAL_HRTIM_Compare2EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP3) != (uint32_t)RESET)
 8007aee:	68da      	ldr	r2, [r3, #12]
 8007af0:	0351      	lsls	r1, r2, #13
 8007af2:	d417      	bmi.n	8007b24 <HRTIM_DMAMasterCplt+0x48>
    hrtim->Compare3EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
#else
    HAL_HRTIM_Compare3EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP4) != (uint32_t)RESET)
 8007af4:	68da      	ldr	r2, [r3, #12]
 8007af6:	0312      	lsls	r2, r2, #12
 8007af8:	d418      	bmi.n	8007b2c <HRTIM_DMAMasterCplt+0x50>
    hrtim->Compare4EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
#else
    HAL_HRTIM_Compare4EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_SYNC) != (uint32_t)RESET)
 8007afa:	68da      	ldr	r2, [r3, #12]
 8007afc:	0291      	lsls	r1, r2, #10
 8007afe:	d40e      	bmi.n	8007b1e <HRTIM_DMAMasterCplt+0x42>
    hrtim->SynchronizationEventCallback(hrtim);
#else
    HAL_HRTIM_SynchronizationEventCallback(hrtim);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MUPD) != (uint32_t)RESET)
 8007b00:	68da      	ldr	r2, [r3, #12]
 8007b02:	0252      	lsls	r2, r2, #9
 8007b04:	d41a      	bmi.n	8007b3c <HRTIM_DMAMasterCplt+0x60>
    hrtim->RegistersUpdateCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
#else
    HAL_HRTIM_RegistersUpdateCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MREP) != (uint32_t)RESET)
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	02db      	lsls	r3, r3, #11
 8007b0a:	d413      	bmi.n	8007b34 <HRTIM_DMAMasterCplt+0x58>
  }
  else
  {
    /* nothing to do */
  }
}
 8007b0c:	bd08      	pop	{r3, pc}
    HAL_HRTIM_Compare2EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 8007b0e:	2106      	movs	r1, #6
 8007b10:	f7ff ffde 	bl	8007ad0 <HAL_HRTIM_Compare2EventCallback>
}
 8007b14:	bd08      	pop	{r3, pc}
    HAL_HRTIM_Compare1EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 8007b16:	2106      	movs	r1, #6
 8007b18:	f7ff ffd8 	bl	8007acc <HAL_HRTIM_Compare1EventCallback>
}
 8007b1c:	bd08      	pop	{r3, pc}
    HAL_HRTIM_SynchronizationEventCallback(hrtim);
 8007b1e:	f7ff ffcf 	bl	8007ac0 <HAL_HRTIM_SynchronizationEventCallback>
}
 8007b22:	bd08      	pop	{r3, pc}
    HAL_HRTIM_Compare3EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 8007b24:	2106      	movs	r1, #6
 8007b26:	f7ff ffd5 	bl	8007ad4 <HAL_HRTIM_Compare3EventCallback>
}
 8007b2a:	bd08      	pop	{r3, pc}
    HAL_HRTIM_Compare4EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 8007b2c:	2106      	movs	r1, #6
 8007b2e:	f7ff ffd3 	bl	8007ad8 <HAL_HRTIM_Compare4EventCallback>
}
 8007b32:	bd08      	pop	{r3, pc}
    HAL_HRTIM_RepetitionEventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 8007b34:	2106      	movs	r1, #6
 8007b36:	f7ff ffc7 	bl	8007ac8 <HAL_HRTIM_RepetitionEventCallback>
}
 8007b3a:	bd08      	pop	{r3, pc}
    HAL_HRTIM_RegistersUpdateCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 8007b3c:	2106      	movs	r1, #6
 8007b3e:	f7ff ffc1 	bl	8007ac4 <HAL_HRTIM_RegistersUpdateCallback>
}
 8007b42:	bd08      	pop	{r3, pc}

08007b44 <HAL_HRTIM_Capture1EventCallback>:
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop

08007b48 <HAL_HRTIM_Capture2EventCallback>:
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop

08007b4c <HAL_HRTIM_DelayedProtectionCallback>:
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop

08007b50 <HAL_HRTIM_CounterResetCallback>:
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop

08007b54 <HAL_HRTIM_Output1SetCallback>:
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop

08007b58 <HAL_HRTIM_Output1ResetCallback>:
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop

08007b5c <HAL_HRTIM_Output2SetCallback>:
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop

08007b60 <HAL_HRTIM_Output2ResetCallback>:
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop

08007b64 <HRTIM_DMATimerxCplt>:
  */
static void HRTIM_DMATimerxCplt(DMA_HandleTypeDef *hdma)
{
  uint8_t timer_idx;

  HRTIM_HandleTypeDef * hrtim = (HRTIM_HandleTypeDef *)((DMA_HandleTypeDef* )hdma)->Parent;
 8007b64:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if (hdma == hhrtim->hdmaMaster)
 8007b66:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007b6a:	4290      	cmp	r0, r2
 8007b6c:	d017      	beq.n	8007b9e <HRTIM_DMATimerxCplt+0x3a>
  else if (hdma == hhrtim->hdmaTimerA)
 8007b6e:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8007b72:	4290      	cmp	r0, r2
 8007b74:	d014      	beq.n	8007ba0 <HRTIM_DMATimerxCplt+0x3c>
  else if (hdma == hhrtim->hdmaTimerB)
 8007b76:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8007b7a:	4290      	cmp	r0, r2
 8007b7c:	d059      	beq.n	8007c32 <HRTIM_DMATimerxCplt+0xce>
  else if (hdma == hhrtim->hdmaTimerC)
 8007b7e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8007b82:	4290      	cmp	r0, r2
 8007b84:	d063      	beq.n	8007c4e <HRTIM_DMATimerxCplt+0xea>
  else if (hdma == hhrtim->hdmaTimerD)
 8007b86:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007b8a:	4290      	cmp	r0, r2
 8007b8c:	d066      	beq.n	8007c5c <HRTIM_DMATimerxCplt+0xf8>
  else if (hdma == hhrtim->hdmaTimerE)
 8007b8e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8007b92:	4290      	cmp	r0, r2
 8007b94:	d069      	beq.n	8007c6a <HRTIM_DMATimerxCplt+0x106>
  else if (hdma == hhrtim->hdmaTimerF)
 8007b96:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8007b9a:	4290      	cmp	r0, r2
 8007b9c:	d050      	beq.n	8007c40 <HRTIM_DMATimerxCplt+0xdc>
 8007b9e:	4770      	bx	lr
 8007ba0:	2200      	movs	r2, #0
    timed_idx = HRTIM_TIMERINDEX_TIMER_A;
 8007ba2:	4611      	mov	r1, r2

  timer_idx = (uint8_t)GetTimerIdxFromDMAHandle(hrtim, hdma);

  if ( !IS_HRTIM_TIMING_UNIT(timer_idx) ) {return;}

  if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP1) != (uint32_t)RESET)
 8007ba4:	6818      	ldr	r0, [r3, #0]
 8007ba6:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 8007baa:	eb00 12c2 	add.w	r2, r0, r2, lsl #7
{
 8007bae:	b510      	push	{r4, lr}
  if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP1) != (uint32_t)RESET)
 8007bb0:	f8d2 408c 	ldr.w	r4, [r2, #140]	; 0x8c
 8007bb4:	03e4      	lsls	r4, r4, #15
 8007bb6:	d438      	bmi.n	8007c2a <HRTIM_DMATimerxCplt+0xc6>
    hrtim->Compare1EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare1EventCallback(hrtim, timer_idx);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP2) != (uint32_t)RESET)
 8007bb8:	f8d2 408c 	ldr.w	r4, [r2, #140]	; 0x8c
 8007bbc:	03a4      	lsls	r4, r4, #14
 8007bbe:	d442      	bmi.n	8007c46 <HRTIM_DMATimerxCplt+0xe2>
    hrtim->Compare2EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare2EventCallback(hrtim, timer_idx);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP3) != (uint32_t)RESET)
 8007bc0:	f8d2 408c 	ldr.w	r4, [r2, #140]	; 0x8c
 8007bc4:	0364      	lsls	r4, r4, #13
 8007bc6:	d437      	bmi.n	8007c38 <HRTIM_DMATimerxCplt+0xd4>
    hrtim->Compare3EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare3EventCallback(hrtim, timer_idx);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP4) != (uint32_t)RESET)
 8007bc8:	f8d2 408c 	ldr.w	r4, [r2, #140]	; 0x8c
 8007bcc:	0324      	lsls	r4, r4, #12
 8007bce:	d441      	bmi.n	8007c54 <HRTIM_DMATimerxCplt+0xf0>
    hrtim->Compare4EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare4EventCallback(hrtim, timer_idx);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_UPD) != (uint32_t)RESET)
 8007bd0:	f8d2 408c 	ldr.w	r4, [r2, #140]	; 0x8c
 8007bd4:	0264      	lsls	r4, r4, #9
 8007bd6:	d44b      	bmi.n	8007c70 <HRTIM_DMATimerxCplt+0x10c>
    hrtim->RegistersUpdateCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_RegistersUpdateCallback(hrtim, timer_idx);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CPT1) != (uint32_t)RESET)
 8007bd8:	f8d2 408c 	ldr.w	r4, [r2, #140]	; 0x8c
 8007bdc:	0224      	lsls	r4, r4, #8
 8007bde:	d44b      	bmi.n	8007c78 <HRTIM_DMATimerxCplt+0x114>
    hrtim->Capture1EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Capture1EventCallback(hrtim, timer_idx);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CPT2) != (uint32_t)RESET)
 8007be0:	f8d2 408c 	ldr.w	r4, [r2, #140]	; 0x8c
 8007be4:	01e4      	lsls	r4, r4, #7
 8007be6:	d43c      	bmi.n	8007c62 <HRTIM_DMATimerxCplt+0xfe>
    hrtim->Capture2EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Capture2EventCallback(hrtim, timer_idx);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_SET1) != (uint32_t)RESET)
 8007be8:	f8d2 408c 	ldr.w	r4, [r2, #140]	; 0x8c
 8007bec:	01a4      	lsls	r4, r4, #6
 8007bee:	d447      	bmi.n	8007c80 <HRTIM_DMATimerxCplt+0x11c>
    hrtim->Output1SetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output1SetCallback(hrtim, timer_idx);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_RST1) != (uint32_t)RESET)
 8007bf0:	f8d2 408c 	ldr.w	r4, [r2, #140]	; 0x8c
 8007bf4:	0164      	lsls	r4, r4, #5
 8007bf6:	d447      	bmi.n	8007c88 <HRTIM_DMATimerxCplt+0x124>
    hrtim->Output1ResetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output1ResetCallback(hrtim, timer_idx);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_SET2) != (uint32_t)RESET)
 8007bf8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8007bfc:	0112      	lsls	r2, r2, #4
 8007bfe:	d447      	bmi.n	8007c90 <HRTIM_DMATimerxCplt+0x12c>
    hrtim->Output2SetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output2SetCallback(hrtim, timer_idx);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_RST2) != (uint32_t)RESET)
 8007c00:	4460      	add	r0, ip
 8007c02:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8007c06:	00d4      	lsls	r4, r2, #3
 8007c08:	d446      	bmi.n	8007c98 <HRTIM_DMATimerxCplt+0x134>
    hrtim->Output2ResetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output2ResetCallback(hrtim, timer_idx);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_RST) != (uint32_t)RESET)
 8007c0a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8007c0e:	0092      	lsls	r2, r2, #2
 8007c10:	d446      	bmi.n	8007ca0 <HRTIM_DMATimerxCplt+0x13c>
    hrtim->CounterResetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_CounterResetCallback(hrtim, timer_idx);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_DLYPRT) != (uint32_t)RESET)
 8007c12:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8007c16:	0054      	lsls	r4, r2, #1
 8007c18:	d446      	bmi.n	8007ca8 <HRTIM_DMATimerxCplt+0x144>
    hrtim->DelayedProtectionCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_DelayedProtectionCallback(hrtim, timer_idx);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_REP) != (uint32_t)RESET)
 8007c1a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8007c1e:	02d2      	lsls	r2, r2, #11
 8007c20:	d502      	bpl.n	8007c28 <HRTIM_DMATimerxCplt+0xc4>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->RepetitionEventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_RepetitionEventCallback(hrtim, timer_idx);
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7ff ff50 	bl	8007ac8 <HAL_HRTIM_RepetitionEventCallback>
  }
  else
  {
    /* nothing to do */
  }
}
 8007c28:	bd10      	pop	{r4, pc}
    HAL_HRTIM_Compare1EventCallback(hrtim, timer_idx);
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7ff ff4e 	bl	8007acc <HAL_HRTIM_Compare1EventCallback>
}
 8007c30:	bd10      	pop	{r4, pc}
 8007c32:	2201      	movs	r2, #1
    timed_idx = HRTIM_TIMERINDEX_TIMER_B;
 8007c34:	4611      	mov	r1, r2
 8007c36:	e7b5      	b.n	8007ba4 <HRTIM_DMATimerxCplt+0x40>
    HAL_HRTIM_Compare3EventCallback(hrtim, timer_idx);
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7ff ff4b 	bl	8007ad4 <HAL_HRTIM_Compare3EventCallback>
}
 8007c3e:	bd10      	pop	{r4, pc}
 8007c40:	2205      	movs	r2, #5
    timed_idx = HRTIM_TIMERINDEX_TIMER_F;
 8007c42:	4611      	mov	r1, r2
 8007c44:	e7ae      	b.n	8007ba4 <HRTIM_DMATimerxCplt+0x40>
    HAL_HRTIM_Compare2EventCallback(hrtim, timer_idx);
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7ff ff42 	bl	8007ad0 <HAL_HRTIM_Compare2EventCallback>
}
 8007c4c:	bd10      	pop	{r4, pc}
 8007c4e:	2202      	movs	r2, #2
    timed_idx = HRTIM_TIMERINDEX_TIMER_C;
 8007c50:	4611      	mov	r1, r2
 8007c52:	e7a7      	b.n	8007ba4 <HRTIM_DMATimerxCplt+0x40>
    HAL_HRTIM_Compare4EventCallback(hrtim, timer_idx);
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7ff ff3f 	bl	8007ad8 <HAL_HRTIM_Compare4EventCallback>
}
 8007c5a:	bd10      	pop	{r4, pc}
 8007c5c:	2203      	movs	r2, #3
    timed_idx = HRTIM_TIMERINDEX_TIMER_D;
 8007c5e:	4611      	mov	r1, r2
 8007c60:	e7a0      	b.n	8007ba4 <HRTIM_DMATimerxCplt+0x40>
    HAL_HRTIM_Capture2EventCallback(hrtim, timer_idx);
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7ff ff70 	bl	8007b48 <HAL_HRTIM_Capture2EventCallback>
}
 8007c68:	bd10      	pop	{r4, pc}
 8007c6a:	2204      	movs	r2, #4
    timed_idx = HRTIM_TIMERINDEX_TIMER_E;
 8007c6c:	4611      	mov	r1, r2
 8007c6e:	e799      	b.n	8007ba4 <HRTIM_DMATimerxCplt+0x40>
    HAL_HRTIM_RegistersUpdateCallback(hrtim, timer_idx);
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7ff ff27 	bl	8007ac4 <HAL_HRTIM_RegistersUpdateCallback>
}
 8007c76:	bd10      	pop	{r4, pc}
    HAL_HRTIM_Capture1EventCallback(hrtim, timer_idx);
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7ff ff63 	bl	8007b44 <HAL_HRTIM_Capture1EventCallback>
}
 8007c7e:	bd10      	pop	{r4, pc}
    HAL_HRTIM_Output1SetCallback(hrtim, timer_idx);
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7ff ff67 	bl	8007b54 <HAL_HRTIM_Output1SetCallback>
}
 8007c86:	bd10      	pop	{r4, pc}
    HAL_HRTIM_Output1ResetCallback(hrtim, timer_idx);
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7ff ff65 	bl	8007b58 <HAL_HRTIM_Output1ResetCallback>
}
 8007c8e:	bd10      	pop	{r4, pc}
    HAL_HRTIM_Output2SetCallback(hrtim, timer_idx);
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7ff ff63 	bl	8007b5c <HAL_HRTIM_Output2SetCallback>
}
 8007c96:	bd10      	pop	{r4, pc}
    HAL_HRTIM_Output2ResetCallback(hrtim, timer_idx);
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7ff ff61 	bl	8007b60 <HAL_HRTIM_Output2ResetCallback>
}
 8007c9e:	bd10      	pop	{r4, pc}
    HAL_HRTIM_CounterResetCallback(hrtim, timer_idx);
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7ff ff55 	bl	8007b50 <HAL_HRTIM_CounterResetCallback>
}
 8007ca6:	bd10      	pop	{r4, pc}
    HAL_HRTIM_DelayedProtectionCallback(hrtim, timer_idx);
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7ff ff4f 	bl	8007b4c <HAL_HRTIM_DelayedProtectionCallback>
}
 8007cae:	bd10      	pop	{r4, pc}

08007cb0 <HAL_HRTIM_ErrorCallback>:
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop

08007cb4 <HRTIM_DMAError>:
* @brief  DMA error callback
* @param  hdma pointer to DMA handle.
* @retval None
*/
static void HRTIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007cb4:	b508      	push	{r3, lr}
  HRTIM_HandleTypeDef * hrtim = (HRTIM_HandleTypeDef *)((DMA_HandleTypeDef* )hdma)->Parent;

#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->ErrorCallback(hrtim);
#else
  HAL_HRTIM_ErrorCallback(hrtim);
 8007cb6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8007cb8:	f7ff fffa 	bl	8007cb0 <HAL_HRTIM_ErrorCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
}
 8007cbc:	bd08      	pop	{r3, pc}
 8007cbe:	bf00      	nop

08007cc0 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007cc0:	4a02      	ldr	r2, [pc, #8]	; (8007ccc <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8007cc2:	6893      	ldr	r3, [r2, #8]
 8007cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007cc8:	6093      	str	r3, [r2, #8]
}
 8007cca:	4770      	bx	lr
 8007ccc:	40007000 	.word	0x40007000

08007cd0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007cd0:	4b18      	ldr	r3, [pc, #96]	; (8007d34 <HAL_RCC_GetSysClockFreq+0x64>)
 8007cd2:	689a      	ldr	r2, [r3, #8]
 8007cd4:	f002 020c 	and.w	r2, r2, #12
 8007cd8:	2a04      	cmp	r2, #4
 8007cda:	d027      	beq.n	8007d2c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007cdc:	689a      	ldr	r2, [r3, #8]
 8007cde:	f002 020c 	and.w	r2, r2, #12
 8007ce2:	2a08      	cmp	r2, #8
 8007ce4:	d024      	beq.n	8007d30 <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007ce6:	689a      	ldr	r2, [r3, #8]
 8007ce8:	f002 020c 	and.w	r2, r2, #12
 8007cec:	2a0c      	cmp	r2, #12
 8007cee:	d001      	beq.n	8007cf4 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8007cf0:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8007cf2:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007cf4:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007cf6:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007cf8:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8007cfc:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007cfe:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8007d02:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d06:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d08:	bf0c      	ite	eq
 8007d0a:	4b0b      	ldreq	r3, [pc, #44]	; (8007d38 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d0c:	4b0b      	ldrne	r3, [pc, #44]	; (8007d3c <HAL_RCC_GetSysClockFreq+0x6c>)
 8007d0e:	fbb3 f2f2 	udiv	r2, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007d12:	4b08      	ldr	r3, [pc, #32]	; (8007d34 <HAL_RCC_GetSysClockFreq+0x64>)
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	f3c3 6341 	ubfx	r3, r3, #25, #2
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d1a:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007d1e:	3301      	adds	r3, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d20:	fb02 f000 	mul.w	r0, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007d24:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8007d26:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8007d2a:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8007d2c:	4803      	ldr	r0, [pc, #12]	; (8007d3c <HAL_RCC_GetSysClockFreq+0x6c>)
 8007d2e:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8007d30:	4801      	ldr	r0, [pc, #4]	; (8007d38 <HAL_RCC_GetSysClockFreq+0x68>)
 8007d32:	4770      	bx	lr
 8007d34:	40021000 	.word	0x40021000
 8007d38:	016e3600 	.word	0x016e3600
 8007d3c:	00f42400 	.word	0x00f42400

08007d40 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007d40:	4b05      	ldr	r3, [pc, #20]	; (8007d58 <HAL_RCC_GetPCLK1Freq+0x18>)
 8007d42:	4a06      	ldr	r2, [pc, #24]	; (8007d5c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007d44:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8007d46:	4906      	ldr	r1, [pc, #24]	; (8007d60 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007d48:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007d4c:	6808      	ldr	r0, [r1, #0]
 8007d4e:	5cd3      	ldrb	r3, [r2, r3]
 8007d50:	f003 031f 	and.w	r3, r3, #31
}
 8007d54:	40d8      	lsrs	r0, r3
 8007d56:	4770      	bx	lr
 8007d58:	40021000 	.word	0x40021000
 8007d5c:	0800b0b0 	.word	0x0800b0b0
 8007d60:	2000002c 	.word	0x2000002c

08007d64 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007d64:	4b05      	ldr	r3, [pc, #20]	; (8007d7c <HAL_RCC_GetPCLK2Freq+0x18>)
 8007d66:	4a06      	ldr	r2, [pc, #24]	; (8007d80 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007d68:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8007d6a:	4906      	ldr	r1, [pc, #24]	; (8007d84 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007d6c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007d70:	6808      	ldr	r0, [r1, #0]
 8007d72:	5cd3      	ldrb	r3, [r2, r3]
 8007d74:	f003 031f 	and.w	r3, r3, #31
}
 8007d78:	40d8      	lsrs	r0, r3
 8007d7a:	4770      	bx	lr
 8007d7c:	40021000 	.word	0x40021000
 8007d80:	0800b0b0 	.word	0x0800b0b0
 8007d84:	2000002c 	.word	0x2000002c

08007d88 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d8c:	b083      	sub	sp, #12
 8007d8e:	4698      	mov	r8, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007d90:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007d92:	4615      	mov	r5, r2
  __IO uint8_t  tmpreg8 = 0;
 8007d94:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007d98:	4606      	mov	r6, r0
 8007d9a:	460c      	mov	r4, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007d9c:	f7fd fe7c 	bl	8005a98 <HAL_GetTick>
 8007da0:	44a8      	add	r8, r5
 8007da2:	eba8 0700 	sub.w	r7, r8, r0
  tmp_tickstart = HAL_GetTick();
 8007da6:	f7fd fe77 	bl	8005a98 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007daa:	4b30      	ldr	r3, [pc, #192]	; (8007e6c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007dac:	f8d6 9000 	ldr.w	r9, [r6]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007db6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007dba:	0d1b      	lsrs	r3, r3, #20
 8007dbc:	fb07 f303 	mul.w	r3, r7, r3
  tmp_tickstart = HAL_GetTick();
 8007dc0:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007dc2:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8007dc4:	464a      	mov	r2, r9
 8007dc6:	e001      	b.n	8007dcc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x44>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8007dc8:	1c6b      	adds	r3, r5, #1
 8007dca:	d10e      	bne.n	8007dea <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
  while ((hspi->Instance->SR & Fifo) != State)
 8007dcc:	6893      	ldr	r3, [r2, #8]
 8007dce:	4023      	ands	r3, r4
 8007dd0:	d01d      	beq.n	8007e0e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007dd2:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8007dd6:	d1f7      	bne.n	8007dc8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      tmpreg8 = *ptmpreg8;
 8007dd8:	f899 300c 	ldrb.w	r3, [r9, #12]
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8007de2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if (Timeout != HAL_MAX_DELAY)
 8007de6:	1c6b      	adds	r3, r5, #1
 8007de8:	d0f0      	beq.n	8007dcc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x44>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007dea:	f7fd fe55 	bl	8005a98 <HAL_GetTick>
 8007dee:	eba0 0008 	sub.w	r0, r0, r8
 8007df2:	42b8      	cmp	r0, r7
 8007df4:	d20f      	bcs.n	8007e16 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007df6:	9b01      	ldr	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8007df8:	6832      	ldr	r2, [r6, #0]
      {
        tmp_timeout = 0U;
 8007dfa:	2b00      	cmp	r3, #0
      }
      count--;
 8007dfc:	9b01      	ldr	r3, [sp, #4]
 8007dfe:	f103 33ff 	add.w	r3, r3, #4294967295
 8007e02:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8007e04:	6893      	ldr	r3, [r2, #8]
        tmp_timeout = 0U;
 8007e06:	bf08      	it	eq
 8007e08:	2700      	moveq	r7, #0
  while ((hspi->Instance->SR & Fifo) != State)
 8007e0a:	4023      	ands	r3, r4
 8007e0c:	d1e1      	bne.n	8007dd2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x4a>
    }
  }

  return HAL_OK;
 8007e0e:	4618      	mov	r0, r3
}
 8007e10:	b003      	add	sp, #12
 8007e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e16:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e1a:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e1c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e24:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e26:	d014      	beq.n	8007e52 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xca>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e28:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8007e2a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8007e2e:	d007      	beq.n	8007e40 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb8>
        hspi->State = HAL_SPI_STATE_READY;
 8007e30:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8007e32:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8007e34:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8007e38:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8007e3c:	2003      	movs	r0, #3
 8007e3e:	e7e7      	b.n	8007e10 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x88>
          SPI_RESET_CRC(hspi);
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e46:	601a      	str	r2, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e4e:	601a      	str	r2, [r3, #0]
 8007e50:	e7ee      	b.n	8007e30 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e52:	68b2      	ldr	r2, [r6, #8]
 8007e54:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007e58:	d002      	beq.n	8007e60 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e5a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007e5e:	d1e3      	bne.n	8007e28 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa0>
          __HAL_SPI_DISABLE(hspi);
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e66:	601a      	str	r2, [r3, #0]
 8007e68:	e7de      	b.n	8007e28 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa0>
 8007e6a:	bf00      	nop
 8007e6c:	2000002c 	.word	0x2000002c

08007e70 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8007e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e72:	b083      	sub	sp, #12
 8007e74:	460c      	mov	r4, r1
 8007e76:	4615      	mov	r5, r2
 8007e78:	4606      	mov	r6, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e7a:	f7fd fe0d 	bl	8005a98 <HAL_GetTick>
 8007e7e:	4425      	add	r5, r4
 8007e80:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8007e82:	f7fd fe09 	bl	8005a98 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e86:	4b25      	ldr	r3, [pc, #148]	; (8007f1c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8007e8e:	fb05 f303 	mul.w	r3, r5, r3
  tmp_tickstart = HAL_GetTick();
 8007e92:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e94:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e96:	6832      	ldr	r2, [r6, #0]
 8007e98:	e001      	b.n	8007e9e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
    if (Timeout != HAL_MAX_DELAY)
 8007e9a:	1c63      	adds	r3, r4, #1
 8007e9c:	d106      	bne.n	8007eac <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e9e:	6893      	ldr	r3, [r2, #8]
 8007ea0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8007ea4:	d1f9      	bne.n	8007e9a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
  return HAL_OK;
 8007ea6:	4618      	mov	r0, r3
}
 8007ea8:	b003      	add	sp, #12
 8007eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007eac:	f7fd fdf4 	bl	8005a98 <HAL_GetTick>
 8007eb0:	1bc0      	subs	r0, r0, r7
 8007eb2:	42a8      	cmp	r0, r5
 8007eb4:	d208      	bcs.n	8007ec8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x58>
      if (count == 0U)
 8007eb6:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8007eb8:	2b00      	cmp	r3, #0
      count--;
 8007eba:	9b01      	ldr	r3, [sp, #4]
 8007ebc:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8007ec0:	bf08      	it	eq
 8007ec2:	2500      	moveq	r5, #0
      count--;
 8007ec4:	9301      	str	r3, [sp, #4]
 8007ec6:	e7e6      	b.n	8007e96 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ec8:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ecc:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ece:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ed2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ed6:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ed8:	d014      	beq.n	8007f04 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007eda:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8007edc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8007ee0:	d007      	beq.n	8007ef2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
        hspi->State = HAL_SPI_STATE_READY;
 8007ee2:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8007ee4:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8007ee6:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8007eea:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8007eee:	2003      	movs	r0, #3
 8007ef0:	e7da      	b.n	8007ea8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
          SPI_RESET_CRC(hspi);
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ef8:	601a      	str	r2, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f00:	601a      	str	r2, [r3, #0]
 8007f02:	e7ee      	b.n	8007ee2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f04:	68b2      	ldr	r2, [r6, #8]
 8007f06:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007f0a:	d002      	beq.n	8007f12 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f0c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007f10:	d1e3      	bne.n	8007eda <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f18:	601a      	str	r2, [r3, #0]
 8007f1a:	e7de      	b.n	8007eda <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 8007f1c:	2000002c 	.word	0x2000002c

08007f20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f20:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f22:	4613      	mov	r3, r2
{
 8007f24:	460d      	mov	r5, r1
 8007f26:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f28:	460a      	mov	r2, r1
 8007f2a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8007f2e:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f30:	f7ff ff2a 	bl	8007d88 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8007f34:	b970      	cbnz	r0, 8007f54 <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f36:	4632      	mov	r2, r6
 8007f38:	4629      	mov	r1, r5
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	f7ff ff98 	bl	8007e70 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8007f40:	b940      	cbnz	r0, 8007f54 <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f42:	4633      	mov	r3, r6
 8007f44:	462a      	mov	r2, r5
 8007f46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f7ff ff1c 	bl	8007d88 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8007f50:	b900      	cbnz	r0, 8007f54 <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8007f52:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f54:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007f56:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 8007f5a:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f5c:	6623      	str	r3, [r4, #96]	; 0x60
}
 8007f5e:	bd70      	pop	{r4, r5, r6, pc}

08007f60 <HAL_SPI_Init>:
  if (hspi == NULL)
 8007f60:	2800      	cmp	r0, #0
 8007f62:	d077      	beq.n	8008054 <HAL_SPI_Init+0xf4>
{
 8007f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007f68:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	2e00      	cmp	r6, #0
 8007f6e:	d058      	beq.n	8008022 <HAL_SPI_Init+0xc2>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f70:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f72:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f76:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f7e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d059      	beq.n	800803a <HAL_SPI_Init+0xda>
  __HAL_SPI_DISABLE(hspi);
 8007f86:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f88:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8007f8a:	2302      	movs	r3, #2
 8007f8c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8007f90:	6808      	ldr	r0, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f92:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8007f96:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8007f9a:	6008      	str	r0, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f9c:	d947      	bls.n	800802e <HAL_SPI_Init+0xce>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007f9e:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8007fa2:	d159      	bne.n	8008058 <HAL_SPI_Init+0xf8>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007fa4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007fa6:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007fa8:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 8007fac:	68a3      	ldr	r3, [r4, #8]
 8007fae:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007fb0:	f402 6e70 	and.w	lr, r2, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007fb4:	6862      	ldr	r2, [r4, #4]
 8007fb6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007fba:	f402 7282 	and.w	r2, r2, #260	; 0x104
 8007fbe:	431a      	orrs	r2, r3
 8007fc0:	6923      	ldr	r3, [r4, #16]
 8007fc2:	f003 0302 	and.w	r3, r3, #2
 8007fc6:	431a      	orrs	r2, r3
 8007fc8:	6963      	ldr	r3, [r4, #20]
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007fd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007fd2:	f003 0308 	and.w	r3, r3, #8
 8007fd6:	f006 0c10 	and.w	ip, r6, #16
 8007fda:	ea43 0e0e 	orr.w	lr, r3, lr
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007fde:	69a6      	ldr	r6, [r4, #24]
 8007fe0:	69e3      	ldr	r3, [r4, #28]
 8007fe2:	f003 0838 	and.w	r8, r3, #56	; 0x38
 8007fe6:	f406 7300 	and.w	r3, r6, #512	; 0x200
 8007fea:	4313      	orrs	r3, r2
 8007fec:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8007ff0:	ea43 0308 	orr.w	r3, r3, r8
 8007ff4:	433b      	orrs	r3, r7
 8007ff6:	432b      	orrs	r3, r5
 8007ff8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007ffa:	0c33      	lsrs	r3, r6, #16
 8007ffc:	f003 0304 	and.w	r3, r3, #4
 8008000:	ea4e 0303 	orr.w	r3, lr, r3
 8008004:	ea43 030c 	orr.w	r3, r3, ip
 8008008:	4303      	orrs	r3, r0
 800800a:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800800c:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800800e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008010:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8008014:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008016:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008018:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800801a:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
}
 800801e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008022:	6843      	ldr	r3, [r0, #4]
 8008024:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008028:	d0a5      	beq.n	8007f76 <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800802a:	61c6      	str	r6, [r0, #28]
 800802c:	e7a3      	b.n	8007f76 <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800802e:	d00b      	beq.n	8008048 <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008030:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008034:	2500      	movs	r5, #0
 8008036:	62a5      	str	r5, [r4, #40]	; 0x28
 8008038:	e7b8      	b.n	8007fac <HAL_SPI_Init+0x4c>
    hspi->Lock = HAL_UNLOCKED;
 800803a:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800803e:	4620      	mov	r0, r4
 8008040:	f7fd faf6 	bl	8005630 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008044:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008046:	e79e      	b.n	8007f86 <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008048:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800804a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800804e:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 8008052:	e7ab      	b.n	8007fac <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8008054:	2001      	movs	r0, #1
}
 8008056:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008058:	2000      	movs	r0, #0
 800805a:	e7eb      	b.n	8008034 <HAL_SPI_Init+0xd4>

0800805c <HAL_SPI_TransmitReceive>:
{
 800805c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008060:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8008062:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
{
 8008066:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8008068:	2801      	cmp	r0, #1
 800806a:	f000 8097 	beq.w	800819c <HAL_SPI_TransmitReceive+0x140>
 800806e:	461f      	mov	r7, r3
 8008070:	2301      	movs	r3, #1
 8008072:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8008076:	4689      	mov	r9, r1
 8008078:	4690      	mov	r8, r2
 800807a:	f7fd fd0d 	bl	8005a98 <HAL_GetTick>
 800807e:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8008080:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 8008084:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008086:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 8008088:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800808a:	d010      	beq.n	80080ae <HAL_SPI_TransmitReceive+0x52>
 800808c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008090:	d008      	beq.n	80080a4 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 8008092:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8008094:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8008096:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8008098:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800809c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80080a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80080a4:	68a2      	ldr	r2, [r4, #8]
 80080a6:	2a00      	cmp	r2, #0
 80080a8:	d1f3      	bne.n	8008092 <HAL_SPI_TransmitReceive+0x36>
 80080aa:	2904      	cmp	r1, #4
 80080ac:	d1f1      	bne.n	8008092 <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80080ae:	f1b9 0f00 	cmp.w	r9, #0
 80080b2:	d076      	beq.n	80081a2 <HAL_SPI_TransmitReceive+0x146>
 80080b4:	f1b8 0f00 	cmp.w	r8, #0
 80080b8:	d073      	beq.n	80081a2 <HAL_SPI_TransmitReceive+0x146>
 80080ba:	2f00      	cmp	r7, #0
 80080bc:	d071      	beq.n	80081a2 <HAL_SPI_TransmitReceive+0x146>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80080be:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80080c2:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80080c4:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80080c8:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80080ca:	bf1c      	itt	ne
 80080cc:	2205      	movne	r2, #5
 80080ce:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80080d2:	2200      	movs	r2, #0
 80080d4:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 80080d6:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80080da:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 80080dc:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80080e0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  hspi->TxXferCount = Size;
 80080e4:	87e7      	strh	r7, [r4, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80080e6:	6851      	ldr	r1, [r2, #4]
  hspi->RxXferSize  = Size;
 80080e8:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80080ec:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80080f0:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80080f2:	d858      	bhi.n	80081a6 <HAL_SPI_TransmitReceive+0x14a>
 80080f4:	2f01      	cmp	r7, #1
 80080f6:	f000 80ee 	beq.w	80082d6 <HAL_SPI_TransmitReceive+0x27a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80080fa:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80080fe:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008100:	6811      	ldr	r1, [r2, #0]
 8008102:	0649      	lsls	r1, r1, #25
 8008104:	f100 80a9 	bmi.w	800825a <HAL_SPI_TransmitReceive+0x1fe>
    __HAL_SPI_ENABLE(hspi);
 8008108:	6811      	ldr	r1, [r2, #0]
 800810a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800810e:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008110:	2b00      	cmp	r3, #0
 8008112:	f000 80a5 	beq.w	8008260 <HAL_SPI_TransmitReceive+0x204>
 8008116:	2f01      	cmp	r7, #1
 8008118:	f000 80a2 	beq.w	8008260 <HAL_SPI_TransmitReceive+0x204>
        txallowed = 1U;
 800811c:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800811e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008120:	b29b      	uxth	r3, r3
 8008122:	b92b      	cbnz	r3, 8008130 <HAL_SPI_TransmitReceive+0xd4>
 8008124:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008128:	b29b      	uxth	r3, r3
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 8086 	beq.w	800823c <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008130:	6822      	ldr	r2, [r4, #0]
 8008132:	6893      	ldr	r3, [r2, #8]
 8008134:	0799      	lsls	r1, r3, #30
 8008136:	d505      	bpl.n	8008144 <HAL_SPI_TransmitReceive+0xe8>
 8008138:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800813a:	b29b      	uxth	r3, r3
 800813c:	b113      	cbz	r3, 8008144 <HAL_SPI_TransmitReceive+0xe8>
 800813e:	2f00      	cmp	r7, #0
 8008140:	f040 80ae 	bne.w	80082a0 <HAL_SPI_TransmitReceive+0x244>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008144:	6893      	ldr	r3, [r2, #8]
 8008146:	f013 0301 	ands.w	r3, r3, #1
 800814a:	d01e      	beq.n	800818a <HAL_SPI_TransmitReceive+0x12e>
 800814c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8008150:	b289      	uxth	r1, r1
 8008152:	b1d1      	cbz	r1, 800818a <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->RxXferCount > 1U)
 8008154:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8008158:	b289      	uxth	r1, r1
 800815a:	2901      	cmp	r1, #1
 800815c:	f240 8092 	bls.w	8008284 <HAL_SPI_TransmitReceive+0x228>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008160:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008162:	68d0      	ldr	r0, [r2, #12]
 8008164:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008168:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800816a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800816e:	3902      	subs	r1, #2
 8008170:	b289      	uxth	r1, r1
 8008172:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008176:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800817a:	b289      	uxth	r1, r1
 800817c:	2901      	cmp	r1, #1
        txallowed = 1U;
 800817e:	461f      	mov	r7, r3
          if (hspi->RxXferCount <= 1U)
 8008180:	d803      	bhi.n	800818a <HAL_SPI_TransmitReceive+0x12e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008182:	6853      	ldr	r3, [r2, #4]
 8008184:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008188:	6053      	str	r3, [r2, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800818a:	f7fd fc85 	bl	8005a98 <HAL_GetTick>
 800818e:	1b80      	subs	r0, r0, r6
 8008190:	42a8      	cmp	r0, r5
 8008192:	d373      	bcc.n	800827c <HAL_SPI_TransmitReceive+0x220>
 8008194:	1c6b      	adds	r3, r5, #1
 8008196:	d0c2      	beq.n	800811e <HAL_SPI_TransmitReceive+0xc2>
        errorcode = HAL_TIMEOUT;
 8008198:	2003      	movs	r0, #3
 800819a:	e77b      	b.n	8008094 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 800819c:	2002      	movs	r0, #2
}
 800819e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 80081a2:	2001      	movs	r0, #1
 80081a4:	e776      	b.n	8008094 <HAL_SPI_TransmitReceive+0x38>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80081a6:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80081aa:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081ac:	6811      	ldr	r1, [r2, #0]
 80081ae:	0648      	lsls	r0, r1, #25
 80081b0:	d403      	bmi.n	80081ba <HAL_SPI_TransmitReceive+0x15e>
    __HAL_SPI_ENABLE(hspi);
 80081b2:	6811      	ldr	r1, [r2, #0]
 80081b4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80081b8:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d14a      	bne.n	8008254 <HAL_SPI_TransmitReceive+0x1f8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081be:	4649      	mov	r1, r9
 80081c0:	f831 3b02 	ldrh.w	r3, [r1], #2
 80081c4:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 80081c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80081c8:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80081ca:	3b01      	subs	r3, #1
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80081d0:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	b91b      	cbnz	r3, 80081e0 <HAL_SPI_TransmitReceive+0x184>
 80081d8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80081dc:	b29b      	uxth	r3, r3
 80081de:	b36b      	cbz	r3, 800823c <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80081e0:	6822      	ldr	r2, [r4, #0]
 80081e2:	6893      	ldr	r3, [r2, #8]
 80081e4:	079b      	lsls	r3, r3, #30
 80081e6:	d50d      	bpl.n	8008204 <HAL_SPI_TransmitReceive+0x1a8>
 80081e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	b153      	cbz	r3, 8008204 <HAL_SPI_TransmitReceive+0x1a8>
 80081ee:	b14f      	cbz	r7, 8008204 <HAL_SPI_TransmitReceive+0x1a8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80081f2:	f833 1b02 	ldrh.w	r1, [r3], #2
 80081f6:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80081f8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80081fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80081fc:	3b01      	subs	r3, #1
 80081fe:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8008200:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 8008202:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008204:	6893      	ldr	r3, [r2, #8]
 8008206:	f013 0301 	ands.w	r3, r3, #1
 800820a:	d00f      	beq.n	800822c <HAL_SPI_TransmitReceive+0x1d0>
 800820c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8008210:	b289      	uxth	r1, r1
 8008212:	b159      	cbz	r1, 800822c <HAL_SPI_TransmitReceive+0x1d0>
        txallowed = 1U;
 8008214:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008216:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008218:	68d2      	ldr	r2, [r2, #12]
 800821a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800821e:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8008220:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008224:	3b01      	subs	r3, #1
 8008226:	b29b      	uxth	r3, r3
 8008228:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800822c:	f7fd fc34 	bl	8005a98 <HAL_GetTick>
 8008230:	1b80      	subs	r0, r0, r6
 8008232:	42a8      	cmp	r0, r5
 8008234:	d3cd      	bcc.n	80081d2 <HAL_SPI_TransmitReceive+0x176>
 8008236:	1c68      	adds	r0, r5, #1
 8008238:	d0cb      	beq.n	80081d2 <HAL_SPI_TransmitReceive+0x176>
 800823a:	e7ad      	b.n	8008198 <HAL_SPI_TransmitReceive+0x13c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800823c:	4632      	mov	r2, r6
 800823e:	4629      	mov	r1, r5
 8008240:	4620      	mov	r0, r4
 8008242:	f7ff fe6d 	bl	8007f20 <SPI_EndRxTxTransaction>
 8008246:	2800      	cmp	r0, #0
 8008248:	f43f af24 	beq.w	8008094 <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800824c:	2320      	movs	r3, #32
 800824e:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008250:	2001      	movs	r0, #1
 8008252:	e71f      	b.n	8008094 <HAL_SPI_TransmitReceive+0x38>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008254:	2f01      	cmp	r7, #1
 8008256:	d1bb      	bne.n	80081d0 <HAL_SPI_TransmitReceive+0x174>
 8008258:	e7b1      	b.n	80081be <HAL_SPI_TransmitReceive+0x162>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800825a:	2b00      	cmp	r3, #0
 800825c:	f47f af5e 	bne.w	800811c <HAL_SPI_TransmitReceive+0xc0>
      if (hspi->TxXferCount > 1U)
 8008260:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008262:	b29b      	uxth	r3, r3
 8008264:	2b01      	cmp	r3, #1
 8008266:	d93e      	bls.n	80082e6 <HAL_SPI_TransmitReceive+0x28a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008268:	4649      	mov	r1, r9
 800826a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800826e:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 8008270:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008272:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008274:	3b02      	subs	r3, #2
 8008276:	b29b      	uxth	r3, r3
 8008278:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800827a:	e74f      	b.n	800811c <HAL_SPI_TransmitReceive+0xc0>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800827c:	2d00      	cmp	r5, #0
 800827e:	f47f af4e 	bne.w	800811e <HAL_SPI_TransmitReceive+0xc2>
 8008282:	e789      	b.n	8008198 <HAL_SPI_TransmitReceive+0x13c>
        txallowed = 1U;
 8008284:	461f      	mov	r7, r3
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008286:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008288:	7b12      	ldrb	r2, [r2, #12]
 800828a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800828c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800828e:	3301      	adds	r3, #1
 8008290:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8008292:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008296:	3b01      	subs	r3, #1
 8008298:	b29b      	uxth	r3, r3
 800829a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800829e:	e774      	b.n	800818a <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->TxXferCount > 1U)
 80082a0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	2b01      	cmp	r3, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 80082a8:	d909      	bls.n	80082be <HAL_SPI_TransmitReceive+0x262>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082aa:	f833 1b02 	ldrh.w	r1, [r3], #2
 80082ae:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80082b0:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80082b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80082b4:	3b02      	subs	r3, #2
 80082b6:	b29b      	uxth	r3, r3
        txallowed = 0U;
 80082b8:	2700      	movs	r7, #0
          hspi->TxXferCount -= 2U;
 80082ba:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80082bc:	e742      	b.n	8008144 <HAL_SPI_TransmitReceive+0xe8>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 80082c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 80082c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80082c6:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 80082c8:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 80082ca:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 80082cc:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80082ce:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80082d0:	6822      	ldr	r2, [r4, #0]
        txallowed = 0U;
 80082d2:	2700      	movs	r7, #0
 80082d4:	e736      	b.n	8008144 <HAL_SPI_TransmitReceive+0xe8>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80082d6:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80082da:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082dc:	6811      	ldr	r1, [r2, #0]
 80082de:	0649      	lsls	r1, r1, #25
 80082e0:	f57f af12 	bpl.w	8008108 <HAL_SPI_TransmitReceive+0xac>
 80082e4:	e7bc      	b.n	8008260 <HAL_SPI_TransmitReceive+0x204>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80082e6:	f899 3000 	ldrb.w	r3, [r9]
 80082ea:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 80082ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 80082ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80082f0:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 80082f2:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 80082f4:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 80082f6:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80082f8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80082fa:	e70f      	b.n	800811c <HAL_SPI_TransmitReceive+0xc0>

080082fc <HAL_SPI_DMAStop>:
{
 80082fc:	b538      	push	{r3, r4, r5, lr}
 80082fe:	4604      	mov	r4, r0
  if (hspi->hdmatx != NULL)
 8008300:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8008302:	b110      	cbz	r0, 800830a <HAL_SPI_DMAStop+0xe>
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8008304:	f7fd fd38 	bl	8005d78 <HAL_DMA_Abort>
 8008308:	b9a0      	cbnz	r0, 8008334 <HAL_SPI_DMAStop+0x38>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800830a:	2500      	movs	r5, #0
  if (hspi->hdmarx != NULL)
 800830c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800830e:	b138      	cbz	r0, 8008320 <HAL_SPI_DMAStop+0x24>
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8008310:	f7fd fd32 	bl	8005d78 <HAL_DMA_Abort>
 8008314:	b120      	cbz	r0, 8008320 <HAL_SPI_DMAStop+0x24>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008316:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008318:	f043 0310 	orr.w	r3, r3, #16
      errorcode = HAL_ERROR;
 800831c:	2501      	movs	r5, #1
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800831e:	6623      	str	r3, [r4, #96]	; 0x60
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008320:	6822      	ldr	r2, [r4, #0]
 8008322:	6853      	ldr	r3, [r2, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8008324:	2101      	movs	r1, #1
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008326:	f023 0303 	bic.w	r3, r3, #3
 800832a:	6053      	str	r3, [r2, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800832c:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
}
 8008330:	4628      	mov	r0, r5
 8008332:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008334:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008336:	f043 0310 	orr.w	r3, r3, #16
      errorcode = HAL_ERROR;
 800833a:	2501      	movs	r5, #1
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800833c:	6623      	str	r3, [r4, #96]	; 0x60
      errorcode = HAL_ERROR;
 800833e:	e7e5      	b.n	800830c <HAL_SPI_DMAStop+0x10>

08008340 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008340:	6a03      	ldr	r3, [r0, #32]
 8008342:	f023 0301 	bic.w	r3, r3, #1
 8008346:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008348:	6a03      	ldr	r3, [r0, #32]
{
 800834a:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800834c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800834e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008350:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008352:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008356:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800835a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800835c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800835e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8008362:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008364:	4d15      	ldr	r5, [pc, #84]	; (80083bc <TIM_OC1_SetConfig+0x7c>)
 8008366:	42a8      	cmp	r0, r5
 8008368:	d013      	beq.n	8008392 <TIM_OC1_SetConfig+0x52>
 800836a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800836e:	42a8      	cmp	r0, r5
 8008370:	d00f      	beq.n	8008392 <TIM_OC1_SetConfig+0x52>
 8008372:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8008376:	42a8      	cmp	r0, r5
 8008378:	d00b      	beq.n	8008392 <TIM_OC1_SetConfig+0x52>
 800837a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800837e:	42a8      	cmp	r0, r5
 8008380:	d007      	beq.n	8008392 <TIM_OC1_SetConfig+0x52>
 8008382:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008386:	42a8      	cmp	r0, r5
 8008388:	d003      	beq.n	8008392 <TIM_OC1_SetConfig+0x52>
 800838a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800838e:	42a8      	cmp	r0, r5
 8008390:	d10d      	bne.n	80083ae <TIM_OC1_SetConfig+0x6e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008392:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8008394:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8008398:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800839a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800839e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80083a2:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80083a6:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80083aa:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80083ae:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80083b0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80083b2:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80083b4:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 80083b6:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80083b8:	6203      	str	r3, [r0, #32]
}
 80083ba:	4770      	bx	lr
 80083bc:	40012c00 	.word	0x40012c00

080083c0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083c0:	6a03      	ldr	r3, [r0, #32]
 80083c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083c6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083c8:	6a03      	ldr	r3, [r0, #32]
{
 80083ca:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083cc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083ce:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083d0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80083d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80083d6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80083da:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80083dc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80083de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80083e2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80083e6:	4d1c      	ldr	r5, [pc, #112]	; (8008458 <TIM_OC3_SetConfig+0x98>)
 80083e8:	42a8      	cmp	r0, r5
 80083ea:	d017      	beq.n	800841c <TIM_OC3_SetConfig+0x5c>
 80083ec:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80083f0:	42a8      	cmp	r0, r5
 80083f2:	d013      	beq.n	800841c <TIM_OC3_SetConfig+0x5c>
 80083f4:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80083f8:	42a8      	cmp	r0, r5
 80083fa:	d025      	beq.n	8008448 <TIM_OC3_SetConfig+0x88>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083fc:	4d17      	ldr	r5, [pc, #92]	; (800845c <TIM_OC3_SetConfig+0x9c>)
 80083fe:	42a8      	cmp	r0, r5
 8008400:	d013      	beq.n	800842a <TIM_OC3_SetConfig+0x6a>
 8008402:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008406:	42a8      	cmp	r0, r5
 8008408:	d00f      	beq.n	800842a <TIM_OC3_SetConfig+0x6a>
 800840a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800840e:	42a8      	cmp	r0, r5
 8008410:	d00b      	beq.n	800842a <TIM_OC3_SetConfig+0x6a>
 8008412:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008416:	42a8      	cmp	r0, r5
 8008418:	d10f      	bne.n	800843a <TIM_OC3_SetConfig+0x7a>
 800841a:	e006      	b.n	800842a <TIM_OC3_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800841c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800841e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008422:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8008426:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800842a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800842e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008432:	ea46 0c05 	orr.w	ip, r6, r5
 8008436:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800843a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800843c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800843e:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8008440:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8008442:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8008444:	6203      	str	r3, [r0, #32]
}
 8008446:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008448:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800844a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800844e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8008452:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008456:	e7d1      	b.n	80083fc <TIM_OC3_SetConfig+0x3c>
 8008458:	40012c00 	.word	0x40012c00
 800845c:	40014000 	.word	0x40014000

08008460 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008460:	6a03      	ldr	r3, [r0, #32]
 8008462:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008466:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008468:	6a03      	ldr	r3, [r0, #32]
{
 800846a:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800846c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800846e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008470:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008472:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008476:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800847a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800847e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8008480:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008484:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008488:	4d1c      	ldr	r5, [pc, #112]	; (80084fc <TIM_OC4_SetConfig+0x9c>)
 800848a:	42a8      	cmp	r0, r5
 800848c:	d017      	beq.n	80084be <TIM_OC4_SetConfig+0x5e>
 800848e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008492:	42a8      	cmp	r0, r5
 8008494:	d013      	beq.n	80084be <TIM_OC4_SetConfig+0x5e>
 8008496:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800849a:	42a8      	cmp	r0, r5
 800849c:	d025      	beq.n	80084ea <TIM_OC4_SetConfig+0x8a>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800849e:	4d18      	ldr	r5, [pc, #96]	; (8008500 <TIM_OC4_SetConfig+0xa0>)
 80084a0:	42a8      	cmp	r0, r5
 80084a2:	d013      	beq.n	80084cc <TIM_OC4_SetConfig+0x6c>
 80084a4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80084a8:	42a8      	cmp	r0, r5
 80084aa:	d00f      	beq.n	80084cc <TIM_OC4_SetConfig+0x6c>
 80084ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80084b0:	42a8      	cmp	r0, r5
 80084b2:	d00b      	beq.n	80084cc <TIM_OC4_SetConfig+0x6c>
 80084b4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80084b8:	42a8      	cmp	r0, r5
 80084ba:	d10f      	bne.n	80084dc <TIM_OC4_SetConfig+0x7c>
 80084bc:	e006      	b.n	80084cc <TIM_OC4_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80084be:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 80084c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80084c4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 80084c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80084cc:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80084d0:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80084d4:	ea46 0c05 	orr.w	ip, r6, r5
 80084d8:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80084dc:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80084de:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80084e0:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80084e2:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 80084e4:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80084e6:	6203      	str	r3, [r0, #32]
}
 80084e8:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80084ea:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 80084ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80084f0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 80084f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084f8:	e7d1      	b.n	800849e <TIM_OC4_SetConfig+0x3e>
 80084fa:	bf00      	nop
 80084fc:	40012c00 	.word	0x40012c00
 8008500:	40014000 	.word	0x40014000

08008504 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008504:	6a03      	ldr	r3, [r0, #32]
 8008506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800850a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800850c:	6a03      	ldr	r3, [r0, #32]
{
 800850e:	b430      	push	{r4, r5}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008510:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008512:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008514:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008516:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800851a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800851e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008520:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8008522:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008526:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800852a:	4d11      	ldr	r5, [pc, #68]	; (8008570 <TIM_OC5_SetConfig+0x6c>)
 800852c:	42a8      	cmp	r0, r5
 800852e:	d013      	beq.n	8008558 <TIM_OC5_SetConfig+0x54>
 8008530:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008534:	42a8      	cmp	r0, r5
 8008536:	d00f      	beq.n	8008558 <TIM_OC5_SetConfig+0x54>
 8008538:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800853c:	42a8      	cmp	r0, r5
 800853e:	d00b      	beq.n	8008558 <TIM_OC5_SetConfig+0x54>
 8008540:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008544:	42a8      	cmp	r0, r5
 8008546:	d007      	beq.n	8008558 <TIM_OC5_SetConfig+0x54>
 8008548:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800854c:	42a8      	cmp	r0, r5
 800854e:	d003      	beq.n	8008558 <TIM_OC5_SetConfig+0x54>
 8008550:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008554:	42a8      	cmp	r0, r5
 8008556:	d104      	bne.n	8008562 <TIM_OC5_SetConfig+0x5e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008558:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800855a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800855e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008562:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008564:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 8008566:	6502      	str	r2, [r0, #80]	; 0x50

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8008568:	bc30      	pop	{r4, r5}
  TIMx->CCR5 = OC_Config->Pulse;
 800856a:	6481      	str	r1, [r0, #72]	; 0x48
  TIMx->CCER = tmpccer;
 800856c:	6203      	str	r3, [r0, #32]
}
 800856e:	4770      	bx	lr
 8008570:	40012c00 	.word	0x40012c00

08008574 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008574:	6a03      	ldr	r3, [r0, #32]
 8008576:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800857a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800857c:	6a03      	ldr	r3, [r0, #32]
{
 800857e:	b430      	push	{r4, r5}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008580:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008582:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008584:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008586:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800858a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800858e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008592:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008594:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008598:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800859c:	4d11      	ldr	r5, [pc, #68]	; (80085e4 <TIM_OC6_SetConfig+0x70>)
 800859e:	42a8      	cmp	r0, r5
 80085a0:	d013      	beq.n	80085ca <TIM_OC6_SetConfig+0x56>
 80085a2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80085a6:	42a8      	cmp	r0, r5
 80085a8:	d00f      	beq.n	80085ca <TIM_OC6_SetConfig+0x56>
 80085aa:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80085ae:	42a8      	cmp	r0, r5
 80085b0:	d00b      	beq.n	80085ca <TIM_OC6_SetConfig+0x56>
 80085b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80085b6:	42a8      	cmp	r0, r5
 80085b8:	d007      	beq.n	80085ca <TIM_OC6_SetConfig+0x56>
 80085ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80085be:	42a8      	cmp	r0, r5
 80085c0:	d003      	beq.n	80085ca <TIM_OC6_SetConfig+0x56>
 80085c2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80085c6:	42a8      	cmp	r0, r5
 80085c8:	d104      	bne.n	80085d4 <TIM_OC6_SetConfig+0x60>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80085ca:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80085cc:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80085d0:	ea44 2485 	orr.w	r4, r4, r5, lsl #10

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80085d4:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80085d6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 80085d8:	6502      	str	r2, [r0, #80]	; 0x50

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80085da:	bc30      	pop	{r4, r5}
  TIMx->CCR6 = OC_Config->Pulse;
 80085dc:	64c1      	str	r1, [r0, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 80085de:	6203      	str	r3, [r0, #32]
}
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	40012c00 	.word	0x40012c00

080085e8 <HAL_TIM_PWM_MspInit>:
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop

080085ec <HAL_TIM_OnePulse_MspInit>:
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop

080085f0 <HAL_TIM_OnePulse_Stop>:
{
 80085f0:	4602      	mov	r2, r0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085f2:	4825      	ldr	r0, [pc, #148]	; (8008688 <HAL_TIM_OnePulse_Stop+0x98>)
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80085f4:	6813      	ldr	r3, [r2, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80085f6:	6a19      	ldr	r1, [r3, #32]
 80085f8:	f021 0101 	bic.w	r1, r1, #1
 80085fc:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80085fe:	6a19      	ldr	r1, [r3, #32]
 8008600:	6219      	str	r1, [r3, #32]
  TIMx->CCER &= ~tmp;
 8008602:	6a19      	ldr	r1, [r3, #32]
 8008604:	f021 0110 	bic.w	r1, r1, #16
 8008608:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800860a:	6a19      	ldr	r1, [r3, #32]
 800860c:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800860e:	4283      	cmp	r3, r0
 8008610:	d02b      	beq.n	800866a <HAL_TIM_OnePulse_Stop+0x7a>
 8008612:	491e      	ldr	r1, [pc, #120]	; (800868c <HAL_TIM_OnePulse_Stop+0x9c>)
 8008614:	428b      	cmp	r3, r1
 8008616:	d028      	beq.n	800866a <HAL_TIM_OnePulse_Stop+0x7a>
 8008618:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800861c:	428b      	cmp	r3, r1
 800861e:	d024      	beq.n	800866a <HAL_TIM_OnePulse_Stop+0x7a>
 8008620:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008624:	428b      	cmp	r3, r1
 8008626:	d020      	beq.n	800866a <HAL_TIM_OnePulse_Stop+0x7a>
 8008628:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800862c:	428b      	cmp	r3, r1
 800862e:	d01c      	beq.n	800866a <HAL_TIM_OnePulse_Stop+0x7a>
 8008630:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008634:	428b      	cmp	r3, r1
 8008636:	d018      	beq.n	800866a <HAL_TIM_OnePulse_Stop+0x7a>
  __HAL_TIM_DISABLE(htim);
 8008638:	6a18      	ldr	r0, [r3, #32]
 800863a:	f241 1111 	movw	r1, #4369	; 0x1111
 800863e:	4208      	tst	r0, r1
 8008640:	d108      	bne.n	8008654 <HAL_TIM_OnePulse_Stop+0x64>
 8008642:	6a18      	ldr	r0, [r3, #32]
 8008644:	f244 4144 	movw	r1, #17476	; 0x4444
 8008648:	4208      	tst	r0, r1
 800864a:	d103      	bne.n	8008654 <HAL_TIM_OnePulse_Stop+0x64>
 800864c:	6819      	ldr	r1, [r3, #0]
 800864e:	f021 0101 	bic.w	r1, r1, #1
 8008652:	6019      	str	r1, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008654:	2301      	movs	r3, #1
 8008656:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
}
 800865a:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800865c:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008660:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008664:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 8008668:	4770      	bx	lr
    __HAL_TIM_MOE_DISABLE(htim);
 800866a:	6a18      	ldr	r0, [r3, #32]
 800866c:	f241 1111 	movw	r1, #4369	; 0x1111
 8008670:	4208      	tst	r0, r1
 8008672:	d1e1      	bne.n	8008638 <HAL_TIM_OnePulse_Stop+0x48>
 8008674:	6a18      	ldr	r0, [r3, #32]
 8008676:	f244 4144 	movw	r1, #17476	; 0x4444
 800867a:	4208      	tst	r0, r1
 800867c:	d1dc      	bne.n	8008638 <HAL_TIM_OnePulse_Stop+0x48>
 800867e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8008680:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8008684:	6459      	str	r1, [r3, #68]	; 0x44
 8008686:	e7d7      	b.n	8008638 <HAL_TIM_OnePulse_Stop+0x48>
 8008688:	40012c00 	.word	0x40012c00
 800868c:	40013400 	.word	0x40013400

08008690 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8008690:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008694:	2b01      	cmp	r3, #1
 8008696:	f000 8095 	beq.w	80087c4 <HAL_TIM_ConfigClockSource+0x134>
{
 800869a:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 800869c:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 800869e:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80086a0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 80086a4:	2201      	movs	r2, #1
 80086a6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80086aa:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086ac:	4b65      	ldr	r3, [pc, #404]	; (8008844 <HAL_TIM_ConfigClockSource+0x1b4>)
 80086ae:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 80086b0:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 80086b2:	680b      	ldr	r3, [r1, #0]
 80086b4:	2b70      	cmp	r3, #112	; 0x70
 80086b6:	f000 80b4 	beq.w	8008822 <HAL_TIM_ConfigClockSource+0x192>
 80086ba:	d829      	bhi.n	8008710 <HAL_TIM_ConfigClockSource+0x80>
 80086bc:	2b50      	cmp	r3, #80	; 0x50
 80086be:	f000 8084 	beq.w	80087ca <HAL_TIM_ConfigClockSource+0x13a>
 80086c2:	d940      	bls.n	8008746 <HAL_TIM_ConfigClockSource+0xb6>
 80086c4:	2b60      	cmp	r3, #96	; 0x60
 80086c6:	d11a      	bne.n	80086fe <HAL_TIM_ConfigClockSource+0x6e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80086c8:	68cb      	ldr	r3, [r1, #12]
 80086ca:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086cc:	6a21      	ldr	r1, [r4, #32]
 80086ce:	f021 0110 	bic.w	r1, r1, #16
 80086d2:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086d4:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086d6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086da:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
  tmpccer = TIMx->CCER;
 80086de:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80086e0:	61a2      	str	r2, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80086e6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 80086ea:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80086ec:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80086ee:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80086f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086f6:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 80086fa:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 80086fc:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 80086fe:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8008700:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8008702:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008706:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800870a:	bc70      	pop	{r4, r5, r6}
 800870c:	4610      	mov	r0, r2
 800870e:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8008710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008714:	d074      	beq.n	8008800 <HAL_TIM_ConfigClockSource+0x170>
 8008716:	d943      	bls.n	80087a0 <HAL_TIM_ConfigClockSource+0x110>
 8008718:	494b      	ldr	r1, [pc, #300]	; (8008848 <HAL_TIM_ConfigClockSource+0x1b8>)
 800871a:	428b      	cmp	r3, r1
 800871c:	d008      	beq.n	8008730 <HAL_TIM_ConfigClockSource+0xa0>
 800871e:	d92f      	bls.n	8008780 <HAL_TIM_ConfigClockSource+0xf0>
 8008720:	494a      	ldr	r1, [pc, #296]	; (800884c <HAL_TIM_ConfigClockSource+0x1bc>)
 8008722:	428b      	cmp	r3, r1
 8008724:	d004      	beq.n	8008730 <HAL_TIM_ConfigClockSource+0xa0>
 8008726:	f023 0c20 	bic.w	ip, r3, #32
 800872a:	3910      	subs	r1, #16
 800872c:	458c      	cmp	ip, r1
 800872e:	d1e6      	bne.n	80086fe <HAL_TIM_ConfigClockSource+0x6e>
  tmpsmcr = TIMx->SMCR;
 8008730:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008732:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8008736:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800873a:	430b      	orrs	r3, r1
 800873c:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 8008740:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 8008742:	60a3      	str	r3, [r4, #8]
}
 8008744:	e7db      	b.n	80086fe <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8008746:	2b40      	cmp	r3, #64	; 0x40
 8008748:	d12f      	bne.n	80087aa <HAL_TIM_ConfigClockSource+0x11a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800874a:	684a      	ldr	r2, [r1, #4]
 800874c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800874e:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008750:	6a25      	ldr	r5, [r4, #32]
 8008752:	f025 0501 	bic.w	r5, r5, #1
 8008756:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008758:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800875a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800875e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8008762:	4311      	orrs	r1, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008764:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8008768:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800876a:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800876c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800876e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008776:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 800877a:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 800877c:	60a3      	str	r3, [r4, #8]
}
 800877e:	e7be      	b.n	80086fe <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8008780:	4a33      	ldr	r2, [pc, #204]	; (8008850 <HAL_TIM_ConfigClockSource+0x1c0>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d0d4      	beq.n	8008730 <HAL_TIM_ConfigClockSource+0xa0>
 8008786:	d904      	bls.n	8008792 <HAL_TIM_ConfigClockSource+0x102>
 8008788:	4a32      	ldr	r2, [pc, #200]	; (8008854 <HAL_TIM_ConfigClockSource+0x1c4>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d0d0      	beq.n	8008730 <HAL_TIM_ConfigClockSource+0xa0>
 800878e:	2201      	movs	r2, #1
 8008790:	e7b5      	b.n	80086fe <HAL_TIM_ConfigClockSource+0x6e>
 8008792:	f023 0210 	bic.w	r2, r3, #16
 8008796:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800879a:	d0c9      	beq.n	8008730 <HAL_TIM_ConfigClockSource+0xa0>
 800879c:	2201      	movs	r2, #1
 800879e:	e7ae      	b.n	80086fe <HAL_TIM_ConfigClockSource+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 80087a0:	f5b3 5280 	subs.w	r2, r3, #4096	; 0x1000
 80087a4:	bf18      	it	ne
 80087a6:	2201      	movne	r2, #1
 80087a8:	e7a9      	b.n	80086fe <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 80087aa:	d8a8      	bhi.n	80086fe <HAL_TIM_ConfigClockSource+0x6e>
 80087ac:	2b20      	cmp	r3, #32
 80087ae:	d0bf      	beq.n	8008730 <HAL_TIM_ConfigClockSource+0xa0>
 80087b0:	d903      	bls.n	80087ba <HAL_TIM_ConfigClockSource+0x12a>
 80087b2:	2b30      	cmp	r3, #48	; 0x30
 80087b4:	d0bc      	beq.n	8008730 <HAL_TIM_ConfigClockSource+0xa0>
 80087b6:	2201      	movs	r2, #1
 80087b8:	e7a1      	b.n	80086fe <HAL_TIM_ConfigClockSource+0x6e>
 80087ba:	f033 0210 	bics.w	r2, r3, #16
 80087be:	d0b7      	beq.n	8008730 <HAL_TIM_ConfigClockSource+0xa0>
 80087c0:	2201      	movs	r2, #1
 80087c2:	e79c      	b.n	80086fe <HAL_TIM_ConfigClockSource+0x6e>
  __HAL_LOCK(htim);
 80087c4:	2202      	movs	r2, #2
}
 80087c6:	4610      	mov	r0, r2
 80087c8:	4770      	bx	lr
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087ca:	684a      	ldr	r2, [r1, #4]
 80087cc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80087ce:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087d0:	6a25      	ldr	r5, [r4, #32]
 80087d2:	f025 0501 	bic.w	r5, r5, #1
 80087d6:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087d8:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087da:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 80087e2:	4311      	orrs	r1, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087e4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80087e8:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80087ea:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80087ec:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80087ee:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80087f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087f6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 80087fa:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 80087fc:	60a3      	str	r3, [r4, #8]
}
 80087fe:	e77e      	b.n	80086fe <HAL_TIM_ConfigClockSource+0x6e>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008800:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8008804:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008806:	68c9      	ldr	r1, [r1, #12]
 8008808:	432b      	orrs	r3, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800880a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800880e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008812:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8008814:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008816:	68a3      	ldr	r3, [r4, #8]
 8008818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 800881c:	2200      	movs	r2, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800881e:	60a3      	str	r3, [r4, #8]
      break;
 8008820:	e76d      	b.n	80086fe <HAL_TIM_ConfigClockSource+0x6e>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008822:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8008826:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008828:	68c9      	ldr	r1, [r1, #12]
 800882a:	432b      	orrs	r3, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800882c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008830:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008834:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8008836:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8008838:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800883a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 800883e:	2200      	movs	r2, #0
      htim->Instance->SMCR = tmpsmcr;
 8008840:	60a3      	str	r3, [r4, #8]
      break;
 8008842:	e75c      	b.n	80086fe <HAL_TIM_ConfigClockSource+0x6e>
 8008844:	ffce0088 	.word	0xffce0088
 8008848:	00100040 	.word	0x00100040
 800884c:	00100060 	.word	0x00100060
 8008850:	00100020 	.word	0x00100020
 8008854:	00100030 	.word	0x00100030

08008858 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008858:	4a3a      	ldr	r2, [pc, #232]	; (8008944 <TIM_Base_SetConfig+0xec>)
  tmpcr1 = TIMx->CR1;
 800885a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800885c:	4290      	cmp	r0, r2
{
 800885e:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008860:	d044      	beq.n	80088ec <TIM_Base_SetConfig+0x94>
 8008862:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008866:	d02c      	beq.n	80088c2 <TIM_Base_SetConfig+0x6a>
 8008868:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800886c:	4290      	cmp	r0, r2
 800886e:	d028      	beq.n	80088c2 <TIM_Base_SetConfig+0x6a>
 8008870:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008874:	4290      	cmp	r0, r2
 8008876:	d024      	beq.n	80088c2 <TIM_Base_SetConfig+0x6a>
 8008878:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800887c:	4290      	cmp	r0, r2
 800887e:	d020      	beq.n	80088c2 <TIM_Base_SetConfig+0x6a>
 8008880:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008884:	4290      	cmp	r0, r2
 8008886:	d04e      	beq.n	8008926 <TIM_Base_SetConfig+0xce>
 8008888:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800888c:	4290      	cmp	r0, r2
 800888e:	d054      	beq.n	800893a <TIM_Base_SetConfig+0xe2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008890:	4a2d      	ldr	r2, [pc, #180]	; (8008948 <TIM_Base_SetConfig+0xf0>)
 8008892:	4290      	cmp	r0, r2
 8008894:	d041      	beq.n	800891a <TIM_Base_SetConfig+0xc2>
 8008896:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800889a:	4290      	cmp	r0, r2
 800889c:	d03d      	beq.n	800891a <TIM_Base_SetConfig+0xc2>
 800889e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80088a2:	4290      	cmp	r0, r2
 80088a4:	d039      	beq.n	800891a <TIM_Base_SetConfig+0xc2>
 80088a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088aa:	4290      	cmp	r0, r2
 80088ac:	d035      	beq.n	800891a <TIM_Base_SetConfig+0xc2>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088ae:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088b0:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 80088b2:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088b8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80088ba:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088bc:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80088be:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088c0:	e010      	b.n	80088e4 <TIM_Base_SetConfig+0x8c>
    tmpcr1 |= Structure->CounterMode;
 80088c2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088c4:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80088ca:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80088cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088d0:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088d2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088d8:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088da:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 80088dc:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 80088de:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088e0:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80088e2:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80088e4:	2301      	movs	r3, #1
}
 80088e6:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 80088e8:	6143      	str	r3, [r0, #20]
}
 80088ea:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80088ec:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088ee:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80088f4:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 80088f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088fa:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088fc:	694a      	ldr	r2, [r1, #20]
 80088fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008902:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008904:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008906:	688b      	ldr	r3, [r1, #8]
 8008908:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800890a:	680b      	ldr	r3, [r1, #0]
 800890c:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800890e:	690b      	ldr	r3, [r1, #16]
 8008910:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8008912:	2301      	movs	r3, #1
}
 8008914:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8008916:	6143      	str	r3, [r0, #20]
}
 8008918:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800891a:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800891c:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 800891e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008922:	4323      	orrs	r3, r4
 8008924:	e7eb      	b.n	80088fe <TIM_Base_SetConfig+0xa6>
    tmpcr1 |= Structure->CounterMode;
 8008926:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008928:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800892a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800892e:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8008930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008934:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008936:	694a      	ldr	r2, [r1, #20]
 8008938:	e7e1      	b.n	80088fe <TIM_Base_SetConfig+0xa6>
    tmpcr1 |= Structure->CounterMode;
 800893a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800893c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008940:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008942:	e7a5      	b.n	8008890 <TIM_Base_SetConfig+0x38>
 8008944:	40012c00 	.word	0x40012c00
 8008948:	40014000 	.word	0x40014000

0800894c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800894c:	b370      	cbz	r0, 80089ac <HAL_TIM_Base_Init+0x60>
{
 800894e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8008950:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008954:	4604      	mov	r4, r0
 8008956:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800895a:	b313      	cbz	r3, 80089a2 <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800895c:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800895e:	2302      	movs	r3, #2
 8008960:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008964:	f851 0b04 	ldr.w	r0, [r1], #4
 8008968:	f7ff ff76 	bl	8008858 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800896c:	2301      	movs	r3, #1
 800896e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008972:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008976:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800897a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800897e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008982:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008986:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800898a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800898e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008992:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008996:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800899a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800899e:	2000      	movs	r0, #0
}
 80089a0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80089a2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80089a6:	f7fc ff51 	bl	800584c <HAL_TIM_Base_MspInit>
 80089aa:	e7d7      	b.n	800895c <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80089ac:	2001      	movs	r0, #1
}
 80089ae:	4770      	bx	lr

080089b0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80089b0:	b370      	cbz	r0, 8008a10 <HAL_TIM_PWM_Init+0x60>
{
 80089b2:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80089b4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80089b8:	4604      	mov	r4, r0
 80089ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80089be:	b313      	cbz	r3, 8008a06 <HAL_TIM_PWM_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089c0:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80089c2:	2302      	movs	r3, #2
 80089c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089c8:	f851 0b04 	ldr.w	r0, [r1], #4
 80089cc:	f7ff ff44 	bl	8008858 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089d0:	2301      	movs	r3, #1
 80089d2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80089da:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80089de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80089e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80089e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089ee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80089f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089f6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80089fa:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80089fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008a02:	2000      	movs	r0, #0
}
 8008a04:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8008a06:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8008a0a:	f7ff fded 	bl	80085e8 <HAL_TIM_PWM_MspInit>
 8008a0e:	e7d7      	b.n	80089c0 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8008a10:	2001      	movs	r0, #1
}
 8008a12:	4770      	bx	lr

08008a14 <HAL_TIM_OnePulse_Init>:
  if (htim == NULL)
 8008a14:	b358      	cbz	r0, 8008a6e <HAL_TIM_OnePulse_Init+0x5a>
{
 8008a16:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8008a18:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008a1c:	460d      	mov	r5, r1
 8008a1e:	4604      	mov	r4, r0
 8008a20:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008a24:	b1f3      	cbz	r3, 8008a64 <HAL_TIM_OnePulse_Init+0x50>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a26:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8008a28:	2302      	movs	r3, #2
 8008a2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a2e:	f851 0b04 	ldr.w	r0, [r1], #4
 8008a32:	f7ff ff11 	bl	8008858 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008a36:	6822      	ldr	r2, [r4, #0]
 8008a38:	6811      	ldr	r1, [r2, #0]
 8008a3a:	f021 0108 	bic.w	r1, r1, #8
 8008a3e:	6011      	str	r1, [r2, #0]
  htim->Instance->CR1 |= OnePulseMode;
 8008a40:	6811      	ldr	r1, [r2, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a42:	2301      	movs	r3, #1
  htim->Instance->CR1 |= OnePulseMode;
 8008a44:	430d      	orrs	r5, r1
 8008a46:	6015      	str	r5, [r2, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a48:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a4c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a50:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a54:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8008a5c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008a60:	2000      	movs	r0, #0
}
 8008a62:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 8008a64:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 8008a68:	f7ff fdc0 	bl	80085ec <HAL_TIM_OnePulse_MspInit>
 8008a6c:	e7db      	b.n	8008a26 <HAL_TIM_OnePulse_Init+0x12>
    return HAL_ERROR;
 8008a6e:	2001      	movs	r0, #1
}
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop

08008a74 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a74:	6a03      	ldr	r3, [r0, #32]
 8008a76:	f023 0310 	bic.w	r3, r3, #16
 8008a7a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8008a7c:	6a03      	ldr	r3, [r0, #32]
{
 8008a7e:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8008a80:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8008a82:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a84:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a86:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008a8a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a8e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a92:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8008a94:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a98:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a9c:	4d1c      	ldr	r5, [pc, #112]	; (8008b10 <TIM_OC2_SetConfig+0x9c>)
 8008a9e:	42a8      	cmp	r0, r5
 8008aa0:	d017      	beq.n	8008ad2 <TIM_OC2_SetConfig+0x5e>
 8008aa2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008aa6:	42a8      	cmp	r0, r5
 8008aa8:	d013      	beq.n	8008ad2 <TIM_OC2_SetConfig+0x5e>
 8008aaa:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008aae:	42a8      	cmp	r0, r5
 8008ab0:	d025      	beq.n	8008afe <TIM_OC2_SetConfig+0x8a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ab2:	4d18      	ldr	r5, [pc, #96]	; (8008b14 <TIM_OC2_SetConfig+0xa0>)
 8008ab4:	42a8      	cmp	r0, r5
 8008ab6:	d013      	beq.n	8008ae0 <TIM_OC2_SetConfig+0x6c>
 8008ab8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008abc:	42a8      	cmp	r0, r5
 8008abe:	d00f      	beq.n	8008ae0 <TIM_OC2_SetConfig+0x6c>
 8008ac0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008ac4:	42a8      	cmp	r0, r5
 8008ac6:	d00b      	beq.n	8008ae0 <TIM_OC2_SetConfig+0x6c>
 8008ac8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008acc:	42a8      	cmp	r0, r5
 8008ace:	d10f      	bne.n	8008af0 <TIM_OC2_SetConfig+0x7c>
 8008ad0:	e006      	b.n	8008ae0 <TIM_OC2_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008ad2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008ad8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ae0:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ae4:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ae8:	ea46 0c05 	orr.w	ip, r6, r5
 8008aec:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8008af0:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008af2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008af4:	6182      	str	r2, [r0, #24]
}
 8008af6:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8008af8:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8008afa:	6203      	str	r3, [r0, #32]
}
 8008afc:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008afe:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b04:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b0c:	e7d1      	b.n	8008ab2 <TIM_OC2_SetConfig+0x3e>
 8008b0e:	bf00      	nop
 8008b10:	40012c00 	.word	0x40012c00
 8008b14:	40014000 	.word	0x40014000

08008b18 <HAL_TIM_PWM_ConfigChannel>:
{
 8008b18:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8008b1a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	f000 8088 	beq.w	8008c34 <HAL_TIM_PWM_ConfigChannel+0x11c>
 8008b24:	2301      	movs	r3, #1
 8008b26:	4604      	mov	r4, r0
 8008b28:	460d      	mov	r5, r1
 8008b2a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8008b2e:	2a14      	cmp	r2, #20
 8008b30:	d80c      	bhi.n	8008b4c <HAL_TIM_PWM_ConfigChannel+0x34>
 8008b32:	e8df f002 	tbb	[pc, r2]
 8008b36:	0b23      	.short	0x0b23
 8008b38:	0b350b0b 	.word	0x0b350b0b
 8008b3c:	0b480b0b 	.word	0x0b480b0b
 8008b40:	0b5a0b0b 	.word	0x0b5a0b0b
 8008b44:	0b6d0b0b 	.word	0x0b6d0b0b
 8008b48:	0b0b      	.short	0x0b0b
 8008b4a:	10          	.byte	0x10
 8008b4b:	00          	.byte	0x00
 8008b4c:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8008b4e:	2300      	movs	r3, #0
 8008b50:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008b54:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008b56:	6800      	ldr	r0, [r0, #0]
 8008b58:	f7ff fd0c 	bl	8008574 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008b5c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008b5e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008b60:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008b62:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8008b66:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008b68:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008b6a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008b6e:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008b70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b72:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8008b76:	651a      	str	r2, [r3, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8008b78:	2000      	movs	r0, #0
      break;
 8008b7a:	e7e8      	b.n	8008b4e <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008b7c:	6800      	ldr	r0, [r0, #0]
 8008b7e:	f7ff fbdf 	bl	8008340 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008b82:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b84:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008b86:	6999      	ldr	r1, [r3, #24]
 8008b88:	f041 0108 	orr.w	r1, r1, #8
 8008b8c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008b8e:	6999      	ldr	r1, [r3, #24]
 8008b90:	f021 0104 	bic.w	r1, r1, #4
 8008b94:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b96:	699a      	ldr	r2, [r3, #24]
 8008b98:	4302      	orrs	r2, r0
 8008b9a:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8008b9c:	2000      	movs	r0, #0
      break;
 8008b9e:	e7d6      	b.n	8008b4e <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ba0:	6800      	ldr	r0, [r0, #0]
 8008ba2:	f7ff ff67 	bl	8008a74 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ba6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ba8:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008baa:	6999      	ldr	r1, [r3, #24]
 8008bac:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8008bb0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008bb2:	6999      	ldr	r1, [r3, #24]
 8008bb4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008bb8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008bba:	699a      	ldr	r2, [r3, #24]
 8008bbc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8008bc0:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8008bc2:	2000      	movs	r0, #0
      break;
 8008bc4:	e7c3      	b.n	8008b4e <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008bc6:	6800      	ldr	r0, [r0, #0]
 8008bc8:	f7ff fbfa 	bl	80083c0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008bcc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008bce:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008bd0:	69d9      	ldr	r1, [r3, #28]
 8008bd2:	f041 0108 	orr.w	r1, r1, #8
 8008bd6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008bd8:	69d9      	ldr	r1, [r3, #28]
 8008bda:	f021 0104 	bic.w	r1, r1, #4
 8008bde:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008be0:	69da      	ldr	r2, [r3, #28]
 8008be2:	4302      	orrs	r2, r0
 8008be4:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8008be6:	2000      	movs	r0, #0
      break;
 8008be8:	e7b1      	b.n	8008b4e <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008bea:	6800      	ldr	r0, [r0, #0]
 8008bec:	f7ff fc38 	bl	8008460 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008bf0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008bf2:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008bf4:	69d9      	ldr	r1, [r3, #28]
 8008bf6:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8008bfa:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008bfc:	69d9      	ldr	r1, [r3, #28]
 8008bfe:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008c02:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c04:	69da      	ldr	r2, [r3, #28]
 8008c06:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8008c0a:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8008c0c:	2000      	movs	r0, #0
      break;
 8008c0e:	e79e      	b.n	8008b4e <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008c10:	6800      	ldr	r0, [r0, #0]
 8008c12:	f7ff fc77 	bl	8008504 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008c16:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008c18:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008c1a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008c1c:	f041 0108 	orr.w	r1, r1, #8
 8008c20:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008c22:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008c24:	f021 0104 	bic.w	r1, r1, #4
 8008c28:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008c2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c2c:	4302      	orrs	r2, r0
 8008c2e:	651a      	str	r2, [r3, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8008c30:	2000      	movs	r0, #0
      break;
 8008c32:	e78c      	b.n	8008b4e <HAL_TIM_PWM_ConfigChannel+0x36>
  __HAL_LOCK(htim);
 8008c34:	2002      	movs	r0, #2
}
 8008c36:	bd38      	pop	{r3, r4, r5, pc}

08008c38 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8008c38:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c3a:	f001 011f 	and.w	r1, r1, #31
 8008c3e:	f04f 0c01 	mov.w	ip, #1
 8008c42:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 8008c46:	ea23 030c 	bic.w	r3, r3, ip
 8008c4a:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c4c:	6a03      	ldr	r3, [r0, #32]
 8008c4e:	408a      	lsls	r2, r1
 8008c50:	431a      	orrs	r2, r3
 8008c52:	6202      	str	r2, [r0, #32]
}
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop

08008c58 <HAL_TIMEx_OnePulseN_Stop>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008c58:	b510      	push	{r4, lr}
 8008c5a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Disable the complementary One Pulse output channel and the Input Capture channel */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 8008c5c:	6800      	ldr	r0, [r0, #0]
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 8008c5e:	2900      	cmp	r1, #0
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008c60:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c62:	f04f 0204 	mov.w	r2, #4
 8008c66:	f001 011f 	and.w	r1, r1, #31
 8008c6a:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &=  ~tmp;
 8008c6e:	ea23 0101 	bic.w	r1, r3, r1
 8008c72:	6201      	str	r1, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c74:	6a03      	ldr	r3, [r0, #32]
 8008c76:	6203      	str	r3, [r0, #32]
  TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_DISABLE);
 8008c78:	f04f 0200 	mov.w	r2, #0
 8008c7c:	bf14      	ite	ne
 8008c7e:	4611      	movne	r1, r2
 8008c80:	2104      	moveq	r1, #4
 8008c82:	f7ff ffd9 	bl	8008c38 <TIM_CCxChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	6a19      	ldr	r1, [r3, #32]
 8008c8a:	f241 1211 	movw	r2, #4369	; 0x1111
 8008c8e:	4211      	tst	r1, r2
 8008c90:	d104      	bne.n	8008c9c <HAL_TIMEx_OnePulseN_Stop+0x44>
 8008c92:	6a19      	ldr	r1, [r3, #32]
 8008c94:	f244 4244 	movw	r2, #17476	; 0x4444
 8008c98:	4211      	tst	r1, r2
 8008c9a:	d018      	beq.n	8008cce <HAL_TIMEx_OnePulseN_Stop+0x76>
  __HAL_TIM_DISABLE(htim);
 8008c9c:	6a19      	ldr	r1, [r3, #32]
 8008c9e:	f241 1211 	movw	r2, #4369	; 0x1111
 8008ca2:	4211      	tst	r1, r2
 8008ca4:	d108      	bne.n	8008cb8 <HAL_TIMEx_OnePulseN_Stop+0x60>
 8008ca6:	6a19      	ldr	r1, [r3, #32]
 8008ca8:	f244 4244 	movw	r2, #17476	; 0x4444
 8008cac:	4211      	tst	r1, r2
 8008cae:	d103      	bne.n	8008cb8 <HAL_TIMEx_OnePulseN_Stop+0x60>
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	f022 0201 	bic.w	r2, r2, #1
 8008cb6:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008cb8:	2301      	movs	r3, #1
 8008cba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008cbe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008cc2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008cc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8008cca:	2000      	movs	r0, #0
 8008ccc:	bd10      	pop	{r4, pc}
  __HAL_TIM_MOE_DISABLE(htim);
 8008cce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008cd4:	645a      	str	r2, [r3, #68]	; 0x44
 8008cd6:	e7e1      	b.n	8008c9c <HAL_TIMEx_OnePulseN_Stop+0x44>

08008cd8 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8008cd8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d051      	beq.n	8008d84 <HAL_TIMEx_MasterConfigSynchronization+0xac>
{
 8008ce0:	b430      	push	{r4, r5}
  tmpcr2 = htim->Instance->CR2;
 8008ce2:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ce4:	4d28      	ldr	r5, [pc, #160]	; (8008d88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008ce6:	2302      	movs	r3, #2
 8008ce8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008cec:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8008cee:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8008cf0:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008cf2:	d03b      	beq.n	8008d6c <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8008cf4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008cf8:	42aa      	cmp	r2, r5
 8008cfa:	d032      	beq.n	8008d62 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8008cfc:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008d00:	42aa      	cmp	r2, r5
 8008d02:	d02e      	beq.n	8008d62 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d04:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d06:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d0e:	432b      	orrs	r3, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d10:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8008d14:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d16:	d016      	beq.n	8008d46 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008d18:	4b1c      	ldr	r3, [pc, #112]	; (8008d8c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d013      	beq.n	8008d46 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008d1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d00f      	beq.n	8008d46 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d00b      	beq.n	8008d46 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008d2e:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d007      	beq.n	8008d46 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008d36:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d003      	beq.n	8008d46 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d104      	bne.n	8008d50 <HAL_TIMEx_MasterConfigSynchronization+0x78>
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d46:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d48:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d4c:	431c      	orrs	r4, r3
    htim->Instance->SMCR = tmpsmcr;
 8008d4e:	6094      	str	r4, [r2, #8]
  __HAL_UNLOCK(htim);
 8008d50:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8008d52:	2201      	movs	r2, #1
 8008d54:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008d58:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8008d5c:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8008d5e:	4618      	mov	r0, r3
}
 8008d60:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d62:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d64:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d68:	432b      	orrs	r3, r5
 8008d6a:	e7cb      	b.n	8008d04 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 8008d6c:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d72:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d74:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d78:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d7e:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8008d80:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d82:	e7e0      	b.n	8008d46 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  __HAL_LOCK(htim);
 8008d84:	2002      	movs	r0, #2
}
 8008d86:	4770      	bx	lr
 8008d88:	40012c00 	.word	0x40012c00
 8008d8c:	40000400 	.word	0x40000400

08008d90 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8008d90:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d048      	beq.n	8008e2a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
{
 8008d98:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008d9a:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8008d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008da2:	4602      	mov	r2, r0
 8008da4:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008da6:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008da8:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008daa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008dae:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008db0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008db4:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008db6:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008db8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008dbc:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008dbe:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008dc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008dc4:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008dc6:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008dc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008dcc:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008dce:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008dd0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008dd4:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008dda:	4c15      	ldr	r4, [pc, #84]	; (8008e30 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8008ddc:	42a0      	cmp	r0, r4
 8008dde:	d007      	beq.n	8008df0 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 8008de0:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8008de4:	42a0      	cmp	r0, r4
 8008de6:	d003      	beq.n	8008df0 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 8008de8:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8008dec:	42a0      	cmp	r0, r4
 8008dee:	d114      	bne.n	8008e1a <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008df0:	69cc      	ldr	r4, [r1, #28]
 8008df2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008df6:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008df8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8008dfa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008dfe:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008e02:	6a0c      	ldr	r4, [r1, #32]
 8008e04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e08:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008e0a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008e0c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008e0e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008e12:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008e14:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008e18:	430b      	orrs	r3, r1
  __HAL_UNLOCK(htim);
 8008e1a:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8008e1c:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8008e1e:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
  return HAL_OK;
 8008e22:	4608      	mov	r0, r1
}
 8008e24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e28:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008e2a:	2002      	movs	r0, #2
}
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	40012c00 	.word	0x40012c00

08008e34 <HAL_TIMEx_ConfigBreakInput>:
  __HAL_LOCK(htim);
 8008e34:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	f000 8081 	beq.w	8008f40 <HAL_TIMEx_ConfigBreakInput+0x10c>
  switch (sBreakInputConfig->Source)
 8008e3e:	6813      	ldr	r3, [r2, #0]
 8008e40:	2b20      	cmp	r3, #32
{
 8008e42:	b530      	push	{r4, r5, lr}
  switch (sBreakInputConfig->Source)
 8008e44:	d825      	bhi.n	8008e92 <HAL_TIMEx_ConfigBreakInput+0x5e>
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d05f      	beq.n	8008f0a <HAL_TIMEx_ConfigBreakInput+0xd6>
 8008e4a:	1e5c      	subs	r4, r3, #1
 8008e4c:	2c1f      	cmp	r4, #31
 8008e4e:	d811      	bhi.n	8008e74 <HAL_TIMEx_ConfigBreakInput+0x40>
 8008e50:	e8df f004 	tbb	[pc, r4]
 8008e54:	64107f79 	.word	0x64107f79
 8008e58:	6a101010 	.word	0x6a101010
 8008e5c:	10101010 	.word	0x10101010
 8008e60:	70101010 	.word	0x70101010
 8008e64:	10101010 	.word	0x10101010
 8008e68:	10101010 	.word	0x10101010
 8008e6c:	10101010 	.word	0x10101010
 8008e70:	5f101010 	.word	0x5f101010
      bkin_polarity_bitpos = 0U;
 8008e74:	f04f 0c00 	mov.w	ip, #0
      bkin_enable_bitpos = 0U;
 8008e78:	4664      	mov	r4, ip
      bkin_polarity_mask = 0U;
 8008e7a:	46e6      	mov	lr, ip
      bkin_enable_mask = 0U;
 8008e7c:	4663      	mov	r3, ip
  switch (BreakInput)
 8008e7e:	2901      	cmp	r1, #1
 8008e80:	d012      	beq.n	8008ea8 <HAL_TIMEx_ConfigBreakInput+0x74>
 8008e82:	2902      	cmp	r1, #2
 8008e84:	d027      	beq.n	8008ed6 <HAL_TIMEx_ConfigBreakInput+0xa2>
  __HAL_UNLOCK(htim);
 8008e86:	2200      	movs	r2, #0
  switch (BreakInput)
 8008e88:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8008e8a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	bd30      	pop	{r4, r5, pc}
  switch (sBreakInputConfig->Source)
 8008e92:	2b40      	cmp	r3, #64	; 0x40
      bkin_polarity_bitpos = 0U;
 8008e94:	f04f 0c00 	mov.w	ip, #0
  switch (sBreakInputConfig->Source)
 8008e98:	d034      	beq.n	8008f04 <HAL_TIMEx_ConfigBreakInput+0xd0>
 8008e9a:	2b80      	cmp	r3, #128	; 0x80
 8008e9c:	d15f      	bne.n	8008f5e <HAL_TIMEx_ConfigBreakInput+0x12a>
  switch (BreakInput)
 8008e9e:	2901      	cmp	r1, #1
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 8008ea0:	f04f 0407 	mov.w	r4, #7
      bkin_polarity_mask = 0U;
 8008ea4:	46e6      	mov	lr, ip
  switch (BreakInput)
 8008ea6:	d1ec      	bne.n	8008e82 <HAL_TIMEx_ConfigBreakInput+0x4e>
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008ea8:	6851      	ldr	r1, [r2, #4]
      tmporx = htim->Instance->AF1;
 8008eaa:	6805      	ldr	r5, [r0, #0]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008eac:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008eae:	40a1      	lsls	r1, r4
      tmporx = htim->Instance->AF1;
 8008eb0:	6e2c      	ldr	r4, [r5, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008eb2:	4061      	eors	r1, r4
 8008eb4:	400b      	ands	r3, r1
 8008eb6:	4063      	eors	r3, r4
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008eb8:	fa02 fc0c 	lsl.w	ip, r2, ip
 8008ebc:	ea8c 0c03 	eor.w	ip, ip, r3
 8008ec0:	ea0c 0e0e 	and.w	lr, ip, lr
 8008ec4:	ea8e 0303 	eor.w	r3, lr, r3
  __HAL_UNLOCK(htim);
 8008ec8:	2200      	movs	r2, #0
      htim->Instance->AF1 = tmporx;
 8008eca:	662b      	str	r3, [r5, #96]	; 0x60
  HAL_StatusTypeDef status = HAL_OK;
 8008ecc:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8008ece:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	bd30      	pop	{r4, r5, pc}
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008ed6:	6851      	ldr	r1, [r2, #4]
      tmporx = htim->Instance->AF2;
 8008ed8:	6805      	ldr	r5, [r0, #0]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008eda:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008edc:	40a1      	lsls	r1, r4
      tmporx = htim->Instance->AF2;
 8008ede:	6e6c      	ldr	r4, [r5, #100]	; 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008ee0:	4061      	eors	r1, r4
 8008ee2:	400b      	ands	r3, r1
 8008ee4:	4063      	eors	r3, r4
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008ee6:	fa02 fc0c 	lsl.w	ip, r2, ip
 8008eea:	ea8c 0c03 	eor.w	ip, ip, r3
 8008eee:	ea0c 0e0e 	and.w	lr, ip, lr
 8008ef2:	ea8e 0303 	eor.w	r3, lr, r3
  __HAL_UNLOCK(htim);
 8008ef6:	2200      	movs	r2, #0
      htim->Instance->AF2 = tmporx;
 8008ef8:	666b      	str	r3, [r5, #100]	; 0x64
  HAL_StatusTypeDef status = HAL_OK;
 8008efa:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8008efc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	bd30      	pop	{r4, r5, pc}
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 8008f04:	2406      	movs	r4, #6
      bkin_polarity_mask = 0U;
 8008f06:	46e6      	mov	lr, ip
 8008f08:	e7b9      	b.n	8008e7e <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_polarity_bitpos = 0U;
 8008f0a:	469c      	mov	ip, r3
      bkin_enable_bitpos = 0U;
 8008f0c:	461c      	mov	r4, r3
      bkin_polarity_mask = 0U;
 8008f0e:	469e      	mov	lr, r3
 8008f10:	e7b5      	b.n	8008e7e <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_polarity_bitpos = 0U;
 8008f12:	f04f 0c00 	mov.w	ip, #0
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 8008f16:	2405      	movs	r4, #5
      bkin_polarity_mask = 0U;
 8008f18:	46e6      	mov	lr, ip
      break;
 8008f1a:	e7b0      	b.n	8008e7e <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8008f1c:	f04f 0c0b 	mov.w	ip, #11
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8008f20:	2402      	movs	r4, #2
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8008f22:	f44f 6e00 	mov.w	lr, #2048	; 0x800
      break;
 8008f26:	e7aa      	b.n	8008e7e <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 8008f28:	f04f 0c0c 	mov.w	ip, #12
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 8008f2c:	2403      	movs	r4, #3
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 8008f2e:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
      break;
 8008f32:	e7a4      	b.n	8008e7e <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 8008f34:	f04f 0c0d 	mov.w	ip, #13
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 8008f38:	2404      	movs	r4, #4
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 8008f3a:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
      break;
 8008f3e:	e79e      	b.n	8008e7e <HAL_TIMEx_ConfigBreakInput+0x4a>
  __HAL_LOCK(htim);
 8008f40:	2302      	movs	r3, #2
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	4770      	bx	lr
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8008f46:	f04f 0c09 	mov.w	ip, #9
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8008f4a:	2400      	movs	r4, #0
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8008f4c:	f44f 7e00 	mov.w	lr, #512	; 0x200
 8008f50:	e795      	b.n	8008e7e <HAL_TIMEx_ConfigBreakInput+0x4a>
  switch (sBreakInputConfig->Source)
 8008f52:	f04f 0c0a 	mov.w	ip, #10
 8008f56:	2401      	movs	r4, #1
 8008f58:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 8008f5c:	e78f      	b.n	8008e7e <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_enable_bitpos = 0U;
 8008f5e:	4664      	mov	r4, ip
      bkin_polarity_mask = 0U;
 8008f60:	46e6      	mov	lr, ip
      bkin_enable_mask = 0U;
 8008f62:	4663      	mov	r3, ip
 8008f64:	e78b      	b.n	8008e7e <HAL_TIMEx_ConfigBreakInput+0x4a>
 8008f66:	bf00      	nop

08008f68 <HAL_TIMEx_EnableDeadTimePreload>:
{
 8008f68:	4603      	mov	r3, r0
}
 8008f6a:	2000      	movs	r0, #0
  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f74:	6553      	str	r3, [r2, #84]	; 0x54
}
 8008f76:	4770      	bx	lr

08008f78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f78:	b538      	push	{r3, r4, r5, lr}
 8008f7a:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f7c:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f7e:	6882      	ldr	r2, [r0, #8]
 8008f80:	6900      	ldr	r0, [r0, #16]
 8008f82:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f84:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f86:	4302      	orrs	r2, r0
 8008f88:	430a      	orrs	r2, r1
 8008f8a:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f8c:	49b1      	ldr	r1, [pc, #708]	; (8009254 <UART_SetConfig+0x2dc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f8e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f90:	4029      	ands	r1, r5
 8008f92:	430a      	orrs	r2, r1
 8008f94:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f96:	685a      	ldr	r2, [r3, #4]
 8008f98:	68e1      	ldr	r1, [r4, #12]
 8008f9a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008f9e:	430a      	orrs	r2, r1
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008fa0:	49ad      	ldr	r1, [pc, #692]	; (8009258 <UART_SetConfig+0x2e0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fa2:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008fa4:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008fa6:	69a2      	ldr	r2, [r4, #24]
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008fa8:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008faa:	d07f      	beq.n	80090ac <UART_SetConfig+0x134>
    tmpreg |= huart->Init.OneBitSampling;
 8008fac:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008fae:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8008fb2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8008fb6:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008fb8:	430a      	orrs	r2, r1
 8008fba:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fbe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008fc0:	f022 020f 	bic.w	r2, r2, #15
 8008fc4:	430a      	orrs	r2, r1
 8008fc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008fc8:	4aa4      	ldr	r2, [pc, #656]	; (800925c <UART_SetConfig+0x2e4>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d027      	beq.n	800901e <UART_SetConfig+0xa6>
 8008fce:	4aa4      	ldr	r2, [pc, #656]	; (8009260 <UART_SetConfig+0x2e8>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d04a      	beq.n	800906a <UART_SetConfig+0xf2>
 8008fd4:	4aa3      	ldr	r2, [pc, #652]	; (8009264 <UART_SetConfig+0x2ec>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	f000 8110 	beq.w	80091fc <UART_SetConfig+0x284>
 8008fdc:	4aa2      	ldr	r2, [pc, #648]	; (8009268 <UART_SetConfig+0x2f0>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	f000 80b7 	beq.w	8009152 <UART_SetConfig+0x1da>
 8008fe4:	4aa1      	ldr	r2, [pc, #644]	; (800926c <UART_SetConfig+0x2f4>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d111      	bne.n	800900e <UART_SetConfig+0x96>
 8008fea:	4ba1      	ldr	r3, [pc, #644]	; (8009270 <UART_SetConfig+0x2f8>)
 8008fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ff0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ff8:	f000 8125 	beq.w	8009246 <UART_SetConfig+0x2ce>
 8008ffc:	f200 80d4 	bhi.w	80091a8 <UART_SetConfig+0x230>
 8009000:	2b00      	cmp	r3, #0
 8009002:	f000 80d8 	beq.w	80091b6 <UART_SetConfig+0x23e>
 8009006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800900a:	f000 80ae 	beq.w	800916a <UART_SetConfig+0x1f2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 800900e:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009010:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8009012:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 8009016:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 800901a:	66a2      	str	r2, [r4, #104]	; 0x68

  return ret;
}
 800901c:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800901e:	4b94      	ldr	r3, [pc, #592]	; (8009270 <UART_SetConfig+0x2f8>)
 8009020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009024:	f003 0303 	and.w	r3, r3, #3
 8009028:	3b01      	subs	r3, #1
 800902a:	2b02      	cmp	r3, #2
 800902c:	f240 808b 	bls.w	8009146 <UART_SetConfig+0x1ce>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009030:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009034:	f000 8102 	beq.w	800923c <UART_SetConfig+0x2c4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009038:	f7fe fe94 	bl	8007d64 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800903c:	2800      	cmp	r0, #0
 800903e:	d053      	beq.n	80090e8 <UART_SetConfig+0x170>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009040:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009042:	6862      	ldr	r2, [r4, #4]
 8009044:	4b8b      	ldr	r3, [pc, #556]	; (8009274 <UART_SetConfig+0x2fc>)
 8009046:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800904a:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800904e:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009052:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8009056:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800905a:	f1a3 0210 	sub.w	r2, r3, #16
 800905e:	428a      	cmp	r2, r1
 8009060:	d8d5      	bhi.n	800900e <UART_SetConfig+0x96>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009062:	6822      	ldr	r2, [r4, #0]
 8009064:	2000      	movs	r0, #0
 8009066:	60d3      	str	r3, [r2, #12]
 8009068:	e7d2      	b.n	8009010 <UART_SetConfig+0x98>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800906a:	4b81      	ldr	r3, [pc, #516]	; (8009270 <UART_SetConfig+0x2f8>)
 800906c:	4a82      	ldr	r2, [pc, #520]	; (8009278 <UART_SetConfig+0x300>)
 800906e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009072:	f003 030c 	and.w	r3, r3, #12
 8009076:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009078:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800907c:	d07b      	beq.n	8009176 <UART_SetConfig+0x1fe>
    switch (clocksource)
 800907e:	2b08      	cmp	r3, #8
 8009080:	d8c5      	bhi.n	800900e <UART_SetConfig+0x96>
 8009082:	a201      	add	r2, pc, #4	; (adr r2, 8009088 <UART_SetConfig+0x110>)
 8009084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009088:	080091b1 	.word	0x080091b1
 800908c:	08009039 	.word	0x08009039
 8009090:	08009233 	.word	0x08009233
 8009094:	0800900f 	.word	0x0800900f
 8009098:	08009171 	.word	0x08009171
 800909c:	0800900f 	.word	0x0800900f
 80090a0:	0800900f 	.word	0x0800900f
 80090a4:	0800900f 	.word	0x0800900f
 80090a8:	08009223 	.word	0x08009223
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090ac:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 80090b0:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80090b4:	430a      	orrs	r2, r1
 80090b6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80090b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090bc:	486c      	ldr	r0, [pc, #432]	; (8009270 <UART_SetConfig+0x2f8>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80090be:	f022 020f 	bic.w	r2, r2, #15
 80090c2:	430a      	orrs	r2, r1
 80090c4:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090c6:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80090ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80090ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090d2:	f000 80ac 	beq.w	800922e <UART_SetConfig+0x2b6>
 80090d6:	d809      	bhi.n	80090ec <UART_SetConfig+0x174>
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d037      	beq.n	800914c <UART_SetConfig+0x1d4>
 80090dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090e0:	d195      	bne.n	800900e <UART_SetConfig+0x96>
        pclk = HAL_RCC_GetSysClockFreq();
 80090e2:	f7fe fdf5 	bl	8007cd0 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80090e6:	b930      	cbnz	r0, 80090f6 <UART_SetConfig+0x17e>
 80090e8:	2000      	movs	r0, #0
 80090ea:	e791      	b.n	8009010 <UART_SetConfig+0x98>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80090f0:	d18d      	bne.n	800900e <UART_SetConfig+0x96>
        pclk = (uint32_t) LSE_VALUE;
 80090f2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80090f6:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80090f8:	4b5e      	ldr	r3, [pc, #376]	; (8009274 <UART_SetConfig+0x2fc>)
 80090fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80090fc:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009100:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8009104:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009108:	4299      	cmp	r1, r3
 800910a:	d880      	bhi.n	800900e <UART_SetConfig+0x96>
 800910c:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8009110:	f63f af7d 	bhi.w	800900e <UART_SetConfig+0x96>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009114:	2300      	movs	r3, #0
 8009116:	4619      	mov	r1, r3
 8009118:	f7f7 fc34 	bl	8000984 <__aeabi_uldivmod>
 800911c:	0209      	lsls	r1, r1, #8
 800911e:	0203      	lsls	r3, r0, #8
 8009120:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8009124:	0868      	lsrs	r0, r5, #1
 8009126:	1818      	adds	r0, r3, r0
 8009128:	462a      	mov	r2, r5
 800912a:	f04f 0300 	mov.w	r3, #0
 800912e:	f141 0100 	adc.w	r1, r1, #0
 8009132:	f7f7 fc27 	bl	8000984 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009136:	4a51      	ldr	r2, [pc, #324]	; (800927c <UART_SetConfig+0x304>)
 8009138:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800913c:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800913e:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009140:	f63f af65 	bhi.w	800900e <UART_SetConfig+0x96>
 8009144:	e78d      	b.n	8009062 <UART_SetConfig+0xea>
 8009146:	4a4e      	ldr	r2, [pc, #312]	; (8009280 <UART_SetConfig+0x308>)
 8009148:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 800914a:	e795      	b.n	8009078 <UART_SetConfig+0x100>
        pclk = HAL_RCC_GetPCLK1Freq();
 800914c:	f7fe fdf8 	bl	8007d40 <HAL_RCC_GetPCLK1Freq>
        break;
 8009150:	e7c9      	b.n	80090e6 <UART_SetConfig+0x16e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009152:	4b47      	ldr	r3, [pc, #284]	; (8009270 <UART_SetConfig+0x2f8>)
 8009154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009158:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800915c:	2b80      	cmp	r3, #128	; 0x80
 800915e:	d072      	beq.n	8009246 <UART_SetConfig+0x2ce>
 8009160:	d862      	bhi.n	8009228 <UART_SetConfig+0x2b0>
 8009162:	b343      	cbz	r3, 80091b6 <UART_SetConfig+0x23e>
 8009164:	2b40      	cmp	r3, #64	; 0x40
 8009166:	f47f af52 	bne.w	800900e <UART_SetConfig+0x96>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800916a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800916e:	d062      	beq.n	8009236 <UART_SetConfig+0x2be>
        pclk = HAL_RCC_GetSysClockFreq();
 8009170:	f7fe fdae 	bl	8007cd0 <HAL_RCC_GetSysClockFreq>
        break;
 8009174:	e762      	b.n	800903c <UART_SetConfig+0xc4>
    switch (clocksource)
 8009176:	2b08      	cmp	r3, #8
 8009178:	f63f af49 	bhi.w	800900e <UART_SetConfig+0x96>
 800917c:	a201      	add	r2, pc, #4	; (adr r2, 8009184 <UART_SetConfig+0x20c>)
 800917e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009182:	bf00      	nop
 8009184:	080091bd 	.word	0x080091bd
 8009188:	0800923d 	.word	0x0800923d
 800918c:	08009243 	.word	0x08009243
 8009190:	0800900f 	.word	0x0800900f
 8009194:	08009237 	.word	0x08009237
 8009198:	0800900f 	.word	0x0800900f
 800919c:	0800900f 	.word	0x0800900f
 80091a0:	0800900f 	.word	0x0800900f
 80091a4:	080091c7 	.word	0x080091c7
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091ac:	d036      	beq.n	800921c <UART_SetConfig+0x2a4>
 80091ae:	e72e      	b.n	800900e <UART_SetConfig+0x96>
        pclk = HAL_RCC_GetPCLK1Freq();
 80091b0:	f7fe fdc6 	bl	8007d40 <HAL_RCC_GetPCLK1Freq>
        break;
 80091b4:	e742      	b.n	800903c <UART_SetConfig+0xc4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091b6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80091ba:	d1f9      	bne.n	80091b0 <UART_SetConfig+0x238>
        pclk = HAL_RCC_GetPCLK1Freq();
 80091bc:	f7fe fdc0 	bl	8007d40 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80091c0:	2800      	cmp	r0, #0
 80091c2:	d091      	beq.n	80090e8 <UART_SetConfig+0x170>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80091c6:	6862      	ldr	r2, [r4, #4]
 80091c8:	4b2a      	ldr	r3, [pc, #168]	; (8009274 <UART_SetConfig+0x2fc>)
 80091ca:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80091ce:	fbb0 f0f1 	udiv	r0, r0, r1
 80091d2:	0853      	lsrs	r3, r2, #1
 80091d4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091d8:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091dc:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091e0:	f1a0 0210 	sub.w	r2, r0, #16
 80091e4:	429a      	cmp	r2, r3
 80091e6:	f63f af12 	bhi.w	800900e <UART_SetConfig+0x96>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80091ea:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 80091ee:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80091f0:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80091f2:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 80091f6:	4318      	orrs	r0, r3
 80091f8:	60d0      	str	r0, [r2, #12]
 80091fa:	e775      	b.n	80090e8 <UART_SetConfig+0x170>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091fc:	4b1c      	ldr	r3, [pc, #112]	; (8009270 <UART_SetConfig+0x2f8>)
 80091fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009202:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009206:	2b20      	cmp	r3, #32
 8009208:	d01d      	beq.n	8009246 <UART_SetConfig+0x2ce>
 800920a:	d804      	bhi.n	8009216 <UART_SetConfig+0x29e>
 800920c:	2b00      	cmp	r3, #0
 800920e:	d0d2      	beq.n	80091b6 <UART_SetConfig+0x23e>
 8009210:	2b10      	cmp	r3, #16
 8009212:	d0aa      	beq.n	800916a <UART_SetConfig+0x1f2>
 8009214:	e6fb      	b.n	800900e <UART_SetConfig+0x96>
 8009216:	2b30      	cmp	r3, #48	; 0x30
 8009218:	f47f aef9 	bne.w	800900e <UART_SetConfig+0x96>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800921c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009220:	d0d1      	beq.n	80091c6 <UART_SetConfig+0x24e>
    switch (clocksource)
 8009222:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009226:	e70c      	b.n	8009042 <UART_SetConfig+0xca>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009228:	2bc0      	cmp	r3, #192	; 0xc0
 800922a:	d0f7      	beq.n	800921c <UART_SetConfig+0x2a4>
 800922c:	e6ef      	b.n	800900e <UART_SetConfig+0x96>
 800922e:	4815      	ldr	r0, [pc, #84]	; (8009284 <UART_SetConfig+0x30c>)
 8009230:	e761      	b.n	80090f6 <UART_SetConfig+0x17e>
        pclk = (uint32_t) HSI_VALUE;
 8009232:	4814      	ldr	r0, [pc, #80]	; (8009284 <UART_SetConfig+0x30c>)
 8009234:	e705      	b.n	8009042 <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetSysClockFreq();
 8009236:	f7fe fd4b 	bl	8007cd0 <HAL_RCC_GetSysClockFreq>
        break;
 800923a:	e7c1      	b.n	80091c0 <UART_SetConfig+0x248>
        pclk = HAL_RCC_GetPCLK2Freq();
 800923c:	f7fe fd92 	bl	8007d64 <HAL_RCC_GetPCLK2Freq>
        break;
 8009240:	e7be      	b.n	80091c0 <UART_SetConfig+0x248>
        pclk = (uint32_t) HSI_VALUE;
 8009242:	4810      	ldr	r0, [pc, #64]	; (8009284 <UART_SetConfig+0x30c>)
 8009244:	e7bf      	b.n	80091c6 <UART_SetConfig+0x24e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009246:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 800924a:	480e      	ldr	r0, [pc, #56]	; (8009284 <UART_SetConfig+0x30c>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800924c:	f47f aef9 	bne.w	8009042 <UART_SetConfig+0xca>
 8009250:	e7b9      	b.n	80091c6 <UART_SetConfig+0x24e>
 8009252:	bf00      	nop
 8009254:	cfff69f3 	.word	0xcfff69f3
 8009258:	40008000 	.word	0x40008000
 800925c:	40013800 	.word	0x40013800
 8009260:	40004400 	.word	0x40004400
 8009264:	40004800 	.word	0x40004800
 8009268:	40004c00 	.word	0x40004c00
 800926c:	40005000 	.word	0x40005000
 8009270:	40021000 	.word	0x40021000
 8009274:	0800b0e8 	.word	0x0800b0e8
 8009278:	0800b0d8 	.word	0x0800b0d8
 800927c:	000ffcff 	.word	0x000ffcff
 8009280:	0800b0d4 	.word	0x0800b0d4
 8009284:	00f42400 	.word	0x00f42400

08009288 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009288:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800928a:	07da      	lsls	r2, r3, #31
{
 800928c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800928e:	d506      	bpl.n	800929e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009290:	6801      	ldr	r1, [r0, #0]
 8009292:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8009294:	684a      	ldr	r2, [r1, #4]
 8009296:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800929a:	4322      	orrs	r2, r4
 800929c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800929e:	079c      	lsls	r4, r3, #30
 80092a0:	d506      	bpl.n	80092b0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092a2:	6801      	ldr	r1, [r0, #0]
 80092a4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80092a6:	684a      	ldr	r2, [r1, #4]
 80092a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80092ac:	4322      	orrs	r2, r4
 80092ae:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092b0:	0759      	lsls	r1, r3, #29
 80092b2:	d506      	bpl.n	80092c2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092b4:	6801      	ldr	r1, [r0, #0]
 80092b6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80092b8:	684a      	ldr	r2, [r1, #4]
 80092ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80092be:	4322      	orrs	r2, r4
 80092c0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092c2:	071a      	lsls	r2, r3, #28
 80092c4:	d506      	bpl.n	80092d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092c6:	6801      	ldr	r1, [r0, #0]
 80092c8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80092ca:	684a      	ldr	r2, [r1, #4]
 80092cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80092d0:	4322      	orrs	r2, r4
 80092d2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092d4:	06dc      	lsls	r4, r3, #27
 80092d6:	d506      	bpl.n	80092e6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092d8:	6801      	ldr	r1, [r0, #0]
 80092da:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80092dc:	688a      	ldr	r2, [r1, #8]
 80092de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80092e2:	4322      	orrs	r2, r4
 80092e4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092e6:	0699      	lsls	r1, r3, #26
 80092e8:	d506      	bpl.n	80092f8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092ea:	6801      	ldr	r1, [r0, #0]
 80092ec:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80092ee:	688a      	ldr	r2, [r1, #8]
 80092f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092f4:	4322      	orrs	r2, r4
 80092f6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092f8:	065a      	lsls	r2, r3, #25
 80092fa:	d509      	bpl.n	8009310 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092fc:	6801      	ldr	r1, [r0, #0]
 80092fe:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8009300:	684a      	ldr	r2, [r1, #4]
 8009302:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8009306:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009308:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800930c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800930e:	d00b      	beq.n	8009328 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009310:	061b      	lsls	r3, r3, #24
 8009312:	d506      	bpl.n	8009322 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009314:	6802      	ldr	r2, [r0, #0]
 8009316:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8009318:	6853      	ldr	r3, [r2, #4]
 800931a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800931e:	430b      	orrs	r3, r1
 8009320:	6053      	str	r3, [r2, #4]
  }
}
 8009322:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009326:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009328:	684a      	ldr	r2, [r1, #4]
 800932a:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800932c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8009330:	4322      	orrs	r2, r4
 8009332:	604a      	str	r2, [r1, #4]
 8009334:	e7ec      	b.n	8009310 <UART_AdvFeatureConfig+0x88>
 8009336:	bf00      	nop

08009338 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800933c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009340:	6805      	ldr	r5, [r0, #0]
{
 8009342:	4681      	mov	r9, r0
 8009344:	460f      	mov	r7, r1
 8009346:	4616      	mov	r6, r2
 8009348:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800934a:	e002      	b.n	8009352 <UART_WaitOnFlagUntilTimeout+0x1a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800934c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009350:	d10c      	bne.n	800936c <UART_WaitOnFlagUntilTimeout+0x34>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009352:	69ec      	ldr	r4, [r5, #28]
 8009354:	ea37 0304 	bics.w	r3, r7, r4
 8009358:	bf0c      	ite	eq
 800935a:	f04f 0c01 	moveq.w	ip, #1
 800935e:	f04f 0c00 	movne.w	ip, #0
 8009362:	45b4      	cmp	ip, r6
 8009364:	d0f2      	beq.n	800934c <UART_WaitOnFlagUntilTimeout+0x14>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8009366:	2000      	movs	r0, #0
}
 8009368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800936c:	f7fc fb94 	bl	8005a98 <HAL_GetTick>
 8009370:	eba0 000a 	sub.w	r0, r0, sl
 8009374:	4540      	cmp	r0, r8
 8009376:	d82d      	bhi.n	80093d4 <UART_WaitOnFlagUntilTimeout+0x9c>
 8009378:	f1b8 0f00 	cmp.w	r8, #0
 800937c:	d02a      	beq.n	80093d4 <UART_WaitOnFlagUntilTimeout+0x9c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800937e:	f8d9 5000 	ldr.w	r5, [r9]
 8009382:	682b      	ldr	r3, [r5, #0]
 8009384:	0759      	lsls	r1, r3, #29
 8009386:	462a      	mov	r2, r5
 8009388:	d5e3      	bpl.n	8009352 <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800938a:	69eb      	ldr	r3, [r5, #28]
 800938c:	051b      	lsls	r3, r3, #20
 800938e:	d5e0      	bpl.n	8009352 <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009390:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009394:	622b      	str	r3, [r5, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009396:	e852 3f00 	ldrex	r3, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800939a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939e:	e842 3100 	strex	r1, r3, [r2]
 80093a2:	2900      	cmp	r1, #0
 80093a4:	d1f7      	bne.n	8009396 <UART_WaitOnFlagUntilTimeout+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a6:	f102 0308 	add.w	r3, r2, #8
 80093aa:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093ae:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b2:	f102 0008 	add.w	r0, r2, #8
 80093b6:	e840 3100 	strex	r1, r3, [r0]
 80093ba:	2900      	cmp	r1, #0
 80093bc:	d1f3      	bne.n	80093a6 <UART_WaitOnFlagUntilTimeout+0x6e>
          huart->gState = HAL_UART_STATE_READY;
 80093be:	2320      	movs	r3, #32
 80093c0:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84
          __HAL_UNLOCK(huart);
 80093c4:	f889 1080 	strb.w	r1, [r9, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80093c8:	f8c9 3088 	str.w	r3, [r9, #136]	; 0x88
          return HAL_TIMEOUT;
 80093cc:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80093ce:	f8c9 308c 	str.w	r3, [r9, #140]	; 0x8c
          return HAL_TIMEOUT;
 80093d2:	e7c9      	b.n	8009368 <UART_WaitOnFlagUntilTimeout+0x30>
 80093d4:	f8d9 2000 	ldr.w	r2, [r9]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d8:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80093dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e0:	e842 3100 	strex	r1, r3, [r2]
 80093e4:	2900      	cmp	r1, #0
 80093e6:	d1f7      	bne.n	80093d8 <UART_WaitOnFlagUntilTimeout+0xa0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e8:	f102 0308 	add.w	r3, r2, #8
 80093ec:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093f0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f4:	f102 0008 	add.w	r0, r2, #8
 80093f8:	e840 3100 	strex	r1, r3, [r0]
 80093fc:	2900      	cmp	r1, #0
 80093fe:	d1f3      	bne.n	80093e8 <UART_WaitOnFlagUntilTimeout+0xb0>
        huart->gState = HAL_UART_STATE_READY;
 8009400:	2320      	movs	r3, #32
 8009402:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8009406:	f889 1080 	strb.w	r1, [r9, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800940a:	f8c9 3088 	str.w	r3, [r9, #136]	; 0x88
        return HAL_TIMEOUT;
 800940e:	2003      	movs	r0, #3
 8009410:	e7aa      	b.n	8009368 <UART_WaitOnFlagUntilTimeout+0x30>
 8009412:	bf00      	nop

08009414 <UART_CheckIdleState>:
{
 8009414:	b570      	push	{r4, r5, r6, lr}
 8009416:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009418:	2600      	movs	r6, #0
{
 800941a:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800941c:	f8c0 608c 	str.w	r6, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8009420:	f7fc fb3a 	bl	8005a98 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 800942a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800942c:	d40e      	bmi.n	800944c <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	075b      	lsls	r3, r3, #29
 8009432:	d41a      	bmi.n	800946a <UART_CheckIdleState+0x56>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009434:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8009436:	2220      	movs	r2, #32
  return HAL_OK;
 8009438:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800943a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800943e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009442:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009446:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8009448:	b002      	add	sp, #8
 800944a:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800944c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009450:	9300      	str	r3, [sp, #0]
 8009452:	4632      	mov	r2, r6
 8009454:	4603      	mov	r3, r0
 8009456:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800945a:	4620      	mov	r0, r4
 800945c:	f7ff ff6c 	bl	8009338 <UART_WaitOnFlagUntilTimeout>
 8009460:	b978      	cbnz	r0, 8009482 <UART_CheckIdleState+0x6e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009462:	6823      	ldr	r3, [r4, #0]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	075b      	lsls	r3, r3, #29
 8009468:	d5e4      	bpl.n	8009434 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800946a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	2200      	movs	r2, #0
 8009472:	462b      	mov	r3, r5
 8009474:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009478:	4620      	mov	r0, r4
 800947a:	f7ff ff5d 	bl	8009338 <UART_WaitOnFlagUntilTimeout>
 800947e:	2800      	cmp	r0, #0
 8009480:	d0d8      	beq.n	8009434 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 8009482:	2003      	movs	r0, #3
}
 8009484:	b002      	add	sp, #8
 8009486:	bd70      	pop	{r4, r5, r6, pc}

08009488 <HAL_UART_Init>:
  if (huart == NULL)
 8009488:	b380      	cbz	r0, 80094ec <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 800948a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800948e:	b510      	push	{r4, lr}
 8009490:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8009492:	b333      	cbz	r3, 80094e2 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8009494:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009496:	2324      	movs	r3, #36	; 0x24
 8009498:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800949c:	6813      	ldr	r3, [r2, #0]
 800949e:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 80094a2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80094a4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80094a6:	f7ff fd67 	bl	8008f78 <UART_SetConfig>
 80094aa:	2801      	cmp	r0, #1
 80094ac:	d017      	beq.n	80094de <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80094b0:	b98b      	cbnz	r3, 80094d6 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094b2:	6823      	ldr	r3, [r4, #0]
 80094b4:	685a      	ldr	r2, [r3, #4]
 80094b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094bc:	689a      	ldr	r2, [r3, #8]
 80094be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80094c2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80094ca:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80094cc:	601a      	str	r2, [r3, #0]
}
 80094ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80094d2:	f7ff bf9f 	b.w	8009414 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 80094d6:	4620      	mov	r0, r4
 80094d8:	f7ff fed6 	bl	8009288 <UART_AdvFeatureConfig>
 80094dc:	e7e9      	b.n	80094b2 <HAL_UART_Init+0x2a>
}
 80094de:	2001      	movs	r0, #1
 80094e0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80094e2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80094e6:	f7fc fa13 	bl	8005910 <HAL_UART_MspInit>
 80094ea:	e7d3      	b.n	8009494 <HAL_UART_Init+0xc>
}
 80094ec:	2001      	movs	r0, #1
 80094ee:	4770      	bx	lr

080094f0 <UARTEx_SetNbDataToProcess.part.0>:
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80094f0:	6803      	ldr	r3, [r0, #0]
 80094f2:	6899      	ldr	r1, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80094f4:	689b      	ldr	r3, [r3, #8]
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 80094f6:	b430      	push	{r4, r5}
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80094f8:	ea4f 7c53 	mov.w	ip, r3, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094fc:	4d0a      	ldr	r5, [pc, #40]	; (8009528 <UARTEx_SetNbDataToProcess.part.0+0x38>)
                               (uint16_t)denominator[tx_fifo_threshold];
 80094fe:	4c0b      	ldr	r4, [pc, #44]	; (800952c <UARTEx_SetNbDataToProcess.part.0+0x3c>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009500:	f815 200c 	ldrb.w	r2, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009504:	f3c1 6142 	ubfx	r1, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009508:	00d2      	lsls	r2, r2, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800950a:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 800950c:	f814 500c 	ldrb.w	r5, [r4, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 8009510:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009512:	fbb2 f2f5 	udiv	r2, r2, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009516:	00db      	lsls	r3, r3, #3
  }
}
 8009518:	bc30      	pop	{r4, r5}
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800951a:	fbb3 f3f1 	udiv	r3, r3, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800951e:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009522:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 8009526:	4770      	bx	lr
 8009528:	0800b108 	.word	0x0800b108
 800952c:	0800b100 	.word	0x0800b100

08009530 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8009530:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009534:	2b01      	cmp	r3, #1
 8009536:	d017      	beq.n	8009568 <HAL_UARTEx_DisableFifoMode+0x38>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009538:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800953a:	2324      	movs	r3, #36	; 0x24
{
 800953c:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 800953e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009542:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8009544:	6814      	ldr	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009546:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 8009548:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800954c:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8009550:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009552:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009554:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(huart);
 8009556:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800955a:	2220      	movs	r2, #32
 800955c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
}
 8009560:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8009564:	4618      	mov	r0, r3
}
 8009566:	4770      	bx	lr
  __HAL_LOCK(huart);
 8009568:	2002      	movs	r0, #2
}
 800956a:	4770      	bx	lr

0800956c <HAL_UARTEx_SetTxFifoThreshold>:
{
 800956c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800956e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009572:	2b01      	cmp	r3, #1
 8009574:	d022      	beq.n	80095bc <HAL_UARTEx_SetTxFifoThreshold+0x50>
 8009576:	2201      	movs	r2, #1
 8009578:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800957c:	6803      	ldr	r3, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800957e:	2224      	movs	r2, #36	; 0x24
 8009580:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009584:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	f022 0201 	bic.w	r2, r2, #1
 800958c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800958e:	689a      	ldr	r2, [r3, #8]
 8009590:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8009594:	4311      	orrs	r1, r2
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009596:	6e42      	ldr	r2, [r0, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009598:	6099      	str	r1, [r3, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800959a:	4604      	mov	r4, r0
 800959c:	b152      	cbz	r2, 80095b4 <HAL_UARTEx_SetTxFifoThreshold+0x48>
 800959e:	f7ff ffa7 	bl	80094f0 <UARTEx_SetNbDataToProcess.part.0>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095a2:	6803      	ldr	r3, [r0, #0]
 80095a4:	601d      	str	r5, [r3, #0]
  __HAL_UNLOCK(huart);
 80095a6:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80095a8:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 80095aa:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 80095ae:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
}
 80095b2:	bd38      	pop	{r3, r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80095b4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80095b8:	6682      	str	r2, [r0, #104]	; 0x68
 80095ba:	e7f3      	b.n	80095a4 <HAL_UARTEx_SetTxFifoThreshold+0x38>
  __HAL_LOCK(huart);
 80095bc:	2002      	movs	r0, #2
}
 80095be:	bd38      	pop	{r3, r4, r5, pc}

080095c0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80095c0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80095c2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d022      	beq.n	8009610 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 80095ca:	2201      	movs	r2, #1
 80095cc:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095d0:	6803      	ldr	r3, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80095d2:	2224      	movs	r2, #36	; 0x24
 80095d4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095d8:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	f022 0201 	bic.w	r2, r2, #1
 80095e0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80095e2:	689a      	ldr	r2, [r3, #8]
 80095e4:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 80095e8:	4311      	orrs	r1, r2
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80095ea:	6e42      	ldr	r2, [r0, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80095ec:	6099      	str	r1, [r3, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80095ee:	4604      	mov	r4, r0
 80095f0:	b152      	cbz	r2, 8009608 <HAL_UARTEx_SetRxFifoThreshold+0x48>
 80095f2:	f7ff ff7d 	bl	80094f0 <UARTEx_SetNbDataToProcess.part.0>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095f6:	6803      	ldr	r3, [r0, #0]
 80095f8:	601d      	str	r5, [r3, #0]
  __HAL_UNLOCK(huart);
 80095fa:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80095fc:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 80095fe:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8009602:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
}
 8009606:	bd38      	pop	{r3, r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8009608:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800960c:	6682      	str	r2, [r0, #104]	; 0x68
 800960e:	e7f3      	b.n	80095f8 <HAL_UARTEx_SetRxFifoThreshold+0x38>
  __HAL_LOCK(huart);
 8009610:	2002      	movs	r0, #2
}
 8009612:	bd38      	pop	{r3, r4, r5, pc}

08009614 <LL_ADC_CommonInit>:
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8009614:	4b1b      	ldr	r3, [pc, #108]	; (8009684 <LL_ADC_CommonInit+0x70>)
 8009616:	4298      	cmp	r0, r3
{
 8009618:	b410      	push	{r4}
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 800961a:	d028      	beq.n	800966e <LL_ADC_CommonInit+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800961c:	4c1a      	ldr	r4, [pc, #104]	; (8009688 <LL_ADC_CommonInit+0x74>)
 800961e:	4b1b      	ldr	r3, [pc, #108]	; (800968c <LL_ADC_CommonInit+0x78>)
 8009620:	4a1b      	ldr	r2, [pc, #108]	; (8009690 <LL_ADC_CommonInit+0x7c>)
 8009622:	68a4      	ldr	r4, [r4, #8]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	6892      	ldr	r2, [r2, #8]
 8009628:	4323      	orrs	r3, r4
 800962a:	4313      	orrs	r3, r2
 800962c:	43db      	mvns	r3, r3
 800962e:	f003 0301 	and.w	r3, r3, #1
 8009632:	b183      	cbz	r3, 8009656 <LL_ADC_CommonInit+0x42>
  if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8009634:	684b      	ldr	r3, [r1, #4]
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8009636:	6884      	ldr	r4, [r0, #8]
 8009638:	4a16      	ldr	r2, [pc, #88]	; (8009694 <LL_ADC_CommonInit+0x80>)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800963a:	b183      	cbz	r3, 800965e <LL_ADC_CommonInit+0x4a>
      MODIFY_REG(ADCxy_COMMON->CCR,
 800963c:	4022      	ands	r2, r4
 800963e:	680c      	ldr	r4, [r1, #0]
 8009640:	4313      	orrs	r3, r2
 8009642:	4323      	orrs	r3, r4
 8009644:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 8009648:	4323      	orrs	r3, r4
 800964a:	4313      	orrs	r3, r2
 800964c:	6083      	str	r3, [r0, #8]
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
  }

  return status;
}
 800964e:	f85d 4b04 	ldr.w	r4, [sp], #4
  ErrorStatus status = SUCCESS;
 8009652:	2000      	movs	r0, #0
}
 8009654:	4770      	bx	lr
    status = ERROR;
 8009656:	2001      	movs	r0, #1
}
 8009658:	f85d 4b04 	ldr.w	r4, [sp], #4
 800965c:	4770      	bx	lr
      MODIFY_REG(ADCxy_COMMON->CCR,
 800965e:	6809      	ldr	r1, [r1, #0]
 8009660:	4022      	ands	r2, r4
 8009662:	430a      	orrs	r2, r1
 8009664:	6082      	str	r2, [r0, #8]
}
 8009666:	f85d 4b04 	ldr.w	r4, [sp], #4
  ErrorStatus status = SUCCESS;
 800966a:	4618      	mov	r0, r3
}
 800966c:	4770      	bx	lr
 800966e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8009672:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009676:	6892      	ldr	r2, [r2, #8]
 8009678:	689b      	ldr	r3, [r3, #8]
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 800967a:	4313      	orrs	r3, r2
 800967c:	43db      	mvns	r3, r3
 800967e:	f003 0301 	and.w	r3, r3, #1
 8009682:	e7d6      	b.n	8009632 <LL_ADC_CommonInit+0x1e>
 8009684:	50000300 	.word	0x50000300
 8009688:	50000400 	.word	0x50000400
 800968c:	50000500 	.word	0x50000500
 8009690:	50000600 	.word	0x50000600
 8009694:	ffc030e0 	.word	0xffc030e0

08009698 <LL_ADC_Init>:
 8009698:	6883      	ldr	r3, [r0, #8]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800969a:	f013 0301 	ands.w	r3, r3, #1
 800969e:	d112      	bne.n	80096c6 <LL_ADC_Init+0x2e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 80096a0:	4602      	mov	r2, r0
 80096a2:	68c0      	ldr	r0, [r0, #12]
{
 80096a4:	b410      	push	{r4}
    MODIFY_REG(ADCx->CFGR,
 80096a6:	f420 4c40 	bic.w	ip, r0, #49152	; 0xc000
  ErrorStatus status = SUCCESS;
 80096aa:	4618      	mov	r0, r3
    MODIFY_REG(ADCx->CFGR,
 80096ac:	e9d1 4300 	ldrd	r4, r3, [r1]
 80096b0:	6889      	ldr	r1, [r1, #8]
 80096b2:	4323      	orrs	r3, r4
 80096b4:	f02c 0c18 	bic.w	ip, ip, #24
 80096b8:	430b      	orrs	r3, r1
 80096ba:	ea43 030c 	orr.w	r3, r3, ip
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }

  return status;
}
 80096be:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(ADCx->CFGR,
 80096c2:	60d3      	str	r3, [r2, #12]
}
 80096c4:	4770      	bx	lr
    status = ERROR;
 80096c6:	2001      	movs	r0, #1
}
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop

080096cc <LL_ADC_REG_Init>:
 80096cc:	6882      	ldr	r2, [r0, #8]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80096ce:	07d3      	lsls	r3, r2, #31
 80096d0:	d418      	bmi.n	8009704 <LL_ADC_REG_Init+0x38>
{
 80096d2:	b430      	push	{r4, r5}
  if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80096d4:	684c      	ldr	r4, [r1, #4]
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80096d6:	4603      	mov	r3, r0
 80096d8:	b9b4      	cbnz	r4, 8009708 <LL_ADC_REG_Init+0x3c>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 80096da:	68c2      	ldr	r2, [r0, #12]
 80096dc:	4812      	ldr	r0, [pc, #72]	; (8009728 <LL_ADC_REG_Init+0x5c>)
 80096de:	4010      	ands	r0, r2
 80096e0:	680a      	ldr	r2, [r1, #0]
 80096e2:	4310      	orrs	r0, r2
 80096e4:	68ca      	ldr	r2, [r1, #12]
 80096e6:	4310      	orrs	r0, r2
 80096e8:	e9d1 5204 	ldrd	r5, r2, [r1, #16]
 80096ec:	ea40 0105 	orr.w	r1, r0, r5
 80096f0:	4311      	orrs	r1, r2
 80096f2:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80096f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096f6:	f022 020f 	bic.w	r2, r2, #15
 80096fa:	4322      	orrs	r2, r4
  ErrorStatus status = SUCCESS;
 80096fc:	2000      	movs	r0, #0
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 80096fe:	bc30      	pop	{r4, r5}
 8009700:	631a      	str	r2, [r3, #48]	; 0x30
 8009702:	4770      	bx	lr
    status = ERROR;
 8009704:	2001      	movs	r0, #1
}
 8009706:	4770      	bx	lr
      MODIFY_REG(ADCx->CFGR,
 8009708:	68c0      	ldr	r0, [r0, #12]
 800970a:	4a07      	ldr	r2, [pc, #28]	; (8009728 <LL_ADC_REG_Init+0x5c>)
 800970c:	4002      	ands	r2, r0
 800970e:	6808      	ldr	r0, [r1, #0]
 8009710:	4302      	orrs	r2, r0
 8009712:	6888      	ldr	r0, [r1, #8]
 8009714:	4302      	orrs	r2, r0
 8009716:	68c8      	ldr	r0, [r1, #12]
 8009718:	4302      	orrs	r2, r0
 800971a:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800971e:	4302      	orrs	r2, r0
 8009720:	430a      	orrs	r2, r1
 8009722:	60da      	str	r2, [r3, #12]
 8009724:	e7e6      	b.n	80096f4 <LL_ADC_REG_Init+0x28>
 8009726:	bf00      	nop
 8009728:	fff0c01c 	.word	0xfff0c01c

0800972c <LL_COMP_Init>:
  * @param  COMPx Comparator instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_COMP_IsLocked(COMP_TypeDef *COMPx)
{
  return ((READ_BIT(COMPx->CSR, COMP_CSR_LOCK) == (COMP_CSR_LOCK)) ? 1UL : 0UL);
 800972c:	6803      	ldr	r3, [r0, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	db12      	blt.n	8009758 <LL_COMP_Init+0x2c>
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: COMP registers are initialized
  *          - ERROR: COMP registers are not initialized
  */
ErrorStatus LL_COMP_Init(COMP_TypeDef *COMPx, LL_COMP_InitTypeDef *COMP_InitStruct)
{
 8009732:	b410      	push	{r4}
    /*  - InputPlus                                                           */
    /*  - InputMinus                                                          */
    /*  - InputHysteresis                                                     */
    /*  - OutputPolarity                                                      */
    /*  - OutputBlankingSource                                                */
    MODIFY_REG(COMPx->CSR,
 8009734:	e9d1 3400 	ldrd	r3, r4, [r1]
 8009738:	688a      	ldr	r2, [r1, #8]
 800973a:	4323      	orrs	r3, r4
 800973c:	4313      	orrs	r3, r2
 800973e:	e9d1 2103 	ldrd	r2, r1, [r1, #12]
 8009742:	6804      	ldr	r4, [r0, #0]
 8009744:	4313      	orrs	r3, r2
 8009746:	4a05      	ldr	r2, [pc, #20]	; (800975c <LL_COMP_Init+0x30>)
 8009748:	430b      	orrs	r3, r1
 800974a:	4022      	ands	r2, r4
 800974c:	4313      	orrs	r3, r2
 800974e:	6003      	str	r3, [r0, #0]
    /* Initialization error: COMP instance is locked.                         */
    status = ERROR;
  }

  return status;
}
 8009750:	f85d 4b04 	ldr.w	r4, [sp], #4
  ErrorStatus status = SUCCESS;
 8009754:	2000      	movs	r0, #0
}
 8009756:	4770      	bx	lr
    status = ERROR;
 8009758:	2001      	movs	r0, #1
}
 800975a:	4770      	bx	lr
 800975c:	ff007e0f 	.word	0xff007e0f

08009760 <LL_DAC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 8009760:	b510      	push	{r4, lr}
  return ((READ_BIT(DACx->CR,
 8009762:	f001 0c10 	and.w	ip, r1, #16
 8009766:	6804      	ldr	r4, [r0, #0]
 8009768:	2301      	movs	r3, #1
 800976a:	fa03 fe0c 	lsl.w	lr, r3, ip
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 800976e:	ea3e 0404 	bics.w	r4, lr, r4
 8009772:	d02f      	beq.n	80097d4 <LL_DAC_Init+0x74>
  assert_param(IS_LL_DAC_TRIGGER_SOURCE(DACx, DAC_InitStruct->TriggerSource));
  assert_param(IS_LL_DAC_OUTPUT_BUFFER(DAC_InitStruct->OutputBuffer));
  assert_param(IS_LL_DAC_OUTPUT_CONNECTION(DAC_InitStruct->OutputConnection));
  assert_param(IS_LL_DAC_OUTPUT_MODE(DAC_InitStruct->OutputMode));
  assert_param(IS_LL_DAC_WAVE_AUTO_GENER_MODE(DAC_InitStruct->WaveAutoGeneration));
  if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 8009774:	6893      	ldr	r3, [r2, #8]
    /*  - TriggerSource                                                       */
    /*  - WaveAutoGeneration                                                  */
    /*  - OutputBuffer                                                        */
    /*  - OutputConnection                                                    */
    /*  - OutputMode                                                          */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 8009776:	b18b      	cbz	r3, 800979c <LL_DAC_Init+0x3c>
    {
      if (DAC_InitStruct->WaveAutoGeneration == LL_DAC_WAVE_AUTO_GENERATION_SAWTOOTH)
 8009778:	2bc0      	cmp	r3, #192	; 0xc0
 800977a:	d02d      	beq.n	80097d8 <LL_DAC_Init+0x78>
        WRITE_REG(*(__DAC_PTR_REG_OFFSET(DACx->STR1, (DAC_Channel >> DAC_REG_STRX_REGOFFSET_BITOFFSET_POS) & DAC_REG_STRX_REGOFFSET_MASK_POSBIT0)),
                  DAC_InitStruct->WaveAutoGenerationConfig);
      }
      else
      {
        MODIFY_REG(DACx->CR,
 800977c:	6814      	ldr	r4, [r2, #0]
 800977e:	6801      	ldr	r1, [r0, #0]
 8009780:	4323      	orrs	r3, r4
 8009782:	68d4      	ldr	r4, [r2, #12]
 8009784:	4323      	orrs	r3, r4
 8009786:	f640 74fc 	movw	r4, #4092	; 0xffc
 800978a:	fa04 f40c 	lsl.w	r4, r4, ip
 800978e:	fa03 f30c 	lsl.w	r3, r3, ip
 8009792:	ea21 0104 	bic.w	r1, r1, r4
 8009796:	430b      	orrs	r3, r1
 8009798:	6003      	str	r3, [r0, #0]
 800979a:	e00a      	b.n	80097b2 <LL_DAC_Init+0x52>
                  );
      }
    }
    else
    {
      MODIFY_REG(DACx->CR,
 800979c:	6803      	ldr	r3, [r0, #0]
 800979e:	21fc      	movs	r1, #252	; 0xfc
 80097a0:	fa01 f10c 	lsl.w	r1, r1, ip
 80097a4:	ea23 0301 	bic.w	r3, r3, r1
 80097a8:	6811      	ldr	r1, [r2, #0]
 80097aa:	fa01 f10c 	lsl.w	r1, r1, ip
 80097ae:	430b      	orrs	r3, r1
 80097b0:	6003      	str	r3, [r0, #0]
                 (DAC_InitStruct->TriggerSource
                  | LL_DAC_WAVE_AUTO_GENERATION_NONE
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    MODIFY_REG(DACx->MCR,
 80097b2:	e9d2 3404 	ldrd	r3, r4, [r2, #16]
 80097b6:	6991      	ldr	r1, [r2, #24]
 80097b8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80097ba:	4323      	orrs	r3, r4
 80097bc:	430b      	orrs	r3, r1
 80097be:	2107      	movs	r1, #7
 80097c0:	fa01 f10c 	lsl.w	r1, r1, ip
 80097c4:	fa03 f30c 	lsl.w	r3, r3, ip
 80097c8:	ea22 0201 	bic.w	r2, r2, r1
 80097cc:	4313      	orrs	r3, r2
 80097ce:	63c3      	str	r3, [r0, #60]	; 0x3c
  ErrorStatus status = SUCCESS;
 80097d0:	2000      	movs	r0, #0
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
  }
  return status;
}
 80097d2:	bd10      	pop	{r4, pc}
    status = ERROR;
 80097d4:	4618      	mov	r0, r3
}
 80097d6:	bd10      	pop	{r4, pc}
        MODIFY_REG(DACx->CR,
 80097d8:	6804      	ldr	r4, [r0, #0]
 80097da:	fa03 f30c 	lsl.w	r3, r3, ip
 80097de:	4323      	orrs	r3, r4
 80097e0:	6003      	str	r3, [r0, #0]
        MODIFY_REG(DACx->STMODR,
 80097e2:	6853      	ldr	r3, [r2, #4]
 80097e4:	6e04      	ldr	r4, [r0, #96]	; 0x60
 80097e6:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 80097ea:	6813      	ldr	r3, [r2, #0]
 80097ec:	089b      	lsrs	r3, r3, #2
 80097ee:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80097f2:	f640 7e0f 	movw	lr, #3855	; 0xf0f
        WRITE_REG(*(__DAC_PTR_REG_OFFSET(DACx->STR1, (DAC_Channel >> DAC_REG_STRX_REGOFFSET_BITOFFSET_POS) & DAC_REG_STRX_REGOFFSET_MASK_POSBIT0)),
 80097f6:	0949      	lsrs	r1, r1, #5
        MODIFY_REG(DACx->STMODR,
 80097f8:	fa0e fe0c 	lsl.w	lr, lr, ip
        WRITE_REG(*(__DAC_PTR_REG_OFFSET(DACx->STR1, (DAC_Channel >> DAC_REG_STRX_REGOFFSET_BITOFFSET_POS) & DAC_REG_STRX_REGOFFSET_MASK_POSBIT0)),
 80097fc:	f001 0104 	and.w	r1, r1, #4
        MODIFY_REG(DACx->STMODR,
 8009800:	fa03 f30c 	lsl.w	r3, r3, ip
 8009804:	ea24 040e 	bic.w	r4, r4, lr
 8009808:	4323      	orrs	r3, r4
        WRITE_REG(*(__DAC_PTR_REG_OFFSET(DACx->STR1, (DAC_Channel >> DAC_REG_STRX_REGOFFSET_BITOFFSET_POS) & DAC_REG_STRX_REGOFFSET_MASK_POSBIT0)),
 800980a:	4401      	add	r1, r0
        MODIFY_REG(DACx->STMODR,
 800980c:	6603      	str	r3, [r0, #96]	; 0x60
        WRITE_REG(*(__DAC_PTR_REG_OFFSET(DACx->STR1, (DAC_Channel >> DAC_REG_STRX_REGOFFSET_BITOFFSET_POS) & DAC_REG_STRX_REGOFFSET_MASK_POSBIT0)),
 800980e:	68d3      	ldr	r3, [r2, #12]
 8009810:	658b      	str	r3, [r1, #88]	; 0x58
 8009812:	e7ce      	b.n	80097b2 <LL_DAC_Init+0x52>

08009814 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009818:	680d      	ldr	r5, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800981a:	fa95 f2a5 	rbit	r2, r5
  return __builtin_clz(value);
 800981e:	fab2 f282 	clz	r2, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009822:	fa35 f302 	lsrs.w	r3, r5, r2
 8009826:	f000 80a2 	beq.w	800996e <LL_GPIO_Init+0x15a>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800982a:	f04f 0c01 	mov.w	ip, #1
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800982e:	f04f 0e03 	mov.w	lr, #3
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009832:	43ef      	mvns	r7, r5
 8009834:	e01f      	b.n	8009876 <LL_GPIO_Init+0x62>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009836:	f8d0 8000 	ldr.w	r8, [r0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800983a:	fa93 f9a3 	rbit	r9, r3
  if (value == 0U)
 800983e:	f1b9 0f00 	cmp.w	r9, #0
 8009842:	d007      	beq.n	8009854 <LL_GPIO_Init+0x40>
  return __builtin_clz(value);
 8009844:	fab9 f989 	clz	r9, r9
 8009848:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800984c:	fa0e f909 	lsl.w	r9, lr, r9
 8009850:	ea28 0809 	bic.w	r8, r8, r9
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009854:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8009858:	2b00      	cmp	r3, #0
 800985a:	f000 808b 	beq.w	8009974 <LL_GPIO_Init+0x160>
  return __builtin_clz(value);
 800985e:	fab3 f383 	clz	r3, r3
 8009862:	005b      	lsls	r3, r3, #1
 8009864:	fa04 f303 	lsl.w	r3, r4, r3
 8009868:	ea43 0308 	orr.w	r3, r3, r8
 800986c:	6003      	str	r3, [r0, #0]
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 800986e:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009870:	fa35 f302 	lsrs.w	r3, r5, r2
 8009874:	d07b      	beq.n	800996e <LL_GPIO_Init+0x15a>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8009876:	fa0c f302 	lsl.w	r3, ip, r2
    if (currentpin != 0x00u)
 800987a:	402b      	ands	r3, r5
 800987c:	d0f7      	beq.n	800986e <LL_GPIO_Init+0x5a>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800987e:	684c      	ldr	r4, [r1, #4]
 8009880:	f104 38ff 	add.w	r8, r4, #4294967295
 8009884:	f1b8 0f01 	cmp.w	r8, #1
 8009888:	d945      	bls.n	8009916 <LL_GPIO_Init+0x102>
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800988a:	f8d1 9010 	ldr.w	r9, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800988e:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009892:	fa93 f8a3 	rbit	r8, r3
  if (value == 0U)
 8009896:	f1b8 0f00 	cmp.w	r8, #0
 800989a:	d007      	beq.n	80098ac <LL_GPIO_Init+0x98>
  return __builtin_clz(value);
 800989c:	fab8 f888 	clz	r8, r8
 80098a0:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80098a4:	fa0e f808 	lsl.w	r8, lr, r8
 80098a8:	ea2a 0a08 	bic.w	sl, sl, r8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098ac:	fa93 f8a3 	rbit	r8, r3
  if (value == 0U)
 80098b0:	f1b8 0f00 	cmp.w	r8, #0
 80098b4:	d060      	beq.n	8009978 <LL_GPIO_Init+0x164>
  return __builtin_clz(value);
 80098b6:	fab8 f888 	clz	r8, r8
 80098ba:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80098be:	fa09 f808 	lsl.w	r8, r9, r8
 80098c2:	ea48 0a0a 	orr.w	sl, r8, sl
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80098c6:	2c02      	cmp	r4, #2
 80098c8:	f8c0 a00c 	str.w	sl, [r0, #12]
 80098cc:	d1b3      	bne.n	8009836 <LL_GPIO_Init+0x22>
        if (currentpin < LL_GPIO_PIN_8)
 80098ce:	2bff      	cmp	r3, #255	; 0xff
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80098d0:	f8d1 9014 	ldr.w	r9, [r1, #20]
        if (currentpin < LL_GPIO_PIN_8)
 80098d4:	d853      	bhi.n	800997e <LL_GPIO_Init+0x16a>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80098d6:	f8d0 a020 	ldr.w	sl, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098da:	fa93 f8a3 	rbit	r8, r3
  if (value == 0U)
 80098de:	f1b8 0f00 	cmp.w	r8, #0
 80098e2:	d008      	beq.n	80098f6 <LL_GPIO_Init+0xe2>
  return __builtin_clz(value);
 80098e4:	fab8 f888 	clz	r8, r8
 80098e8:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80098ec:	260f      	movs	r6, #15
 80098ee:	fa06 f808 	lsl.w	r8, r6, r8
 80098f2:	ea2a 0a08 	bic.w	sl, sl, r8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098f6:	fa93 f8a3 	rbit	r8, r3
  if (value == 0U)
 80098fa:	f1b8 0f00 	cmp.w	r8, #0
 80098fe:	d063      	beq.n	80099c8 <LL_GPIO_Init+0x1b4>
  return __builtin_clz(value);
 8009900:	fab8 f888 	clz	r8, r8
 8009904:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8009908:	fa09 f808 	lsl.w	r8, r9, r8
 800990c:	ea48 0a0a 	orr.w	sl, r8, sl
 8009910:	f8c0 a020 	str.w	sl, [r0, #32]
}
 8009914:	e78f      	b.n	8009836 <LL_GPIO_Init+0x22>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009916:	f8d1 9008 	ldr.w	r9, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800991a:	f8d0 a008 	ldr.w	sl, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800991e:	fa93 f8a3 	rbit	r8, r3
  if (value == 0U)
 8009922:	f1b8 0f00 	cmp.w	r8, #0
 8009926:	d007      	beq.n	8009938 <LL_GPIO_Init+0x124>
  return __builtin_clz(value);
 8009928:	fab8 f888 	clz	r8, r8
 800992c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8009930:	fa0e f808 	lsl.w	r8, lr, r8
 8009934:	ea2a 0a08 	bic.w	sl, sl, r8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009938:	fa93 f8a3 	rbit	r8, r3
  if (value == 0U)
 800993c:	f1b8 0f00 	cmp.w	r8, #0
 8009940:	d03f      	beq.n	80099c2 <LL_GPIO_Init+0x1ae>
  return __builtin_clz(value);
 8009942:	fab8 f888 	clz	r8, r8
 8009946:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800994a:	fa09 f808 	lsl.w	r8, r9, r8
 800994e:	ea48 0a0a 	orr.w	sl, r8, sl
 8009952:	f8c0 a008 	str.w	sl, [r0, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009956:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800995a:	68ce      	ldr	r6, [r1, #12]
 800995c:	ea07 0808 	and.w	r8, r7, r8
 8009960:	fb06 f905 	mul.w	r9, r6, r5
 8009964:	ea48 0809 	orr.w	r8, r8, r9
 8009968:	f8c0 8004 	str.w	r8, [r0, #4]
}
 800996c:	e78d      	b.n	800988a <LL_GPIO_Init+0x76>
  }
  return (SUCCESS);
}
 800996e:	2000      	movs	r0, #0
 8009970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009974:	2340      	movs	r3, #64	; 0x40
 8009976:	e775      	b.n	8009864 <LL_GPIO_Init+0x50>
 8009978:	f04f 0840 	mov.w	r8, #64	; 0x40
 800997c:	e79f      	b.n	80098be <LL_GPIO_Init+0xaa>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800997e:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 8009982:	ea4f 2813 	mov.w	r8, r3, lsr #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009986:	fa98 fba8 	rbit	fp, r8
  if (value == 0U)
 800998a:	f1bb 0f00 	cmp.w	fp, #0
 800998e:	d008      	beq.n	80099a2 <LL_GPIO_Init+0x18e>
  return __builtin_clz(value);
 8009990:	fabb fb8b 	clz	fp, fp
 8009994:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8009998:	260f      	movs	r6, #15
 800999a:	fa06 fb0b 	lsl.w	fp, r6, fp
 800999e:	ea2a 0a0b 	bic.w	sl, sl, fp
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099a2:	fa98 f8a8 	rbit	r8, r8
  if (value == 0U)
 80099a6:	f1b8 0f00 	cmp.w	r8, #0
 80099aa:	d010      	beq.n	80099ce <LL_GPIO_Init+0x1ba>
  return __builtin_clz(value);
 80099ac:	fab8 f888 	clz	r8, r8
 80099b0:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80099b4:	fa09 f808 	lsl.w	r8, r9, r8
 80099b8:	ea48 0a0a 	orr.w	sl, r8, sl
 80099bc:	f8c0 a024 	str.w	sl, [r0, #36]	; 0x24
}
 80099c0:	e739      	b.n	8009836 <LL_GPIO_Init+0x22>
 80099c2:	f04f 0840 	mov.w	r8, #64	; 0x40
 80099c6:	e7c0      	b.n	800994a <LL_GPIO_Init+0x136>
 80099c8:	f04f 0880 	mov.w	r8, #128	; 0x80
 80099cc:	e79c      	b.n	8009908 <LL_GPIO_Init+0xf4>
 80099ce:	f04f 0880 	mov.w	r8, #128	; 0x80
 80099d2:	e7ef      	b.n	80099b4 <LL_GPIO_Init+0x1a0>

080099d4 <LL_OPAMP_Init>:
  * @param  OPAMPx OPAMP instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_OPAMP_IsLocked(OPAMP_TypeDef *OPAMPx)
{
  return ((READ_BIT(OPAMPx->CSR, OPAMP_CSR_LOCK) == (OPAMP_CSR_LOCK)) ? 1UL : 0UL);
 80099d4:	6803      	ldr	r3, [r0, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	db23      	blt.n	8009a22 <LL_OPAMP_Init+0x4e>
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: OPAMP registers are initialized
  *          - ERROR: OPAMP registers are not initialized
  */
ErrorStatus LL_OPAMP_Init(OPAMP_TypeDef *OPAMPx, LL_OPAMP_InitTypeDef *OPAMP_InitStruct)
{
 80099da:	b410      	push	{r4}

  /* Note: OPAMP inverting input can be used with OPAMP in mode standalone    */
  /*       or PGA with external capacitors for filtering circuit.             */
  /*       Otherwise (OPAMP in mode follower), OPAMP inverting input is       */
  /*       not used (not connected to GPIO pin).                              */
  if (OPAMP_InitStruct->FunctionalMode != LL_OPAMP_MODE_FOLLOWER)
 80099dc:	684c      	ldr	r4, [r1, #4]
    /*  - Input non-inverting                                                 */
    /*  - Input inverting                                                     */
    /* Note: Bit OPAMP_CSR_CALON reset to ensure to be in functional mode.    */
    if (OPAMP_InitStruct->FunctionalMode != LL_OPAMP_MODE_FOLLOWER)
    {
      MODIFY_REG(OPAMPx->CSR,
 80099de:	6803      	ldr	r3, [r0, #0]
    if (OPAMP_InitStruct->FunctionalMode != LL_OPAMP_MODE_FOLLOWER)
 80099e0:	2c60      	cmp	r4, #96	; 0x60
 80099e2:	d00f      	beq.n	8009a04 <LL_OPAMP_Init+0x30>
      MODIFY_REG(OPAMPx->CSR,
 80099e4:	f423 23c1 	bic.w	r3, r3, #395264	; 0x60800
 80099e8:	680a      	ldr	r2, [r1, #0]
 80099ea:	f023 03ec 	bic.w	r3, r3, #236	; 0xec
 80099ee:	4323      	orrs	r3, r4
 80099f0:	4313      	orrs	r3, r2
 80099f2:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 80099f6:	4323      	orrs	r3, r4
 80099f8:	4313      	orrs	r3, r2
 80099fa:	6003      	str	r3, [r0, #0]
    /* Initialization error: OPAMP instance is locked.                        */
    status = ERROR;
  }

  return status;
}
 80099fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  ErrorStatus status = SUCCESS;
 8009a00:	2000      	movs	r0, #0
}
 8009a02:	4770      	bx	lr
      MODIFY_REG(OPAMPx->CSR,
 8009a04:	688c      	ldr	r4, [r1, #8]
 8009a06:	680a      	ldr	r2, [r1, #0]
 8009a08:	f423 23c1 	bic.w	r3, r3, #395264	; 0x60800
 8009a0c:	f023 03ec 	bic.w	r3, r3, #236	; 0xec
 8009a10:	4323      	orrs	r3, r4
 8009a12:	4313      	orrs	r3, r2
 8009a14:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009a18:	6003      	str	r3, [r0, #0]
}
 8009a1a:	f85d 4b04 	ldr.w	r4, [sp], #4
  ErrorStatus status = SUCCESS;
 8009a1e:	2000      	movs	r0, #0
}
 8009a20:	4770      	bx	lr
    status = ERROR;
 8009a22:	2001      	movs	r0, #1
}
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop

08009a28 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a28:	4a30      	ldr	r2, [pc, #192]	; (8009aec <LL_TIM_Init+0xc4>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8009a2a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a2c:	4290      	cmp	r0, r2
{
 8009a2e:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a30:	d03f      	beq.n	8009ab2 <LL_TIM_Init+0x8a>
 8009a32:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009a36:	d028      	beq.n	8009a8a <LL_TIM_Init+0x62>
 8009a38:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009a3c:	4290      	cmp	r0, r2
 8009a3e:	d024      	beq.n	8009a8a <LL_TIM_Init+0x62>
 8009a40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009a44:	4290      	cmp	r0, r2
 8009a46:	d020      	beq.n	8009a8a <LL_TIM_Init+0x62>
 8009a48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009a4c:	4290      	cmp	r0, r2
 8009a4e:	d01c      	beq.n	8009a8a <LL_TIM_Init+0x62>
 8009a50:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8009a54:	4290      	cmp	r0, r2
 8009a56:	d03e      	beq.n	8009ad6 <LL_TIM_Init+0xae>
 8009a58:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8009a5c:	4290      	cmp	r0, r2
 8009a5e:	d040      	beq.n	8009ae2 <LL_TIM_Init+0xba>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a60:	4a23      	ldr	r2, [pc, #140]	; (8009af0 <LL_TIM_Init+0xc8>)
 8009a62:	4290      	cmp	r0, r2
 8009a64:	d035      	beq.n	8009ad2 <LL_TIM_Init+0xaa>
 8009a66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009a6a:	4290      	cmp	r0, r2
 8009a6c:	d031      	beq.n	8009ad2 <LL_TIM_Init+0xaa>
 8009a6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009a72:	4290      	cmp	r0, r2
 8009a74:	d02d      	beq.n	8009ad2 <LL_TIM_Init+0xaa>
 8009a76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a7a:	4290      	cmp	r0, r2
 8009a7c:	d029      	beq.n	8009ad2 <LL_TIM_Init+0xaa>

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8009a7e:	688c      	ldr	r4, [r1, #8]

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8009a80:	880a      	ldrh	r2, [r1, #0]
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8009a82:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8009a84:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8009a86:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a88:	e00c      	b.n	8009aa4 <LL_TIM_Init+0x7c>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8009a8a:	684a      	ldr	r2, [r1, #4]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8009a8c:	68cd      	ldr	r5, [r1, #12]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8009a8e:	688c      	ldr	r4, [r1, #8]
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8009a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a94:	4313      	orrs	r3, r2
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8009a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8009a9a:	880a      	ldrh	r2, [r1, #0]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8009a9c:	432b      	orrs	r3, r5
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8009a9e:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8009aa0:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8009aa2:	6282      	str	r2, [r0, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009aa4:	6943      	ldr	r3, [r0, #20]
 8009aa6:	f043 0301 	orr.w	r3, r3, #1
 8009aaa:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8009aac:	bc30      	pop	{r4, r5}
 8009aae:	2000      	movs	r0, #0
 8009ab0:	4770      	bx	lr
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8009ab2:	684c      	ldr	r4, [r1, #4]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8009ab4:	68ca      	ldr	r2, [r1, #12]
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8009ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aba:	4323      	orrs	r3, r4
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8009abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ac0:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8009ac2:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8009ac4:	688a      	ldr	r2, [r1, #8]
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8009ac6:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8009ac8:	62c2      	str	r2, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8009aca:	6283      	str	r3, [r0, #40]	; 0x28
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8009acc:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009ace:	6303      	str	r3, [r0, #48]	; 0x30
}
 8009ad0:	e7e8      	b.n	8009aa4 <LL_TIM_Init+0x7c>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8009ad2:	68ca      	ldr	r2, [r1, #12]
 8009ad4:	e7f2      	b.n	8009abc <LL_TIM_Init+0x94>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8009ad6:	684c      	ldr	r4, [r1, #4]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8009ad8:	68ca      	ldr	r2, [r1, #12]
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8009ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ade:	4323      	orrs	r3, r4
 8009ae0:	e7ec      	b.n	8009abc <LL_TIM_Init+0x94>
 8009ae2:	684a      	ldr	r2, [r1, #4]
 8009ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ae8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009aea:	e7b9      	b.n	8009a60 <LL_TIM_Init+0x38>
 8009aec:	40012c00 	.word	0x40012c00
 8009af0:	40014000 	.word	0x40014000

08009af4 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 8009af4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
{
 8009af8:	b430      	push	{r4, r5}
  switch (Channel)
 8009afa:	f000 8123 	beq.w	8009d44 <LL_TIM_OC_Init+0x250>
 8009afe:	d851      	bhi.n	8009ba4 <LL_TIM_OC_Init+0xb0>
 8009b00:	2910      	cmp	r1, #16
 8009b02:	f000 816d 	beq.w	8009de0 <LL_TIM_OC_Init+0x2ec>
 8009b06:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8009b0a:	f040 8090 	bne.w	8009c2e <LL_TIM_OC_Init+0x13a>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8009b0e:	6a03      	ldr	r3, [r0, #32]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8009b10:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8009b12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b16:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8009b18:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8009b1a:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8009b1c:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8009b1e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b22:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8009b26:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8009b2a:	6815      	ldr	r5, [r2, #0]
 8009b2c:	f021 0173 	bic.w	r1, r1, #115	; 0x73
 8009b30:	4329      	orrs	r1, r5

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8009b32:	6855      	ldr	r5, [r2, #4]
 8009b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b38:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b3c:	4da7      	ldr	r5, [pc, #668]	; (8009ddc <LL_TIM_OC_Init+0x2e8>)
 8009b3e:	42a8      	cmp	r0, r5
 8009b40:	d013      	beq.n	8009b6a <LL_TIM_OC_Init+0x76>
 8009b42:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009b46:	42a8      	cmp	r0, r5
 8009b48:	d00f      	beq.n	8009b6a <LL_TIM_OC_Init+0x76>
 8009b4a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8009b4e:	42a8      	cmp	r0, r5
 8009b50:	d00b      	beq.n	8009b6a <LL_TIM_OC_Init+0x76>
 8009b52:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009b56:	42a8      	cmp	r0, r5
 8009b58:	d007      	beq.n	8009b6a <LL_TIM_OC_Init+0x76>
 8009b5a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009b5e:	42a8      	cmp	r0, r5
 8009b60:	d003      	beq.n	8009b6a <LL_TIM_OC_Init+0x76>
 8009b62:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009b66:	42a8      	cmp	r0, r5
 8009b68:	d113      	bne.n	8009b92 <LL_TIM_OC_Init+0x9e>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8009b6a:	6955      	ldr	r5, [r2, #20]
 8009b6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b70:	ea43 2385 	orr.w	r3, r3, r5, lsl #10

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8009b74:	6995      	ldr	r5, [r2, #24]
 8009b76:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8009b7a:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8009b7e:	6895      	ldr	r5, [r2, #8]
 8009b80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b84:	ea43 2385 	orr.w	r3, r3, r5, lsl #10

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8009b88:	69d5      	ldr	r5, [r2, #28]
 8009b8a:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
 8009b8e:	ea44 1445 	orr.w	r4, r4, r5, lsl #5

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8009b92:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8009b94:	6044      	str	r4, [r0, #4]
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8009b96:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8009b98:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009b9a:	63c5      	str	r5, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009b9c:	6203      	str	r3, [r0, #32]
}
 8009b9e:	bc30      	pop	{r4, r5}
 8009ba0:	4610      	mov	r0, r2
 8009ba2:	4770      	bx	lr
  switch (Channel)
 8009ba4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8009ba8:	f000 808f 	beq.w	8009cca <LL_TIM_OC_Init+0x1d6>
 8009bac:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8009bb0:	f040 8087 	bne.w	8009cc2 <LL_TIM_OC_Init+0x1ce>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8009bb4:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8009bb6:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8009bb8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009bbc:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8009bbe:	6a03      	ldr	r3, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8009bc0:	6d01      	ldr	r1, [r0, #80]	; 0x50
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8009bc2:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8009bc6:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8009bca:	ea41 2104 	orr.w	r1, r1, r4, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8009bce:	6914      	ldr	r4, [r2, #16]
 8009bd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009bd4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8009bd8:	6854      	ldr	r4, [r2, #4]
 8009bda:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009bde:	ea43 5304 	orr.w	r3, r3, r4, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009be2:	4c7e      	ldr	r4, [pc, #504]	; (8009ddc <LL_TIM_OC_Init+0x2e8>)
 8009be4:	42a0      	cmp	r0, r4
 8009be6:	d013      	beq.n	8009c10 <LL_TIM_OC_Init+0x11c>
 8009be8:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8009bec:	42a0      	cmp	r0, r4
 8009bee:	d00f      	beq.n	8009c10 <LL_TIM_OC_Init+0x11c>
 8009bf0:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8009bf4:	42a0      	cmp	r0, r4
 8009bf6:	d00b      	beq.n	8009c10 <LL_TIM_OC_Init+0x11c>
 8009bf8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009bfc:	42a0      	cmp	r0, r4
 8009bfe:	d007      	beq.n	8009c10 <LL_TIM_OC_Init+0x11c>
 8009c00:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009c04:	42a0      	cmp	r0, r4
 8009c06:	d003      	beq.n	8009c10 <LL_TIM_OC_Init+0x11c>
 8009c08:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8009c0c:	42a0      	cmp	r0, r4
 8009c0e:	d106      	bne.n	8009c1e <LL_TIM_OC_Init+0x12a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8009c10:	6844      	ldr	r4, [r0, #4]
 8009c12:	6995      	ldr	r5, [r2, #24]
 8009c14:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8009c18:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 8009c1c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8009c1e:	68d4      	ldr	r4, [r2, #12]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8009c20:	6501      	str	r1, [r0, #80]	; 0x50
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8009c22:	2200      	movs	r2, #0
  WRITE_REG(TIMx->CCR6, CompareValue);
 8009c24:	64c4      	str	r4, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009c26:	6203      	str	r3, [r0, #32]
}
 8009c28:	bc30      	pop	{r4, r5}
 8009c2a:	4610      	mov	r0, r2
 8009c2c:	4770      	bx	lr
  switch (Channel)
 8009c2e:	2901      	cmp	r1, #1
 8009c30:	d147      	bne.n	8009cc2 <LL_TIM_OC_Init+0x1ce>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8009c32:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8009c34:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8009c36:	f023 0301 	bic.w	r3, r3, #1
 8009c3a:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8009c3c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8009c3e:	6844      	ldr	r4, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8009c40:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8009c42:	f023 0302 	bic.w	r3, r3, #2
 8009c46:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8009c48:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8009c4c:	6815      	ldr	r5, [r2, #0]
 8009c4e:	f021 0173 	bic.w	r1, r1, #115	; 0x73
 8009c52:	4329      	orrs	r1, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8009c54:	6855      	ldr	r5, [r2, #4]
 8009c56:	f023 0301 	bic.w	r3, r3, #1
 8009c5a:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c5c:	4d5f      	ldr	r5, [pc, #380]	; (8009ddc <LL_TIM_OC_Init+0x2e8>)
 8009c5e:	42a8      	cmp	r0, r5
 8009c60:	d013      	beq.n	8009c8a <LL_TIM_OC_Init+0x196>
 8009c62:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009c66:	42a8      	cmp	r0, r5
 8009c68:	d00f      	beq.n	8009c8a <LL_TIM_OC_Init+0x196>
 8009c6a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8009c6e:	42a8      	cmp	r0, r5
 8009c70:	d00b      	beq.n	8009c8a <LL_TIM_OC_Init+0x196>
 8009c72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009c76:	42a8      	cmp	r0, r5
 8009c78:	d007      	beq.n	8009c8a <LL_TIM_OC_Init+0x196>
 8009c7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009c7e:	42a8      	cmp	r0, r5
 8009c80:	d003      	beq.n	8009c8a <LL_TIM_OC_Init+0x196>
 8009c82:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009c86:	42a8      	cmp	r0, r5
 8009c88:	d112      	bne.n	8009cb0 <LL_TIM_OC_Init+0x1bc>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8009c8a:	6955      	ldr	r5, [r2, #20]
 8009c8c:	f023 0308 	bic.w	r3, r3, #8
 8009c90:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8009c94:	6995      	ldr	r5, [r2, #24]
 8009c96:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8009c9a:	432c      	orrs	r4, r5
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8009c9c:	6895      	ldr	r5, [r2, #8]
 8009c9e:	f023 0304 	bic.w	r3, r3, #4
 8009ca2:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8009ca6:	69d5      	ldr	r5, [r2, #28]
 8009ca8:	f424 7400 	bic.w	r4, r4, #512	; 0x200
 8009cac:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8009cb0:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8009cb2:	6044      	str	r4, [r0, #4]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8009cb4:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8009cb6:	6181      	str	r1, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009cb8:	6345      	str	r5, [r0, #52]	; 0x34
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009cba:	6203      	str	r3, [r0, #32]
}
 8009cbc:	bc30      	pop	{r4, r5}
 8009cbe:	4610      	mov	r0, r2
 8009cc0:	4770      	bx	lr
  switch (Channel)
 8009cc2:	2201      	movs	r2, #1
}
 8009cc4:	4610      	mov	r0, r2
 8009cc6:	bc30      	pop	{r4, r5}
 8009cc8:	4770      	bx	lr
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8009cca:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8009ccc:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8009cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cd2:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8009cd4:	6a03      	ldr	r3, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8009cd6:	6d01      	ldr	r1, [r0, #80]	; 0x50
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8009cd8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8009cdc:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009ce0:	4321      	orrs	r1, r4
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8009ce2:	6914      	ldr	r4, [r2, #16]
 8009ce4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009ce8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8009cec:	6854      	ldr	r4, [r2, #4]
 8009cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cf2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cf6:	4c39      	ldr	r4, [pc, #228]	; (8009ddc <LL_TIM_OC_Init+0x2e8>)
 8009cf8:	42a0      	cmp	r0, r4
 8009cfa:	d013      	beq.n	8009d24 <LL_TIM_OC_Init+0x230>
 8009cfc:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8009d00:	42a0      	cmp	r0, r4
 8009d02:	d00f      	beq.n	8009d24 <LL_TIM_OC_Init+0x230>
 8009d04:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8009d08:	42a0      	cmp	r0, r4
 8009d0a:	d00b      	beq.n	8009d24 <LL_TIM_OC_Init+0x230>
 8009d0c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009d10:	42a0      	cmp	r0, r4
 8009d12:	d007      	beq.n	8009d24 <LL_TIM_OC_Init+0x230>
 8009d14:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009d18:	42a0      	cmp	r0, r4
 8009d1a:	d003      	beq.n	8009d24 <LL_TIM_OC_Init+0x230>
 8009d1c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8009d20:	42a0      	cmp	r0, r4
 8009d22:	d106      	bne.n	8009d32 <LL_TIM_OC_Init+0x23e>
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8009d24:	6844      	ldr	r4, [r0, #4]
 8009d26:	6995      	ldr	r5, [r2, #24]
 8009d28:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8009d2c:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8009d30:	6044      	str	r4, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8009d32:	6501      	str	r1, [r0, #80]	; 0x50
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8009d34:	68d1      	ldr	r1, [r2, #12]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8009d36:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8009d38:	6481      	str	r1, [r0, #72]	; 0x48
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8009d3a:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009d3c:	6203      	str	r3, [r0, #32]
}
 8009d3e:	bc30      	pop	{r4, r5}
 8009d40:	4610      	mov	r0, r2
 8009d42:	4770      	bx	lr
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8009d44:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8009d46:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8009d48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d4c:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8009d4e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8009d50:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8009d52:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8009d54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d58:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8009d5c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8009d60:	6815      	ldr	r5, [r2, #0]
 8009d62:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8009d66:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8009d6a:	6855      	ldr	r5, [r2, #4]
 8009d6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d70:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d74:	4d19      	ldr	r5, [pc, #100]	; (8009ddc <LL_TIM_OC_Init+0x2e8>)
 8009d76:	42a8      	cmp	r0, r5
 8009d78:	d013      	beq.n	8009da2 <LL_TIM_OC_Init+0x2ae>
 8009d7a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009d7e:	42a8      	cmp	r0, r5
 8009d80:	d00f      	beq.n	8009da2 <LL_TIM_OC_Init+0x2ae>
 8009d82:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8009d86:	42a8      	cmp	r0, r5
 8009d88:	d00b      	beq.n	8009da2 <LL_TIM_OC_Init+0x2ae>
 8009d8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009d8e:	42a8      	cmp	r0, r5
 8009d90:	d007      	beq.n	8009da2 <LL_TIM_OC_Init+0x2ae>
 8009d92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009d96:	42a8      	cmp	r0, r5
 8009d98:	d003      	beq.n	8009da2 <LL_TIM_OC_Init+0x2ae>
 8009d9a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009d9e:	42a8      	cmp	r0, r5
 8009da0:	d113      	bne.n	8009dca <LL_TIM_OC_Init+0x2d6>
    MODIFY_REG(tmpccer, TIM_CCER_CC4NP, TIM_OCInitStruct->OCNPolarity << 14U);
 8009da2:	6955      	ldr	r5, [r2, #20]
 8009da4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009da8:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8009dac:	6995      	ldr	r5, [r2, #24]
 8009dae:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 8009db2:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC4NE, TIM_OCInitStruct->OCNState << 14U);
 8009db6:	6895      	ldr	r5, [r2, #8]
 8009db8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009dbc:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4N, TIM_OCInitStruct->OCNIdleState << 7U);
 8009dc0:	69d5      	ldr	r5, [r2, #28]
 8009dc2:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
 8009dc6:	ea44 14c5 	orr.w	r4, r4, r5, lsl #7
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8009dca:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8009dcc:	6044      	str	r4, [r0, #4]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8009dce:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8009dd0:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009dd2:	6405      	str	r5, [r0, #64]	; 0x40
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009dd4:	6203      	str	r3, [r0, #32]
}
 8009dd6:	bc30      	pop	{r4, r5}
 8009dd8:	4610      	mov	r0, r2
 8009dda:	4770      	bx	lr
 8009ddc:	40012c00 	.word	0x40012c00
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8009de0:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8009de2:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8009de4:	f023 0310 	bic.w	r3, r3, #16
 8009de8:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8009dea:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8009dec:	6844      	ldr	r4, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8009dee:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8009df0:	f023 0320 	bic.w	r3, r3, #32
 8009df4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8009df8:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8009dfc:	6815      	ldr	r5, [r2, #0]
 8009dfe:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8009e02:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8009e06:	6855      	ldr	r5, [r2, #4]
 8009e08:	f023 0310 	bic.w	r3, r3, #16
 8009e0c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e10:	4d19      	ldr	r5, [pc, #100]	; (8009e78 <LL_TIM_OC_Init+0x384>)
 8009e12:	42a8      	cmp	r0, r5
 8009e14:	d013      	beq.n	8009e3e <LL_TIM_OC_Init+0x34a>
 8009e16:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009e1a:	42a8      	cmp	r0, r5
 8009e1c:	d00f      	beq.n	8009e3e <LL_TIM_OC_Init+0x34a>
 8009e1e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8009e22:	42a8      	cmp	r0, r5
 8009e24:	d00b      	beq.n	8009e3e <LL_TIM_OC_Init+0x34a>
 8009e26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009e2a:	42a8      	cmp	r0, r5
 8009e2c:	d007      	beq.n	8009e3e <LL_TIM_OC_Init+0x34a>
 8009e2e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009e32:	42a8      	cmp	r0, r5
 8009e34:	d003      	beq.n	8009e3e <LL_TIM_OC_Init+0x34a>
 8009e36:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009e3a:	42a8      	cmp	r0, r5
 8009e3c:	d113      	bne.n	8009e66 <LL_TIM_OC_Init+0x372>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8009e3e:	6955      	ldr	r5, [r2, #20]
 8009e40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e44:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8009e48:	6995      	ldr	r5, [r2, #24]
 8009e4a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8009e4e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8009e52:	6895      	ldr	r5, [r2, #8]
 8009e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e58:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8009e5c:	69d5      	ldr	r5, [r2, #28]
 8009e5e:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8009e62:	ea44 04c5 	orr.w	r4, r4, r5, lsl #3
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8009e66:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8009e68:	6044      	str	r4, [r0, #4]
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8009e6a:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8009e6c:	6181      	str	r1, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009e6e:	6385      	str	r5, [r0, #56]	; 0x38
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009e70:	6203      	str	r3, [r0, #32]
}
 8009e72:	bc30      	pop	{r4, r5}
 8009e74:	4610      	mov	r0, r2
 8009e76:	4770      	bx	lr
 8009e78:	40012c00 	.word	0x40012c00

08009e7c <LL_TIM_BDTR_Init>:
{
 8009e7c:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8009e7e:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8009e82:	7b0a      	ldrb	r2, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8009e84:	4322      	orrs	r2, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8009e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8009e8a:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8009e8c:	431a      	orrs	r2, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8009e8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e92:	4322      	orrs	r2, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8009e94:	89cb      	ldrh	r3, [r1, #14]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8009e96:	690c      	ldr	r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8009e98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009e9c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8009e9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8009ea2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8009ea4:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8009ea6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8009eaa:	4313      	orrs	r3, r2
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 8009eac:	4a13      	ldr	r2, [pc, #76]	; (8009efc <LL_TIM_BDTR_Init+0x80>)
 8009eae:	4290      	cmp	r0, r2
 8009eb0:	d007      	beq.n	8009ec2 <LL_TIM_BDTR_Init+0x46>
 8009eb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009eb6:	4290      	cmp	r0, r2
 8009eb8:	d003      	beq.n	8009ec2 <LL_TIM_BDTR_Init+0x46>
 8009eba:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8009ebe:	4290      	cmp	r0, r2
 8009ec0:	d117      	bne.n	8009ef2 <LL_TIM_BDTR_Init+0x76>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 8009ec2:	694c      	ldr	r4, [r1, #20]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
 8009ec4:	698a      	ldr	r2, [r1, #24]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 8009ec6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8009eca:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
 8009ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8009ed0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
 8009ed2:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8009ed4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8009ed8:	69ca      	ldr	r2, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8009eda:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8009edc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ee0:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8009ee2:	6a0c      	ldr	r4, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, TIM_BDTRInitStruct->Break2AFMode);
 8009ee4:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8009ee6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009eea:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, TIM_BDTRInitStruct->Break2AFMode);
 8009eec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009ef0:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8009ef2:	6443      	str	r3, [r0, #68]	; 0x44
}
 8009ef4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ef8:	2000      	movs	r0, #0
 8009efa:	4770      	bx	lr
 8009efc:	40012c00 	.word	0x40012c00

08009f00 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8009f00:	4b01      	ldr	r3, [pc, #4]	; (8009f08 <LL_SetSystemCoreClock+0x8>)
 8009f02:	6018      	str	r0, [r3, #0]
}
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop
 8009f08:	2000002c 	.word	0x2000002c

08009f0c <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8009f0c:	b508      	push	{r3, lr}
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8009f0e:	4906      	ldr	r1, [pc, #24]	; (8009f28 <MX_FATFS_Init+0x1c>)
 8009f10:	4806      	ldr	r0, [pc, #24]	; (8009f2c <MX_FATFS_Init+0x20>)
 8009f12:	f000 fdef 	bl	800aaf4 <FATFS_LinkDriver>
 8009f16:	b918      	cbnz	r0, 8009f20 <MX_FATFS_Init+0x14>
  {
    return APP_ERROR;
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8009f18:	4b05      	ldr	r3, [pc, #20]	; (8009f30 <MX_FATFS_Init+0x24>)
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	701a      	strb	r2, [r3, #0]
    return APP_OK;
  }
  /* USER CODE END FATFS_Init */
}
 8009f1e:	bd08      	pop	{r3, pc}
    return APP_ERROR;
 8009f20:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009f24:	bd08      	pop	{r3, pc}
 8009f26:	bf00      	nop
 8009f28:	20011438 	.word	0x20011438
 8009f2c:	20000038 	.word	0x20000038
 8009f30:	20011434 	.word	0x20011434

08009f34 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8009f34:	f000 b95c 	b.w	800a1f0 <USER_SPI_initialize>

08009f38 <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 8009f38:	f000 ba62 	b.w	800a400 <USER_SPI_status>

08009f3c <USER_read>:
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8009f3c:	f000 ba6a 	b.w	800a414 <USER_SPI_read>

08009f40 <USER_write>:
	UINT count          /* Number of sectors to write */
)
{
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8009f40:	f000 bac8 	b.w	800a4d4 <USER_SPI_write>

08009f44 <USER_ioctl>:
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8009f44:	f000 bc2a 	b.w	800a79c <USER_SPI_ioctl>

08009f48 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8009f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f4c:	b084      	sub	sp, #16
 8009f4e:	4681      	mov	r9, r0
 8009f50:	468a      	mov	sl, r1
    spiTimerTickStart = HAL_GetTick();
 8009f52:	f7fb fda1 	bl	8005a98 <HAL_GetTick>
 8009f56:	4d2c      	ldr	r5, [pc, #176]	; (800a008 <rcvr_datablock+0xc0>)
    spiTimerTickDelay = waitTicks;
 8009f58:	4c2c      	ldr	r4, [pc, #176]	; (800a00c <rcvr_datablock+0xc4>)
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009f5a:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800a010 <rcvr_datablock+0xc8>
    spiTimerTickStart = HAL_GetTick();
 8009f5e:	6028      	str	r0, [r5, #0]
    spiTimerTickDelay = waitTicks;
 8009f60:	23c8      	movs	r3, #200	; 0xc8
 8009f62:	6023      	str	r3, [r4, #0]
 8009f64:	27ff      	movs	r7, #255	; 0xff
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009f66:	2632      	movs	r6, #50	; 0x32
}
 8009f68:	e006      	b.n	8009f78 <rcvr_datablock+0x30>
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8009f6a:	f7fb fd95 	bl	8005a98 <HAL_GetTick>
 8009f6e:	682a      	ldr	r2, [r5, #0]

	SPI_Timer_On(200);
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8009f70:	6823      	ldr	r3, [r4, #0]
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8009f72:	1a80      	subs	r0, r0, r2
	} while ((token == 0xFF) && SPI_Timer_Status());
 8009f74:	4298      	cmp	r0, r3
 8009f76:	d243      	bcs.n	800a000 <rcvr_datablock+0xb8>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009f78:	2301      	movs	r3, #1
 8009f7a:	f10d 020f 	add.w	r2, sp, #15
 8009f7e:	f10d 010e 	add.w	r1, sp, #14
 8009f82:	9600      	str	r6, [sp, #0]
 8009f84:	4640      	mov	r0, r8
 8009f86:	f88d 700e 	strb.w	r7, [sp, #14]
 8009f8a:	f7fe f867 	bl	800805c <HAL_SPI_TransmitReceive>
    return rxDat;
 8009f8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
	} while ((token == 0xFF) && SPI_Timer_Status());
 8009f92:	2bff      	cmp	r3, #255	; 0xff
 8009f94:	d0e9      	beq.n	8009f6a <rcvr_datablock+0x22>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8009f96:	2bfe      	cmp	r3, #254	; 0xfe
 8009f98:	d132      	bne.n	800a000 <rcvr_datablock+0xb8>
 8009f9a:	f10a 3aff 	add.w	sl, sl, #4294967295
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009f9e:	4f1c      	ldr	r7, [pc, #112]	; (800a010 <rcvr_datablock+0xc8>)
 8009fa0:	f109 34ff 	add.w	r4, r9, #4294967295
 8009fa4:	25ff      	movs	r5, #255	; 0xff
 8009fa6:	44d1      	add	r9, sl
 8009fa8:	2632      	movs	r6, #50	; 0x32
 8009faa:	2301      	movs	r3, #1
 8009fac:	9600      	str	r6, [sp, #0]
 8009fae:	f10d 020f 	add.w	r2, sp, #15
 8009fb2:	f10d 010e 	add.w	r1, sp, #14
 8009fb6:	4638      	mov	r0, r7
 8009fb8:	f88d 500e 	strb.w	r5, [sp, #14]
 8009fbc:	f7fe f84e 	bl	800805c <HAL_SPI_TransmitReceive>
    return rxDat;
 8009fc0:	f89d 300f 	ldrb.w	r3, [sp, #15]
		*(buff+i) = xchg_spi(0xFF);
 8009fc4:	f804 3f01 	strb.w	r3, [r4, #1]!
	for(UINT i=0; i<btr; i++) {
 8009fc8:	454c      	cmp	r4, r9
 8009fca:	d1ee      	bne.n	8009faa <rcvr_datablock+0x62>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009fcc:	f10d 020f 	add.w	r2, sp, #15
 8009fd0:	f10d 010e 	add.w	r1, sp, #14
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	9600      	str	r6, [sp, #0]
 8009fd8:	480d      	ldr	r0, [pc, #52]	; (800a010 <rcvr_datablock+0xc8>)
 8009fda:	f88d 500e 	strb.w	r5, [sp, #14]
 8009fde:	f7fe f83d 	bl	800805c <HAL_SPI_TransmitReceive>
 8009fe2:	9600      	str	r6, [sp, #0]
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	f10d 020f 	add.w	r2, sp, #15
 8009fea:	f10d 010e 	add.w	r1, sp, #14
 8009fee:	4808      	ldr	r0, [pc, #32]	; (800a010 <rcvr_datablock+0xc8>)
 8009ff0:	f88d 500e 	strb.w	r5, [sp, #14]
 8009ff4:	f7fe f832 	bl	800805c <HAL_SPI_TransmitReceive>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8009ff8:	2001      	movs	r0, #1

	return 1;						/* Function succeeded */
}
 8009ffa:	b004      	add	sp, #16
 8009ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800a000:	2000      	movs	r0, #0
}
 800a002:	b004      	add	sp, #16
 800a004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a008:	20011444 	.word	0x20011444
 800a00c:	20011440 	.word	0x20011440
 800a010:	20011228 	.word	0x20011228

0800a014 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800a014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800a018:	0603      	lsls	r3, r0, #24
{
 800a01a:	b085      	sub	sp, #20
 800a01c:	4680      	mov	r8, r0
 800a01e:	468b      	mov	fp, r1
	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800a020:	f100 80c0 	bmi.w	800a1a4 <send_cmd+0x190>
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800a024:	f1b8 0f0c 	cmp.w	r8, #12
 800a028:	f000 80a4 	beq.w	800a174 <send_cmd+0x160>
	CS_HIGH();		/* Set CS# high */
 800a02c:	486e      	ldr	r0, [pc, #440]	; (800a1e8 <send_cmd+0x1d4>)
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a02e:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 800a1ec <send_cmd+0x1d8>
	CS_HIGH();		/* Set CS# high */
 800a032:	2201      	movs	r2, #1
 800a034:	f44f 7180 	mov.w	r1, #256	; 0x100
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a038:	f10d 060f 	add.w	r6, sp, #15
 800a03c:	f10d 050e 	add.w	r5, sp, #14
 800a040:	2732      	movs	r7, #50	; 0x32
	CS_HIGH();		/* Set CS# high */
 800a042:	f7fc f905 	bl	8006250 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800a046:	24ff      	movs	r4, #255	; 0xff
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a048:	2301      	movs	r3, #1
 800a04a:	4632      	mov	r2, r6
 800a04c:	4629      	mov	r1, r5
 800a04e:	4867      	ldr	r0, [pc, #412]	; (800a1ec <send_cmd+0x1d8>)
 800a050:	9700      	str	r7, [sp, #0]
 800a052:	f88d 400e 	strb.w	r4, [sp, #14]
 800a056:	f7fe f801 	bl	800805c <HAL_SPI_TransmitReceive>
	CS_LOW();		/* Set CS# low */
 800a05a:	4863      	ldr	r0, [pc, #396]	; (800a1e8 <send_cmd+0x1d4>)
 800a05c:	2200      	movs	r2, #0
 800a05e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a062:	f7fc f8f5 	bl	8006250 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a066:	2301      	movs	r3, #1
 800a068:	4632      	mov	r2, r6
 800a06a:	4629      	mov	r1, r5
 800a06c:	485f      	ldr	r0, [pc, #380]	; (800a1ec <send_cmd+0x1d8>)
 800a06e:	9700      	str	r7, [sp, #0]
 800a070:	f88d 400e 	strb.w	r4, [sp, #14]
 800a074:	f7fd fff2 	bl	800805c <HAL_SPI_TransmitReceive>
	waitSpiTimerTickStart = HAL_GetTick();
 800a078:	f7fb fd0e 	bl	8005a98 <HAL_GetTick>
 800a07c:	4681      	mov	r9, r0
	waitSpiTimerTickDelay = (uint32_t)wt;
 800a07e:	e006      	b.n	800a08e <send_cmd+0x7a>
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a080:	f7fb fd0a 	bl	8005a98 <HAL_GetTick>
 800a084:	eba0 0009 	sub.w	r0, r0, r9
 800a088:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800a08c:	d277      	bcs.n	800a17e <send_cmd+0x16a>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a08e:	2301      	movs	r3, #1
 800a090:	4632      	mov	r2, r6
 800a092:	4629      	mov	r1, r5
 800a094:	9700      	str	r7, [sp, #0]
 800a096:	4650      	mov	r0, sl
 800a098:	f88d 400e 	strb.w	r4, [sp, #14]
 800a09c:	f7fd ffde 	bl	800805c <HAL_SPI_TransmitReceive>
    return rxDat;
 800a0a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a0a4:	2bff      	cmp	r3, #255	; 0xff
 800a0a6:	d1eb      	bne.n	800a080 <send_cmd+0x6c>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a0a8:	2432      	movs	r4, #50	; 0x32
		despiselect();
		if (!spiselect()) return 0xFF;
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800a0aa:	f048 0340 	orr.w	r3, r8, #64	; 0x40
 800a0ae:	f88d 300e 	strb.w	r3, [sp, #14]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a0b2:	4632      	mov	r2, r6
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	4629      	mov	r1, r5
 800a0b8:	484c      	ldr	r0, [pc, #304]	; (800a1ec <send_cmd+0x1d8>)
 800a0ba:	9400      	str	r4, [sp, #0]
 800a0bc:	f7fd ffce 	bl	800805c <HAL_SPI_TransmitReceive>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800a0c0:	ea4f 671b 	mov.w	r7, fp, lsr #24
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	4632      	mov	r2, r6
 800a0c8:	4629      	mov	r1, r5
 800a0ca:	4848      	ldr	r0, [pc, #288]	; (800a1ec <send_cmd+0x1d8>)
 800a0cc:	9400      	str	r4, [sp, #0]
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800a0ce:	f88d 700e 	strb.w	r7, [sp, #14]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a0d2:	f7fd ffc3 	bl	800805c <HAL_SPI_TransmitReceive>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800a0d6:	ea4f 471b 	mov.w	r7, fp, lsr #16
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a0da:	2301      	movs	r3, #1
 800a0dc:	4632      	mov	r2, r6
 800a0de:	4629      	mov	r1, r5
 800a0e0:	4842      	ldr	r0, [pc, #264]	; (800a1ec <send_cmd+0x1d8>)
 800a0e2:	9400      	str	r4, [sp, #0]
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800a0e4:	f88d 700e 	strb.w	r7, [sp, #14]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a0e8:	f7fd ffb8 	bl	800805c <HAL_SPI_TransmitReceive>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800a0ec:	ea4f 271b 	mov.w	r7, fp, lsr #8
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	4632      	mov	r2, r6
 800a0f4:	4629      	mov	r1, r5
 800a0f6:	483d      	ldr	r0, [pc, #244]	; (800a1ec <send_cmd+0x1d8>)
 800a0f8:	9400      	str	r4, [sp, #0]
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800a0fa:	f88d 700e 	strb.w	r7, [sp, #14]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a0fe:	f7fd ffad 	bl	800805c <HAL_SPI_TransmitReceive>
 800a102:	483a      	ldr	r0, [pc, #232]	; (800a1ec <send_cmd+0x1d8>)
 800a104:	9400      	str	r4, [sp, #0]
 800a106:	2301      	movs	r3, #1
 800a108:	4632      	mov	r2, r6
 800a10a:	4629      	mov	r1, r5
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800a10c:	f88d b00e 	strb.w	fp, [sp, #14]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a110:	f7fd ffa4 	bl	800805c <HAL_SPI_TransmitReceive>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800a114:	f1b8 0f00 	cmp.w	r8, #0
 800a118:	d02a      	beq.n	800a170 <send_cmd+0x15c>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800a11a:	f1b8 0f08 	cmp.w	r8, #8
 800a11e:	d14a      	bne.n	800a1b6 <send_cmd+0x1a2>
	xchg_spi(n);
 800a120:	2187      	movs	r1, #135	; 0x87
 800a122:	f88d 100e 	strb.w	r1, [sp, #14]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a126:	4831      	ldr	r0, [pc, #196]	; (800a1ec <send_cmd+0x1d8>)
 800a128:	9400      	str	r4, [sp, #0]
 800a12a:	2301      	movs	r3, #1
 800a12c:	4632      	mov	r2, r6
 800a12e:	4629      	mov	r1, r5
 800a130:	f7fd ff94 	bl	800805c <HAL_SPI_TransmitReceive>
 800a134:	4f2d      	ldr	r7, [pc, #180]	; (800a1ec <send_cmd+0x1d8>)
{
 800a136:	240a      	movs	r4, #10
 800a138:	f04f 09ff 	mov.w	r9, #255	; 0xff
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a13c:	f04f 0832 	mov.w	r8, #50	; 0x32
 800a140:	2301      	movs	r3, #1
 800a142:	4632      	mov	r2, r6
 800a144:	f8cd 8000 	str.w	r8, [sp]
 800a148:	4629      	mov	r1, r5
 800a14a:	4638      	mov	r0, r7
 800a14c:	f88d 900e 	strb.w	r9, [sp, #14]
 800a150:	f7fd ff84 	bl	800805c <HAL_SPI_TransmitReceive>
	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
	n = 10;								/* Wait for response (10 bytes max) */
	do {
		res = xchg_spi(0xFF);
	} while ((res & 0x80) && --n);
 800a154:	f99d 200f 	ldrsb.w	r2, [sp, #15]
    return rxDat;
 800a158:	f89d 000f 	ldrb.w	r0, [sp, #15]
	} while ((res & 0x80) && --n);
 800a15c:	2a00      	cmp	r2, #0
 800a15e:	f104 33ff 	add.w	r3, r4, #4294967295
 800a162:	da02      	bge.n	800a16a <send_cmd+0x156>
 800a164:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800a168:	d1ea      	bne.n	800a140 <send_cmd+0x12c>

	return res;							/* Return received response */
}
 800a16a:	b005      	add	sp, #20
 800a16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	xchg_spi(n);
 800a170:	2195      	movs	r1, #149	; 0x95
 800a172:	e7d6      	b.n	800a122 <send_cmd+0x10e>
 800a174:	f10d 060f 	add.w	r6, sp, #15
 800a178:	f10d 050e 	add.w	r5, sp, #14
 800a17c:	e794      	b.n	800a0a8 <send_cmd+0x94>
	CS_HIGH();		/* Set CS# high */
 800a17e:	481a      	ldr	r0, [pc, #104]	; (800a1e8 <send_cmd+0x1d4>)
 800a180:	2201      	movs	r2, #1
 800a182:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a186:	f7fc f863 	bl	8006250 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a18a:	9700      	str	r7, [sp, #0]
 800a18c:	2301      	movs	r3, #1
 800a18e:	4632      	mov	r2, r6
 800a190:	4629      	mov	r1, r5
 800a192:	4816      	ldr	r0, [pc, #88]	; (800a1ec <send_cmd+0x1d8>)
 800a194:	f88d 400e 	strb.w	r4, [sp, #14]
 800a198:	f7fd ff60 	bl	800805c <HAL_SPI_TransmitReceive>
		if (!spiselect()) return 0xFF;
 800a19c:	20ff      	movs	r0, #255	; 0xff
}
 800a19e:	b005      	add	sp, #20
 800a1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = send_cmd(CMD55, 0);
 800a1a4:	2100      	movs	r1, #0
 800a1a6:	2037      	movs	r0, #55	; 0x37
 800a1a8:	f7ff ff34 	bl	800a014 <send_cmd>
		if (res > 1) return res;
 800a1ac:	2801      	cmp	r0, #1
 800a1ae:	d8dc      	bhi.n	800a16a <send_cmd+0x156>
		cmd &= 0x7F;
 800a1b0:	f008 087f 	and.w	r8, r8, #127	; 0x7f
 800a1b4:	e736      	b.n	800a024 <send_cmd+0x10>
	xchg_spi(n);
 800a1b6:	2701      	movs	r7, #1
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a1b8:	480c      	ldr	r0, [pc, #48]	; (800a1ec <send_cmd+0x1d8>)
 800a1ba:	9400      	str	r4, [sp, #0]
 800a1bc:	463b      	mov	r3, r7
 800a1be:	4632      	mov	r2, r6
 800a1c0:	4629      	mov	r1, r5
 800a1c2:	f88d 700e 	strb.w	r7, [sp, #14]
 800a1c6:	f7fd ff49 	bl	800805c <HAL_SPI_TransmitReceive>
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800a1ca:	f1b8 0f0c 	cmp.w	r8, #12
 800a1ce:	d1b1      	bne.n	800a134 <send_cmd+0x120>
 800a1d0:	21ff      	movs	r1, #255	; 0xff
 800a1d2:	f88d 100e 	strb.w	r1, [sp, #14]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a1d6:	9400      	str	r4, [sp, #0]
 800a1d8:	463b      	mov	r3, r7
 800a1da:	4632      	mov	r2, r6
 800a1dc:	4629      	mov	r1, r5
 800a1de:	4803      	ldr	r0, [pc, #12]	; (800a1ec <send_cmd+0x1d8>)
 800a1e0:	f7fd ff3c 	bl	800805c <HAL_SPI_TransmitReceive>
    return rxDat;
 800a1e4:	e7a6      	b.n	800a134 <send_cmd+0x120>
 800a1e6:	bf00      	nop
 800a1e8:	48000800 	.word	0x48000800
 800a1ec:	20011228 	.word	0x20011228

0800a1f0 <USER_SPI_initialize>:
	BYTE drv		/* Physical drive number (0) */
)
{
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d13e      	bne.n	800a272 <USER_SPI_initialize+0x82>
{
 800a1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800a1f8:	4c7b      	ldr	r4, [pc, #492]	; (800a3e8 <USER_SPI_initialize+0x1f8>)
 800a1fa:	7823      	ldrb	r3, [r4, #0]
 800a1fc:	079b      	lsls	r3, r3, #30
{
 800a1fe:	b087      	sub	sp, #28
	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800a200:	d432      	bmi.n	800a268 <USER_SPI_initialize+0x78>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a202:	4f7a      	ldr	r7, [pc, #488]	; (800a3ec <USER_SPI_initialize+0x1fc>)
 800a204:	250a      	movs	r5, #10
 800a206:	f04f 08ff 	mov.w	r8, #255	; 0xff
 800a20a:	2632      	movs	r6, #50	; 0x32
 800a20c:	9600      	str	r6, [sp, #0]
 800a20e:	2301      	movs	r3, #1
 800a210:	aa05      	add	r2, sp, #20
 800a212:	f10d 0113 	add.w	r1, sp, #19
 800a216:	4638      	mov	r0, r7

	//FCLK_SLOW();
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800a218:	3d01      	subs	r5, #1
 800a21a:	f88d 8013 	strb.w	r8, [sp, #19]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a21e:	f7fd ff1d 	bl	800805c <HAL_SPI_TransmitReceive>
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800a222:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800a226:	d1f1      	bne.n	800a20c <USER_SPI_initialize+0x1c>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800a228:	4629      	mov	r1, r5
 800a22a:	4628      	mov	r0, r5
 800a22c:	f7ff fef2 	bl	800a014 <send_cmd>
 800a230:	2801      	cmp	r0, #1
 800a232:	4680      	mov	r8, r0
 800a234:	d01f      	beq.n	800a276 <USER_SPI_initialize+0x86>
 800a236:	f10d 0512 	add.w	r5, sp, #18
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
				ty = 0;
		}
	}
	CardType = ty;	/* Card type */
 800a23a:	4b6d      	ldr	r3, [pc, #436]	; (800a3f0 <USER_SPI_initialize+0x200>)
	CS_HIGH();		/* Set CS# high */
 800a23c:	486d      	ldr	r0, [pc, #436]	; (800a3f4 <USER_SPI_initialize+0x204>)
	CardType = ty;	/* Card type */
 800a23e:	2200      	movs	r2, #0
 800a240:	701a      	strb	r2, [r3, #0]
	CS_HIGH();		/* Set CS# high */
 800a242:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a246:	2201      	movs	r2, #1
 800a248:	f7fc f802 	bl	8006250 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a24c:	2232      	movs	r2, #50	; 0x32
 800a24e:	23ff      	movs	r3, #255	; 0xff
 800a250:	9200      	str	r2, [sp, #0]
 800a252:	f88d 3012 	strb.w	r3, [sp, #18]
 800a256:	4865      	ldr	r0, [pc, #404]	; (800a3ec <USER_SPI_initialize+0x1fc>)
 800a258:	2301      	movs	r3, #1
 800a25a:	f10d 0213 	add.w	r2, sp, #19
 800a25e:	4629      	mov	r1, r5
 800a260:	f7fd fefc 	bl	800805c <HAL_SPI_TransmitReceive>

	if (ty) {			/* OK */
		//FCLK_FAST();			/* Set fast clock */
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800a264:	2301      	movs	r3, #1
 800a266:	7023      	strb	r3, [r4, #0]
	}

	return Stat;
 800a268:	7820      	ldrb	r0, [r4, #0]
 800a26a:	b2c0      	uxtb	r0, r0
}
 800a26c:	b007      	add	sp, #28
 800a26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800a272:	2001      	movs	r0, #1
}
 800a274:	4770      	bx	lr
    spiTimerTickStart = HAL_GetTick();
 800a276:	f7fb fc0f 	bl	8005a98 <HAL_GetTick>
 800a27a:	4f5f      	ldr	r7, [pc, #380]	; (800a3f8 <USER_SPI_initialize+0x208>)
    spiTimerTickDelay = waitTicks;
 800a27c:	4e5f      	ldr	r6, [pc, #380]	; (800a3fc <USER_SPI_initialize+0x20c>)
    spiTimerTickStart = HAL_GetTick();
 800a27e:	6038      	str	r0, [r7, #0]
    spiTimerTickDelay = waitTicks;
 800a280:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800a284:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a288:	2008      	movs	r0, #8
    spiTimerTickDelay = waitTicks;
 800a28a:	6033      	str	r3, [r6, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800a28c:	f7ff fec2 	bl	800a014 <send_cmd>
 800a290:	2801      	cmp	r0, #1
 800a292:	d15f      	bne.n	800a354 <USER_SPI_initialize+0x164>
 800a294:	ab05      	add	r3, sp, #20
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a296:	f8df b154 	ldr.w	fp, [pc, #340]	; 800a3ec <USER_SPI_initialize+0x1fc>
 800a29a:	9303      	str	r3, [sp, #12]
 800a29c:	f10d 0918 	add.w	r9, sp, #24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800a2a0:	4698      	mov	r8, r3
 800a2a2:	f10d 0512 	add.w	r5, sp, #18
 800a2a6:	f04f 0aff 	mov.w	sl, #255	; 0xff
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a2aa:	2332      	movs	r3, #50	; 0x32
 800a2ac:	9300      	str	r3, [sp, #0]
 800a2ae:	f10d 0213 	add.w	r2, sp, #19
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	4629      	mov	r1, r5
 800a2b6:	4658      	mov	r0, fp
 800a2b8:	f88d a012 	strb.w	sl, [sp, #18]
 800a2bc:	f7fd fece 	bl	800805c <HAL_SPI_TransmitReceive>
    return rxDat;
 800a2c0:	f89d 3013 	ldrb.w	r3, [sp, #19]
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800a2c4:	f808 3b01 	strb.w	r3, [r8], #1
 800a2c8:	45c8      	cmp	r8, r9
 800a2ca:	d1ee      	bne.n	800a2aa <USER_SPI_initialize+0xba>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800a2cc:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d1b2      	bne.n	800a23a <USER_SPI_initialize+0x4a>
 800a2d4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800a2d8:	2baa      	cmp	r3, #170	; 0xaa
 800a2da:	d1ae      	bne.n	800a23a <USER_SPI_initialize+0x4a>
 800a2dc:	e002      	b.n	800a2e4 <USER_SPI_initialize+0xf4>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800a2de:	f7ff fe99 	bl	800a014 <send_cmd>
 800a2e2:	b150      	cbz	r0, 800a2fa <USER_SPI_initialize+0x10a>
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800a2e4:	f7fb fbd8 	bl	8005a98 <HAL_GetTick>
 800a2e8:	683b      	ldr	r3, [r7, #0]
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800a2ea:	6832      	ldr	r2, [r6, #0]
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800a2ec:	1ac3      	subs	r3, r0, r3
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a2f4:	f04f 00a9 	mov.w	r0, #169	; 0xa9
 800a2f8:	d3f1      	bcc.n	800a2de <USER_SPI_initialize+0xee>
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800a2fa:	f7fb fbcd 	bl	8005a98 <HAL_GetTick>
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	1ac0      	subs	r0, r0, r3
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800a302:	6833      	ldr	r3, [r6, #0]
 800a304:	4298      	cmp	r0, r3
 800a306:	d298      	bcs.n	800a23a <USER_SPI_initialize+0x4a>
 800a308:	2100      	movs	r1, #0
 800a30a:	203a      	movs	r0, #58	; 0x3a
 800a30c:	f7ff fe82 	bl	800a014 <send_cmd>
 800a310:	2800      	cmp	r0, #0
 800a312:	d192      	bne.n	800a23a <USER_SPI_initialize+0x4a>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a314:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800a3ec <USER_SPI_initialize+0x1fc>
 800a318:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800a31c:	27ff      	movs	r7, #255	; 0xff
 800a31e:	2632      	movs	r6, #50	; 0x32
 800a320:	2301      	movs	r3, #1
 800a322:	9600      	str	r6, [sp, #0]
 800a324:	f10d 0213 	add.w	r2, sp, #19
 800a328:	4629      	mov	r1, r5
 800a32a:	4640      	mov	r0, r8
 800a32c:	f88d 7012 	strb.w	r7, [sp, #18]
 800a330:	f7fd fe94 	bl	800805c <HAL_SPI_TransmitReceive>
    return rxDat;
 800a334:	f89d 3013 	ldrb.w	r3, [sp, #19]
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800a338:	f80a 3b01 	strb.w	r3, [sl], #1
 800a33c:	45d1      	cmp	r9, sl
 800a33e:	d1ef      	bne.n	800a320 <USER_SPI_initialize+0x130>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800a340:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800a344:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a348:	bf14      	ite	ne
 800a34a:	f04f 090c 	movne.w	r9, #12
 800a34e:	f04f 0904 	moveq.w	r9, #4
 800a352:	e02b      	b.n	800a3ac <USER_SPI_initialize+0x1bc>
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800a354:	4629      	mov	r1, r5
 800a356:	20a9      	movs	r0, #169	; 0xa9
 800a358:	f7ff fe5c 	bl	800a014 <send_cmd>
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800a35c:	2802      	cmp	r0, #2
 800a35e:	bf3a      	itte	cc
 800a360:	f04f 08a9 	movcc.w	r8, #169	; 0xa9
 800a364:	f04f 0902 	movcc.w	r9, #2
 800a368:	f04f 0901 	movcs.w	r9, #1
 800a36c:	e003      	b.n	800a376 <USER_SPI_initialize+0x186>
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800a36e:	4640      	mov	r0, r8
 800a370:	f7ff fe50 	bl	800a014 <send_cmd>
 800a374:	b140      	cbz	r0, 800a388 <USER_SPI_initialize+0x198>
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800a376:	f7fb fb8f 	bl	8005a98 <HAL_GetTick>
 800a37a:	683a      	ldr	r2, [r7, #0]
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800a37c:	6833      	ldr	r3, [r6, #0]
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800a37e:	1a80      	subs	r0, r0, r2
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800a380:	4298      	cmp	r0, r3
 800a382:	f04f 0100 	mov.w	r1, #0
 800a386:	d3f2      	bcc.n	800a36e <USER_SPI_initialize+0x17e>
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800a388:	f7fb fb86 	bl	8005a98 <HAL_GetTick>
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	1ac0      	subs	r0, r0, r3
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800a390:	6833      	ldr	r3, [r6, #0]
 800a392:	4298      	cmp	r0, r3
 800a394:	f4bf af4f 	bcs.w	800a236 <USER_SPI_initialize+0x46>
 800a398:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a39c:	2010      	movs	r0, #16
 800a39e:	f7ff fe39 	bl	800a014 <send_cmd>
 800a3a2:	f10d 0512 	add.w	r5, sp, #18
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	f47f af47 	bne.w	800a23a <USER_SPI_initialize+0x4a>
	CardType = ty;	/* Card type */
 800a3ac:	4b10      	ldr	r3, [pc, #64]	; (800a3f0 <USER_SPI_initialize+0x200>)
	CS_HIGH();		/* Set CS# high */
 800a3ae:	4811      	ldr	r0, [pc, #68]	; (800a3f4 <USER_SPI_initialize+0x204>)
	CardType = ty;	/* Card type */
 800a3b0:	f883 9000 	strb.w	r9, [r3]
	CS_HIGH();		/* Set CS# high */
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a3ba:	f7fb ff49 	bl	8006250 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a3be:	2232      	movs	r2, #50	; 0x32
 800a3c0:	23ff      	movs	r3, #255	; 0xff
 800a3c2:	9200      	str	r2, [sp, #0]
 800a3c4:	f88d 3012 	strb.w	r3, [sp, #18]
 800a3c8:	f10d 0213 	add.w	r2, sp, #19
 800a3cc:	4629      	mov	r1, r5
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	4806      	ldr	r0, [pc, #24]	; (800a3ec <USER_SPI_initialize+0x1fc>)
 800a3d2:	f7fd fe43 	bl	800805c <HAL_SPI_TransmitReceive>
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800a3d6:	7823      	ldrb	r3, [r4, #0]
 800a3d8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a3dc:	7023      	strb	r3, [r4, #0]
	return Stat;
 800a3de:	7820      	ldrb	r0, [r4, #0]
 800a3e0:	b2c0      	uxtb	r0, r0
}
 800a3e2:	b007      	add	sp, #28
 800a3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e8:	2000004c 	.word	0x2000004c
 800a3ec:	20011228 	.word	0x20011228
 800a3f0:	2001143c 	.word	0x2001143c
 800a3f4:	48000800 	.word	0x48000800
 800a3f8:	20011444 	.word	0x20011444
 800a3fc:	20011440 	.word	0x20011440

0800a400 <USER_SPI_status>:

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800a400:	b918      	cbnz	r0, 800a40a <USER_SPI_status+0xa>

	return Stat;	/* Return disk status */
 800a402:	4b03      	ldr	r3, [pc, #12]	; (800a410 <USER_SPI_status+0x10>)
 800a404:	7818      	ldrb	r0, [r3, #0]
 800a406:	b2c0      	uxtb	r0, r0
 800a408:	4770      	bx	lr
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800a40a:	2001      	movs	r0, #1
}
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop
 800a410:	2000004c 	.word	0x2000004c

0800a414 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800a414:	b570      	push	{r4, r5, r6, lr}
 800a416:	b084      	sub	sp, #16
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a418:	2800      	cmp	r0, #0
 800a41a:	d13c      	bne.n	800a496 <USER_SPI_read+0x82>
 800a41c:	461c      	mov	r4, r3
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d039      	beq.n	800a496 <USER_SPI_read+0x82>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a422:	4b28      	ldr	r3, [pc, #160]	; (800a4c4 <USER_SPI_read+0xb0>)
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	07d8      	lsls	r0, r3, #31
 800a428:	d439      	bmi.n	800a49e <USER_SPI_read+0x8a>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800a42a:	4b27      	ldr	r3, [pc, #156]	; (800a4c8 <USER_SPI_read+0xb4>)
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	071b      	lsls	r3, r3, #28
 800a430:	bf58      	it	pl
 800a432:	0252      	lslpl	r2, r2, #9

	if (count == 1) {	/* Single sector read */
 800a434:	2c01      	cmp	r4, #1
 800a436:	460e      	mov	r6, r1
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800a438:	4611      	mov	r1, r2
	if (count == 1) {	/* Single sector read */
 800a43a:	d034      	beq.n	800a4a6 <USER_SPI_read+0x92>
			&& rcvr_datablock(buff, 512)) {
			count = 0;
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800a43c:	2012      	movs	r0, #18
 800a43e:	f7ff fde9 	bl	800a014 <send_cmd>
 800a442:	4605      	mov	r5, r0
 800a444:	b1c0      	cbz	r0, 800a478 <USER_SPI_read+0x64>
 800a446:	2501      	movs	r5, #1
	CS_HIGH();		/* Set CS# high */
 800a448:	4820      	ldr	r0, [pc, #128]	; (800a4cc <USER_SPI_read+0xb8>)
 800a44a:	2201      	movs	r2, #1
 800a44c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a450:	f7fb fefe 	bl	8006250 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a454:	2332      	movs	r3, #50	; 0x32
 800a456:	20ff      	movs	r0, #255	; 0xff
 800a458:	9300      	str	r3, [sp, #0]
 800a45a:	f88d 000e 	strb.w	r0, [sp, #14]
 800a45e:	2301      	movs	r3, #1
 800a460:	f10d 020f 	add.w	r2, sp, #15
 800a464:	f10d 010e 	add.w	r1, sp, #14
 800a468:	4819      	ldr	r0, [pc, #100]	; (800a4d0 <USER_SPI_read+0xbc>)
 800a46a:	f7fd fdf7 	bl	800805c <HAL_SPI_TransmitReceive>
		}
	}
	despiselect();

	return count ? RES_ERROR : RES_OK;	/* Return result */
}
 800a46e:	4628      	mov	r0, r5
 800a470:	b004      	add	sp, #16
 800a472:	bd70      	pop	{r4, r5, r6, pc}
			} while (--count);
 800a474:	3c01      	subs	r4, #1
 800a476:	d009      	beq.n	800a48c <USER_SPI_read+0x78>
				if (!rcvr_datablock(buff, 512)) break;
 800a478:	4630      	mov	r0, r6
 800a47a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a47e:	f7ff fd63 	bl	8009f48 <rcvr_datablock>
				buff += 512;
 800a482:	f506 7600 	add.w	r6, r6, #512	; 0x200
				if (!rcvr_datablock(buff, 512)) break;
 800a486:	2800      	cmp	r0, #0
 800a488:	d1f4      	bne.n	800a474 <USER_SPI_read+0x60>
 800a48a:	2501      	movs	r5, #1
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800a48c:	2100      	movs	r1, #0
 800a48e:	200c      	movs	r0, #12
 800a490:	f7ff fdc0 	bl	800a014 <send_cmd>
 800a494:	e7d8      	b.n	800a448 <USER_SPI_read+0x34>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a496:	2504      	movs	r5, #4
}
 800a498:	4628      	mov	r0, r5
 800a49a:	b004      	add	sp, #16
 800a49c:	bd70      	pop	{r4, r5, r6, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a49e:	2503      	movs	r5, #3
}
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	b004      	add	sp, #16
 800a4a4:	bd70      	pop	{r4, r5, r6, pc}
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800a4a6:	2011      	movs	r0, #17
 800a4a8:	f7ff fdb4 	bl	800a014 <send_cmd>
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	d1ca      	bne.n	800a446 <USER_SPI_read+0x32>
			&& rcvr_datablock(buff, 512)) {
 800a4b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a4b4:	4630      	mov	r0, r6
 800a4b6:	f7ff fd47 	bl	8009f48 <rcvr_datablock>
	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a4ba:	fab0 f580 	clz	r5, r0
 800a4be:	096d      	lsrs	r5, r5, #5
 800a4c0:	e7c2      	b.n	800a448 <USER_SPI_read+0x34>
 800a4c2:	bf00      	nop
 800a4c4:	2000004c 	.word	0x2000004c
 800a4c8:	2001143c 	.word	0x2001143c
 800a4cc:	48000800 	.word	0x48000800
 800a4d0:	20011228 	.word	0x20011228

0800a4d4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800a4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4d8:	b087      	sub	sp, #28
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	f040 80ab 	bne.w	800a636 <USER_SPI_write+0x162>
 800a4e0:	469b      	mov	fp, r3
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	f000 80a7 	beq.w	800a636 <USER_SPI_write+0x162>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800a4e8:	4ba8      	ldr	r3, [pc, #672]	; (800a78c <USER_SPI_write+0x2b8>)
 800a4ea:	468a      	mov	sl, r1
 800a4ec:	7819      	ldrb	r1, [r3, #0]
 800a4ee:	07cc      	lsls	r4, r1, #31
 800a4f0:	f100 80c2 	bmi.w	800a678 <USER_SPI_write+0x1a4>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	0758      	lsls	r0, r3, #29
 800a4f8:	f100 80d7 	bmi.w	800a6aa <USER_SPI_write+0x1d6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800a4fc:	4ba4      	ldr	r3, [pc, #656]	; (800a790 <USER_SPI_write+0x2bc>)
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	0719      	lsls	r1, r3, #28
 800a502:	bf58      	it	pl
 800a504:	0252      	lslpl	r2, r2, #9

	if (count == 1) {	/* Single sector write */
 800a506:	f1bb 0f01 	cmp.w	fp, #1
 800a50a:	f000 80c2 	beq.w	800a692 <USER_SPI_write+0x1be>
			&& xmit_datablock(buff, 0xFE)) {
			count = 0;
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800a50e:	f013 0f06 	tst.w	r3, #6
 800a512:	f040 80d0 	bne.w	800a6b6 <USER_SPI_write+0x1e2>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800a516:	4611      	mov	r1, r2
 800a518:	2019      	movs	r0, #25
 800a51a:	f7ff fd7b 	bl	800a014 <send_cmd>
 800a51e:	2800      	cmp	r0, #0
 800a520:	f040 808f 	bne.w	800a642 <USER_SPI_write+0x16e>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a524:	4f9b      	ldr	r7, [pc, #620]	; (800a794 <USER_SPI_write+0x2c0>)
 800a526:	f20a 1aff 	addw	sl, sl, #511	; 0x1ff
 800a52a:	f10d 0517 	add.w	r5, sp, #23
 800a52e:	f10d 0416 	add.w	r4, sp, #22
 800a532:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800a536:	2632      	movs	r6, #50	; 0x32
	waitSpiTimerTickStart = HAL_GetTick();
 800a538:	f7fb faae 	bl	8005a98 <HAL_GetTick>
 800a53c:	4680      	mov	r8, r0
	waitSpiTimerTickDelay = (uint32_t)wt;
 800a53e:	e006      	b.n	800a54e <USER_SPI_write+0x7a>
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a540:	f7fb faaa 	bl	8005a98 <HAL_GetTick>
 800a544:	eba0 0008 	sub.w	r0, r0, r8
 800a548:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800a54c:	d246      	bcs.n	800a5dc <USER_SPI_write+0x108>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a54e:	2301      	movs	r3, #1
 800a550:	462a      	mov	r2, r5
 800a552:	4621      	mov	r1, r4
 800a554:	9600      	str	r6, [sp, #0]
 800a556:	4638      	mov	r0, r7
 800a558:	f88d 9016 	strb.w	r9, [sp, #22]
 800a55c:	f7fd fd7e 	bl	800805c <HAL_SPI_TransmitReceive>
    return rxDat;
 800a560:	f89d 3017 	ldrb.w	r3, [sp, #23]
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a564:	2bff      	cmp	r3, #255	; 0xff
 800a566:	d1eb      	bne.n	800a540 <USER_SPI_write+0x6c>
	xchg_spi(token);					/* Send token */
 800a568:	23fc      	movs	r3, #252	; 0xfc
 800a56a:	f88d 3016 	strb.w	r3, [sp, #22]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a56e:	9600      	str	r6, [sp, #0]
 800a570:	2301      	movs	r3, #1
 800a572:	462a      	mov	r2, r5
 800a574:	4621      	mov	r1, r4
 800a576:	4638      	mov	r0, r7
 800a578:	f7fd fd70 	bl	800805c <HAL_SPI_TransmitReceive>
	for(UINT i=0; i<btx; i++) {
 800a57c:	f5aa 7800 	sub.w	r8, sl, #512	; 0x200
		xchg_spi(*(buff+i));
 800a580:	f818 0f01 	ldrb.w	r0, [r8, #1]!
 800a584:	f88d 0016 	strb.w	r0, [sp, #22]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a588:	2301      	movs	r3, #1
 800a58a:	9600      	str	r6, [sp, #0]
 800a58c:	462a      	mov	r2, r5
 800a58e:	4621      	mov	r1, r4
 800a590:	4638      	mov	r0, r7
 800a592:	f7fd fd63 	bl	800805c <HAL_SPI_TransmitReceive>
	for(UINT i=0; i<btx; i++) {
 800a596:	45d0      	cmp	r8, sl
 800a598:	d1f2      	bne.n	800a580 <USER_SPI_write+0xac>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a59a:	2301      	movs	r3, #1
 800a59c:	462a      	mov	r2, r5
 800a59e:	4621      	mov	r1, r4
 800a5a0:	9600      	str	r6, [sp, #0]
 800a5a2:	4638      	mov	r0, r7
 800a5a4:	f88d 9016 	strb.w	r9, [sp, #22]
 800a5a8:	f7fd fd58 	bl	800805c <HAL_SPI_TransmitReceive>
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	462a      	mov	r2, r5
 800a5b0:	4621      	mov	r1, r4
 800a5b2:	9600      	str	r6, [sp, #0]
 800a5b4:	4638      	mov	r0, r7
 800a5b6:	f88d 9016 	strb.w	r9, [sp, #22]
 800a5ba:	f7fd fd4f 	bl	800805c <HAL_SPI_TransmitReceive>
 800a5be:	2301      	movs	r3, #1
 800a5c0:	9600      	str	r6, [sp, #0]
 800a5c2:	462a      	mov	r2, r5
 800a5c4:	4621      	mov	r1, r4
 800a5c6:	4638      	mov	r0, r7
 800a5c8:	f88d 9016 	strb.w	r9, [sp, #22]
 800a5cc:	f7fd fd46 	bl	800805c <HAL_SPI_TransmitReceive>
    return rxDat;
 800a5d0:	f89d 3017 	ldrb.w	r3, [sp, #23]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800a5d4:	f003 031f 	and.w	r3, r3, #31
 800a5d8:	2b05      	cmp	r3, #5
 800a5da:	d053      	beq.n	800a684 <USER_SPI_write+0x1b0>
	waitSpiTimerTickStart = HAL_GetTick();
 800a5dc:	f7fb fa5c 	bl	8005a98 <HAL_GetTick>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a5e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a794 <USER_SPI_write+0x2c0>
	waitSpiTimerTickStart = HAL_GetTick();
 800a5e4:	4606      	mov	r6, r0
	waitSpiTimerTickDelay = (uint32_t)wt;
 800a5e6:	f04f 09ff 	mov.w	r9, #255	; 0xff
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a5ea:	2732      	movs	r7, #50	; 0x32
 800a5ec:	e005      	b.n	800a5fa <USER_SPI_write+0x126>
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a5ee:	f7fb fa53 	bl	8005a98 <HAL_GetTick>
 800a5f2:	1b80      	subs	r0, r0, r6
 800a5f4:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800a5f8:	d254      	bcs.n	800a6a4 <USER_SPI_write+0x1d0>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	462a      	mov	r2, r5
 800a5fe:	4621      	mov	r1, r4
 800a600:	9700      	str	r7, [sp, #0]
 800a602:	4640      	mov	r0, r8
 800a604:	f88d 9016 	strb.w	r9, [sp, #22]
 800a608:	f7fd fd28 	bl	800805c <HAL_SPI_TransmitReceive>
    return rxDat;
 800a60c:	f89d 3017 	ldrb.w	r3, [sp, #23]
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a610:	2bff      	cmp	r3, #255	; 0xff
 800a612:	d1ec      	bne.n	800a5ee <USER_SPI_write+0x11a>
	xchg_spi(token);					/* Send token */
 800a614:	22fd      	movs	r2, #253	; 0xfd
 800a616:	f88d 2016 	strb.w	r2, [sp, #22]
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
		}
	}
	despiselect();

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a61a:	f1bb 0b00 	subs.w	fp, fp, #0
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a61e:	9700      	str	r7, [sp, #0]
 800a620:	f04f 0301 	mov.w	r3, #1
 800a624:	462a      	mov	r2, r5
 800a626:	4621      	mov	r1, r4
 800a628:	485a      	ldr	r0, [pc, #360]	; (800a794 <USER_SPI_write+0x2c0>)
	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a62a:	bf18      	it	ne
 800a62c:	f04f 0b01 	movne.w	fp, #1
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a630:	f7fd fd14 	bl	800805c <HAL_SPI_TransmitReceive>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800a634:	e00b      	b.n	800a64e <USER_SPI_write+0x17a>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a636:	f04f 0b04 	mov.w	fp, #4
}
 800a63a:	4658      	mov	r0, fp
 800a63c:	b007      	add	sp, #28
 800a63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a642:	f04f 0b01 	mov.w	fp, #1
 800a646:	f10d 0517 	add.w	r5, sp, #23
 800a64a:	f10d 0416 	add.w	r4, sp, #22
	CS_HIGH();		/* Set CS# high */
 800a64e:	4852      	ldr	r0, [pc, #328]	; (800a798 <USER_SPI_write+0x2c4>)
 800a650:	2201      	movs	r2, #1
 800a652:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a656:	f7fb fdfb 	bl	8006250 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a65a:	2332      	movs	r3, #50	; 0x32
 800a65c:	20ff      	movs	r0, #255	; 0xff
 800a65e:	9300      	str	r3, [sp, #0]
 800a660:	f88d 0016 	strb.w	r0, [sp, #22]
 800a664:	2301      	movs	r3, #1
 800a666:	462a      	mov	r2, r5
 800a668:	4621      	mov	r1, r4
 800a66a:	484a      	ldr	r0, [pc, #296]	; (800a794 <USER_SPI_write+0x2c0>)
 800a66c:	f7fd fcf6 	bl	800805c <HAL_SPI_TransmitReceive>
}
 800a670:	4658      	mov	r0, fp
 800a672:	b007      	add	sp, #28
 800a674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800a678:	f04f 0b03 	mov.w	fp, #3
}
 800a67c:	4658      	mov	r0, fp
 800a67e:	b007      	add	sp, #28
 800a680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			} while (--count);
 800a684:	f1bb 0b01 	subs.w	fp, fp, #1
 800a688:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
 800a68c:	f47f af54 	bne.w	800a538 <USER_SPI_write+0x64>
 800a690:	e7a4      	b.n	800a5dc <USER_SPI_write+0x108>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800a692:	4611      	mov	r1, r2
 800a694:	2018      	movs	r0, #24
 800a696:	f7ff fcbd 	bl	800a014 <send_cmd>
 800a69a:	b198      	cbz	r0, 800a6c4 <USER_SPI_write+0x1f0>
 800a69c:	f10d 0517 	add.w	r5, sp, #23
 800a6a0:	f10d 0416 	add.w	r4, sp, #22
{
 800a6a4:	f04f 0b01 	mov.w	fp, #1
 800a6a8:	e7d1      	b.n	800a64e <USER_SPI_write+0x17a>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800a6aa:	f04f 0b02 	mov.w	fp, #2
}
 800a6ae:	4658      	mov	r0, fp
 800a6b0:	b007      	add	sp, #28
 800a6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800a6b6:	4659      	mov	r1, fp
 800a6b8:	2097      	movs	r0, #151	; 0x97
 800a6ba:	9203      	str	r2, [sp, #12]
 800a6bc:	f7ff fcaa 	bl	800a014 <send_cmd>
 800a6c0:	9a03      	ldr	r2, [sp, #12]
 800a6c2:	e728      	b.n	800a516 <USER_SPI_write+0x42>
	waitSpiTimerTickStart = HAL_GetTick();
 800a6c4:	f7fb f9e8 	bl	8005a98 <HAL_GetTick>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a6c8:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800a794 <USER_SPI_write+0x2c0>
	waitSpiTimerTickStart = HAL_GetTick();
 800a6cc:	4607      	mov	r7, r0
	waitSpiTimerTickDelay = (uint32_t)wt;
 800a6ce:	f10d 0517 	add.w	r5, sp, #23
 800a6d2:	f10d 0416 	add.w	r4, sp, #22
 800a6d6:	f04f 09ff 	mov.w	r9, #255	; 0xff
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a6da:	2632      	movs	r6, #50	; 0x32
 800a6dc:	e005      	b.n	800a6ea <USER_SPI_write+0x216>
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a6de:	f7fb f9db 	bl	8005a98 <HAL_GetTick>
 800a6e2:	1bc0      	subs	r0, r0, r7
 800a6e4:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800a6e8:	d2dc      	bcs.n	800a6a4 <USER_SPI_write+0x1d0>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	9600      	str	r6, [sp, #0]
 800a6ee:	462a      	mov	r2, r5
 800a6f0:	4621      	mov	r1, r4
 800a6f2:	4640      	mov	r0, r8
 800a6f4:	f88d 9016 	strb.w	r9, [sp, #22]
 800a6f8:	f7fd fcb0 	bl	800805c <HAL_SPI_TransmitReceive>
    return rxDat;
 800a6fc:	f89d 3017 	ldrb.w	r3, [sp, #23]
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a700:	2bff      	cmp	r3, #255	; 0xff
 800a702:	d1ec      	bne.n	800a6de <USER_SPI_write+0x20a>
	xchg_spi(token);					/* Send token */
 800a704:	22fe      	movs	r2, #254	; 0xfe
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a706:	9600      	str	r6, [sp, #0]
 800a708:	f88d 2016 	strb.w	r2, [sp, #22]
 800a70c:	4821      	ldr	r0, [pc, #132]	; (800a794 <USER_SPI_write+0x2c0>)
 800a70e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800a794 <USER_SPI_write+0x2c0>
 800a712:	2301      	movs	r3, #1
 800a714:	462a      	mov	r2, r5
 800a716:	4621      	mov	r1, r4
 800a718:	f7fd fca0 	bl	800805c <HAL_SPI_TransmitReceive>
	for(UINT i=0; i<btx; i++) {
 800a71c:	f10a 36ff 	add.w	r6, sl, #4294967295
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a720:	2732      	movs	r7, #50	; 0x32
 800a722:	f20a 1aff 	addw	sl, sl, #511	; 0x1ff
 800a726:	9700      	str	r7, [sp, #0]
 800a728:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800a72c:	f88d 3016 	strb.w	r3, [sp, #22]
 800a730:	462a      	mov	r2, r5
 800a732:	2301      	movs	r3, #1
 800a734:	4621      	mov	r1, r4
 800a736:	4640      	mov	r0, r8
 800a738:	f7fd fc90 	bl	800805c <HAL_SPI_TransmitReceive>
	for(UINT i=0; i<btx; i++) {
 800a73c:	4556      	cmp	r6, sl
 800a73e:	d1f2      	bne.n	800a726 <USER_SPI_write+0x252>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800a740:	26ff      	movs	r6, #255	; 0xff
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a742:	2301      	movs	r3, #1
 800a744:	462a      	mov	r2, r5
 800a746:	4621      	mov	r1, r4
 800a748:	4812      	ldr	r0, [pc, #72]	; (800a794 <USER_SPI_write+0x2c0>)
 800a74a:	9700      	str	r7, [sp, #0]
 800a74c:	f88d 6016 	strb.w	r6, [sp, #22]
 800a750:	f7fd fc84 	bl	800805c <HAL_SPI_TransmitReceive>
 800a754:	2301      	movs	r3, #1
 800a756:	462a      	mov	r2, r5
 800a758:	4621      	mov	r1, r4
 800a75a:	480e      	ldr	r0, [pc, #56]	; (800a794 <USER_SPI_write+0x2c0>)
 800a75c:	9700      	str	r7, [sp, #0]
 800a75e:	f88d 6016 	strb.w	r6, [sp, #22]
 800a762:	f7fd fc7b 	bl	800805c <HAL_SPI_TransmitReceive>
 800a766:	480b      	ldr	r0, [pc, #44]	; (800a794 <USER_SPI_write+0x2c0>)
 800a768:	9700      	str	r7, [sp, #0]
 800a76a:	2301      	movs	r3, #1
 800a76c:	462a      	mov	r2, r5
 800a76e:	4621      	mov	r1, r4
 800a770:	f88d 6016 	strb.w	r6, [sp, #22]
 800a774:	f7fd fc72 	bl	800805c <HAL_SPI_TransmitReceive>
    return rxDat;
 800a778:	f89d b017 	ldrb.w	fp, [sp, #23]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800a77c:	f00b 0b1f 	and.w	fp, fp, #31
	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a780:	f1bb 0b05 	subs.w	fp, fp, #5
 800a784:	bf18      	it	ne
 800a786:	f04f 0b01 	movne.w	fp, #1
 800a78a:	e760      	b.n	800a64e <USER_SPI_write+0x17a>
 800a78c:	2000004c 	.word	0x2000004c
 800a790:	2001143c 	.word	0x2001143c
 800a794:	20011228 	.word	0x20011228
 800a798:	48000800 	.word	0x48000800

0800a79c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800a79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7a0:	b088      	sub	sp, #32
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800a7a2:	b970      	cbnz	r0, 800a7c2 <USER_SPI_ioctl+0x26>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a7a4:	4bcf      	ldr	r3, [pc, #828]	; (800aae4 <USER_SPI_ioctl+0x348>)
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	07d8      	lsls	r0, r3, #31
 800a7aa:	f100 80db 	bmi.w	800a964 <USER_SPI_ioctl+0x1c8>
 800a7ae:	460c      	mov	r4, r1
 800a7b0:	4616      	mov	r6, r2

	res = RES_ERROR;

	switch (cmd) {
 800a7b2:	2904      	cmp	r1, #4
 800a7b4:	f200 80d0 	bhi.w	800a958 <USER_SPI_ioctl+0x1bc>
 800a7b8:	e8df f001 	tbb	[pc, r1]
 800a7bc:	91ce5928 	.word	0x91ce5928
 800a7c0:	08          	.byte	0x08
 800a7c1:	00          	.byte	0x00
	if (drv) return RES_PARERR;					/* Check parameter */
 800a7c2:	2404      	movs	r4, #4
	}

	despiselect();

	return res;
}
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	b008      	add	sp, #32
 800a7c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800a7cc:	4cc6      	ldr	r4, [pc, #792]	; (800aae8 <USER_SPI_ioctl+0x34c>)
 800a7ce:	7823      	ldrb	r3, [r4, #0]
 800a7d0:	f013 0f06 	tst.w	r3, #6
 800a7d4:	f040 8108 	bne.w	800a9e8 <USER_SPI_ioctl+0x24c>
 800a7d8:	f10d 050f 	add.w	r5, sp, #15
 800a7dc:	f10d 070e 	add.w	r7, sp, #14
	res = RES_ERROR;
 800a7e0:	2401      	movs	r4, #1
	CS_HIGH();		/* Set CS# high */
 800a7e2:	48c2      	ldr	r0, [pc, #776]	; (800aaec <USER_SPI_ioctl+0x350>)
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a7ea:	f7fb fd31 	bl	8006250 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a7ee:	2332      	movs	r3, #50	; 0x32
 800a7f0:	20ff      	movs	r0, #255	; 0xff
 800a7f2:	9300      	str	r3, [sp, #0]
 800a7f4:	f88d 000e 	strb.w	r0, [sp, #14]
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	462a      	mov	r2, r5
 800a7fc:	4639      	mov	r1, r7
 800a7fe:	48bc      	ldr	r0, [pc, #752]	; (800aaf0 <USER_SPI_ioctl+0x354>)
 800a800:	f7fd fc2c 	bl	800805c <HAL_SPI_TransmitReceive>
}
 800a804:	4620      	mov	r0, r4
 800a806:	b008      	add	sp, #32
 800a808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	CS_LOW();		/* Set CS# low */
 800a80c:	48b7      	ldr	r0, [pc, #732]	; (800aaec <USER_SPI_ioctl+0x350>)
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a80e:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 800aaf0 <USER_SPI_ioctl+0x354>
	CS_LOW();		/* Set CS# low */
 800a812:	2200      	movs	r2, #0
 800a814:	f44f 7180 	mov.w	r1, #256	; 0x100
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a818:	f10d 050f 	add.w	r5, sp, #15
 800a81c:	2732      	movs	r7, #50	; 0x32
	CS_LOW();		/* Set CS# low */
 800a81e:	f7fb fd17 	bl	8006250 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800a822:	26ff      	movs	r6, #255	; 0xff
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a824:	2301      	movs	r3, #1
 800a826:	aa04      	add	r2, sp, #16
 800a828:	4629      	mov	r1, r5
 800a82a:	48b1      	ldr	r0, [pc, #708]	; (800aaf0 <USER_SPI_ioctl+0x354>)
 800a82c:	9700      	str	r7, [sp, #0]
 800a82e:	f88d 600f 	strb.w	r6, [sp, #15]
 800a832:	f7fd fc13 	bl	800805c <HAL_SPI_TransmitReceive>
	waitSpiTimerTickStart = HAL_GetTick();
 800a836:	f7fb f92f 	bl	8005a98 <HAL_GetTick>
 800a83a:	4680      	mov	r8, r0
	waitSpiTimerTickDelay = (uint32_t)wt;
 800a83c:	e007      	b.n	800a84e <USER_SPI_ioctl+0xb2>
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a83e:	f7fb f92b 	bl	8005a98 <HAL_GetTick>
 800a842:	eba0 0008 	sub.w	r0, r0, r8
 800a846:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800a84a:	f080 80ba 	bcs.w	800a9c2 <USER_SPI_ioctl+0x226>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a84e:	2301      	movs	r3, #1
 800a850:	aa04      	add	r2, sp, #16
 800a852:	9700      	str	r7, [sp, #0]
 800a854:	4629      	mov	r1, r5
 800a856:	4648      	mov	r0, r9
 800a858:	f88d 600f 	strb.w	r6, [sp, #15]
 800a85c:	f7fd fbfe 	bl	800805c <HAL_SPI_TransmitReceive>
    return rxDat;
 800a860:	f89d 3010 	ldrb.w	r3, [sp, #16]
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a864:	2bff      	cmp	r3, #255	; 0xff
 800a866:	d1ea      	bne.n	800a83e <USER_SPI_ioctl+0xa2>
 800a868:	f10d 070e 	add.w	r7, sp, #14
 800a86c:	e7b9      	b.n	800a7e2 <USER_SPI_ioctl+0x46>
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800a86e:	2100      	movs	r1, #0
 800a870:	2009      	movs	r0, #9
 800a872:	f7ff fbcf 	bl	800a014 <send_cmd>
 800a876:	4604      	mov	r4, r0
 800a878:	2800      	cmp	r0, #0
 800a87a:	d1ad      	bne.n	800a7d8 <USER_SPI_ioctl+0x3c>
 800a87c:	2110      	movs	r1, #16
 800a87e:	eb0d 0001 	add.w	r0, sp, r1
 800a882:	f7ff fb61 	bl	8009f48 <rcvr_datablock>
 800a886:	2800      	cmp	r0, #0
 800a888:	d0a6      	beq.n	800a7d8 <USER_SPI_ioctl+0x3c>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800a88a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a88e:	099b      	lsrs	r3, r3, #6
 800a890:	2b01      	cmp	r3, #1
 800a892:	f000 80fe 	beq.w	800aa92 <USER_SPI_ioctl+0x2f6>
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800a896:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800a89a:	f89d 1016 	ldrb.w	r1, [sp, #22]
 800a89e:	f89d 0018 	ldrb.w	r0, [sp, #24]
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800a8a2:	f89d 2015 	ldrb.w	r2, [sp, #21]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	0289      	lsls	r1, r1, #10
 800a8aa:	eb03 1390 	add.w	r3, r3, r0, lsr #6
 800a8ae:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 800a8b2:	440b      	add	r3, r1
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800a8b4:	f89d 1019 	ldrb.w	r1, [sp, #25]
 800a8b8:	f89d 001a 	ldrb.w	r0, [sp, #26]
 800a8bc:	f002 020f 	and.w	r2, r2, #15
 800a8c0:	0049      	lsls	r1, r1, #1
 800a8c2:	f001 0106 	and.w	r1, r1, #6
 800a8c6:	eb02 12d0 	add.w	r2, r2, r0, lsr #7
				*(DWORD*)buff = csize << (n - 9);
 800a8ca:	440a      	add	r2, r1
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800a8cc:	3301      	adds	r3, #1
				*(DWORD*)buff = csize << (n - 9);
 800a8ce:	3a07      	subs	r2, #7
 800a8d0:	4093      	lsls	r3, r2
 800a8d2:	6033      	str	r3, [r6, #0]
 800a8d4:	f10d 050f 	add.w	r5, sp, #15
 800a8d8:	f10d 070e 	add.w	r7, sp, #14
 800a8dc:	e781      	b.n	800a7e2 <USER_SPI_ioctl+0x46>
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800a8de:	4c82      	ldr	r4, [pc, #520]	; (800aae8 <USER_SPI_ioctl+0x34c>)
 800a8e0:	7821      	ldrb	r1, [r4, #0]
 800a8e2:	f011 0104 	ands.w	r1, r1, #4
 800a8e6:	d042      	beq.n	800a96e <USER_SPI_ioctl+0x1d2>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800a8e8:	2100      	movs	r1, #0
 800a8ea:	208d      	movs	r0, #141	; 0x8d
 800a8ec:	f7ff fb92 	bl	800a014 <send_cmd>
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	f47f af71 	bne.w	800a7d8 <USER_SPI_ioctl+0x3c>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a8f6:	f10d 050f 	add.w	r5, sp, #15
 800a8fa:	f04f 0932 	mov.w	r9, #50	; 0x32
 800a8fe:	4629      	mov	r1, r5
 800a900:	487b      	ldr	r0, [pc, #492]	; (800aaf0 <USER_SPI_ioctl+0x354>)
 800a902:	f8cd 9000 	str.w	r9, [sp]
 800a906:	2301      	movs	r3, #1
 800a908:	f04f 08ff 	mov.w	r8, #255	; 0xff
 800a90c:	aa04      	add	r2, sp, #16
 800a90e:	f88d 800f 	strb.w	r8, [sp, #15]
 800a912:	f7fd fba3 	bl	800805c <HAL_SPI_TransmitReceive>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800a916:	a804      	add	r0, sp, #16
 800a918:	2110      	movs	r1, #16
 800a91a:	f7ff fb15 	bl	8009f48 <rcvr_datablock>
 800a91e:	2800      	cmp	r0, #0
 800a920:	f43f af5c 	beq.w	800a7dc <USER_SPI_ioctl+0x40>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a924:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 800aaf0 <USER_SPI_ioctl+0x354>
 800a928:	2430      	movs	r4, #48	; 0x30
 800a92a:	f10d 070e 	add.w	r7, sp, #14
 800a92e:	f8cd 9000 	str.w	r9, [sp]
 800a932:	2301      	movs	r3, #1
 800a934:	462a      	mov	r2, r5
 800a936:	4639      	mov	r1, r7
 800a938:	4650      	mov	r0, sl
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800a93a:	3c01      	subs	r4, #1
 800a93c:	f88d 800e 	strb.w	r8, [sp, #14]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a940:	f7fd fb8c 	bl	800805c <HAL_SPI_TransmitReceive>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800a944:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800a948:	d1f1      	bne.n	800a92e <USER_SPI_ioctl+0x192>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800a94a:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800a94e:	091a      	lsrs	r2, r3, #4
 800a950:	2310      	movs	r3, #16
 800a952:	4093      	lsls	r3, r2
 800a954:	6033      	str	r3, [r6, #0]
					res = RES_OK;
 800a956:	e744      	b.n	800a7e2 <USER_SPI_ioctl+0x46>
	switch (cmd) {
 800a958:	2404      	movs	r4, #4
 800a95a:	f10d 050f 	add.w	r5, sp, #15
 800a95e:	f10d 070e 	add.w	r7, sp, #14
 800a962:	e73e      	b.n	800a7e2 <USER_SPI_ioctl+0x46>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a964:	2403      	movs	r4, #3
}
 800a966:	4620      	mov	r0, r4
 800a968:	b008      	add	sp, #32
 800a96a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800a96e:	2009      	movs	r0, #9
 800a970:	f7ff fb50 	bl	800a014 <send_cmd>
 800a974:	4605      	mov	r5, r0
 800a976:	2800      	cmp	r0, #0
 800a978:	f47f af2e 	bne.w	800a7d8 <USER_SPI_ioctl+0x3c>
 800a97c:	2110      	movs	r1, #16
 800a97e:	eb0d 0001 	add.w	r0, sp, r1
 800a982:	f7ff fae1 	bl	8009f48 <rcvr_datablock>
 800a986:	2800      	cmp	r0, #0
 800a988:	f43f af26 	beq.w	800a7d8 <USER_SPI_ioctl+0x3c>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800a98c:	7824      	ldrb	r4, [r4, #0]
 800a98e:	f014 0402 	ands.w	r4, r4, #2
 800a992:	f000 8092 	beq.w	800aaba <USER_SPI_ioctl+0x31e>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800a996:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800a99a:	f89d 101b 	ldrb.w	r1, [sp, #27]
 800a99e:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800a9a2:	005b      	lsls	r3, r3, #1
 800a9a4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800a9a8:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
 800a9ac:	0992      	lsrs	r2, r2, #6
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	3a01      	subs	r2, #1
 800a9b2:	4093      	lsls	r3, r2
				res = RES_OK;
 800a9b4:	462c      	mov	r4, r5
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800a9b6:	6033      	str	r3, [r6, #0]
 800a9b8:	f10d 050f 	add.w	r5, sp, #15
 800a9bc:	f10d 070e 	add.w	r7, sp, #14
 800a9c0:	e70f      	b.n	800a7e2 <USER_SPI_ioctl+0x46>
	CS_HIGH();		/* Set CS# high */
 800a9c2:	484a      	ldr	r0, [pc, #296]	; (800aaec <USER_SPI_ioctl+0x350>)
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a9ca:	f7fb fc41 	bl	8006250 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a9ce:	9700      	str	r7, [sp, #0]
 800a9d0:	4847      	ldr	r0, [pc, #284]	; (800aaf0 <USER_SPI_ioctl+0x354>)
 800a9d2:	f88d 600f 	strb.w	r6, [sp, #15]
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	aa04      	add	r2, sp, #16
 800a9da:	4629      	mov	r1, r5
 800a9dc:	f7fd fb3e 	bl	800805c <HAL_SPI_TransmitReceive>
	res = RES_ERROR;
 800a9e0:	2401      	movs	r4, #1
 800a9e2:	f10d 070e 	add.w	r7, sp, #14
 800a9e6:	e6fc      	b.n	800a7e2 <USER_SPI_ioctl+0x46>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800a9e8:	aa04      	add	r2, sp, #16
 800a9ea:	210b      	movs	r1, #11
 800a9ec:	2000      	movs	r0, #0
 800a9ee:	f7ff fed5 	bl	800a79c <USER_SPI_ioctl>
 800a9f2:	2800      	cmp	r0, #0
 800a9f4:	f47f aef0 	bne.w	800a7d8 <USER_SPI_ioctl+0x3c>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800a9f8:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800a9fc:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800aa00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa04:	ea53 1392 	orrs.w	r3, r3, r2, lsr #6
 800aa08:	f43f aee6 	beq.w	800a7d8 <USER_SPI_ioctl+0x3c>
		if (!(CardType & CT_BLOCK)) {
 800aa0c:	7823      	ldrb	r3, [r4, #0]
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800aa0e:	e9d6 1400 	ldrd	r1, r4, [r6]
		if (!(CardType & CT_BLOCK)) {
 800aa12:	071b      	lsls	r3, r3, #28
			st *= 512; ed *= 512;
 800aa14:	bf58      	it	pl
 800aa16:	0249      	lslpl	r1, r1, #9
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800aa18:	f04f 0020 	mov.w	r0, #32
			st *= 512; ed *= 512;
 800aa1c:	bf58      	it	pl
 800aa1e:	0264      	lslpl	r4, r4, #9
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800aa20:	f7ff faf8 	bl	800a014 <send_cmd>
 800aa24:	2800      	cmp	r0, #0
 800aa26:	f47f aed7 	bne.w	800a7d8 <USER_SPI_ioctl+0x3c>
 800aa2a:	4621      	mov	r1, r4
 800aa2c:	2021      	movs	r0, #33	; 0x21
 800aa2e:	f7ff faf1 	bl	800a014 <send_cmd>
 800aa32:	2800      	cmp	r0, #0
 800aa34:	f47f aed0 	bne.w	800a7d8 <USER_SPI_ioctl+0x3c>
 800aa38:	4601      	mov	r1, r0
 800aa3a:	2026      	movs	r0, #38	; 0x26
 800aa3c:	f7ff faea 	bl	800a014 <send_cmd>
 800aa40:	4604      	mov	r4, r0
 800aa42:	2800      	cmp	r0, #0
 800aa44:	f47f aec8 	bne.w	800a7d8 <USER_SPI_ioctl+0x3c>
	waitSpiTimerTickStart = HAL_GetTick();
 800aa48:	f7fb f826 	bl	8005a98 <HAL_GetTick>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800aa4c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800aaf0 <USER_SPI_ioctl+0x354>
	waitSpiTimerTickStart = HAL_GetTick();
 800aa50:	4606      	mov	r6, r0
	waitSpiTimerTickDelay = (uint32_t)wt;
 800aa52:	f10d 050f 	add.w	r5, sp, #15
 800aa56:	f10d 070e 	add.w	r7, sp, #14
 800aa5a:	f04f 0aff 	mov.w	sl, #255	; 0xff
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800aa5e:	f04f 0832 	mov.w	r8, #50	; 0x32
 800aa62:	e007      	b.n	800aa74 <USER_SPI_ioctl+0x2d8>
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800aa64:	f7fb f818 	bl	8005a98 <HAL_GetTick>
 800aa68:	f247 522f 	movw	r2, #29999	; 0x752f
 800aa6c:	1b83      	subs	r3, r0, r6
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	f63f aeb6 	bhi.w	800a7e0 <USER_SPI_ioctl+0x44>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800aa74:	2301      	movs	r3, #1
 800aa76:	f8cd 8000 	str.w	r8, [sp]
 800aa7a:	462a      	mov	r2, r5
 800aa7c:	4639      	mov	r1, r7
 800aa7e:	4648      	mov	r0, r9
 800aa80:	f88d a00e 	strb.w	sl, [sp, #14]
 800aa84:	f7fd faea 	bl	800805c <HAL_SPI_TransmitReceive>
    return rxDat;
 800aa88:	f89d 300f 	ldrb.w	r3, [sp, #15]
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800aa8c:	2bff      	cmp	r3, #255	; 0xff
 800aa8e:	d1e9      	bne.n	800aa64 <USER_SPI_ioctl+0x2c8>
 800aa90:	e6a7      	b.n	800a7e2 <USER_SPI_ioctl+0x46>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800aa92:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800aa96:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800aa9a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800aa9e:	0412      	lsls	r2, r2, #16
 800aaa0:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 800aaa4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800aaa8:	3201      	adds	r2, #1
 800aaaa:	4413      	add	r3, r2
				*(DWORD*)buff = csize << 10;
 800aaac:	029b      	lsls	r3, r3, #10
 800aaae:	6033      	str	r3, [r6, #0]
 800aab0:	f10d 050f 	add.w	r5, sp, #15
 800aab4:	f10d 070e 	add.w	r7, sp, #14
 800aab8:	e693      	b.n	800a7e2 <USER_SPI_ioctl+0x46>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800aaba:	f89d 101b 	ldrb.w	r1, [sp, #27]
 800aabe:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800aac2:	00ca      	lsls	r2, r1, #3
 800aac4:	f002 0218 	and.w	r2, r2, #24
 800aac8:	f3c3 0384 	ubfx	r3, r3, #2, #5
 800aacc:	eb02 1251 	add.w	r2, r2, r1, lsr #5
 800aad0:	3301      	adds	r3, #1
 800aad2:	fb02 3303 	mla	r3, r2, r3, r3
 800aad6:	6033      	str	r3, [r6, #0]
 800aad8:	f10d 050f 	add.w	r5, sp, #15
 800aadc:	f10d 070e 	add.w	r7, sp, #14
 800aae0:	e67f      	b.n	800a7e2 <USER_SPI_ioctl+0x46>
 800aae2:	bf00      	nop
 800aae4:	2000004c 	.word	0x2000004c
 800aae8:	2001143c 	.word	0x2001143c
 800aaec:	48000800 	.word	0x48000800
 800aaf0:	20011228 	.word	0x20011228

0800aaf4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800aaf4:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 800aaf6:	4b10      	ldr	r3, [pc, #64]	; (800ab38 <FATFS_LinkDriver+0x44>)
 800aaf8:	7a5c      	ldrb	r4, [r3, #9]
 800aafa:	b9cc      	cbnz	r4, 800ab30 <FATFS_LinkDriver+0x3c>
 800aafc:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 800aafe:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 800ab02:	7a5c      	ldrb	r4, [r3, #9]
 800ab04:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 800ab06:	7a5c      	ldrb	r4, [r3, #9]
 800ab08:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ab0c:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 800ab0e:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 800ab10:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 800ab12:	441c      	add	r4, r3
 800ab14:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 800ab16:	1c54      	adds	r4, r2, #1
 800ab18:	b2e4      	uxtb	r4, r4
 800ab1a:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 800ab1c:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 800ab1e:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 800ab20:	232f      	movs	r3, #47	; 0x2f
    path[1] = ':';
 800ab22:	704c      	strb	r4, [r1, #1]
    path[0] = DiskNum + '0';
 800ab24:	700a      	strb	r2, [r1, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800ab26:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 800ab2a:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800ab2c:	70c8      	strb	r0, [r1, #3]
}
 800ab2e:	4770      	bx	lr
  uint8_t ret = 1;
 800ab30:	2001      	movs	r0, #1
}
 800ab32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab36:	4770      	bx	lr
 800ab38:	20011448 	.word	0x20011448

0800ab3c <__libc_init_array>:
 800ab3c:	b570      	push	{r4, r5, r6, lr}
 800ab3e:	4d0d      	ldr	r5, [pc, #52]	; (800ab74 <__libc_init_array+0x38>)
 800ab40:	4c0d      	ldr	r4, [pc, #52]	; (800ab78 <__libc_init_array+0x3c>)
 800ab42:	1b64      	subs	r4, r4, r5
 800ab44:	10a4      	asrs	r4, r4, #2
 800ab46:	2600      	movs	r6, #0
 800ab48:	42a6      	cmp	r6, r4
 800ab4a:	d109      	bne.n	800ab60 <__libc_init_array+0x24>
 800ab4c:	4d0b      	ldr	r5, [pc, #44]	; (800ab7c <__libc_init_array+0x40>)
 800ab4e:	4c0c      	ldr	r4, [pc, #48]	; (800ab80 <__libc_init_array+0x44>)
 800ab50:	f000 f820 	bl	800ab94 <_init>
 800ab54:	1b64      	subs	r4, r4, r5
 800ab56:	10a4      	asrs	r4, r4, #2
 800ab58:	2600      	movs	r6, #0
 800ab5a:	42a6      	cmp	r6, r4
 800ab5c:	d105      	bne.n	800ab6a <__libc_init_array+0x2e>
 800ab5e:	bd70      	pop	{r4, r5, r6, pc}
 800ab60:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab64:	4798      	blx	r3
 800ab66:	3601      	adds	r6, #1
 800ab68:	e7ee      	b.n	800ab48 <__libc_init_array+0xc>
 800ab6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab6e:	4798      	blx	r3
 800ab70:	3601      	adds	r6, #1
 800ab72:	e7f2      	b.n	800ab5a <__libc_init_array+0x1e>
 800ab74:	0800b118 	.word	0x0800b118
 800ab78:	0800b118 	.word	0x0800b118
 800ab7c:	0800b118 	.word	0x0800b118
 800ab80:	0800b11c 	.word	0x0800b11c

0800ab84 <memset>:
 800ab84:	4402      	add	r2, r0
 800ab86:	4603      	mov	r3, r0
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d100      	bne.n	800ab8e <memset+0xa>
 800ab8c:	4770      	bx	lr
 800ab8e:	f803 1b01 	strb.w	r1, [r3], #1
 800ab92:	e7f9      	b.n	800ab88 <memset+0x4>

0800ab94 <_init>:
 800ab94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab96:	bf00      	nop
 800ab98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab9a:	bc08      	pop	{r3}
 800ab9c:	469e      	mov	lr, r3
 800ab9e:	4770      	bx	lr

0800aba0 <_fini>:
 800aba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aba2:	bf00      	nop
 800aba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aba6:	bc08      	pop	{r3}
 800aba8:	469e      	mov	lr, r3
 800abaa:	4770      	bx	lr
