
Microinverter_V2.0_DCDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6fc  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800a8d4  0800a8d4  0001a8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae38  0800ae38  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae38  0800ae38  0001ae38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae40  0800ae40  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae40  0800ae40  0001ae40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae44  0800ae44  0001ae44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  0800ae48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009400  20000040  0800ae88  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009440  0800ae88  00029440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003bd39  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000669f  00000000  00000000  0005bda9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000279e4  00000000  00000000  00062448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001980  00000000  00000000  00089e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004a30  00000000  00000000  0008b7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00035282  00000000  00000000  000901e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003a4aa  00000000  00000000  000c5462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00155dc0  00000000  00000000  000ff90c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  002556cc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053f0  00000000  00000000  0025571c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000040 	.word	0x20000040
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a8bc 	.word	0x0800a8bc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000044 	.word	0x20000044
 8000214:	0800a8bc 	.word	0x0800a8bc

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__gedf2>:
 80007e4:	f04f 3cff 	mov.w	ip, #4294967295
 80007e8:	e006      	b.n	80007f8 <__cmpdf2+0x4>
 80007ea:	bf00      	nop

080007ec <__ledf2>:
 80007ec:	f04f 0c01 	mov.w	ip, #1
 80007f0:	e002      	b.n	80007f8 <__cmpdf2+0x4>
 80007f2:	bf00      	nop

080007f4 <__cmpdf2>:
 80007f4:	f04f 0c01 	mov.w	ip, #1
 80007f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000800:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000804:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800080e:	d01b      	beq.n	8000848 <__cmpdf2+0x54>
 8000810:	b001      	add	sp, #4
 8000812:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000816:	bf0c      	ite	eq
 8000818:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800081c:	ea91 0f03 	teqne	r1, r3
 8000820:	bf02      	ittt	eq
 8000822:	ea90 0f02 	teqeq	r0, r2
 8000826:	2000      	moveq	r0, #0
 8000828:	4770      	bxeq	lr
 800082a:	f110 0f00 	cmn.w	r0, #0
 800082e:	ea91 0f03 	teq	r1, r3
 8000832:	bf58      	it	pl
 8000834:	4299      	cmppl	r1, r3
 8000836:	bf08      	it	eq
 8000838:	4290      	cmpeq	r0, r2
 800083a:	bf2c      	ite	cs
 800083c:	17d8      	asrcs	r0, r3, #31
 800083e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000842:	f040 0001 	orr.w	r0, r0, #1
 8000846:	4770      	bx	lr
 8000848:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d102      	bne.n	8000858 <__cmpdf2+0x64>
 8000852:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000856:	d107      	bne.n	8000868 <__cmpdf2+0x74>
 8000858:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800085c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000860:	d1d6      	bne.n	8000810 <__cmpdf2+0x1c>
 8000862:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000866:	d0d3      	beq.n	8000810 <__cmpdf2+0x1c>
 8000868:	f85d 0b04 	ldr.w	r0, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop

08000870 <__aeabi_cdrcmple>:
 8000870:	4684      	mov	ip, r0
 8000872:	4610      	mov	r0, r2
 8000874:	4662      	mov	r2, ip
 8000876:	468c      	mov	ip, r1
 8000878:	4619      	mov	r1, r3
 800087a:	4663      	mov	r3, ip
 800087c:	e000      	b.n	8000880 <__aeabi_cdcmpeq>
 800087e:	bf00      	nop

08000880 <__aeabi_cdcmpeq>:
 8000880:	b501      	push	{r0, lr}
 8000882:	f7ff ffb7 	bl	80007f4 <__cmpdf2>
 8000886:	2800      	cmp	r0, #0
 8000888:	bf48      	it	mi
 800088a:	f110 0f00 	cmnmi.w	r0, #0
 800088e:	bd01      	pop	{r0, pc}

08000890 <__aeabi_dcmpeq>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff fff4 	bl	8000880 <__aeabi_cdcmpeq>
 8000898:	bf0c      	ite	eq
 800089a:	2001      	moveq	r0, #1
 800089c:	2000      	movne	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_dcmplt>:
 80008a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a8:	f7ff ffea 	bl	8000880 <__aeabi_cdcmpeq>
 80008ac:	bf34      	ite	cc
 80008ae:	2001      	movcc	r0, #1
 80008b0:	2000      	movcs	r0, #0
 80008b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b6:	bf00      	nop

080008b8 <__aeabi_dcmple>:
 80008b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008bc:	f7ff ffe0 	bl	8000880 <__aeabi_cdcmpeq>
 80008c0:	bf94      	ite	ls
 80008c2:	2001      	movls	r0, #1
 80008c4:	2000      	movhi	r0, #0
 80008c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ca:	bf00      	nop

080008cc <__aeabi_dcmpge>:
 80008cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d0:	f7ff ffce 	bl	8000870 <__aeabi_cdrcmple>
 80008d4:	bf94      	ite	ls
 80008d6:	2001      	movls	r0, #1
 80008d8:	2000      	movhi	r0, #0
 80008da:	f85d fb08 	ldr.w	pc, [sp], #8
 80008de:	bf00      	nop

080008e0 <__aeabi_dcmpgt>:
 80008e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e4:	f7ff ffc4 	bl	8000870 <__aeabi_cdrcmple>
 80008e8:	bf34      	ite	cc
 80008ea:	2001      	movcc	r0, #1
 80008ec:	2000      	movcs	r0, #0
 80008ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2iz>:
 80008f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008fc:	d215      	bcs.n	800092a <__aeabi_d2iz+0x36>
 80008fe:	d511      	bpl.n	8000924 <__aeabi_d2iz+0x30>
 8000900:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000908:	d912      	bls.n	8000930 <__aeabi_d2iz+0x3c>
 800090a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800090e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000916:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800091a:	fa23 f002 	lsr.w	r0, r3, r2
 800091e:	bf18      	it	ne
 8000920:	4240      	negne	r0, r0
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d105      	bne.n	800093c <__aeabi_d2iz+0x48>
 8000930:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000934:	bf08      	it	eq
 8000936:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800093a:	4770      	bx	lr
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <__aeabi_d2uiz>:
 8000944:	004a      	lsls	r2, r1, #1
 8000946:	d211      	bcs.n	800096c <__aeabi_d2uiz+0x28>
 8000948:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800094c:	d211      	bcs.n	8000972 <__aeabi_d2uiz+0x2e>
 800094e:	d50d      	bpl.n	800096c <__aeabi_d2uiz+0x28>
 8000950:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000954:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000958:	d40e      	bmi.n	8000978 <__aeabi_d2uiz+0x34>
 800095a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800095e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000962:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000966:	fa23 f002 	lsr.w	r0, r3, r2
 800096a:	4770      	bx	lr
 800096c:	f04f 0000 	mov.w	r0, #0
 8000970:	4770      	bx	lr
 8000972:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000976:	d102      	bne.n	800097e <__aeabi_d2uiz+0x3a>
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	4770      	bx	lr
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	4770      	bx	lr

08000984 <__aeabi_uldivmod>:
 8000984:	b953      	cbnz	r3, 800099c <__aeabi_uldivmod+0x18>
 8000986:	b94a      	cbnz	r2, 800099c <__aeabi_uldivmod+0x18>
 8000988:	2900      	cmp	r1, #0
 800098a:	bf08      	it	eq
 800098c:	2800      	cmpeq	r0, #0
 800098e:	bf1c      	itt	ne
 8000990:	f04f 31ff 	movne.w	r1, #4294967295
 8000994:	f04f 30ff 	movne.w	r0, #4294967295
 8000998:	f000 b974 	b.w	8000c84 <__aeabi_idiv0>
 800099c:	f1ad 0c08 	sub.w	ip, sp, #8
 80009a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009a4:	f000 f806 	bl	80009b4 <__udivmoddi4>
 80009a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009b0:	b004      	add	sp, #16
 80009b2:	4770      	bx	lr

080009b4 <__udivmoddi4>:
 80009b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009b8:	9d08      	ldr	r5, [sp, #32]
 80009ba:	4604      	mov	r4, r0
 80009bc:	468e      	mov	lr, r1
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d14d      	bne.n	8000a5e <__udivmoddi4+0xaa>
 80009c2:	428a      	cmp	r2, r1
 80009c4:	4694      	mov	ip, r2
 80009c6:	d969      	bls.n	8000a9c <__udivmoddi4+0xe8>
 80009c8:	fab2 f282 	clz	r2, r2
 80009cc:	b152      	cbz	r2, 80009e4 <__udivmoddi4+0x30>
 80009ce:	fa01 f302 	lsl.w	r3, r1, r2
 80009d2:	f1c2 0120 	rsb	r1, r2, #32
 80009d6:	fa20 f101 	lsr.w	r1, r0, r1
 80009da:	fa0c fc02 	lsl.w	ip, ip, r2
 80009de:	ea41 0e03 	orr.w	lr, r1, r3
 80009e2:	4094      	lsls	r4, r2
 80009e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009e8:	0c21      	lsrs	r1, r4, #16
 80009ea:	fbbe f6f8 	udiv	r6, lr, r8
 80009ee:	fa1f f78c 	uxth.w	r7, ip
 80009f2:	fb08 e316 	mls	r3, r8, r6, lr
 80009f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009fa:	fb06 f107 	mul.w	r1, r6, r7
 80009fe:	4299      	cmp	r1, r3
 8000a00:	d90a      	bls.n	8000a18 <__udivmoddi4+0x64>
 8000a02:	eb1c 0303 	adds.w	r3, ip, r3
 8000a06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a0a:	f080 811f 	bcs.w	8000c4c <__udivmoddi4+0x298>
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	f240 811c 	bls.w	8000c4c <__udivmoddi4+0x298>
 8000a14:	3e02      	subs	r6, #2
 8000a16:	4463      	add	r3, ip
 8000a18:	1a5b      	subs	r3, r3, r1
 8000a1a:	b2a4      	uxth	r4, r4
 8000a1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a20:	fb08 3310 	mls	r3, r8, r0, r3
 8000a24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a28:	fb00 f707 	mul.w	r7, r0, r7
 8000a2c:	42a7      	cmp	r7, r4
 8000a2e:	d90a      	bls.n	8000a46 <__udivmoddi4+0x92>
 8000a30:	eb1c 0404 	adds.w	r4, ip, r4
 8000a34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a38:	f080 810a 	bcs.w	8000c50 <__udivmoddi4+0x29c>
 8000a3c:	42a7      	cmp	r7, r4
 8000a3e:	f240 8107 	bls.w	8000c50 <__udivmoddi4+0x29c>
 8000a42:	4464      	add	r4, ip
 8000a44:	3802      	subs	r0, #2
 8000a46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a4a:	1be4      	subs	r4, r4, r7
 8000a4c:	2600      	movs	r6, #0
 8000a4e:	b11d      	cbz	r5, 8000a58 <__udivmoddi4+0xa4>
 8000a50:	40d4      	lsrs	r4, r2
 8000a52:	2300      	movs	r3, #0
 8000a54:	e9c5 4300 	strd	r4, r3, [r5]
 8000a58:	4631      	mov	r1, r6
 8000a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a5e:	428b      	cmp	r3, r1
 8000a60:	d909      	bls.n	8000a76 <__udivmoddi4+0xc2>
 8000a62:	2d00      	cmp	r5, #0
 8000a64:	f000 80ef 	beq.w	8000c46 <__udivmoddi4+0x292>
 8000a68:	2600      	movs	r6, #0
 8000a6a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a6e:	4630      	mov	r0, r6
 8000a70:	4631      	mov	r1, r6
 8000a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a76:	fab3 f683 	clz	r6, r3
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d14a      	bne.n	8000b14 <__udivmoddi4+0x160>
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d302      	bcc.n	8000a88 <__udivmoddi4+0xd4>
 8000a82:	4282      	cmp	r2, r0
 8000a84:	f200 80f9 	bhi.w	8000c7a <__udivmoddi4+0x2c6>
 8000a88:	1a84      	subs	r4, r0, r2
 8000a8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000a8e:	2001      	movs	r0, #1
 8000a90:	469e      	mov	lr, r3
 8000a92:	2d00      	cmp	r5, #0
 8000a94:	d0e0      	beq.n	8000a58 <__udivmoddi4+0xa4>
 8000a96:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a9a:	e7dd      	b.n	8000a58 <__udivmoddi4+0xa4>
 8000a9c:	b902      	cbnz	r2, 8000aa0 <__udivmoddi4+0xec>
 8000a9e:	deff      	udf	#255	; 0xff
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	2a00      	cmp	r2, #0
 8000aa6:	f040 8092 	bne.w	8000bce <__udivmoddi4+0x21a>
 8000aaa:	eba1 010c 	sub.w	r1, r1, ip
 8000aae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab2:	fa1f fe8c 	uxth.w	lr, ip
 8000ab6:	2601      	movs	r6, #1
 8000ab8:	0c20      	lsrs	r0, r4, #16
 8000aba:	fbb1 f3f7 	udiv	r3, r1, r7
 8000abe:	fb07 1113 	mls	r1, r7, r3, r1
 8000ac2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ac6:	fb0e f003 	mul.w	r0, lr, r3
 8000aca:	4288      	cmp	r0, r1
 8000acc:	d908      	bls.n	8000ae0 <__udivmoddi4+0x12c>
 8000ace:	eb1c 0101 	adds.w	r1, ip, r1
 8000ad2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ad6:	d202      	bcs.n	8000ade <__udivmoddi4+0x12a>
 8000ad8:	4288      	cmp	r0, r1
 8000ada:	f200 80cb 	bhi.w	8000c74 <__udivmoddi4+0x2c0>
 8000ade:	4643      	mov	r3, r8
 8000ae0:	1a09      	subs	r1, r1, r0
 8000ae2:	b2a4      	uxth	r4, r4
 8000ae4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ae8:	fb07 1110 	mls	r1, r7, r0, r1
 8000aec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000af0:	fb0e fe00 	mul.w	lr, lr, r0
 8000af4:	45a6      	cmp	lr, r4
 8000af6:	d908      	bls.n	8000b0a <__udivmoddi4+0x156>
 8000af8:	eb1c 0404 	adds.w	r4, ip, r4
 8000afc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b00:	d202      	bcs.n	8000b08 <__udivmoddi4+0x154>
 8000b02:	45a6      	cmp	lr, r4
 8000b04:	f200 80bb 	bhi.w	8000c7e <__udivmoddi4+0x2ca>
 8000b08:	4608      	mov	r0, r1
 8000b0a:	eba4 040e 	sub.w	r4, r4, lr
 8000b0e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b12:	e79c      	b.n	8000a4e <__udivmoddi4+0x9a>
 8000b14:	f1c6 0720 	rsb	r7, r6, #32
 8000b18:	40b3      	lsls	r3, r6
 8000b1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b22:	fa20 f407 	lsr.w	r4, r0, r7
 8000b26:	fa01 f306 	lsl.w	r3, r1, r6
 8000b2a:	431c      	orrs	r4, r3
 8000b2c:	40f9      	lsrs	r1, r7
 8000b2e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b32:	fa00 f306 	lsl.w	r3, r0, r6
 8000b36:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b3a:	0c20      	lsrs	r0, r4, #16
 8000b3c:	fa1f fe8c 	uxth.w	lr, ip
 8000b40:	fb09 1118 	mls	r1, r9, r8, r1
 8000b44:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b48:	fb08 f00e 	mul.w	r0, r8, lr
 8000b4c:	4288      	cmp	r0, r1
 8000b4e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b52:	d90b      	bls.n	8000b6c <__udivmoddi4+0x1b8>
 8000b54:	eb1c 0101 	adds.w	r1, ip, r1
 8000b58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b5c:	f080 8088 	bcs.w	8000c70 <__udivmoddi4+0x2bc>
 8000b60:	4288      	cmp	r0, r1
 8000b62:	f240 8085 	bls.w	8000c70 <__udivmoddi4+0x2bc>
 8000b66:	f1a8 0802 	sub.w	r8, r8, #2
 8000b6a:	4461      	add	r1, ip
 8000b6c:	1a09      	subs	r1, r1, r0
 8000b6e:	b2a4      	uxth	r4, r4
 8000b70:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b74:	fb09 1110 	mls	r1, r9, r0, r1
 8000b78:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b7c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b80:	458e      	cmp	lr, r1
 8000b82:	d908      	bls.n	8000b96 <__udivmoddi4+0x1e2>
 8000b84:	eb1c 0101 	adds.w	r1, ip, r1
 8000b88:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b8c:	d26c      	bcs.n	8000c68 <__udivmoddi4+0x2b4>
 8000b8e:	458e      	cmp	lr, r1
 8000b90:	d96a      	bls.n	8000c68 <__udivmoddi4+0x2b4>
 8000b92:	3802      	subs	r0, #2
 8000b94:	4461      	add	r1, ip
 8000b96:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b9a:	fba0 9402 	umull	r9, r4, r0, r2
 8000b9e:	eba1 010e 	sub.w	r1, r1, lr
 8000ba2:	42a1      	cmp	r1, r4
 8000ba4:	46c8      	mov	r8, r9
 8000ba6:	46a6      	mov	lr, r4
 8000ba8:	d356      	bcc.n	8000c58 <__udivmoddi4+0x2a4>
 8000baa:	d053      	beq.n	8000c54 <__udivmoddi4+0x2a0>
 8000bac:	b15d      	cbz	r5, 8000bc6 <__udivmoddi4+0x212>
 8000bae:	ebb3 0208 	subs.w	r2, r3, r8
 8000bb2:	eb61 010e 	sbc.w	r1, r1, lr
 8000bb6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bba:	fa22 f306 	lsr.w	r3, r2, r6
 8000bbe:	40f1      	lsrs	r1, r6
 8000bc0:	431f      	orrs	r7, r3
 8000bc2:	e9c5 7100 	strd	r7, r1, [r5]
 8000bc6:	2600      	movs	r6, #0
 8000bc8:	4631      	mov	r1, r6
 8000bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bce:	f1c2 0320 	rsb	r3, r2, #32
 8000bd2:	40d8      	lsrs	r0, r3
 8000bd4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bdc:	4091      	lsls	r1, r2
 8000bde:	4301      	orrs	r1, r0
 8000be0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000be4:	fa1f fe8c 	uxth.w	lr, ip
 8000be8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000bec:	fb07 3610 	mls	r6, r7, r0, r3
 8000bf0:	0c0b      	lsrs	r3, r1, #16
 8000bf2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000bf6:	fb00 f60e 	mul.w	r6, r0, lr
 8000bfa:	429e      	cmp	r6, r3
 8000bfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000c00:	d908      	bls.n	8000c14 <__udivmoddi4+0x260>
 8000c02:	eb1c 0303 	adds.w	r3, ip, r3
 8000c06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c0a:	d22f      	bcs.n	8000c6c <__udivmoddi4+0x2b8>
 8000c0c:	429e      	cmp	r6, r3
 8000c0e:	d92d      	bls.n	8000c6c <__udivmoddi4+0x2b8>
 8000c10:	3802      	subs	r0, #2
 8000c12:	4463      	add	r3, ip
 8000c14:	1b9b      	subs	r3, r3, r6
 8000c16:	b289      	uxth	r1, r1
 8000c18:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c1c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c24:	fb06 f30e 	mul.w	r3, r6, lr
 8000c28:	428b      	cmp	r3, r1
 8000c2a:	d908      	bls.n	8000c3e <__udivmoddi4+0x28a>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c34:	d216      	bcs.n	8000c64 <__udivmoddi4+0x2b0>
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d914      	bls.n	8000c64 <__udivmoddi4+0x2b0>
 8000c3a:	3e02      	subs	r6, #2
 8000c3c:	4461      	add	r1, ip
 8000c3e:	1ac9      	subs	r1, r1, r3
 8000c40:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c44:	e738      	b.n	8000ab8 <__udivmoddi4+0x104>
 8000c46:	462e      	mov	r6, r5
 8000c48:	4628      	mov	r0, r5
 8000c4a:	e705      	b.n	8000a58 <__udivmoddi4+0xa4>
 8000c4c:	4606      	mov	r6, r0
 8000c4e:	e6e3      	b.n	8000a18 <__udivmoddi4+0x64>
 8000c50:	4618      	mov	r0, r3
 8000c52:	e6f8      	b.n	8000a46 <__udivmoddi4+0x92>
 8000c54:	454b      	cmp	r3, r9
 8000c56:	d2a9      	bcs.n	8000bac <__udivmoddi4+0x1f8>
 8000c58:	ebb9 0802 	subs.w	r8, r9, r2
 8000c5c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c60:	3801      	subs	r0, #1
 8000c62:	e7a3      	b.n	8000bac <__udivmoddi4+0x1f8>
 8000c64:	4646      	mov	r6, r8
 8000c66:	e7ea      	b.n	8000c3e <__udivmoddi4+0x28a>
 8000c68:	4620      	mov	r0, r4
 8000c6a:	e794      	b.n	8000b96 <__udivmoddi4+0x1e2>
 8000c6c:	4640      	mov	r0, r8
 8000c6e:	e7d1      	b.n	8000c14 <__udivmoddi4+0x260>
 8000c70:	46d0      	mov	r8, sl
 8000c72:	e77b      	b.n	8000b6c <__udivmoddi4+0x1b8>
 8000c74:	3b02      	subs	r3, #2
 8000c76:	4461      	add	r1, ip
 8000c78:	e732      	b.n	8000ae0 <__udivmoddi4+0x12c>
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	e709      	b.n	8000a92 <__udivmoddi4+0xde>
 8000c7e:	4464      	add	r4, ip
 8000c80:	3802      	subs	r0, #2
 8000c82:	e742      	b.n	8000b0a <__udivmoddi4+0x156>

08000c84 <__aeabi_idiv0>:
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <delay_cycles>:

extern s16 AVG_Alpha_Current;
extern s16 AVG_Beta_Current;

void __attribute__( ( optimize( "O0" ) ) )
delay_cycles( uint32_t cyc ) {
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  for ( uint32_t d_i = 0; d_i < cyc; ++d_i ) { asm( "NOP" ); }
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	e003      	b.n	8000c9e <delay_cycles+0x16>
 8000c96:	bf00      	nop
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d3f7      	bcc.n	8000c96 <delay_cycles+0xe>
}
 8000ca6:	bf00      	nop
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <ExecControlInitParamOffSet>:
* Return         : None
*******************************************************************************/
void ExecControlInitParamOffSet()
{

	DataSensing_sum.AC_LineCurrent = ((DataSensing_sum.AC_LineCurrent)+(u32)(DataSensingIO.AC_LineCurrent));
 8000cb4:	4b28      	ldr	r3, [pc, #160]	; (8000d58 <ExecControlInitParamOffSet+0xa4>)
 8000cb6:	4a29      	ldr	r2, [pc, #164]	; (8000d5c <ExecControlInitParamOffSet+0xa8>)
	DataSensing_sum.DC_PanelCurrent = ((DataSensing_sum.DC_PanelCurrent)+(u32)(DataSensingIO.DC_PanelCurrent));
	DataSensing_sum.DC_BusVoltage = ((DataSensing_sum.DC_BusVoltage)+(u32)(DataSensingIO.DC_BusVoltage));
	DataSensing_sum.DC_PanelVoltage = ((DataSensing_sum.DC_PanelVoltage)+(u32)(DataSensingIO.DC_PanelVoltage));


    if (DataInitCount < (MAX_DATA_INIT_COUNT-1))
 8000cb8:	4929      	ldr	r1, [pc, #164]	; (8000d60 <ExecControlInitParamOffSet+0xac>)
{
 8000cba:	b410      	push	{r4}
	DataSensing_sum.AC_LineCurrent = ((DataSensing_sum.AC_LineCurrent)+(u32)(DataSensingIO.AC_LineCurrent));
 8000cbc:	681c      	ldr	r4, [r3, #0]
 8000cbe:	8810      	ldrh	r0, [r2, #0]
 8000cc0:	fa14 f080 	uxtah	r0, r4, r0
 8000cc4:	6018      	str	r0, [r3, #0]
	DataSensing_sum.AC_LineVoltage = ((DataSensing_sum.AC_LineVoltage)+(u32)(DataSensingIO.AC_LineVoltage));
 8000cc6:	685c      	ldr	r4, [r3, #4]
 8000cc8:	8850      	ldrh	r0, [r2, #2]
 8000cca:	fa14 f080 	uxtah	r0, r4, r0
 8000cce:	6058      	str	r0, [r3, #4]
	DataSensing_sum.DC_PanelCurrent = ((DataSensing_sum.DC_PanelCurrent)+(u32)(DataSensingIO.DC_PanelCurrent));
 8000cd0:	68dc      	ldr	r4, [r3, #12]
 8000cd2:	88d0      	ldrh	r0, [r2, #6]
 8000cd4:	fa14 f080 	uxtah	r0, r4, r0
 8000cd8:	60d8      	str	r0, [r3, #12]
	DataSensing_sum.DC_BusVoltage = ((DataSensing_sum.DC_BusVoltage)+(u32)(DataSensingIO.DC_BusVoltage));
 8000cda:	689c      	ldr	r4, [r3, #8]
 8000cdc:	8890      	ldrh	r0, [r2, #4]
 8000cde:	fa14 f080 	uxtah	r0, r4, r0
 8000ce2:	6098      	str	r0, [r3, #8]
	DataSensing_sum.DC_PanelVoltage = ((DataSensing_sum.DC_PanelVoltage)+(u32)(DataSensingIO.DC_PanelVoltage));
 8000ce4:	691c      	ldr	r4, [r3, #16]
 8000ce6:	8912      	ldrh	r2, [r2, #8]
    if (DataInitCount < (MAX_DATA_INIT_COUNT-1))
 8000ce8:	481e      	ldr	r0, [pc, #120]	; (8000d64 <ExecControlInitParamOffSet+0xb0>)
	DataSensing_sum.DC_PanelVoltage = ((DataSensing_sum.DC_PanelVoltage)+(u32)(DataSensingIO.DC_PanelVoltage));
 8000cea:	fa14 f282 	uxtah	r2, r4, r2
 8000cee:	611a      	str	r2, [r3, #16]
    if (DataInitCount < (MAX_DATA_INIT_COUNT-1))
 8000cf0:	680a      	ldr	r2, [r1, #0]
 8000cf2:	4282      	cmp	r2, r0
 8000cf4:	d92a      	bls.n	8000d4c <ExecControlInitParamOffSet+0x98>
      DataInitCount++;

    else if(DataInitCount==(MAX_DATA_INIT_COUNT-1))
 8000cf6:	6808      	ldr	r0, [r1, #0]
 8000cf8:	4a1b      	ldr	r2, [pc, #108]	; (8000d68 <ExecControlInitParamOffSet+0xb4>)
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	d002      	beq.n	8000d04 <ExecControlInitParamOffSet+0x50>

      DataInitCount++;
    }


}
 8000cfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d02:	4770      	bx	lr
      ((vu16*)&DataSensingOffSet)[0] = (u16)(DataSensing_sum.AC_LineCurrent / (DataInitCount+1));
 8000d04:	6818      	ldr	r0, [r3, #0]
 8000d06:	680c      	ldr	r4, [r1, #0]
 8000d08:	4a18      	ldr	r2, [pc, #96]	; (8000d6c <ExecControlInitParamOffSet+0xb8>)
 8000d0a:	3401      	adds	r4, #1
 8000d0c:	fbb0 f0f4 	udiv	r0, r0, r4
 8000d10:	b280      	uxth	r0, r0
 8000d12:	8010      	strh	r0, [r2, #0]
      ((vu16*)&DataSensingOffSet)[1] = (u16)(DataSensing_sum.AC_LineVoltage / (DataInitCount+1));
 8000d14:	6858      	ldr	r0, [r3, #4]
 8000d16:	680c      	ldr	r4, [r1, #0]
 8000d18:	3401      	adds	r4, #1
 8000d1a:	fbb0 f0f4 	udiv	r0, r0, r4
 8000d1e:	b280      	uxth	r0, r0
 8000d20:	8050      	strh	r0, [r2, #2]
      ((vu16*)&DataSensingOffSet)[2] = (u16)(DataSensing_sum.DC_BusVoltage / (DataInitCount+1));
 8000d22:	6898      	ldr	r0, [r3, #8]
 8000d24:	680c      	ldr	r4, [r1, #0]
 8000d26:	3401      	adds	r4, #1
 8000d28:	fbb0 f0f4 	udiv	r0, r0, r4
 8000d2c:	b280      	uxth	r0, r0
 8000d2e:	8090      	strh	r0, [r2, #4]
      ((vu16*)&DataSensingOffSet)[3] = (u16)(DataSensing_sum.DC_PanelCurrent / (DataInitCount+1));
 8000d30:	68d8      	ldr	r0, [r3, #12]
 8000d32:	680c      	ldr	r4, [r1, #0]
 8000d34:	3401      	adds	r4, #1
 8000d36:	fbb0 f0f4 	udiv	r0, r0, r4
 8000d3a:	b280      	uxth	r0, r0
 8000d3c:	80d0      	strh	r0, [r2, #6]
      ((vu16*)&DataSensingOffSet)[4] = (u16)(DataSensing_sum.DC_PanelVoltage / (DataInitCount+1));
 8000d3e:	691b      	ldr	r3, [r3, #16]
 8000d40:	6808      	ldr	r0, [r1, #0]
 8000d42:	3001      	adds	r0, #1
 8000d44:	fbb3 f3f0 	udiv	r3, r3, r0
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	8113      	strh	r3, [r2, #8]
      DataInitCount++;
 8000d4c:	680b      	ldr	r3, [r1, #0]
}
 8000d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
      DataInitCount++;
 8000d52:	3301      	adds	r3, #1
 8000d54:	600b      	str	r3, [r1, #0]
}
 8000d56:	4770      	bx	lr
 8000d58:	2000012c 	.word	0x2000012c
 8000d5c:	200000fc 	.word	0x200000fc
 8000d60:	200000f8 	.word	0x200000f8
 8000d64:	0001e65e 	.word	0x0001e65e
 8000d68:	0001e65f 	.word	0x0001e65f
 8000d6c:	20000114 	.word	0x20000114

08000d70 <ExecControlOpenLoop>:
  //GRID_VAC_VAL = DataSensingIO.AC_LineVoltage;
  //GRID_IAC_VAL = DataSensingIO.AC_LineCurrent;

  //uint8_t data[] = "HELLO WORLD \r\n";

    DMA1_Channel5->CCR &= ~( DMA_CCR_EN ); //CHANNEL ENABLE
 8000d70:	4b71      	ldr	r3, [pc, #452]	; (8000f38 <ExecControlOpenLoop+0x1c8>)
    //Theta += 131;//50khz 50hz
    //Theta += 158;
    Theta += 154;
    Index_Sin = ((u16)(Theta>>7) & (u16)(0x01FF));

    Sin_Theta = Sin_Cos_Table[Index_Sin];
 8000d72:	4972      	ldr	r1, [pc, #456]	; (8000f3c <ExecControlOpenLoop+0x1cc>)
    DMA1_Channel5->CCR &= ~( DMA_CCR_EN ); //CHANNEL ENABLE
 8000d74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    mul_q15_q15_q31(Amplitude,Sin_Theta,&SinWave_q31);
 8000d76:	4872      	ldr	r0, [pc, #456]	; (8000f40 <ExecControlOpenLoop+0x1d0>)
    DMA1_Channel5->CCR &= ~( DMA_CCR_EN ); //CHANNEL ENABLE
 8000d78:	f022 0201 	bic.w	r2, r2, #1
 {
 8000d7c:	e92d 4170 	stmdb	sp!, {r4, r5, r6, r8, lr}
    DMA1_Channel5->CCR &= ~( DMA_CCR_EN ); //CHANNEL ENABLE
 8000d80:	659a      	str	r2, [r3, #88]	; 0x58
    DMA1_Channel3->CCR &= ~( DMA_CCR_EN ); //CHANNEL ENABLE
 8000d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    Theta += 154;
 8000d84:	4c6f      	ldr	r4, [pc, #444]	; (8000f44 <ExecControlOpenLoop+0x1d4>)
    State_Control=START;
 8000d86:	4d70      	ldr	r5, [pc, #448]	; (8000f48 <ExecControlOpenLoop+0x1d8>)
    mul_q15_q15_q31(Amplitude,Sin_Theta,&SinWave_q31);
 8000d88:	f9b0 0000 	ldrsh.w	r0, [r0]
    DMA1_Channel3->CCR &= ~( DMA_CCR_EN ); //CHANNEL ENABLE
 8000d8c:	f022 0201 	bic.w	r2, r2, #1
 8000d90:	631a      	str	r2, [r3, #48]	; 0x30
    DMA1_Channel4->CCR &= ~( DMA_CCR_EN ); //CHANNEL ENABLE
 8000d92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d94:	f022 0201 	bic.w	r2, r2, #1
 8000d98:	645a      	str	r2, [r3, #68]	; 0x44
    DMA1_Channel6->CCR &= ~( DMA_CCR_EN ); //CHANNEL ENABLE
 8000d9a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000d9c:	f022 0201 	bic.w	r2, r2, #1
 8000da0:	66da      	str	r2, [r3, #108]	; 0x6c
    Theta += 154;
 8000da2:	8823      	ldrh	r3, [r4, #0]
 8000da4:	339a      	adds	r3, #154	; 0x9a
 8000da6:	b29b      	uxth	r3, r3
    Sin_Theta = Sin_Cos_Table[Index_Sin];
 8000da8:	ea4f 1cd3 	mov.w	ip, r3, lsr #7
 {
 8000dac:	b083      	sub	sp, #12
    mul_q15_q15_q31(Amplitude,Sin_Theta,&SinWave_q31);
 8000dae:	f931 101c 	ldrsh.w	r1, [r1, ip, lsl #1]
    Theta += 154;
 8000db2:	8023      	strh	r3, [r4, #0]
    State_Control=START;
 8000db4:	f04f 0c12 	mov.w	ip, #18
    mul_q15_q15_q31(Amplitude,Sin_Theta,&SinWave_q31);
 8000db8:	aa01      	add	r2, sp, #4
    State_Control=START;
 8000dba:	f885 c000 	strb.w	ip, [r5]
    mul_q15_q15_q31(Amplitude,Sin_Theta,&SinWave_q31);
 8000dbe:	f002 ff03 	bl	8003bc8 <mul_q15_q15_q31>
    SineWave = (s16)(SinWave_q31/65536);
 8000dc2:	9d01      	ldr	r5, [sp, #4]
    /*PORT A.1 drives the RELE' */
    //GPIO_SetBits(GPIOA, GPIO_Pin_1);

    if (DCAC_GetStatus() == DCAC_Running)
 8000dc4:	f000 fff6 	bl	8001db4 <DCAC_GetStatus>
 8000dc8:	2801      	cmp	r0, #1
 8000dca:	d002      	beq.n	8000dd2 <ExecControlOpenLoop+0x62>
				//update_i++;
			}

		}
    }
}
 8000dcc:	b003      	add	sp, #12
 8000dce:	e8bd 8170 	ldmia.w	sp!, {r4, r5, r6, r8, pc}
		if(RELAY_ON == FALSE)
 8000dd2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8000f78 <ExecControlOpenLoop+0x208>
    	RESET_TIMER_D = TRUE;
 8000dd6:	4e5d      	ldr	r6, [pc, #372]	; (8000f4c <ExecControlOpenLoop+0x1dc>)
		if(RELAY_ON == FALSE)
 8000dd8:	f898 3000 	ldrb.w	r3, [r8]
    	RESET_TIMER_D = TRUE;
 8000ddc:	7030      	strb	r0, [r6, #0]
		if(RELAY_ON == FALSE)
 8000dde:	4604      	mov	r4, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d064      	beq.n	8000eae <ExecControlOpenLoop+0x13e>
    SineWave = (s16)(SinWave_q31/65536);
 8000de4:	2d00      	cmp	r5, #0
		if((SinWave_q31)<-1626880)
 8000de6:	9b01      	ldr	r3, [sp, #4]
 8000de8:	4a59      	ldr	r2, [pc, #356]	; (8000f50 <ExecControlOpenLoop+0x1e0>)
    SineWave = (s16)(SinWave_q31/65536);
 8000dea:	bfbc      	itt	lt
 8000dec:	f505 457f 	addlt.w	r5, r5, #65280	; 0xff00
 8000df0:	35ff      	addlt	r5, #255	; 0xff
		if((SinWave_q31)<-1626880)
 8000df2:	4293      	cmp	r3, r2
    SineWave = (s16)(SinWave_q31/65536);
 8000df4:	ea4f 4525 	mov.w	r5, r5, asr #16
		if((SinWave_q31)<-1626880)
 8000df8:	dd2c      	ble.n	8000e54 <ExecControlOpenLoop+0xe4>
		if((SinWave_q31)>-1626880)
 8000dfa:	4a56      	ldr	r2, [pc, #344]	; (8000f54 <ExecControlOpenLoop+0x1e4>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	dbe5      	blt.n	8000dcc <ExecControlOpenLoop+0x5c>
		  qValpha_shifted_pos = (u16)(300+(s16)(SineWave));
 8000e00:	f505 7596 	add.w	r5, r5, #300	; 0x12c
		  polarity=TRUE;
 8000e04:	4b54      	ldr	r3, [pc, #336]	; (8000f58 <ExecControlOpenLoop+0x1e8>)
		  Pulse1=(u16)(qValpha_shifted_pos);
 8000e06:	b2a9      	uxth	r1, r5
		  polarity=TRUE;
 8000e08:	2201      	movs	r2, #1
		  DCAC_SetPulse((u16)(Pulse1), (u16)(Pulse1));
 8000e0a:	4608      	mov	r0, r1
		  polarity=TRUE;
 8000e0c:	701a      	strb	r2, [r3, #0]
		  DCAC_SetPulse((u16)(Pulse1), (u16)(Pulse1));
 8000e0e:	f000 ffa3 	bl	8001d58 <DCAC_SetPulse>
		  if((LF_MOS_SET == FALSE) || (FIRST_CYCLE == TRUE))
 8000e12:	4b52      	ldr	r3, [pc, #328]	; (8000f5c <ExecControlOpenLoop+0x1ec>)
 8000e14:	781a      	ldrb	r2, [r3, #0]
 8000e16:	2a00      	cmp	r2, #0
 8000e18:	d153      	bne.n	8000ec2 <ExecControlOpenLoop+0x152>
 8000e1a:	4a51      	ldr	r2, [pc, #324]	; (8000f60 <ExecControlOpenLoop+0x1f0>)
			  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(16);
 8000e1c:	4951      	ldr	r1, [pc, #324]	; (8000f64 <ExecControlOpenLoop+0x1f4>)
			  RESET_TIMER_D = FALSE;
 8000e1e:	2000      	movs	r0, #0
			  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(16);
 8000e20:	2410      	movs	r4, #16
			  FIRST_CYCLE = FALSE;
 8000e22:	7010      	strb	r0, [r2, #0]
			  RESET_TIMER_D = FALSE;
 8000e24:	7030      	strb	r0, [r6, #0]
			  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(16);
 8000e26:	f8c1 4324 	str.w	r4, [r1, #804]	; 0x324
			  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= 1 << 19;
 8000e2a:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
			  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8000e2e:	484e      	ldr	r0, [pc, #312]	; (8000f68 <ExecControlOpenLoop+0x1f8>)
			  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= 1 << 19;
 8000e30:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e34:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
			  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8000e38:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
			  LF_UPDATE = TRUE;
 8000e3c:	494b      	ldr	r1, [pc, #300]	; (8000f6c <ExecControlOpenLoop+0x1fc>)
			  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8000e3e:	f042 0250 	orr.w	r2, r2, #80	; 0x50
			  LF_UPDATE = TRUE;
 8000e42:	2401      	movs	r4, #1
			  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8000e44:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
			  LF_UPDATE = TRUE;
 8000e48:	700c      	strb	r4, [r1, #0]
		  LF_MOS_SET = TRUE;
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	701a      	strb	r2, [r3, #0]
}
 8000e4e:	b003      	add	sp, #12
 8000e50:	e8bd 8170 	ldmia.w	sp!, {r4, r5, r6, r8, pc}
		  qValpha_shifted_pos = ((u16)(SineWave+(TIMF_PERIOD)-330));
 8000e54:	f505 41fd 	add.w	r1, r5, #32384	; 0x7e80
 8000e58:	3135      	adds	r1, #53	; 0x35
		  polarity=FALSE;
 8000e5a:	4b3f      	ldr	r3, [pc, #252]	; (8000f58 <ExecControlOpenLoop+0x1e8>)
		  Pulse1=(u16)(qValpha_shifted_pos);
 8000e5c:	b289      	uxth	r1, r1
		  polarity=FALSE;
 8000e5e:	2200      	movs	r2, #0
		  DCAC_SetPulse((u16)(Pulse1), (u16)(Pulse1));
 8000e60:	4608      	mov	r0, r1
		  polarity=FALSE;
 8000e62:	701a      	strb	r2, [r3, #0]
		  DCAC_SetPulse((u16)(Pulse1), (u16)(Pulse1));
 8000e64:	f000 ff78 	bl	8001d58 <DCAC_SetPulse>
		  if((LF_MOS_SET == TRUE) || FIRST_CYCLE == TRUE)
 8000e68:	4b3c      	ldr	r3, [pc, #240]	; (8000f5c <ExecControlOpenLoop+0x1ec>)
 8000e6a:	781a      	ldrb	r2, [r3, #0]
 8000e6c:	2a00      	cmp	r2, #0
 8000e6e:	d046      	beq.n	8000efe <ExecControlOpenLoop+0x18e>
 8000e70:	4a3b      	ldr	r2, [pc, #236]	; (8000f60 <ExecControlOpenLoop+0x1f0>)
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8000e72:	493f      	ldr	r1, [pc, #252]	; (8000f70 <ExecControlOpenLoop+0x200>)
 8000e74:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e78:	6288      	str	r0, [r1, #40]	; 0x28
			  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(60);
 8000e7a:	493a      	ldr	r1, [pc, #232]	; (8000f64 <ExecControlOpenLoop+0x1f4>)
			  RESET_TIMER_D = FALSE;
 8000e7c:	2000      	movs	r0, #0
			  LF_MOS_SET = FALSE;
 8000e7e:	7018      	strb	r0, [r3, #0]
			  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(60);
 8000e80:	233c      	movs	r3, #60	; 0x3c
			  RESET_TIMER_D = FALSE;
 8000e82:	7030      	strb	r0, [r6, #0]
			  FIRST_CYCLE = FALSE;
 8000e84:	7010      	strb	r0, [r2, #0]
			  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(60);
 8000e86:	f8c1 3324 	str.w	r3, [r1, #804]	; 0x324
			  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= 1 << 19;
 8000e8a:	f8d1 323c 	ldr.w	r3, [r1, #572]	; 0x23c
			  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8000e8e:	4a36      	ldr	r2, [pc, #216]	; (8000f68 <ExecControlOpenLoop+0x1f8>)
			  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= 1 << 19;
 8000e90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e94:	f8c1 323c 	str.w	r3, [r1, #572]	; 0x23c
			  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8000e98:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
			  LF_UPDATE = TRUE;
 8000e9c:	4933      	ldr	r1, [pc, #204]	; (8000f6c <ExecControlOpenLoop+0x1fc>)
			  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8000e9e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000ea2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
			  LF_UPDATE = TRUE;
 8000ea6:	2201      	movs	r2, #1
		if((SinWave_q31)>-1626880)
 8000ea8:	9b01      	ldr	r3, [sp, #4]
			  LF_UPDATE = TRUE;
 8000eaa:	700a      	strb	r2, [r1, #0]
 8000eac:	e7a5      	b.n	8000dfa <ExecControlOpenLoop+0x8a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000eae:	4b31      	ldr	r3, [pc, #196]	; (8000f74 <ExecControlOpenLoop+0x204>)
 8000eb0:	2210      	movs	r2, #16
 8000eb2:	619a      	str	r2, [r3, #24]
		delay_us(20000);
 8000eb4:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000eb8:	f004 f8fe 	bl	80050b8 <delay_us>
		RELAY_ON = TRUE;
 8000ebc:	f888 4000 	strb.w	r4, [r8]
 8000ec0:	e790      	b.n	8000de4 <ExecControlOpenLoop+0x74>
		  if((LF_MOS_SET == FALSE) || (FIRST_CYCLE == TRUE))
 8000ec2:	4a27      	ldr	r2, [pc, #156]	; (8000f60 <ExecControlOpenLoop+0x1f0>)
 8000ec4:	7811      	ldrb	r1, [r2, #0]
 8000ec6:	2900      	cmp	r1, #0
 8000ec8:	d1a8      	bne.n	8000e1c <ExecControlOpenLoop+0xac>
			  if (LF_UPDATE == TRUE)
 8000eca:	4a28      	ldr	r2, [pc, #160]	; (8000f6c <ExecControlOpenLoop+0x1fc>)
 8000ecc:	7810      	ldrb	r0, [r2, #0]
 8000ece:	2800      	cmp	r0, #0
 8000ed0:	d0bb      	beq.n	8000e4a <ExecControlOpenLoop+0xda>
				  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R &= ~ (1 << 19);
 8000ed2:	4824      	ldr	r0, [pc, #144]	; (8000f64 <ExecControlOpenLoop+0x1f4>)
				  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8000ed4:	4d24      	ldr	r5, [pc, #144]	; (8000f68 <ExecControlOpenLoop+0x1f8>)
				  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R &= ~ (1 << 19);
 8000ed6:	f8d0 423c 	ldr.w	r4, [r0, #572]	; 0x23c
 8000eda:	f424 2400 	bic.w	r4, r4, #524288	; 0x80000
 8000ede:	f8c0 423c 	str.w	r4, [r0, #572]	; 0x23c
				  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= (1 << 0);
 8000ee2:	f8d0 423c 	ldr.w	r4, [r0, #572]	; 0x23c
 8000ee6:	f044 0401 	orr.w	r4, r4, #1
 8000eea:	f8c0 423c 	str.w	r4, [r0, #572]	; 0x23c
				  LF_UPDATE = FALSE;
 8000eee:	7011      	strb	r1, [r2, #0]
				  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8000ef0:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
 8000ef4:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8000ef8:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
 8000efc:	e7a5      	b.n	8000e4a <ExecControlOpenLoop+0xda>
		  if((LF_MOS_SET == TRUE) || FIRST_CYCLE == TRUE)
 8000efe:	4a18      	ldr	r2, [pc, #96]	; (8000f60 <ExecControlOpenLoop+0x1f0>)
 8000f00:	7811      	ldrb	r1, [r2, #0]
 8000f02:	2900      	cmp	r1, #0
 8000f04:	d1b5      	bne.n	8000e72 <ExecControlOpenLoop+0x102>
			  if (LF_UPDATE == TRUE)
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <ExecControlOpenLoop+0x1fc>)
 8000f08:	781a      	ldrb	r2, [r3, #0]
 8000f0a:	b19a      	cbz	r2, 8000f34 <ExecControlOpenLoop+0x1c4>
				  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R &= ~ (1 << 19);
 8000f0c:	4a15      	ldr	r2, [pc, #84]	; (8000f64 <ExecControlOpenLoop+0x1f4>)
 8000f0e:	f8d2 023c 	ldr.w	r0, [r2, #572]	; 0x23c
 8000f12:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
 8000f16:	f8c2 023c 	str.w	r0, [r2, #572]	; 0x23c
				  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].RSTx1R |= (1 << 0);
 8000f1a:	f8d2 0240 	ldr.w	r0, [r2, #576]	; 0x240
 8000f1e:	f040 0001 	orr.w	r0, r0, #1
 8000f22:	f8c2 0240 	str.w	r0, [r2, #576]	; 0x240
				  LF_UPDATE = FALSE;
 8000f26:	7019      	strb	r1, [r3, #0]
				  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8000f28:	f8d2 3384 	ldr.w	r3, [r2, #900]	; 0x384
 8000f2c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000f30:	f8c2 3384 	str.w	r3, [r2, #900]	; 0x384
		if((SinWave_q31)>-1626880)
 8000f34:	9b01      	ldr	r3, [sp, #4]
 8000f36:	e760      	b.n	8000dfa <ExecControlOpenLoop+0x8a>
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	0800a8d4 	.word	0x0800a8d4
 8000f40:	20000004 	.word	0x20000004
 8000f44:	20004e20 	.word	0x20004e20
 8000f48:	200001b2 	.word	0x200001b2
 8000f4c:	2000000c 	.word	0x2000000c
 8000f50:	ffe72cff 	.word	0xffe72cff
 8000f54:	ffe72d01 	.word	0xffe72d01
 8000f58:	200041d3 	.word	0x200041d3
 8000f5c:	20000007 	.word	0x20000007
 8000f60:	20000006 	.word	0x20000006
 8000f64:	40016800 	.word	0x40016800
 8000f68:	40016b00 	.word	0x40016b00
 8000f6c:	20000172 	.word	0x20000172
 8000f70:	48000800 	.word	0x48000800
 8000f74:	48000c00 	.word	0x48000c00
 8000f78:	200001a0 	.word	0x200001a0

08000f7c <SetControlMode>:
{
 8000f7c:	b510      	push	{r4, lr}
    return State_Control;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <SetControlMode+0x3c>)
 8000f80:	781c      	ldrb	r4, [r3, #0]
    if (GetStatusControl() == STOP)
 8000f82:	b954      	cbnz	r4, 8000f9a <SetControlMode+0x1e>
      switch (mode)
 8000f84:	4603      	mov	r3, r0
 8000f86:	b158      	cbz	r0, 8000fa0 <SetControlMode+0x24>
 8000f88:	2802      	cmp	r0, #2
 8000f8a:	d00e      	beq.n	8000faa <SetControlMode+0x2e>
            ControlMode = mode;
 8000f8c:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <SetControlMode+0x40>)
            DS_SetAcquistionEvent(ExecControlOpenLoop);
 8000f8e:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <SetControlMode+0x44>)
            ControlMode = mode;
 8000f90:	7013      	strb	r3, [r2, #0]
            DS_SetAcquistionEvent(ExecControlOpenLoop);
 8000f92:	f002 f9c3 	bl	800331c <DS_SetAcquistionEvent>
}
 8000f96:	4620      	mov	r0, r4
 8000f98:	bd10      	pop	{r4, pc}
    u8 nRet = CONTROL_ERROR_RUNNING;
 8000f9a:	2401      	movs	r4, #1
}
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	bd10      	pop	{r4, pc}
            DS_SetAcquistionEvent(ExecControlInitParamOffSet);
 8000fa0:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <SetControlMode+0x48>)
 8000fa2:	f002 f9bb 	bl	800331c <DS_SetAcquistionEvent>
}
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	bd10      	pop	{r4, pc}
            ControlMode = mode;
 8000faa:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <SetControlMode+0x40>)
            DS_SetAcquistionEvent(ExecControl);
 8000fac:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <SetControlMode+0x4c>)
            ControlMode = mode;
 8000fae:	7013      	strb	r3, [r2, #0]
            DS_SetAcquistionEvent(ExecControl);
 8000fb0:	f002 f9b4 	bl	800331c <DS_SetAcquistionEvent>
}
 8000fb4:	4620      	mov	r0, r4
 8000fb6:	bd10      	pop	{r4, pc}
 8000fb8:	200001b2 	.word	0x200001b2
 8000fbc:	2000007e 	.word	0x2000007e
 8000fc0:	08000d71 	.word	0x08000d71
 8000fc4:	08000cb5 	.word	0x08000cb5
 8000fc8:	08001561 	.word	0x08001561

08000fcc <CalibrationControl.part.0>:
u8 CalibrationControl()
 8000fcc:	b538      	push	{r3, r4, r5, lr}
    return State_Control;
 8000fce:	4b3d      	ldr	r3, [pc, #244]	; (80010c4 <CalibrationControl.part.0+0xf8>)
      DataSensingOffSet.AC_LineCurrent  = 0;
 8000fd0:	493d      	ldr	r1, [pc, #244]	; (80010c8 <CalibrationControl.part.0+0xfc>)
      DataSensing_sum.AC_LineCurrent  = 0;
 8000fd2:	4a3e      	ldr	r2, [pc, #248]	; (80010cc <CalibrationControl.part.0+0x100>)
    if (GetStatusControl() == STOP)
 8000fd4:	7818      	ldrb	r0, [r3, #0]
      DataSensingOffSet.AC_LineCurrent  = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	800b      	strh	r3, [r1, #0]
      DataSensingOffSet.AC_LineVoltage  = 0;
 8000fda:	804b      	strh	r3, [r1, #2]
      DataSensingOffSet.DC_PanelCurrent = 0;
 8000fdc:	80cb      	strh	r3, [r1, #6]
      DataSensingOffSet.DC_PanelVoltage = 0;
 8000fde:	810b      	strh	r3, [r1, #8]
      DataSensingOffSet.DC_BusVoltage   = 0;
 8000fe0:	808b      	strh	r3, [r1, #4]
      DataSensing_sum.AC_LineCurrent  = 0;
 8000fe2:	6013      	str	r3, [r2, #0]
      DataSensing_sum.AC_LineVoltage  = 0;
 8000fe4:	6053      	str	r3, [r2, #4]
      DataSensing_sum.DC_PanelCurrent = 0;
 8000fe6:	60d3      	str	r3, [r2, #12]
      DataSensing_sum.DC_PanelVoltage = 0;
 8000fe8:	6113      	str	r3, [r2, #16]
      DataSensing_sum.DC_BusVoltage   = 0;
 8000fea:	6093      	str	r3, [r2, #8]
    if (GetStatusControl() == STOP)
 8000fec:	b910      	cbnz	r0, 8000ff4 <CalibrationControl.part.0+0x28>
            DS_SetAcquistionEvent(ExecControlInitParamOffSet);
 8000fee:	4838      	ldr	r0, [pc, #224]	; (80010d0 <CalibrationControl.part.0+0x104>)
 8000ff0:	f002 f994 	bl	800331c <DS_SetAcquistionEvent>
      DataInitCount = 0;
 8000ff4:	4c37      	ldr	r4, [pc, #220]	; (80010d4 <CalibrationControl.part.0+0x108>)
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	6020      	str	r0, [r4, #0]
      DS_SendCommand(DS_Start);
 8000ffa:	f002 f995 	bl	8003328 <DS_SendCommand>
      while (DataInitCount < MAX_DATA_INIT_COUNT); //wait untill init complete
 8000ffe:	4a36      	ldr	r2, [pc, #216]	; (80010d8 <CalibrationControl.part.0+0x10c>)
 8001000:	6823      	ldr	r3, [r4, #0]
 8001002:	4293      	cmp	r3, r2
 8001004:	d9fc      	bls.n	8001000 <CalibrationControl.part.0+0x34>
      if(calib==TRUE)
 8001006:	4d35      	ldr	r5, [pc, #212]	; (80010dc <CalibrationControl.part.0+0x110>)
      DS_SendCommand(DS_Stop);
 8001008:	2001      	movs	r0, #1
 800100a:	f002 f98d 	bl	8003328 <DS_SendCommand>
      if(calib==TRUE)
 800100e:	782b      	ldrb	r3, [r5, #0]
      DataInitCount = 0;
 8001010:	2000      	movs	r0, #0
 8001012:	6020      	str	r0, [r4, #0]
      if(calib==TRUE)
 8001014:	b953      	cbnz	r3, 800102c <CalibrationControl.part.0+0x60>
  WRITE_REG(GPIOx->BRR, PinMask);
 8001016:	4a32      	ldr	r2, [pc, #200]	; (80010e0 <CalibrationControl.part.0+0x114>)
      SetControlMode(ControlMode);
 8001018:	4b32      	ldr	r3, [pc, #200]	; (80010e4 <CalibrationControl.part.0+0x118>)
 800101a:	2110      	movs	r1, #16
 800101c:	6291      	str	r1, [r2, #40]	; 0x28
 800101e:	7818      	ldrb	r0, [r3, #0]
 8001020:	f7ff ffac 	bl	8000f7c <SetControlMode>
      calib=TRUE;
 8001024:	2301      	movs	r3, #1
 8001026:	702b      	strb	r3, [r5, #0]
}
 8001028:	2000      	movs	r0, #0
 800102a:	bd38      	pop	{r3, r4, r5, pc}
    	TIM20->CCMR1 &= ~(TIM_CCMR1_OC2M_0); //TOP LF MOSFET LOW / BOTTOM LF MOSFET HIGH
 800102c:	492e      	ldr	r1, [pc, #184]	; (80010e8 <CalibrationControl.part.0+0x11c>)
    	HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TA1ODIS; //TIMA OUTPUT 1 DISABLE
 800102e:	4b2f      	ldr	r3, [pc, #188]	; (80010ec <CalibrationControl.part.0+0x120>)
    	TIM20->CCMR1 &= ~(TIM_CCMR1_OC2M_0); //TOP LF MOSFET LOW / BOTTOM LF MOSFET HIGH
 8001030:	698a      	ldr	r2, [r1, #24]
 8001032:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001036:	618a      	str	r2, [r1, #24]
    	HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TA1ODIS; //TIMA OUTPUT 1 DISABLE
 8001038:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
  WRITE_REG(GPIOx->BSRR, PinMask);
 800103c:	4928      	ldr	r1, [pc, #160]	; (80010e0 <CalibrationControl.part.0+0x114>)
 800103e:	f042 0201 	orr.w	r2, r2, #1
 8001042:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    	HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TA2ODIS; //TIMA OUTPUT 2 DISABLE
 8001046:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800104a:	f042 0202 	orr.w	r2, r2, #2
 800104e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    	HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TB1ODIS; //TIMB OUTPUT 1 DISABLE
 8001052:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001056:	f042 0204 	orr.w	r2, r2, #4
 800105a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    	HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TB2ODIS; //TIMB OUTPUT 2 DISABLE
 800105e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001062:	f042 0208 	orr.w	r2, r2, #8
 8001066:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  		HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TE2ODIS; //TIME OUTPUT 2 DISABLE
 800106a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800106e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001072:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  		HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TF1ODIS; //TIMF OUTPUT 1 DISABLE
 8001076:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800107a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800107e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  		HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TF2ODIS; //TIMF OUTPUT 2 DISABLE
 8001082:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001086:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800108a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  		HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TD1ODIS; //TIMD OUTPUT 1 DISABLE
 800108e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001092:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001096:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  		HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TD2ODIS; //TIMD OUTPUT 2 DISABLE
 800109a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800109e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010a2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80010a6:	2310      	movs	r3, #16
 80010a8:	618b      	str	r3, [r1, #24]
        DataInitCount = 0;
 80010aa:	6020      	str	r0, [r4, #0]
        DS_SendCommand(DS_Start);
 80010ac:	f002 f93c 	bl	8003328 <DS_SendCommand>
        while (DataInitCount < MAX_DATA_INIT_COUNT); //wait untill init complete
 80010b0:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <CalibrationControl.part.0+0x10c>)
 80010b2:	6823      	ldr	r3, [r4, #0]
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d9fc      	bls.n	80010b2 <CalibrationControl.part.0+0xe6>
        DS_SendCommand(DS_Stop);
 80010b8:	2001      	movs	r0, #1
 80010ba:	f002 f935 	bl	8003328 <DS_SendCommand>
        DataInitCount = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	6023      	str	r3, [r4, #0]
 80010c2:	e7a8      	b.n	8001016 <CalibrationControl.part.0+0x4a>
 80010c4:	200001b2 	.word	0x200001b2
 80010c8:	20000114 	.word	0x20000114
 80010cc:	2000012c 	.word	0x2000012c
 80010d0:	08000cb5 	.word	0x08000cb5
 80010d4:	200000f8 	.word	0x200000f8
 80010d8:	0001e65f 	.word	0x0001e65f
 80010dc:	200041cc 	.word	0x200041cc
 80010e0:	48000c00 	.word	0x48000c00
 80010e4:	2000007e 	.word	0x2000007e
 80010e8:	40015000 	.word	0x40015000
 80010ec:	40016b00 	.word	0x40016b00

080010f0 <StartControl>:
{
 80010f0:	b570      	push	{r4, r5, r6, lr}
    StoppingCount = TIME_OUT_STOPPING;
 80010f2:	4d29      	ldr	r5, [pc, #164]	; (8001198 <StartControl+0xa8>)
    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R &= ~ (1 << 19);
 80010f4:	4b29      	ldr	r3, [pc, #164]	; (800119c <StartControl+0xac>)
    Fault = FAULT_NONE;
 80010f6:	4a2a      	ldr	r2, [pc, #168]	; (80011a0 <StartControl+0xb0>)
    StoppingCount = TIME_OUT_STOPPING;
 80010f8:	4e2a      	ldr	r6, [pc, #168]	; (80011a4 <StartControl+0xb4>)
 80010fa:	602e      	str	r6, [r5, #0]
    BusOverVoltage = FALSE;
 80010fc:	2400      	movs	r4, #0
    Fault = FAULT_NONE;
 80010fe:	8014      	strh	r4, [r2, #0]
    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R &= ~ (1 << 19);
 8001100:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
    BusOverVoltage = FALSE;
 8001104:	4828      	ldr	r0, [pc, #160]	; (80011a8 <StartControl+0xb8>)
    GridOutage = FALSE;
 8001106:	4929      	ldr	r1, [pc, #164]	; (80011ac <StartControl+0xbc>)
    BusOverVoltage = FALSE;
 8001108:	7004      	strb	r4, [r0, #0]
    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R &= ~ (1 << 19);
 800110a:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
    GridOutage = FALSE;
 800110e:	700c      	strb	r4, [r1, #0]
    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R &= ~ (1 << 19);
 8001110:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= (1 << 0);
 8001114:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
    State_Control = DIAGNOSTIC_AC_LINE;
 8001118:	4925      	ldr	r1, [pc, #148]	; (80011b0 <StartControl+0xc0>)
    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= (1 << 0);
 800111a:	f042 0201 	orr.w	r2, r2, #1
 800111e:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
    State_Control = DIAGNOSTIC_AC_LINE;
 8001122:	2505      	movs	r5, #5
    DCAC_SendCommand(DCAC_Start);
 8001124:	4620      	mov	r0, r4
    State_Control = DIAGNOSTIC_AC_LINE;
 8001126:	700d      	strb	r5, [r1, #0]
    DCAC_SendCommand(DCAC_Start);
 8001128:	f000 fdca 	bl	8001cc0 <DCAC_SendCommand>
    DS_SendCommand(DS_Start);
 800112c:	4620      	mov	r0, r4
 800112e:	f002 f8fb 	bl	8003328 <DS_SendCommand>
    DCDC_SetPhaseShift(PHASE_SHIFT_INIT);
 8001132:	f242 50f2 	movw	r0, #9714	; 0x25f2
 8001136:	f000 fec9 	bl	8001ecc <DCDC_SetPhaseShift>
    DCDC_SetFrequency(MASTER_PWM_FREQ); // SET FREQUENCY AND PERIOD OF DCDC
 800113a:	481e      	ldr	r0, [pc, #120]	; (80011b4 <StartControl+0xc4>)
 800113c:	f000 fedc 	bl	8001ef8 <DCDC_SetFrequency>
    if (ControlMode == OpenLoop)
 8001140:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <StartControl+0xc8>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d000      	beq.n	800114a <StartControl+0x5a>
}
 8001148:	bd70      	pop	{r4, r5, r6, pc}
        DCDC_SendCommand(DCDC_ConverterStart);
 800114a:	4620      	mov	r0, r4
 800114c:	f000 fe4a 	bl	8001de4 <DCDC_SendCommand>
        while(DCDC_GetPhaseShift() < (DCDC_GetPeriod()))
 8001150:	e008      	b.n	8001164 <StartControl+0x74>
      	  DCDC_SetPhaseShift(DCDC_GetPhaseShift()+1);
 8001152:	f000 feb5 	bl	8001ec0 <DCDC_GetPhaseShift>
 8001156:	3001      	adds	r0, #1
 8001158:	f000 feb8 	bl	8001ecc <DCDC_SetPhaseShift>
      	  delay_cycles(850);
 800115c:	f240 3052 	movw	r0, #850	; 0x352
 8001160:	f7ff fd92 	bl	8000c88 <delay_cycles>
        while(DCDC_GetPhaseShift() < (DCDC_GetPeriod()))
 8001164:	f000 feac 	bl	8001ec0 <DCDC_GetPhaseShift>
 8001168:	4604      	mov	r4, r0
 800116a:	f000 fe9d 	bl	8001ea8 <DCDC_GetPeriod>
 800116e:	4284      	cmp	r4, r0
 8001170:	d3ef      	bcc.n	8001152 <StartControl+0x62>
            while(DCDC_GetFrequency() > 240000)
 8001172:	4d12      	ldr	r5, [pc, #72]	; (80011bc <StartControl+0xcc>)
          	  ActualFreq_Val=ActualFreq_Val - 1;
 8001174:	4c12      	ldr	r4, [pc, #72]	; (80011c0 <StartControl+0xd0>)
 8001176:	e007      	b.n	8001188 <StartControl+0x98>
 8001178:	6820      	ldr	r0, [r4, #0]
 800117a:	3801      	subs	r0, #1
 800117c:	6020      	str	r0, [r4, #0]
          	  DCDC_SetFrequency((u32)ActualFreq_Val);
 800117e:	f000 febb 	bl	8001ef8 <DCDC_SetFrequency>
          	  delay_cycles(170);
 8001182:	20aa      	movs	r0, #170	; 0xaa
 8001184:	f7ff fd80 	bl	8000c88 <delay_cycles>
            while(DCDC_GetFrequency() > 240000)
 8001188:	f000 fe94 	bl	8001eb4 <DCDC_GetFrequency>
 800118c:	42a8      	cmp	r0, r5
 800118e:	d8f3      	bhi.n	8001178 <StartControl+0x88>
        PRECHARGE_OK=true;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <StartControl+0xd4>)
 8001192:	2201      	movs	r2, #1
 8001194:	701a      	strb	r2, [r3, #0]
}
 8001196:	bd70      	pop	{r4, r5, r6, pc}
 8001198:	200001b4 	.word	0x200001b4
 800119c:	40016800 	.word	0x40016800
 80011a0:	20000168 	.word	0x20000168
 80011a4:	00028870 	.word	0x00028870
 80011a8:	2000007a 	.word	0x2000007a
 80011ac:	2000016a 	.word	0x2000016a
 80011b0:	200001b2 	.word	0x200001b2
 80011b4:	000445c0 	.word	0x000445c0
 80011b8:	2000007e 	.word	0x2000007e
 80011bc:	0003a980 	.word	0x0003a980
 80011c0:	20000000 	.word	0x20000000
 80011c4:	20000189 	.word	0x20000189

080011c8 <InitControl>:
{
 80011c8:	e92d 4170 	stmdb	sp!, {r4, r5, r6, r8, lr}
    InitStructure.frequency = DCDC_FREQUENCY;
 80011cc:	4b46      	ldr	r3, [pc, #280]	; (80012e8 <InitControl+0x120>)
    ControlMode = mode;
 80011ce:	4d47      	ldr	r5, [pc, #284]	; (80012ec <InitControl+0x124>)
      ptr_State_Control = &to_grid_State_Control[0];
 80011d0:	4e47      	ldr	r6, [pc, #284]	; (80012f0 <InitControl+0x128>)
{
 80011d2:	b091      	sub	sp, #68	; 0x44
 80011d4:	4604      	mov	r4, r0
    InitStructure.Counter = DCDC_COUNTER;
 80011d6:	f644 31e4 	movw	r1, #19428	; 0x4be4
    InitStructure.DutyCycle = DCDC_DUTYCYCLE;
 80011da:	f242 52f2 	movw	r2, #9714	; 0x25f2
    DCDC_Init(&InitStructure);
 80011de:	a80b      	add	r0, sp, #44	; 0x2c
    InitStructure.frequency = DCDC_FREQUENCY;
 80011e0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    InitStructure.Counter = DCDC_COUNTER;
 80011e4:	910b      	str	r1, [sp, #44]	; 0x2c
    DCAC_InitStructure.Counter = DCAC_COUNTER;
 80011e6:	f647 78ff 	movw	r8, #32767	; 0x7fff
    DCDC_Init(&InitStructure);
 80011ea:	f001 fcb1 	bl	8002b50 <DCDC_Init>
    DCAC_InitStructure.DeadTime = DCAC_DEADTIME;
 80011ee:	f44f 7396 	mov.w	r3, #300	; 0x12c
    DCAC_Init(&DCAC_InitStructure);
 80011f2:	a805      	add	r0, sp, #20
    DCAC_InitStructure.DeadTime = DCAC_DEADTIME;
 80011f4:	e9cd 8305 	strd	r8, r3, [sp, #20]
    DCAC_Init(&DCAC_InitStructure);
 80011f8:	f000 fd3e 	bl	8001c78 <DCAC_Init>
          DS_InitStructure.OnAcquisition = ExecControlOpenLoop;
 80011fc:	4a3d      	ldr	r2, [pc, #244]	; (80012f4 <InitControl+0x12c>)
 80011fe:	4b3e      	ldr	r3, [pc, #248]	; (80012f8 <InitControl+0x130>)
    DS_InitStructure.DataRegister =  (volatile uint16_t *)&DataSensingIO;
 8001200:	493e      	ldr	r1, [pc, #248]	; (80012fc <InitControl+0x134>)
    ControlMode = mode;
 8001202:	702c      	strb	r4, [r5, #0]
          DS_InitStructure.OnAcquisition = ExecControlOpenLoop;
 8001204:	2c02      	cmp	r4, #2
 8001206:	bf18      	it	ne
 8001208:	4613      	movne	r3, r2
      DS_Init(&DS_InitStructure);
 800120a:	a807      	add	r0, sp, #28
    DS_InitStructure.RegisterSize = DATA_SENSING_SIZE;
 800120c:	2203      	movs	r2, #3
 800120e:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8001212:	930a      	str	r3, [sp, #40]	; 0x28
    DS_InitStructure.Counter = DCAC_COUNTER; //--the same counter of the DCAC
 8001214:	f8cd 801c 	str.w	r8, [sp, #28]
      DS_Init(&DS_InitStructure);
 8001218:	f002 f826 	bl	8003268 <DS_Init>
      ptr_Pulse1_IT = &Pulse1_IT;
 800121c:	4a38      	ldr	r2, [pc, #224]	; (8001300 <InitControl+0x138>)
      ptr_State_Control = &to_grid_State_Control[0];
 800121e:	4b39      	ldr	r3, [pc, #228]	; (8001304 <InitControl+0x13c>)
 8001220:	6033      	str	r3, [r6, #0]
      ptr_Pulse1_IT = &Pulse1_IT;
 8001222:	4839      	ldr	r0, [pc, #228]	; (8001308 <InitControl+0x140>)
      ptr_Pulse2_IT = &Pulse2_IT;
 8001224:	4b39      	ldr	r3, [pc, #228]	; (800130c <InitControl+0x144>)
      ptr_Pulse1_IT = &Pulse1_IT;
 8001226:	6010      	str	r0, [r2, #0]
      ptr_Pulse2_IT = &Pulse2_IT;
 8001228:	4a39      	ldr	r2, [pc, #228]	; (8001310 <InitControl+0x148>)
 800122a:	601a      	str	r2, [r3, #0]
  	  calib = FALSE;
 800122c:	4a39      	ldr	r2, [pc, #228]	; (8001314 <InitControl+0x14c>)
      Freq_Control = FREQ_OUT_OF_RANGE;
 800122e:	4b3a      	ldr	r3, [pc, #232]	; (8001318 <InitControl+0x150>)
      ptr_org_State_Control = &State_Control;
 8001230:	4d3a      	ldr	r5, [pc, #232]	; (800131c <InitControl+0x154>)
 8001232:	493b      	ldr	r1, [pc, #236]	; (8001320 <InitControl+0x158>)
      Fault = 0;
 8001234:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8001374 <InitControl+0x1ac>
      ptr_org_State_Control = &State_Control;
 8001238:	600d      	str	r5, [r1, #0]
  	  State_Control = STOP;
 800123a:	2400      	movs	r4, #0
  	  calib = FALSE;
 800123c:	7014      	strb	r4, [r2, #0]
      Freq_Control = FREQ_OUT_OF_RANGE;
 800123e:	2206      	movs	r2, #6
 8001240:	701a      	strb	r2, [r3, #0]
      GDVoltage = GRID_VOLTAGE_OUT_OF_RANGE;
 8001242:	4b38      	ldr	r3, [pc, #224]	; (8001324 <InitControl+0x15c>)
  	  State_Control = STOP;
 8001244:	702c      	strb	r4, [r5, #0]
      GDVoltage = GRID_VOLTAGE_OUT_OF_RANGE;
 8001246:	2208      	movs	r2, #8
 8001248:	701a      	strb	r2, [r3, #0]
      Diagnostic_Control = STOP;
 800124a:	4b37      	ldr	r3, [pc, #220]	; (8001328 <InitControl+0x160>)
      Fault = 0;
 800124c:	f8a8 4000 	strh.w	r4, [r8]
      Diagnostic_Control = STOP;
 8001250:	701c      	strb	r4, [r3, #0]
    return State_Control;
 8001252:	f7ff febb 	bl	8000fcc <CalibrationControl.part.0>
    *ptr_State_Control=State_Control;
 8001256:	6833      	ldr	r3, [r6, #0]
 8001258:	782a      	ldrb	r2, [r5, #0]
 800125a:	801a      	strh	r2, [r3, #0]
    *(ptr_State_Control+1)=State_Control;
 800125c:	782a      	ldrb	r2, [r5, #0]
 800125e:	805a      	strh	r2, [r3, #2]
    *(ptr_State_Control+2)=State_Control;
 8001260:	809a      	strh	r2, [r3, #4]
    PID_Init_Integral_Part();
 8001262:	f002 fba9 	bl	80039b8 <PID_Init_Integral_Part>
    PID_Init(&Direct_Current_PID, &Quadrature_Current_PID, &Reactive_Power_PID,&Active_Power_PID,&BUS_Voltage_PID,&DQ_PLL_PID, &MPPT_PID);
 8001266:	4d31      	ldr	r5, [pc, #196]	; (800132c <InitControl+0x164>)
 8001268:	4a31      	ldr	r2, [pc, #196]	; (8001330 <InitControl+0x168>)
 800126a:	4e32      	ldr	r6, [pc, #200]	; (8001334 <InitControl+0x16c>)
 800126c:	4b32      	ldr	r3, [pc, #200]	; (8001338 <InitControl+0x170>)
 800126e:	4933      	ldr	r1, [pc, #204]	; (800133c <InitControl+0x174>)
 8001270:	4833      	ldr	r0, [pc, #204]	; (8001340 <InitControl+0x178>)
 8001272:	9600      	str	r6, [sp, #0]
 8001274:	e9cd 5201 	strd	r5, r2, [sp, #4]
 8001278:	4a32      	ldr	r2, [pc, #200]	; (8001344 <InitControl+0x17c>)
 800127a:	f002 faed 	bl	8003858 <PID_Init>
    pControl->PLL.pIntegral = &(DQ_PLL_PID.Ki_Gain);
 800127e:	4a32      	ldr	r2, [pc, #200]	; (8001348 <InitControl+0x180>)
  pData->Power.pPout_act = &Actual_QD_Power.P_Active;
 8001280:	4832      	ldr	r0, [pc, #200]	; (800134c <InitControl+0x184>)
    pControl->PLL.pIntegral = &(DQ_PLL_PID.Ki_Gain);
 8001282:	1d2b      	adds	r3, r5, #4
 8001284:	6013      	str	r3, [r2, #0]
    pControl->DCBUS.pIntegral = &(BUS_Voltage_PID.Ki_Gain);
 8001286:	1d31      	adds	r1, r6, #4
    pControl->Id.pIntegral = &(Direct_Current_PID.Ki_Gain);
 8001288:	4b31      	ldr	r3, [pc, #196]	; (8001350 <InitControl+0x188>)
    pControl->PLL.pProportional = &(DQ_PLL_PID.Kp_Gain);
 800128a:	3502      	adds	r5, #2
 800128c:	6055      	str	r5, [r2, #4]
    pControl->DCBUS.pIntegral = &(BUS_Voltage_PID.Ki_Gain);
 800128e:	6091      	str	r1, [r2, #8]
    pControl->DCBUS.pProportional = &(BUS_Voltage_PID.Kp_Gain);
 8001290:	1cb1      	adds	r1, r6, #2
 8001292:	60d1      	str	r1, [r2, #12]
    pControl->Id.pIntegral = &(Direct_Current_PID.Ki_Gain);
 8001294:	6113      	str	r3, [r2, #16]
    pControl->Id.pProportional = &(Direct_Current_PID.Kp_Gain);
 8001296:	1e99      	subs	r1, r3, #2
    pControl->Iq.pIntegral = &(Quadrature_Current_PID.Ki_Gain);
 8001298:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <InitControl+0x18c>)
    pControl->Id.pProportional = &(Direct_Current_PID.Kp_Gain);
 800129a:	6151      	str	r1, [r2, #20]
    pControl->Iq.pIntegral = &(Quadrature_Current_PID.Ki_Gain);
 800129c:	6193      	str	r3, [r2, #24]
    pControl->Iq.pProportional = &(Quadrature_Current_PID.Kp_Gain);
 800129e:	3b02      	subs	r3, #2
 80012a0:	61d3      	str	r3, [r2, #28]
    pControl->k1k2.xz1 = &z1;
 80012a2:	492d      	ldr	r1, [pc, #180]	; (8001358 <InitControl+0x190>)
  pData->Power.pPin = NULL;
 80012a4:	4b2d      	ldr	r3, [pc, #180]	; (800135c <InitControl+0x194>)
    pControl->k1k2.xz1 = &z1;
 80012a6:	6291      	str	r1, [r2, #40]	; 0x28
    pControl->k1k2.xz2 = &z2;
 80012a8:	4d2d      	ldr	r5, [pc, #180]	; (8001360 <InitControl+0x198>)
  pData->VoltageCurrent.pVin_DC  = (s16 *)&DataSensingOffSet.DC_PanelVoltage;
 80012aa:	492e      	ldr	r1, [pc, #184]	; (8001364 <InitControl+0x19c>)
    pControl->k1k2.xz2 = &z2;
 80012ac:	62d5      	str	r5, [r2, #44]	; 0x2c
  pData->Power.pPin = NULL;
 80012ae:	601c      	str	r4, [r3, #0]
  pData->Power.pOutFreq = &Output_qVd_Grid;
 80012b0:	4a2d      	ldr	r2, [pc, #180]	; (8001368 <InitControl+0x1a0>)
  pData->Power.pPout_act = &Actual_QD_Power.P_Active;
 80012b2:	6058      	str	r0, [r3, #4]
  pData->Power.pQ = &Actual_QD_Power.Q_Reactive;
 80012b4:	3002      	adds	r0, #2
  pData->Power.pOutFreq = &Output_qVd_Grid;
 80012b6:	609a      	str	r2, [r3, #8]
  pData->Power.pQ = &Actual_QD_Power.Q_Reactive;
 80012b8:	60d8      	str	r0, [r3, #12]
  pData->Power.pPowerThreshold =  &PowerThreshold;
 80012ba:	4a2c      	ldr	r2, [pc, #176]	; (800136c <InitControl+0x1a4>)
 80012bc:	611a      	str	r2, [r3, #16]
  pData->VoltageCurrent.pVin_DC  = (s16 *)&DataSensingOffSet.DC_PanelVoltage;
 80012be:	f101 0008 	add.w	r0, r1, #8
 80012c2:	6158      	str	r0, [r3, #20]
  pData->VoltageCurrent.pIin_DC  = (s16 *)&DataSensingOffSet.DC_PanelCurrent;
 80012c4:	1d88      	adds	r0, r1, #6
 80012c6:	6198      	str	r0, [r3, #24]
  pData->VoltageCurrent.pVout_AC = (s16 *)&DataSensingOffSet.AC_LineVoltage;
 80012c8:	1c88      	adds	r0, r1, #2
 80012ca:	61d8      	str	r0, [r3, #28]
  pData->Status.pState = &State;
 80012cc:	4a28      	ldr	r2, [pc, #160]	; (8001370 <InitControl+0x1a8>)
  pData->VoltageCurrent.pIout_AC = (s16 *)&DataSensingOffSet.AC_LineCurrent;
 80012ce:	6219      	str	r1, [r3, #32]
  pData->VoltageCurrent.pVDC_Bus = (s16 *)&DataSensingOffSet.DC_BusVoltage;
 80012d0:	1d08      	adds	r0, r1, #4
 80012d2:	6258      	str	r0, [r3, #36]	; 0x24
  pData->VoltageCurrent.pVDC_BusRef = &BUS_Voltage_PID.Reference;
 80012d4:	629e      	str	r6, [r3, #40]	; 0x28
  pData->Status.pFault = &Fault;
 80012d6:	f8c3 802c 	str.w	r8, [r3, #44]	; 0x2c
  pData->Status.pState = &State;
 80012da:	631a      	str	r2, [r3, #48]	; 0x30
    StartControl();
 80012dc:	f7ff ff08 	bl	80010f0 <StartControl>
}
 80012e0:	b011      	add	sp, #68	; 0x44
 80012e2:	e8bd 8170 	ldmia.w	sp!, {r4, r5, r6, r8, pc}
 80012e6:	bf00      	nop
 80012e8:	000445c0 	.word	0x000445c0
 80012ec:	2000007e 	.word	0x2000007e
 80012f0:	200041dc 	.word	0x200041dc
 80012f4:	08000d71 	.word	0x08000d71
 80012f8:	08001561 	.word	0x08001561
 80012fc:	200000fc 	.word	0x200000fc
 8001300:	200041d4 	.word	0x200041d4
 8001304:	20008e60 	.word	0x20008e60
 8001308:	20008e58 	.word	0x20008e58
 800130c:	200041d8 	.word	0x200041d8
 8001310:	20008e5c 	.word	0x20008e5c
 8001314:	200041cc 	.word	0x200041cc
 8001318:	20000012 	.word	0x20000012
 800131c:	200001b2 	.word	0x200001b2
 8001320:	200041e0 	.word	0x200041e0
 8001324:	20000013 	.word	0x20000013
 8001328:	20000158 	.word	0x20000158
 800132c:	200000b8 	.word	0x200000b8
 8001330:	20000174 	.word	0x20000174
 8001334:	2000006c 	.word	0x2000006c
 8001338:	2000005c 	.word	0x2000005c
 800133c:	20000194 	.word	0x20000194
 8001340:	2000015c 	.word	0x2000015c
 8001344:	200001a4 	.word	0x200001a4
 8001348:	20000084 	.word	0x20000084
 800134c:	20000068 	.word	0x20000068
 8001350:	20000160 	.word	0x20000160
 8001354:	20000198 	.word	0x20000198
 8001358:	2000000e 	.word	0x2000000e
 800135c:	200000c4 	.word	0x200000c4
 8001360:	20000010 	.word	0x20000010
 8001364:	20000114 	.word	0x20000114
 8001368:	20000184 	.word	0x20000184
 800136c:	2000000a 	.word	0x2000000a
 8001370:	200001b0 	.word	0x200001b0
 8001374:	20000168 	.word	0x20000168

08001378 <CalcAndSetACComponents>:
} // void

void CalcAndSetACComponents(SystStatus_t state)
{

    Quadrature_Current_PID.Reference = (PID_Bus_Voltage(&BUS_Voltage_PID,Bus_Voltage));
 8001378:	4b67      	ldr	r3, [pc, #412]	; (8001518 <CalcAndSetACComponents+0x1a0>)
 800137a:	4868      	ldr	r0, [pc, #416]	; (800151c <CalcAndSetACComponents+0x1a4>)
 800137c:	8819      	ldrh	r1, [r3, #0]
{
 800137e:	b570      	push	{r4, r5, r6, lr}
    Quadrature_Current_PID.Reference = (PID_Bus_Voltage(&BUS_Voltage_PID,Bus_Voltage));
 8001380:	f002 fbd8 	bl	8003b34 <PID_Bus_Voltage>

    Direct_Current_PID.Reference = (PID_Reactive_Power(&Reactive_Power_PID, Actual_QD_Power.Q_Reactive))-4000;
 8001384:	4a66      	ldr	r2, [pc, #408]	; (8001520 <CalcAndSetACComponents+0x1a8>)

    Output_qId_Inverter = (s16)(PID_DirectCurrent(&Direct_Current_PID, ((Inverter_q_d.qI_Direct)-2000)));
 8001386:	4c67      	ldr	r4, [pc, #412]	; (8001524 <CalcAndSetACComponents+0x1ac>)
    Quadrature_Current_PID.Reference = (PID_Bus_Voltage(&BUS_Voltage_PID,Bus_Voltage));
 8001388:	4e67      	ldr	r6, [pc, #412]	; (8001528 <CalcAndSetACComponents+0x1b0>)
    Direct_Current_PID.Reference = (PID_Reactive_Power(&Reactive_Power_PID, Actual_QD_Power.Q_Reactive))-4000;
 800138a:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
    Output_qId_Inverter = (s16)(PID_DirectCurrent(&Direct_Current_PID, ((Inverter_q_d.qI_Direct)-2000)));
 800138e:	4d67      	ldr	r5, [pc, #412]	; (800152c <CalcAndSetACComponents+0x1b4>)
    Quadrature_Current_PID.Reference = (PID_Bus_Voltage(&BUS_Voltage_PID,Bus_Voltage));
 8001390:	4603      	mov	r3, r0
    Direct_Current_PID.Reference = (PID_Reactive_Power(&Reactive_Power_PID, Actual_QD_Power.Q_Reactive))-4000;
 8001392:	4867      	ldr	r0, [pc, #412]	; (8001530 <CalcAndSetACComponents+0x1b8>)
    Quadrature_Current_PID.Reference = (PID_Bus_Voltage(&BUS_Voltage_PID,Bus_Voltage));
 8001394:	8033      	strh	r3, [r6, #0]
    Direct_Current_PID.Reference = (PID_Reactive_Power(&Reactive_Power_PID, Actual_QD_Power.Q_Reactive))-4000;
 8001396:	f002 faeb 	bl	8003970 <PID_Reactive_Power>
    Output_qId_Inverter = (s16)(PID_DirectCurrent(&Direct_Current_PID, ((Inverter_q_d.qI_Direct)-2000)));
 800139a:	8861      	ldrh	r1, [r4, #2]
    Direct_Current_PID.Reference = (PID_Reactive_Power(&Reactive_Power_PID, Actual_QD_Power.Q_Reactive))-4000;
 800139c:	4a65      	ldr	r2, [pc, #404]	; (8001534 <CalcAndSetACComponents+0x1bc>)
    Output_qId_Inverter = (s16)(PID_DirectCurrent(&Direct_Current_PID, ((Inverter_q_d.qI_Direct)-2000)));
 800139e:	f5a1 61fa 	sub.w	r1, r1, #2000	; 0x7d0
    Direct_Current_PID.Reference = (PID_Reactive_Power(&Reactive_Power_PID, Actual_QD_Power.Q_Reactive))-4000;
 80013a2:	f5a0 637a 	sub.w	r3, r0, #4000	; 0xfa0
    Output_qId_Inverter = (s16)(PID_DirectCurrent(&Direct_Current_PID, ((Inverter_q_d.qI_Direct)-2000)));
 80013a6:	b209      	sxth	r1, r1
 80013a8:	4610      	mov	r0, r2
    Direct_Current_PID.Reference = (PID_Reactive_Power(&Reactive_Power_PID, Actual_QD_Power.Q_Reactive))-4000;
 80013aa:	8013      	strh	r3, [r2, #0]
    Output_qId_Inverter = (s16)(PID_DirectCurrent(&Direct_Current_PID, ((Inverter_q_d.qI_Direct)-2000)));
 80013ac:	f002 fa9c 	bl	80038e8 <PID_DirectCurrent>

    Output_qIq_Inverter = ((s16)(PID_QuadratureCurrent(&Quadrature_Current_PID, ((Inverter_q_d.qI_Quadrature)+1500))));
 80013b0:	8821      	ldrh	r1, [r4, #0]
 80013b2:	4c61      	ldr	r4, [pc, #388]	; (8001538 <CalcAndSetACComponents+0x1c0>)
 80013b4:	f201 51dc 	addw	r1, r1, #1500	; 0x5dc
    Output_qId_Inverter = (s16)(PID_DirectCurrent(&Direct_Current_PID, ((Inverter_q_d.qI_Direct)-2000)));
 80013b8:	4603      	mov	r3, r0
    Output_qIq_Inverter = ((s16)(PID_QuadratureCurrent(&Quadrature_Current_PID, ((Inverter_q_d.qI_Quadrature)+1500))));
 80013ba:	b209      	sxth	r1, r1
 80013bc:	4630      	mov	r0, r6
    Output_qId_Inverter = (s16)(PID_DirectCurrent(&Direct_Current_PID, ((Inverter_q_d.qI_Direct)-2000)));
 80013be:	802b      	strh	r3, [r5, #0]
    Output_qIq_Inverter = ((s16)(PID_QuadratureCurrent(&Quadrature_Current_PID, ((Inverter_q_d.qI_Quadrature)+1500))));
 80013c0:	f002 fab4 	bl	800392c <PID_QuadratureCurrent>
 80013c4:	8020      	strh	r0, [r4, #0]

    CrossDecoupling_Control();
 80013c6:	f001 fe3f 	bl	8003048 <CrossDecoupling_Control>

    RevPark_Circle_Limitation();
 80013ca:	f001 fe6f 	bl	80030ac <RevPark_Circle_Limitation>

    Control_Volt_AlphaBeta= Rev_Park(Output_qIq_Inverter,Output_qId_Inverter);
 80013ce:	f9b5 1000 	ldrsh.w	r1, [r5]
 80013d2:	f9b4 0000 	ldrsh.w	r0, [r4]
 80013d6:	f001 fcab 	bl	8002d30 <Rev_Park>

    //if(State_Control!=DIAGNOSTIC_DC_LINE && State_Control!=DIAGNOSTIC_AC_LINE && State_Control!=BUSPRECHARGE)
    if(State_Control == GRID_INSERTION)
 80013da:	4a58      	ldr	r2, [pc, #352]	; (800153c <CalcAndSetACComponents+0x1c4>)
    Control_Volt_AlphaBeta= Rev_Park(Output_qIq_Inverter,Output_qId_Inverter);
 80013dc:	4b58      	ldr	r3, [pc, #352]	; (8001540 <CalcAndSetACComponents+0x1c8>)
    if(State_Control == GRID_INSERTION)
 80013de:	7812      	ldrb	r2, [r2, #0]
    Control_Volt_AlphaBeta= Rev_Park(Output_qIq_Inverter,Output_qId_Inverter);
 80013e0:	6018      	str	r0, [r3, #0]
    if(State_Control == GRID_INSERTION)
 80013e2:	2a15      	cmp	r2, #21
 80013e4:	d000      	beq.n	80013e8 <CalcAndSetACComponents+0x70>
    }

// ********************* commentata per debug open loop *********************
  //  DAC_SetChannel(DAC_CH_1,(u16) Theta +0x8000);
// *************************************************************************
}
 80013e6:	bd70      	pop	{r4, r5, r6, pc}
		if(Control_Volt_AlphaBeta.qValpha <= 0) //50103 303
 80013e8:	f9b3 1000 	ldrsh.w	r1, [r3]
 80013ec:	2900      	cmp	r1, #0
 80013ee:	dd49      	ble.n	8001484 <CalcAndSetACComponents+0x10c>
			  Pulse2 = ((u16)(new_mul_q15_q15_q31((s16)(0x8000 - Control_Volt_AlphaBeta.qValpha ), MODINDEX) >> 16));
 80013f0:	f5c1 4100 	rsb	r1, r1, #32768	; 0x8000
 80013f4:	f647 63d3 	movw	r3, #32467	; 0x7ed3
 80013f8:	b289      	uxth	r1, r1
 80013fa:	fb03 f101 	mul.w	r1, r3, r1
 80013fe:	0bc9      	lsrs	r1, r1, #15
    	      polarity=FALSE;
 8001400:	4b50      	ldr	r3, [pc, #320]	; (8001544 <CalcAndSetACComponents+0x1cc>)
 8001402:	2200      	movs	r2, #0
			  DCAC_SetPulse(Pulse2,Pulse2);
 8001404:	4608      	mov	r0, r1
    	      polarity=FALSE;
 8001406:	701a      	strb	r2, [r3, #0]
			  DCAC_SetPulse(Pulse2,Pulse2);
 8001408:	f000 fca6 	bl	8001d58 <DCAC_SetPulse>
    		  if((LF_MOS_SET == TRUE) || FIRST_CYCLE == TRUE)
 800140c:	4b4e      	ldr	r3, [pc, #312]	; (8001548 <CalcAndSetACComponents+0x1d0>)
 800140e:	781a      	ldrb	r2, [r3, #0]
 8001410:	b1d2      	cbz	r2, 8001448 <CalcAndSetACComponents+0xd0>
 8001412:	4a4e      	ldr	r2, [pc, #312]	; (800154c <CalcAndSetACComponents+0x1d4>)
    			  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(60);
 8001414:	494e      	ldr	r1, [pc, #312]	; (8001550 <CalcAndSetACComponents+0x1d8>)
    			  RESET_TIMER_D = FALSE;
 8001416:	4d4f      	ldr	r5, [pc, #316]	; (8001554 <CalcAndSetACComponents+0x1dc>)
 8001418:	2000      	movs	r0, #0
    			  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(60);
 800141a:	243c      	movs	r4, #60	; 0x3c
    			  LF_MOS_SET = FALSE;
 800141c:	7018      	strb	r0, [r3, #0]
    			  RESET_TIMER_D = FALSE;
 800141e:	7028      	strb	r0, [r5, #0]
    			  FIRST_CYCLE = FALSE;
 8001420:	7010      	strb	r0, [r2, #0]
    			  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(60);
 8001422:	f8c1 4324 	str.w	r4, [r1, #804]	; 0x324
    			  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= 1 << 19;
 8001426:	f8d1 323c 	ldr.w	r3, [r1, #572]	; 0x23c
    			  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 800142a:	4a4b      	ldr	r2, [pc, #300]	; (8001558 <CalcAndSetACComponents+0x1e0>)
    			  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= 1 << 19;
 800142c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001430:	f8c1 323c 	str.w	r3, [r1, #572]	; 0x23c
    			  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8001434:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
    			  LF_UPDATE = TRUE;
 8001438:	4948      	ldr	r1, [pc, #288]	; (800155c <CalcAndSetACComponents+0x1e4>)
    			  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 800143a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
    			  LF_UPDATE = TRUE;
 800143e:	2001      	movs	r0, #1
    			  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8001440:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    			  LF_UPDATE = TRUE;
 8001444:	7008      	strb	r0, [r1, #0]
}
 8001446:	bd70      	pop	{r4, r5, r6, pc}
    		  if((LF_MOS_SET == TRUE) || FIRST_CYCLE == TRUE)
 8001448:	4a40      	ldr	r2, [pc, #256]	; (800154c <CalcAndSetACComponents+0x1d4>)
 800144a:	7811      	ldrb	r1, [r2, #0]
 800144c:	2900      	cmp	r1, #0
 800144e:	d1e1      	bne.n	8001414 <CalcAndSetACComponents+0x9c>
    			  if (LF_UPDATE == TRUE)
 8001450:	4b42      	ldr	r3, [pc, #264]	; (800155c <CalcAndSetACComponents+0x1e4>)
 8001452:	781a      	ldrb	r2, [r3, #0]
 8001454:	2a00      	cmp	r2, #0
 8001456:	d0c6      	beq.n	80013e6 <CalcAndSetACComponents+0x6e>
    				  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R &= ~ (1 << 19);
 8001458:	4a3d      	ldr	r2, [pc, #244]	; (8001550 <CalcAndSetACComponents+0x1d8>)
    				  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 800145a:	4c3f      	ldr	r4, [pc, #252]	; (8001558 <CalcAndSetACComponents+0x1e0>)
    				  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R &= ~ (1 << 19);
 800145c:	f8d2 023c 	ldr.w	r0, [r2, #572]	; 0x23c
 8001460:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
 8001464:	f8c2 023c 	str.w	r0, [r2, #572]	; 0x23c
    				  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].RSTx1R |= (1 << 0);
 8001468:	f8d2 0240 	ldr.w	r0, [r2, #576]	; 0x240
 800146c:	f040 0001 	orr.w	r0, r0, #1
 8001470:	f8c2 0240 	str.w	r0, [r2, #576]	; 0x240
    				  LF_UPDATE = FALSE;
 8001474:	7019      	strb	r1, [r3, #0]
    				  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8001476:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800147a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800147e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 8001482:	bd70      	pop	{r4, r5, r6, pc}
			  Pulse1 = (((u16)(new_mul_q15_q15_q31(-Control_Volt_AlphaBeta.qValpha, MODINDEX) >> 16)));
 8001484:	f248 132d 	movw	r3, #33069	; 0x812d
 8001488:	fb11 f103 	smulbb	r1, r1, r3
 800148c:	f3c1 31cf 	ubfx	r1, r1, #15, #16
			  polarity=TRUE;
 8001490:	4b2c      	ldr	r3, [pc, #176]	; (8001544 <CalcAndSetACComponents+0x1cc>)
 8001492:	2201      	movs	r2, #1
			  DCAC_SetPulse(Pulse1,Pulse1);
 8001494:	4608      	mov	r0, r1
			  polarity=TRUE;
 8001496:	701a      	strb	r2, [r3, #0]
			  DCAC_SetPulse(Pulse1,Pulse1);
 8001498:	f000 fc5e 	bl	8001d58 <DCAC_SetPulse>
			  if((LF_MOS_SET == FALSE) || (FIRST_CYCLE == TRUE))
 800149c:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <CalcAndSetACComponents+0x1d0>)
 800149e:	781a      	ldrb	r2, [r3, #0]
 80014a0:	b9da      	cbnz	r2, 80014da <CalcAndSetACComponents+0x162>
 80014a2:	4a2a      	ldr	r2, [pc, #168]	; (800154c <CalcAndSetACComponents+0x1d4>)
				  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(16);
 80014a4:	492a      	ldr	r1, [pc, #168]	; (8001550 <CalcAndSetACComponents+0x1d8>)
				  RESET_TIMER_D = FALSE;
 80014a6:	4d2b      	ldr	r5, [pc, #172]	; (8001554 <CalcAndSetACComponents+0x1dc>)
 80014a8:	2000      	movs	r0, #0
				  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(16);
 80014aa:	2410      	movs	r4, #16
				  FIRST_CYCLE = FALSE;
 80014ac:	7010      	strb	r0, [r2, #0]
				  RESET_TIMER_D = FALSE;
 80014ae:	7028      	strb	r0, [r5, #0]
				  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP2xR = (uint32_t)(16);
 80014b0:	f8c1 4324 	str.w	r4, [r1, #804]	; 0x324
				  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= 1 << 19;
 80014b4:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
				  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 80014b8:	4827      	ldr	r0, [pc, #156]	; (8001558 <CalcAndSetACComponents+0x1e0>)
				  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= 1 << 19;
 80014ba:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80014be:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
				  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 80014c2:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
				  LF_UPDATE = TRUE;
 80014c6:	4925      	ldr	r1, [pc, #148]	; (800155c <CalcAndSetACComponents+0x1e4>)
				  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 80014c8:	f042 0250 	orr.w	r2, r2, #80	; 0x50
				  LF_UPDATE = TRUE;
 80014cc:	2401      	movs	r4, #1
				  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 80014ce:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
				  LF_UPDATE = TRUE;
 80014d2:	700c      	strb	r4, [r1, #0]
			  LF_MOS_SET = TRUE;
 80014d4:	2201      	movs	r2, #1
 80014d6:	701a      	strb	r2, [r3, #0]
}
 80014d8:	bd70      	pop	{r4, r5, r6, pc}
			  if((LF_MOS_SET == FALSE) || (FIRST_CYCLE == TRUE))
 80014da:	4a1c      	ldr	r2, [pc, #112]	; (800154c <CalcAndSetACComponents+0x1d4>)
 80014dc:	7811      	ldrb	r1, [r2, #0]
 80014de:	2900      	cmp	r1, #0
 80014e0:	d1e0      	bne.n	80014a4 <CalcAndSetACComponents+0x12c>
				  if (LF_UPDATE == TRUE)
 80014e2:	4a1e      	ldr	r2, [pc, #120]	; (800155c <CalcAndSetACComponents+0x1e4>)
 80014e4:	7810      	ldrb	r0, [r2, #0]
 80014e6:	2800      	cmp	r0, #0
 80014e8:	d0f4      	beq.n	80014d4 <CalcAndSetACComponents+0x15c>
					  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R &= ~ (1 << 19);
 80014ea:	4819      	ldr	r0, [pc, #100]	; (8001550 <CalcAndSetACComponents+0x1d8>)
					  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 80014ec:	4d1a      	ldr	r5, [pc, #104]	; (8001558 <CalcAndSetACComponents+0x1e0>)
					  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R &= ~ (1 << 19);
 80014ee:	f8d0 423c 	ldr.w	r4, [r0, #572]	; 0x23c
 80014f2:	f424 2400 	bic.w	r4, r4, #524288	; 0x80000
 80014f6:	f8c0 423c 	str.w	r4, [r0, #572]	; 0x23c
					  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= (1 << 0);
 80014fa:	f8d0 423c 	ldr.w	r4, [r0, #572]	; 0x23c
 80014fe:	f044 0401 	orr.w	r4, r4, #1
 8001502:	f8c0 423c 	str.w	r4, [r0, #572]	; 0x23c
					  LF_UPDATE = FALSE;
 8001506:	7011      	strb	r1, [r2, #0]
					  HRTIM1_COMMON->CR2 |= (0x50 << 0); //UPDATE TIM F AND D SIMULT
 8001508:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
 800150c:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8001510:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
 8001514:	e7de      	b.n	80014d4 <CalcAndSetACComponents+0x15c>
 8001516:	bf00      	nop
 8001518:	2000007c 	.word	0x2000007c
 800151c:	2000006c 	.word	0x2000006c
 8001520:	20000068 	.word	0x20000068
 8001524:	20004e0c 	.word	0x20004e0c
 8001528:	20000194 	.word	0x20000194
 800152c:	20004e10 	.word	0x20004e10
 8001530:	200001a4 	.word	0x200001a4
 8001534:	2000015c 	.word	0x2000015c
 8001538:	20004e12 	.word	0x20004e12
 800153c:	200001b2 	.word	0x200001b2
 8001540:	20000080 	.word	0x20000080
 8001544:	200041d3 	.word	0x200041d3
 8001548:	20000007 	.word	0x20000007
 800154c:	20000006 	.word	0x20000006
 8001550:	40016800 	.word	0x40016800
 8001554:	2000000c 	.word	0x2000000c
 8001558:	40016b00 	.word	0x40016b00
 800155c:	20000172 	.word	0x20000172

08001560 <ExecControl>:
{
 8001560:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8001564:	4ba6      	ldr	r3, [pc, #664]	; (8001800 <ExecControl+0x2a0>)
  Param1 = ((vu16*)&DataSensingOffSet)[1];
 8001566:	4ea7      	ldr	r6, [pc, #668]	; (8001804 <ExecControl+0x2a4>)
  PV_Current=((u16)(DataSensingIO.DC_PanelCurrent))<<1;
 8001568:	f8df a30c 	ldr.w	sl, [pc, #780]	; 8001878 <ExecControl+0x318>
  PV_Voltage=(u16)(DataSensingIO.DC_PanelVoltage);
 800156c:	4da6      	ldr	r5, [pc, #664]	; (8001808 <ExecControl+0x2a8>)
  if(PV_Voltage<=1200 && State_Control==GRID_INSERTION) //22V min
 800156e:	4ca7      	ldr	r4, [pc, #668]	; (800180c <ExecControl+0x2ac>)
 8001570:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001574:	619a      	str	r2, [r3, #24]
{
 8001576:	b082      	sub	sp, #8
  u32 freq_actual = (u32) DCDC_GetFrequency();
 8001578:	f000 fc9c 	bl	8001eb4 <DCDC_GetFrequency>
  PV_Voltage=(u16)(DataSensingIO.DC_PanelVoltage);
 800157c:	4ba4      	ldr	r3, [pc, #656]	; (8001810 <ExecControl+0x2b0>)
 800157e:	8919      	ldrh	r1, [r3, #8]
  PV_Current=((u16)(DataSensingIO.DC_PanelCurrent))<<1;
 8001580:	88da      	ldrh	r2, [r3, #6]
  Param1 = ((vu16*)&DataSensingOffSet)[1];
 8001582:	8870      	ldrh	r0, [r6, #2]
  PV_Current=((u16)(DataSensingIO.DC_PanelCurrent))<<1;
 8001584:	0052      	lsls	r2, r2, #1
 8001586:	f8aa 2000 	strh.w	r2, [sl]
  ((vu16*)&DataSensingIO)[1] -= Param1;     //AC Line Voltage Data Sensing compensation
 800158a:	885a      	ldrh	r2, [r3, #2]
 800158c:	1a12      	subs	r2, r2, r0
 800158e:	b292      	uxth	r2, r2
 8001590:	805a      	strh	r2, [r3, #2]
  Param1 = ((vu16*)&DataSensingOffSet)[0];
 8001592:	8830      	ldrh	r0, [r6, #0]
  ((vu16*)&DataSensingIO)[0] -= Param1;     //AC Line Current Data Sensing compensation
 8001594:	881a      	ldrh	r2, [r3, #0]
  PV_Voltage=(u16)(DataSensingIO.DC_PanelVoltage);
 8001596:	b209      	sxth	r1, r1
  ((vu16*)&DataSensingIO)[0] -= Param1;     //AC Line Current Data Sensing compensation
 8001598:	1a12      	subs	r2, r2, r0
 800159a:	b292      	uxth	r2, r2
  if(PV_Voltage<=1200 && State_Control==GRID_INSERTION) //22V min
 800159c:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
  PV_Voltage=(u16)(DataSensingIO.DC_PanelVoltage);
 80015a0:	8029      	strh	r1, [r5, #0]
  ((vu16*)&DataSensingIO)[0] -= Param1;     //AC Line Current Data Sensing compensation
 80015a2:	801a      	strh	r2, [r3, #0]
  if(PV_Voltage<=1200 && State_Control==GRID_INSERTION) //22V min
 80015a4:	dc03      	bgt.n	80015ae <ExecControl+0x4e>
 80015a6:	7822      	ldrb	r2, [r4, #0]
 80015a8:	2a15      	cmp	r2, #21
 80015aa:	f000 80b4 	beq.w	8001716 <ExecControl+0x1b6>
  Bus_Voltage = (s16) (DataSensingIO.DC_BusVoltage) >>1; // >> 3 było
 80015ae:	889a      	ldrh	r2, [r3, #4]
 80015b0:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 800187c <ExecControl+0x31c>
  Grid_Voltage = -(s16)((DataSensingIO.AC_LineVoltage)); //OVERSAMPLING X8
 80015b4:	8858      	ldrh	r0, [r3, #2]
  if((Inverter_q_d.qI_Quadrature > 15000) && State_Control==GRID_INSERTION && MPPT_EN==TRUE) //2 A max output peak current
 80015b6:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8001880 <ExecControl+0x320>
  qIalpha_Inverter=-(s16)(DataSensingIO.AC_LineCurrent); //OVERSAMPLING X8 //by G.S. 19/03/12 //
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	f8df b2c4 	ldr.w	fp, [pc, #708]	; 8001884 <ExecControl+0x324>
  Bus_Voltage = (s16) (DataSensingIO.DC_BusVoltage) >>1; // >> 3 było
 80015c0:	f342 024e 	sbfx	r2, r2, #1, #15
  Grid_Voltage = -(s16)((DataSensingIO.AC_LineVoltage)); //OVERSAMPLING X8
 80015c4:	4240      	negs	r0, r0
  Bus_Voltage = (s16) (DataSensingIO.DC_BusVoltage) >>1; // >> 3 było
 80015c6:	f8a8 2000 	strh.w	r2, [r8]
  Grid_Voltage = -(s16)((DataSensingIO.AC_LineVoltage)); //OVERSAMPLING X8
 80015ca:	4a92      	ldr	r2, [pc, #584]	; (8001814 <ExecControl+0x2b4>)
 80015cc:	b200      	sxth	r0, r0
  qIalpha_Inverter=-(s16)(DataSensingIO.AC_LineCurrent); //OVERSAMPLING X8 //by G.S. 19/03/12 //
 80015ce:	425b      	negs	r3, r3
  Grid_Voltage = -(s16)((DataSensingIO.AC_LineVoltage)); //OVERSAMPLING X8
 80015d0:	8010      	strh	r0, [r2, #0]
  if((Inverter_q_d.qI_Quadrature > 15000) && State_Control==GRID_INSERTION && MPPT_EN==TRUE) //2 A max output peak current
 80015d2:	f9b9 2000 	ldrsh.w	r2, [r9]
  qIalpha_Inverter=-(s16)(DataSensingIO.AC_LineCurrent); //OVERSAMPLING X8 //by G.S. 19/03/12 //
 80015d6:	f8ab 3000 	strh.w	r3, [fp]
  if((Inverter_q_d.qI_Quadrature > 15000) && State_Control==GRID_INSERTION && MPPT_EN==TRUE) //2 A max output peak current
 80015da:	f643 2398 	movw	r3, #15000	; 0x3a98
 80015de:	429a      	cmp	r2, r3
 80015e0:	dd03      	ble.n	80015ea <ExecControl+0x8a>
 80015e2:	7823      	ldrb	r3, [r4, #0]
 80015e4:	2b15      	cmp	r3, #21
 80015e6:	f000 809c 	beq.w	8001722 <ExecControl+0x1c2>
     if((waiting_output_current_limit-1)<=1) waiting_output_current_limit=0;
 80015ea:	4a8b      	ldr	r2, [pc, #556]	; (8001818 <ExecControl+0x2b8>)
 80015ec:	8813      	ldrh	r3, [r2, #0]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	bf94      	ite	ls
 80015f2:	2300      	movls	r3, #0
      else waiting_output_current_limit--;
 80015f4:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80015f8:	8013      	strh	r3, [r2, #0]
  Grid_Volt_q_d= DQ_PLL_Grid(Grid_Voltage);
 80015fa:	f001 fac3 	bl	8002b84 <DQ_PLL_Grid>
 80015fe:	4b87      	ldr	r3, [pc, #540]	; (800181c <ExecControl+0x2bc>)
 8001600:	8018      	strh	r0, [r3, #0]
 8001602:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8001606:	8058      	strh	r0, [r3, #2]
  Output_qVd_Grid=(s16)(PLL_PID_Regulator(&DQ_PLL_PID,Grid_Volt_q_d));
 8001608:	6819      	ldr	r1, [r3, #0]
 800160a:	4885      	ldr	r0, [pc, #532]	; (8001820 <ExecControl+0x2c0>)
 800160c:	f002 f9de 	bl	80039cc <PLL_PID_Regulator>
 8001610:	4b84      	ldr	r3, [pc, #528]	; (8001824 <ExecControl+0x2c4>)
 8001612:	8018      	strh	r0, [r3, #0]
  Calc_Theta_Grid(Output_qVd_Grid);
 8001614:	f001 fbb6 	bl	8002d84 <Calc_Theta_Grid>
if(State_Control==START && MPPT_EN==FALSE && PLL_par_red_kp==FALSE && PLL_reducing!=TRUE)
 8001618:	7823      	ldrb	r3, [r4, #0]
 800161a:	2b12      	cmp	r3, #18
 800161c:	d066      	beq.n	80016ec <ExecControl+0x18c>
if(State_Control==GRID_INSERTION && MPPT_EN==TRUE)
 800161e:	2b15      	cmp	r3, #21
 8001620:	d104      	bne.n	800162c <ExecControl+0xcc>
 8001622:	4b81      	ldr	r3, [pc, #516]	; (8001828 <ExecControl+0x2c8>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	f040 8093 	bne.w	8001752 <ExecControl+0x1f2>
  qIbeta_Inverter= (s16)(Generate_90Degrees_Delay(qIalpha_Inverter));
 800162c:	f9bb 0000 	ldrsh.w	r0, [fp]
 8001630:	f001 fdaa 	bl	8003188 <Generate_90Degrees_Delay>
 8001634:	4b7d      	ldr	r3, [pc, #500]	; (800182c <ExecControl+0x2cc>)
 8001636:	4601      	mov	r1, r0
  Inverter_q_d=DQ_Filtering(DQ_Current_Inverter(qIalpha_Inverter,qIbeta_Inverter)); //test filtra
 8001638:	f9bb 0000 	ldrsh.w	r0, [fp]
  qIbeta_Inverter= (s16)(Generate_90Degrees_Delay(qIalpha_Inverter));
 800163c:	8019      	strh	r1, [r3, #0]
  Inverter_q_d=DQ_Filtering(DQ_Current_Inverter(qIalpha_Inverter,qIbeta_Inverter)); //test filtra
 800163e:	f001 fb27 	bl	8002c90 <DQ_Current_Inverter>
 8001642:	9001      	str	r0, [sp, #4]
 8001644:	f001 fd68 	bl	8003118 <DQ_Filtering>
 8001648:	f8a9 0000 	strh.w	r0, [r9]
 800164c:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8001650:	f8a9 0002 	strh.w	r0, [r9, #2]
  Actual_QD_Power =  DQ_Power_Estimation(Inverter_q_d);
 8001654:	f8d9 0000 	ldr.w	r0, [r9]
 8001658:	f001 fcaa 	bl	8002fb0 <DQ_Power_Estimation>
  if (ii<4095)
 800165c:	4974      	ldr	r1, [pc, #464]	; (8001830 <ExecControl+0x2d0>)
  Actual_QD_Power =  DQ_Power_Estimation(Inverter_q_d);
 800165e:	4a75      	ldr	r2, [pc, #468]	; (8001834 <ExecControl+0x2d4>)
  if (ii<4095)
 8001660:	880b      	ldrh	r3, [r1, #0]
  Actual_QD_Power =  DQ_Power_Estimation(Inverter_q_d);
 8001662:	6010      	str	r0, [r2, #0]
  if (ii<4095)
 8001664:	f640 70fe 	movw	r0, #4094	; 0xffe
 8001668:	4283      	cmp	r3, r0
 800166a:	d80b      	bhi.n	8001684 <ExecControl+0x124>
  ii++;
 800166c:	3301      	adds	r3, #1
 800166e:	b29b      	uxth	r3, r3
 	buffer[ii]=Actual_QD_Power.P_Active;
 8001670:	4871      	ldr	r0, [pc, #452]	; (8001838 <ExecControl+0x2d8>)
  ii++;
 8001672:	800b      	strh	r3, [r1, #0]
 	buffer2[ii]=Actual_QD_Power.Q_Reactive;
 8001674:	4971      	ldr	r1, [pc, #452]	; (800183c <ExecControl+0x2dc>)
 	buffer[ii]=Actual_QD_Power.P_Active;
 8001676:	f8b2 c000 	ldrh.w	ip, [r2]
 	buffer2[ii]=Actual_QD_Power.Q_Reactive;
 800167a:	8852      	ldrh	r2, [r2, #2]
 	buffer[ii]=Actual_QD_Power.P_Active;
 800167c:	f820 c013 	strh.w	ip, [r0, r3, lsl #1]
 	buffer2[ii]=Actual_QD_Power.Q_Reactive;
 8001680:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  PV_Voltage_prev=PV_Voltage;
 8001684:	4b6e      	ldr	r3, [pc, #440]	; (8001840 <ExecControl+0x2e0>)
  switch (State_Control)
 8001686:	f894 9000 	ldrb.w	r9, [r4]
  PV_Voltage_prev=PV_Voltage;
 800168a:	f9b5 5000 	ldrsh.w	r5, [r5]
 800168e:	801d      	strh	r5, [r3, #0]
  switch (State_Control)
 8001690:	f1b9 0f16 	cmp.w	r9, #22
 8001694:	d827      	bhi.n	80016e6 <ExecControl+0x186>
 8001696:	e8df f019 	tbh	[pc, r9, lsl #1]
 800169a:	0092      	.short	0x0092
 800169c:	002600a8 	.word	0x002600a8
 80016a0:	00260017 	.word	0x00260017
 80016a4:	0026020f 	.word	0x0026020f
 80016a8:	00260026 	.word	0x00260026
 80016ac:	00260026 	.word	0x00260026
 80016b0:	00f90026 	.word	0x00f90026
 80016b4:	013b0026 	.word	0x013b0026
 80016b8:	00260026 	.word	0x00260026
 80016bc:	01750026 	.word	0x01750026
 80016c0:	00260026 	.word	0x00260026
 80016c4:	007f01cb 	.word	0x007f01cb
    DCDC_SendCommand(DCDC_ConverterStop);
 80016c8:	2001      	movs	r0, #1
 80016ca:	f000 fb8b 	bl	8001de4 <DCDC_SendCommand>
    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= (1 << 0);
 80016ce:	4a5d      	ldr	r2, [pc, #372]	; (8001844 <ExecControl+0x2e4>)
  WRITE_REG(GPIOx->BRR, PinMask);
 80016d0:	485d      	ldr	r0, [pc, #372]	; (8001848 <ExecControl+0x2e8>)
 80016d2:	f8d2 323c 	ldr.w	r3, [r2, #572]	; 0x23c
 80016d6:	2510      	movs	r5, #16
 80016d8:	f043 0301 	orr.w	r3, r3, #1
    State_Control = STOPPING;
 80016dc:	2101      	movs	r1, #1
    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R |= (1 << 0);
 80016de:	f8c2 323c 	str.w	r3, [r2, #572]	; 0x23c
 80016e2:	6285      	str	r5, [r0, #40]	; 0x28
    State_Control = STOPPING;
 80016e4:	7021      	strb	r1, [r4, #0]
} // void
 80016e6:	b002      	add	sp, #8
 80016e8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
if(State_Control==START && MPPT_EN==FALSE && PLL_par_red_kp==FALSE && PLL_reducing!=TRUE)
 80016ec:	4b4e      	ldr	r3, [pc, #312]	; (8001828 <ExecControl+0x2c8>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d19b      	bne.n	800162c <ExecControl+0xcc>
 80016f4:	4b55      	ldr	r3, [pc, #340]	; (800184c <ExecControl+0x2ec>)
 80016f6:	781a      	ldrb	r2, [r3, #0]
 80016f8:	2a00      	cmp	r2, #0
 80016fa:	d197      	bne.n	800162c <ExecControl+0xcc>
 80016fc:	4a54      	ldr	r2, [pc, #336]	; (8001850 <ExecControl+0x2f0>)
 80016fe:	7812      	ldrb	r2, [r2, #0]
 8001700:	2a00      	cmp	r2, #0
 8001702:	d193      	bne.n	800162c <ExecControl+0xcc>
   if(waiting_time<=1000) //2.5 sec
 8001704:	4853      	ldr	r0, [pc, #332]	; (8001854 <ExecControl+0x2f4>)
 8001706:	8801      	ldrh	r1, [r0, #0]
 8001708:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 800170c:	f200 82a4 	bhi.w	8001c58 <ExecControl+0x6f8>
     waiting_time++;
 8001710:	3101      	adds	r1, #1
 8001712:	8001      	strh	r1, [r0, #0]
 8001714:	e78a      	b.n	800162c <ExecControl+0xcc>
      State_Control = STOP_WITH_DELAY;
 8001716:	2216      	movs	r2, #22
 8001718:	7022      	strb	r2, [r4, #0]
      Diagnostic_Control=PV_VOLTAGE_MIN;
 800171a:	4a4f      	ldr	r2, [pc, #316]	; (8001858 <ExecControl+0x2f8>)
 800171c:	210f      	movs	r1, #15
 800171e:	7011      	strb	r1, [r2, #0]
 8001720:	e745      	b.n	80015ae <ExecControl+0x4e>
  if((Inverter_q_d.qI_Quadrature > 15000) && State_Control==GRID_INSERTION && MPPT_EN==TRUE) //2 A max output peak current
 8001722:	4b41      	ldr	r3, [pc, #260]	; (8001828 <ExecControl+0x2c8>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	f43f af5f 	beq.w	80015ea <ExecControl+0x8a>
     if(waiting_output_current_limit>=12500)
 800172c:	4a3a      	ldr	r2, [pc, #232]	; (8001818 <ExecControl+0x2b8>)
 800172e:	8813      	ldrh	r3, [r2, #0]
 8001730:	f243 01d3 	movw	r1, #12499	; 0x30d3
 8001734:	428b      	cmp	r3, r1
 8001736:	f240 8208 	bls.w	8001b4a <ExecControl+0x5ea>
      Fault = OUT_CURRENT_LIMIT;
 800173a:	f8df c14c 	ldr.w	ip, [pc, #332]	; 8001888 <ExecControl+0x328>
      Diagnostic_Control=OUT_CURRENT_LIMIT;
 800173e:	4946      	ldr	r1, [pc, #280]	; (8001858 <ExecControl+0x2f8>)
      Fault = OUT_CURRENT_LIMIT;
 8001740:	230d      	movs	r3, #13
 8001742:	f8ac 3000 	strh.w	r3, [ip]
      Diagnostic_Control=OUT_CURRENT_LIMIT;
 8001746:	700b      	strb	r3, [r1, #0]
      waiting_output_current_limit=0;
 8001748:	2300      	movs	r3, #0
 800174a:	8013      	strh	r3, [r2, #0]
      State_Control = STOP_WITH_DELAY;
 800174c:	2316      	movs	r3, #22
 800174e:	7023      	strb	r3, [r4, #0]
      Diagnostic_Control=OUT_CURRENT_LIMIT;
 8001750:	e753      	b.n	80015fa <ExecControl+0x9a>
  if((Theta + 0x8000) <= 1000 && (Theta + 0x8000) >= 0)
 8001752:	4b42      	ldr	r3, [pc, #264]	; (800185c <ExecControl+0x2fc>)
 8001754:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001758:	4b41      	ldr	r3, [pc, #260]	; (8001860 <ExecControl+0x300>)
 800175a:	429a      	cmp	r2, r3
 800175c:	f280 81be 	bge.w	8001adc <ExecControl+0x57c>
    PVvoltageFiltered = (s16)(((s32)(((s32)PVvoltageFiltered<<3) - (s32)PVvoltageFiltered) +  (s32)(PV_Voltage))>>3);
 8001760:	4a40      	ldr	r2, [pc, #256]	; (8001864 <ExecControl+0x304>)
    PVcurrentFiltered = (s16)(((s32)(((s32)PVcurrentFiltered<<3) - (s32)PVcurrentFiltered) +  (s32)(PV_Current))>>3);
 8001762:	4841      	ldr	r0, [pc, #260]	; (8001868 <ExecControl+0x308>)
    PVvoltageFiltered = (s16)(((s32)(((s32)PVvoltageFiltered<<3) - (s32)PVvoltageFiltered) +  (s32)(PV_Voltage))>>3);
 8001764:	f9b2 3000 	ldrsh.w	r3, [r2]
    PVcurrentFiltered = (s16)(((s32)(((s32)PVcurrentFiltered<<3) - (s32)PVcurrentFiltered) +  (s32)(PV_Current))>>3);
 8001768:	f9ba c000 	ldrsh.w	ip, [sl]
    PVvoltageFiltered = (s16)(((s32)(((s32)PVvoltageFiltered<<3) - (s32)PVvoltageFiltered) +  (s32)(PV_Voltage))>>3);
 800176c:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
    PVcurrentFiltered = (s16)(((s32)(((s32)PVcurrentFiltered<<3) - (s32)PVcurrentFiltered) +  (s32)(PV_Current))>>3);
 8001770:	f9b0 3000 	ldrsh.w	r3, [r0]
 8001774:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8001778:	4463      	add	r3, ip
 800177a:	10db      	asrs	r3, r3, #3
 800177c:	8003      	strh	r3, [r0, #0]
    PVvoltageFiltered = (s16)(((s32)(((s32)PVvoltageFiltered<<3) - (s32)PVvoltageFiltered) +  (s32)(PV_Voltage))>>3);
 800177e:	f9b5 3000 	ldrsh.w	r3, [r5]
    count_mppt++;
 8001782:	483a      	ldr	r0, [pc, #232]	; (800186c <ExecControl+0x30c>)
    PVvoltageFiltered = (s16)(((s32)(((s32)PVvoltageFiltered<<3) - (s32)PVvoltageFiltered) +  (s32)(PV_Voltage))>>3);
 8001784:	440b      	add	r3, r1
 8001786:	10db      	asrs	r3, r3, #3
 8001788:	8013      	strh	r3, [r2, #0]
    count_mppt++;
 800178a:	8803      	ldrh	r3, [r0, #0]
 800178c:	3301      	adds	r3, #1
 800178e:	8003      	strh	r3, [r0, #0]
    mppt_req=1;
 8001790:	4b37      	ldr	r3, [pc, #220]	; (8001870 <ExecControl+0x310>)
 8001792:	2201      	movs	r2, #1
 8001794:	701a      	strb	r2, [r3, #0]
    count_mppt++;
 8001796:	e749      	b.n	800162c <ExecControl+0xcc>
   if(WAIT_RELAY_STABLE>=REL_OFF_WAIT)
 8001798:	4a36      	ldr	r2, [pc, #216]	; (8001874 <ExecControl+0x314>)
 800179a:	6813      	ldr	r3, [r2, #0]
 800179c:	2b2d      	cmp	r3, #45	; 0x2d
 800179e:	f240 819a 	bls.w	8001ad6 <ExecControl+0x576>
 80017a2:	4829      	ldr	r0, [pc, #164]	; (8001848 <ExecControl+0x2e8>)
      State_Control = BUS_FAULT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	2510      	movs	r5, #16
      WAIT_RELAY_STABLE=0;
 80017a8:	2100      	movs	r1, #0
 80017aa:	6285      	str	r5, [r0, #40]	; 0x28
 80017ac:	4699      	mov	r9, r3
 80017ae:	6011      	str	r1, [r2, #0]
      State_Control = BUS_FAULT;
 80017b0:	7023      	strb	r3, [r4, #0]
    CalcAndSetACComponents(State_Control);
 80017b2:	4648      	mov	r0, r9
} // void
 80017b4:	b002      	add	sp, #8
 80017b6:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    CalcAndSetACComponents(State_Control);
 80017ba:	f7ff bddd 	b.w	8001378 <CalcAndSetACComponents>
      DCAC_SendCommand(DCAC_Stop);
 80017be:	2001      	movs	r0, #1
 80017c0:	f000 fa7e 	bl	8001cc0 <DCAC_SendCommand>
      DS_SendCommand(DS_Stop);
 80017c4:	2001      	movs	r0, #1
 80017c6:	f001 fdaf 	bl	8003328 <DS_SendCommand>
      if(Diagnostic_Control==PV_VOLTAGE_MIN)
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <ExecControl+0x2f8>)
      MPPT_EN=FALSE;
 80017cc:	4a16      	ldr	r2, [pc, #88]	; (8001828 <ExecControl+0x2c8>)
      if(Diagnostic_Control==PV_VOLTAGE_MIN)
 80017ce:	781b      	ldrb	r3, [r3, #0]
      MPPT_EN=FALSE;
 80017d0:	2100      	movs	r1, #0
      if(Diagnostic_Control==PV_VOLTAGE_MIN)
 80017d2:	2b0f      	cmp	r3, #15
      MPPT_EN=FALSE;
 80017d4:	7011      	strb	r1, [r2, #0]
      if(Diagnostic_Control==PV_VOLTAGE_MIN)
 80017d6:	d002      	beq.n	80017de <ExecControl+0x27e>
      if(Diagnostic_Control==BUS_OVERVOLTAGE)
 80017d8:	2b10      	cmp	r3, #16
 80017da:	f040 81fb 	bne.w	8001bd4 <ExecControl+0x674>
      { State_Control= PV_VOLTAGE_DVDT; }
 80017de:	7023      	strb	r3, [r4, #0]
} // void
 80017e0:	b002      	add	sp, #8
 80017e2:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	    StartControl();
 80017e6:	f7ff bc83 	b.w	80010f0 <StartControl>
    DCDC_SendCommand(DCDC_ConverterStop);
 80017ea:	2001      	movs	r0, #1
 80017ec:	f000 fafa 	bl	8001de4 <DCDC_SendCommand>
 80017f0:	4a15      	ldr	r2, [pc, #84]	; (8001848 <ExecControl+0x2e8>)
 80017f2:	2110      	movs	r1, #16
    State_Control = STOP;
 80017f4:	2300      	movs	r3, #0
 80017f6:	6291      	str	r1, [r2, #40]	; 0x28
 80017f8:	7023      	strb	r3, [r4, #0]
} // void
 80017fa:	b002      	add	sp, #8
 80017fc:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8001800:	48000800 	.word	0x48000800
 8001804:	20000114 	.word	0x20000114
 8001808:	2000018c 	.word	0x2000018c
 800180c:	200001b2 	.word	0x200001b2
 8001810:	200000fc 	.word	0x200000fc
 8001814:	2000016c 	.word	0x2000016c
 8001818:	200041e8 	.word	0x200041e8
 800181c:	20004e04 	.word	0x20004e04
 8001820:	200000b8 	.word	0x200000b8
 8001824:	20000184 	.word	0x20000184
 8001828:	20000173 	.word	0x20000173
 800182c:	200041e6 	.word	0x200041e6
 8001830:	200041d0 	.word	0x200041d0
 8001834:	20000068 	.word	0x20000068
 8001838:	200001cc 	.word	0x200001cc
 800183c:	200021cc 	.word	0x200021cc
 8001840:	2000018e 	.word	0x2000018e
 8001844:	40016800 	.word	0x40016800
 8001848:	48000c00 	.word	0x48000c00
 800184c:	20000187 	.word	0x20000187
 8001850:	20000188 	.word	0x20000188
 8001854:	200041ea 	.word	0x200041ea
 8001858:	20000158 	.word	0x20000158
 800185c:	20004e20 	.word	0x20004e20
 8001860:	ffff83e9 	.word	0xffff83e9
 8001864:	20000192 	.word	0x20000192
 8001868:	20000190 	.word	0x20000190
 800186c:	200041ce 	.word	0x200041ce
 8001870:	200041d2 	.word	0x200041d2
 8001874:	200001bc 	.word	0x200001bc
 8001878:	2000018a 	.word	0x2000018a
 800187c:	2000007c 	.word	0x2000007c
 8001880:	20004e0c 	.word	0x20004e0c
 8001884:	200041e4 	.word	0x200041e4
 8001888:	20000168 	.word	0x20000168
    Wait_BUS_DC_Reading++;
 800188c:	4ab4      	ldr	r2, [pc, #720]	; (8001b60 <ExecControl+0x600>)
    if (Wait_BUS_DC_Reading >= DC_BUS_WAIT)
 800188e:	49b5      	ldr	r1, [pc, #724]	; (8001b64 <ExecControl+0x604>)
    Wait_BUS_DC_Reading++;
 8001890:	6813      	ldr	r3, [r2, #0]
 8001892:	3301      	adds	r3, #1
    if (Wait_BUS_DC_Reading >= DC_BUS_WAIT)
 8001894:	428b      	cmp	r3, r1
 8001896:	f240 811f 	bls.w	8001ad8 <ExecControl+0x578>
     if(PV_Voltage >= 1300 && PV_Voltage < 4096) //20V min - 50V max
 800189a:	f2a5 5514 	subw	r5, r5, #1300	; 0x514
 800189e:	b2ad      	uxth	r5, r5
 80018a0:	f640 23eb 	movw	r3, #2795	; 0xaeb
 80018a4:	429d      	cmp	r5, r3
 80018a6:	f200 81a5 	bhi.w	8001bf4 <ExecControl+0x694>
		  if(Bus_Voltage < (DataSensingOffSet.DC_BusVoltage)*2) //Wait after shutdown for Bus Voltage down
 80018aa:	88b3      	ldrh	r3, [r6, #4]
 80018ac:	f9b8 1000 	ldrsh.w	r1, [r8]
      Wait_BUS_DC_Reading =0;
 80018b0:	2000      	movs	r0, #0
 80018b2:	6010      	str	r0, [r2, #0]
		  if(Bus_Voltage < (DataSensingOffSet.DC_BusVoltage)*2) //Wait after shutdown for Bus Voltage down
 80018b4:	b29b      	uxth	r3, r3
      Wait_GRID_Insertion =0;
 80018b6:	4aac      	ldr	r2, [pc, #688]	; (8001b68 <ExecControl+0x608>)
		  if(Bus_Voltage < (DataSensingOffSet.DC_BusVoltage)*2) //Wait after shutdown for Bus Voltage down
 80018b8:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
      Wait_GRID_Insertion =0;
 80018bc:	6010      	str	r0, [r2, #0]
		  if(Bus_Voltage < (DataSensingOffSet.DC_BusVoltage)*2) //Wait after shutdown for Bus Voltage down
 80018be:	f6bf af78 	bge.w	80017b2 <ExecControl+0x252>
			  State_Control=BUSPRECHARGE;
 80018c2:	230e      	movs	r3, #14
 80018c4:	7023      	strb	r3, [r4, #0]
			  DCDC_SendCommand(DCDC_ConverterStart);
 80018c6:	f000 fa8d 	bl	8001de4 <DCDC_SendCommand>
	          while(DCDC_GetPhaseShift() < (DCDC_GetPeriod()))
 80018ca:	e008      	b.n	80018de <ExecControl+0x37e>
	        	  DCDC_SetPhaseShift(DCDC_GetPhaseShift()+1);
 80018cc:	f000 faf8 	bl	8001ec0 <DCDC_GetPhaseShift>
 80018d0:	3001      	adds	r0, #1
 80018d2:	f000 fafb 	bl	8001ecc <DCDC_SetPhaseShift>
	        	  delay_cycles(1700);
 80018d6:	f240 60a4 	movw	r0, #1700	; 0x6a4
 80018da:	f7ff f9d5 	bl	8000c88 <delay_cycles>
	          while(DCDC_GetPhaseShift() < (DCDC_GetPeriod()))
 80018de:	f000 faef 	bl	8001ec0 <DCDC_GetPhaseShift>
 80018e2:	4605      	mov	r5, r0
 80018e4:	f000 fae0 	bl	8001ea8 <DCDC_GetPeriod>
 80018e8:	4285      	cmp	r5, r0
 80018ea:	d3ef      	bcc.n	80018cc <ExecControl+0x36c>
	          while(DCDC_GetFrequency() > 140000)
 80018ec:	4e9f      	ldr	r6, [pc, #636]	; (8001b6c <ExecControl+0x60c>)
	          	  ActualFreq_Val=ActualFreq_Val - 1;
 80018ee:	4da0      	ldr	r5, [pc, #640]	; (8001b70 <ExecControl+0x610>)
 80018f0:	e007      	b.n	8001902 <ExecControl+0x3a2>
 80018f2:	6828      	ldr	r0, [r5, #0]
 80018f4:	3801      	subs	r0, #1
 80018f6:	6028      	str	r0, [r5, #0]
	          	  DCDC_SetFrequency((u32)ActualFreq_Val);
 80018f8:	f000 fafe 	bl	8001ef8 <DCDC_SetFrequency>
	          	  delay_cycles(170);
 80018fc:	20aa      	movs	r0, #170	; 0xaa
 80018fe:	f7ff f9c3 	bl	8000c88 <delay_cycles>
	          while(DCDC_GetFrequency() > 140000)
 8001902:	f000 fad7 	bl	8001eb4 <DCDC_GetFrequency>
 8001906:	42b0      	cmp	r0, r6
 8001908:	d8f3      	bhi.n	80018f2 <ExecControl+0x392>
    CalcAndSetACComponents(State_Control);
 800190a:	f894 9000 	ldrb.w	r9, [r4]
 800190e:	e750      	b.n	80017b2 <ExecControl+0x252>
     if(Bus_Voltage >= DC_BUS_VOLTAGE_MAX) //Vbus reg value at 400V
 8001910:	4e98      	ldr	r6, [pc, #608]	; (8001b74 <ExecControl+0x614>)
 8001912:	f9b6 0000 	ldrsh.w	r0, [r6]
 8001916:	f7fe fefb 	bl	8000710 <__aeabi_i2d>
 800191a:	a38d      	add	r3, pc, #564	; (adr r3, 8001b50 <ExecControl+0x5f0>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	f7fe fc7a 	bl	8000218 <__aeabi_dmul>
 8001924:	f7fe ffe6 	bl	80008f4 <__aeabi_d2iz>
 8001928:	f9b8 3000 	ldrsh.w	r3, [r8]
 800192c:	b200      	sxth	r0, r0
 800192e:	4298      	cmp	r0, r3
 8001930:	f340 8184 	ble.w	8001c3c <ExecControl+0x6dc>
       if(PV_Voltage < PV_Voltage_startup) //18V min input voltage
 8001934:	4b90      	ldr	r3, [pc, #576]	; (8001b78 <ExecControl+0x618>)
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	429d      	cmp	r5, r3
 800193a:	f280 8168 	bge.w	8001c0e <ExecControl+0x6ae>
          bus_pre_charge++;
 800193e:	4d8f      	ldr	r5, [pc, #572]	; (8001b7c <ExecControl+0x61c>)
 8001940:	882b      	ldrh	r3, [r5, #0]
 8001942:	3301      	adds	r3, #1
 8001944:	802b      	strh	r3, [r5, #0]
    CalcAndSetACComponents(State_Control);
 8001946:	4648      	mov	r0, r9
 8001948:	f7ff fd16 	bl	8001378 <CalcAndSetACComponents>
    if(bus_pre_charge>=_WAIT_SECONDS(3)  && Bus_Voltage<DC_BUS_VOLTAGE_MIN)
 800194c:	882a      	ldrh	r2, [r5, #0]
 800194e:	f24f 332f 	movw	r3, #62255	; 0xf32f
 8001952:	429a      	cmp	r2, r3
 8001954:	f67f aec7 	bls.w	80016e6 <ExecControl+0x186>
 8001958:	f9b6 0000 	ldrsh.w	r0, [r6]
 800195c:	f7fe fed8 	bl	8000710 <__aeabi_i2d>
 8001960:	a37d      	add	r3, pc, #500	; (adr r3, 8001b58 <ExecControl+0x5f8>)
 8001962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001966:	f7fe fc57 	bl	8000218 <__aeabi_dmul>
 800196a:	f7fe ffc3 	bl	80008f4 <__aeabi_d2iz>
 800196e:	f9b8 3000 	ldrsh.w	r3, [r8]
 8001972:	b200      	sxth	r0, r0
 8001974:	4298      	cmp	r0, r3
 8001976:	f77f aeb6 	ble.w	80016e6 <ExecControl+0x186>
        PV_Voltage_startup=1111;
 800197a:	4b7f      	ldr	r3, [pc, #508]	; (8001b78 <ExecControl+0x618>)
 800197c:	f240 4257 	movw	r2, #1111	; 0x457
 8001980:	801a      	strh	r2, [r3, #0]
 8001982:	e6b0      	b.n	80016e6 <ExecControl+0x186>
     Wait_GRID_Insertion++;
 8001984:	4d78      	ldr	r5, [pc, #480]	; (8001b68 <ExecControl+0x608>)
     if ((Bus_Voltage >= DC_BUS_VOLTAGE_MAX))
 8001986:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 8001b74 <ExecControl+0x614>
     Wait_GRID_Insertion++;
 800198a:	682b      	ldr	r3, [r5, #0]
     if ((Bus_Voltage >= DC_BUS_VOLTAGE_MAX))
 800198c:	f9b9 0000 	ldrsh.w	r0, [r9]
     Wait_GRID_Insertion++;
 8001990:	3301      	adds	r3, #1
 8001992:	602b      	str	r3, [r5, #0]
     if ((Bus_Voltage >= DC_BUS_VOLTAGE_MAX))
 8001994:	f7fe febc 	bl	8000710 <__aeabi_i2d>
 8001998:	a36d      	add	r3, pc, #436	; (adr r3, 8001b50 <ExecControl+0x5f0>)
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	4682      	mov	sl, r0
 80019a0:	468b      	mov	fp, r1
 80019a2:	f7fe fc39 	bl	8000218 <__aeabi_dmul>
 80019a6:	f7fe ffa5 	bl	80008f4 <__aeabi_d2iz>
 80019aa:	f9b8 6000 	ldrsh.w	r6, [r8]
 80019ae:	b200      	sxth	r0, r0
 80019b0:	42b0      	cmp	r0, r6
 80019b2:	f340 8137 	ble.w	8001c24 <ExecControl+0x6c4>
    if ((Bus_Voltage < DC_BUS_VOLTAGE_MIN))
 80019b6:	a368      	add	r3, pc, #416	; (adr r3, 8001b58 <ExecControl+0x5f8>)
 80019b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019bc:	4650      	mov	r0, sl
 80019be:	4659      	mov	r1, fp
 80019c0:	f7fe fc2a 	bl	8000218 <__aeabi_dmul>
 80019c4:	f7fe ff96 	bl	80008f4 <__aeabi_d2iz>
 80019c8:	b200      	sxth	r0, r0
 80019ca:	42b0      	cmp	r0, r6
 80019cc:	f300 8126 	bgt.w	8001c1c <ExecControl+0x6bc>
      if ((Wait_GRID_Insertion >= GRID_WAIT) && (State_Control==START) && (Theta_time==((Theta_Grid/4)-REL_ON_TICK) || Theta_time==((Theta_Grid*3/4)-REL_ON_TICK)))
 80019d0:	4b6b      	ldr	r3, [pc, #428]	; (8001b80 <ExecControl+0x620>)
 80019d2:	682a      	ldr	r2, [r5, #0]
 80019d4:	7820      	ldrb	r0, [r4, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	f67f aeec 	bls.w	80017b4 <ExecControl+0x254>
 80019dc:	2812      	cmp	r0, #18
 80019de:	f47f aee9 	bne.w	80017b4 <ExecControl+0x254>
 80019e2:	4b68      	ldr	r3, [pc, #416]	; (8001b84 <ExecControl+0x624>)
 80019e4:	4a68      	ldr	r2, [pc, #416]	; (8001b88 <ExecControl+0x628>)
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	8811      	ldrh	r1, [r2, #0]
 80019ea:	089a      	lsrs	r2, r3, #2
 80019ec:	3a4d      	subs	r2, #77	; 0x4d
 80019ee:	4291      	cmp	r1, r2
 80019f0:	d006      	beq.n	8001a00 <ExecControl+0x4a0>
 80019f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80019f6:	109b      	asrs	r3, r3, #2
 80019f8:	3b4d      	subs	r3, #77	; 0x4d
 80019fa:	4299      	cmp	r1, r3
 80019fc:	f47f aeda 	bne.w	80017b4 <ExecControl+0x254>
        DCDC_SendCommand(DCDC_ConverterStart);
 8001a00:	2000      	movs	r0, #0
 8001a02:	f000 f9ef 	bl	8001de4 <DCDC_SendCommand>
        COMP7 ->CSR &= ~COMP_CSR_EN;//Glitch test
 8001a06:	4961      	ldr	r1, [pc, #388]	; (8001b8c <ExecControl+0x62c>)
        TIM1->AF1 &= ~TIM1_AF1_BKINE; //DISABLE
 8001a08:	4a61      	ldr	r2, [pc, #388]	; (8001b90 <ExecControl+0x630>)
        COMP7 ->CSR &= ~COMP_CSR_EN;//Glitch test
 8001a0a:	f8d1 3218 	ldr.w	r3, [r1, #536]	; 0x218
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001a0e:	4861      	ldr	r0, [pc, #388]	; (8001b94 <ExecControl+0x634>)
 8001a10:	f023 0301 	bic.w	r3, r3, #1
 8001a14:	f8c1 3218 	str.w	r3, [r1, #536]	; 0x218
        TIM1->AF1 &= ~TIM1_AF1_BKINE; //DISABLE
 8001a18:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001a1a:	f023 0301 	bic.w	r3, r3, #1
 8001a1e:	6613      	str	r3, [r2, #96]	; 0x60
 8001a20:	2110      	movs	r1, #16
        State_Control =GRID_INSERTION;
 8001a22:	2315      	movs	r3, #21
        Wait_GRID_Insertion=0;
 8001a24:	2200      	movs	r2, #0
 8001a26:	6181      	str	r1, [r0, #24]
        State_Control =GRID_INSERTION;
 8001a28:	4618      	mov	r0, r3
        Wait_GRID_Insertion=0;
 8001a2a:	602a      	str	r2, [r5, #0]
        State_Control =GRID_INSERTION;
 8001a2c:	7023      	strb	r3, [r4, #0]
     CalcAndSetACComponents(State_Control);
 8001a2e:	e6c1      	b.n	80017b4 <ExecControl+0x254>
    *ptr_State_Control=State_Control;
 8001a30:	4b59      	ldr	r3, [pc, #356]	; (8001b98 <ExecControl+0x638>)
    Wait_MPPT++;
 8001a32:	4a5a      	ldr	r2, [pc, #360]	; (8001b9c <ExecControl+0x63c>)
    *ptr_State_Control=State_Control;
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2115      	movs	r1, #21
 8001a38:	8019      	strh	r1, [r3, #0]
    *(ptr_State_Control+1)=State_Control;
 8001a3a:	7820      	ldrb	r0, [r4, #0]
 8001a3c:	b281      	uxth	r1, r0
 8001a3e:	8059      	strh	r1, [r3, #2]
    *(ptr_State_Control+2)=State_Control;
 8001a40:	8099      	strh	r1, [r3, #4]
    Wait_MPPT++;
 8001a42:	8813      	ldrh	r3, [r2, #0]
 8001a44:	3301      	adds	r3, #1
 8001a46:	b29b      	uxth	r3, r3
    if(Wait_MPPT==55000)
 8001a48:	f24d 61d8 	movw	r1, #55000	; 0xd6d8
 8001a4c:	428b      	cmp	r3, r1
    Wait_MPPT++;
 8001a4e:	8013      	strh	r3, [r2, #0]
    if(Wait_MPPT==55000)
 8001a50:	d102      	bne.n	8001a58 <ExecControl+0x4f8>
     { MPPT_EN=TRUE; }
 8001a52:	4b53      	ldr	r3, [pc, #332]	; (8001ba0 <ExecControl+0x640>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
    BusFiltered = (s16)(((s32)(((s32)BusFiltered<<6) - (s32)BusFiltered) +  (s32)(Bus_Voltage))>>6);
 8001a58:	4a52      	ldr	r2, [pc, #328]	; (8001ba4 <ExecControl+0x644>)
 8001a5a:	f9b8 1000 	ldrsh.w	r1, [r8]
 8001a5e:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001a62:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 8001a66:	440b      	add	r3, r1
 8001a68:	f343 138f 	sbfx	r3, r3, #6, #16
    if (BusFiltered > 16000) //3804 nowe nastawy 440V
 8001a6c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
    BusFiltered = (s16)(((s32)(((s32)BusFiltered<<6) - (s32)BusFiltered) +  (s32)(Bus_Voltage))>>6);
 8001a70:	8013      	strh	r3, [r2, #0]
    if (BusFiltered > 16000) //3804 nowe nastawy 440V
 8001a72:	dd5a      	ble.n	8001b2a <ExecControl+0x5ca>
         Fault = BUS_OVERVOLTAGE;
 8001a74:	494c      	ldr	r1, [pc, #304]	; (8001ba8 <ExecControl+0x648>)
         Diagnostic_Control=BUS_OVERVOLTAGE;
 8001a76:	4a4d      	ldr	r2, [pc, #308]	; (8001bac <ExecControl+0x64c>)
         Fault = BUS_OVERVOLTAGE;
 8001a78:	2310      	movs	r3, #16
         State_Control = STOP_WITH_DELAY;
 8001a7a:	2016      	movs	r0, #22
         Fault = BUS_OVERVOLTAGE;
 8001a7c:	800b      	strh	r3, [r1, #0]
         State_Control = STOP_WITH_DELAY;
 8001a7e:	7020      	strb	r0, [r4, #0]
         Diagnostic_Control=BUS_OVERVOLTAGE;
 8001a80:	7013      	strb	r3, [r2, #0]
    CalcAndSetACComponents(State_Control);
 8001a82:	f7ff fc79 	bl	8001378 <CalcAndSetACComponents>
	  if(OC_PROT_ON < REL_ON_TICK+7000) //  stabilize relay
 8001a86:	4a4a      	ldr	r2, [pc, #296]	; (8001bb0 <ExecControl+0x650>)
 8001a88:	8813      	ldrh	r3, [r2, #0]
 8001a8a:	f641 31a4 	movw	r1, #7076	; 0x1ba4
 8001a8e:	428b      	cmp	r3, r1
 8001a90:	d802      	bhi.n	8001a98 <ExecControl+0x538>
			  OC_PROT_ON++;
 8001a92:	3301      	adds	r3, #1
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	8013      	strh	r3, [r2, #0]
	  if(OC_PROT_ON == REL_ON_TICK+7000)
 8001a98:	f641 31a5 	movw	r1, #7077	; 0x1ba5
 8001a9c:	428b      	cmp	r3, r1
 8001a9e:	f47f ae22 	bne.w	80016e6 <ExecControl+0x186>
		      COMP7 ->CSR |= COMP_CSR_EN;//Glitch test
 8001aa2:	493a      	ldr	r1, [pc, #232]	; (8001b8c <ExecControl+0x62c>)
 8001aa4:	f8d1 3218 	ldr.w	r3, [r1, #536]	; 0x218
			  OC_PROT_ON = REL_ON_TICK+1+7000;
 8001aa8:	f641 30a6 	movw	r0, #7078	; 0x1ba6
		      COMP7 ->CSR |= COMP_CSR_EN;//Glitch test
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	f8c1 3218 	str.w	r3, [r1, #536]	; 0x218
			  OC_PROT_ON = REL_ON_TICK+1+7000;
 8001ab4:	8010      	strh	r0, [r2, #0]
 8001ab6:	e616      	b.n	80016e6 <ExecControl+0x186>
    if(Freq_Control == FREQ_INSIDE_RANGE && GDVoltage == GRID_VOLTAGE_INSIDE_RANGE)
 8001ab8:	4b3e      	ldr	r3, [pc, #248]	; (8001bb4 <ExecControl+0x654>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b07      	cmp	r3, #7
 8001abe:	f47f ae78 	bne.w	80017b2 <ExecControl+0x252>
 8001ac2:	4b3d      	ldr	r3, [pc, #244]	; (8001bb8 <ExecControl+0x658>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b09      	cmp	r3, #9
 8001ac8:	f47f ae73 	bne.w	80017b2 <ExecControl+0x252>
      State_Control=DIAGNOSTIC_DC_LINE;
 8001acc:	f04f 090c 	mov.w	r9, #12
 8001ad0:	f884 9000 	strb.w	r9, [r4]
    CalcAndSetACComponents(State_Control);
 8001ad4:	e66d      	b.n	80017b2 <ExecControl+0x252>
    {  WAIT_RELAY_STABLE++; }
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e66a      	b.n	80017b2 <ExecControl+0x252>
    if(mppt_req==1 && count_mppt>=150)  //600usec per ciclo di count_mppt con 10000 is 6sec
 8001adc:	4b37      	ldr	r3, [pc, #220]	; (8001bbc <ExecControl+0x65c>)
 8001ade:	781a      	ldrb	r2, [r3, #0]
 8001ae0:	2a01      	cmp	r2, #1
 8001ae2:	f47f ada3 	bne.w	800162c <ExecControl+0xcc>
 8001ae6:	4836      	ldr	r0, [pc, #216]	; (8001bc0 <ExecControl+0x660>)
 8001ae8:	8801      	ldrh	r1, [r0, #0]
 8001aea:	2995      	cmp	r1, #149	; 0x95
 8001aec:	f67f ad9e 	bls.w	800162c <ExecControl+0xcc>
     PV_Voltage=(s16)PVvoltageFiltered;
 8001af0:	4934      	ldr	r1, [pc, #208]	; (8001bc4 <ExecControl+0x664>)
     MPPT_num++;
 8001af2:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 8001bcc <ExecControl+0x66c>
     PV_Voltage=(s16)PVvoltageFiltered;
 8001af6:	8809      	ldrh	r1, [r1, #0]
 8001af8:	8029      	strh	r1, [r5, #0]
     MPPT_num++;
 8001afa:	f89c 1000 	ldrb.w	r1, [ip]
 8001afe:	3101      	adds	r1, #1
 8001b00:	b2c9      	uxtb	r1, r1
 8001b02:	f88c 1000 	strb.w	r1, [ip]
     PV_Current=(s16)PVcurrentFiltered;
 8001b06:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 8001bd0 <ExecControl+0x670>
 8001b0a:	f8bc c000 	ldrh.w	ip, [ip]
 8001b0e:	f8aa c000 	strh.w	ip, [sl]
     if(MPPT_num==5) Vacprot=TRUE;
 8001b12:	2905      	cmp	r1, #5
     mppt_req=0;
 8001b14:	f04f 0c00 	mov.w	ip, #0
 8001b18:	f883 c000 	strb.w	ip, [r3]
     if(MPPT_num==5) Vacprot=TRUE;
 8001b1c:	bf08      	it	eq
 8001b1e:	4b2a      	ldreq	r3, [pc, #168]	; (8001bc8 <ExecControl+0x668>)
     count_mppt=0;
 8001b20:	f8a0 c000 	strh.w	ip, [r0]
     if(MPPT_num==5) Vacprot=TRUE;
 8001b24:	bf08      	it	eq
 8001b26:	701a      	strbeq	r2, [r3, #0]
 8001b28:	e580      	b.n	800162c <ExecControl+0xcc>
     if (BusFiltered < 5500 && MPPT_EN==TRUE) //nowe nastawy 340V
 8001b2a:	f241 527b 	movw	r2, #5499	; 0x157b
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	dca7      	bgt.n	8001a82 <ExecControl+0x522>
 8001b32:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <ExecControl+0x640>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0a3      	beq.n	8001a82 <ExecControl+0x522>
         Fault = BUS_UNDERVOLTAGE;
 8001b3a:	491b      	ldr	r1, [pc, #108]	; (8001ba8 <ExecControl+0x648>)
         Diagnostic_Control=BUS_UNDERVOLTAGE;
 8001b3c:	4a1b      	ldr	r2, [pc, #108]	; (8001bac <ExecControl+0x64c>)
         Fault = BUS_UNDERVOLTAGE;
 8001b3e:	2311      	movs	r3, #17
         State_Control = STOP_WITH_DELAY;
 8001b40:	2016      	movs	r0, #22
         Fault = BUS_UNDERVOLTAGE;
 8001b42:	800b      	strh	r3, [r1, #0]
         State_Control = STOP_WITH_DELAY;
 8001b44:	7020      	strb	r0, [r4, #0]
         Diagnostic_Control=BUS_UNDERVOLTAGE;
 8001b46:	7013      	strb	r3, [r2, #0]
 8001b48:	e79b      	b.n	8001a82 <ExecControl+0x522>
      else waiting_output_current_limit=waiting_output_current_limit+3;
 8001b4a:	3303      	adds	r3, #3
 8001b4c:	8013      	strh	r3, [r2, #0]
 8001b4e:	e554      	b.n	80015fa <ExecControl+0x9a>
 8001b50:	851eb852 	.word	0x851eb852
 8001b54:	3ff051eb 	.word	0x3ff051eb
 8001b58:	f5c28f5c 	.word	0xf5c28f5c
 8001b5c:	3fef5c28 	.word	0x3fef5c28
 8001b60:	200001c0 	.word	0x200001c0
 8001b64:	0001954f 	.word	0x0001954f
 8001b68:	200001c4 	.word	0x200001c4
 8001b6c:	000222e0 	.word	0x000222e0
 8001b70:	20000000 	.word	0x20000000
 8001b74:	2000006c 	.word	0x2000006c
 8001b78:	20000008 	.word	0x20000008
 8001b7c:	200041ca 	.word	0x200041ca
 8001b80:	000249ef 	.word	0x000249ef
 8001b84:	20004e22 	.word	0x20004e22
 8001b88:	20004e26 	.word	0x20004e26
 8001b8c:	40010000 	.word	0x40010000
 8001b90:	40012c00 	.word	0x40012c00
 8001b94:	48000c00 	.word	0x48000c00
 8001b98:	200041dc 	.word	0x200041dc
 8001b9c:	200001c8 	.word	0x200001c8
 8001ba0:	20000173 	.word	0x20000173
 8001ba4:	20000078 	.word	0x20000078
 8001ba8:	20000168 	.word	0x20000168
 8001bac:	20000158 	.word	0x20000158
 8001bb0:	20000182 	.word	0x20000182
 8001bb4:	20000012 	.word	0x20000012
 8001bb8:	20000013 	.word	0x20000013
 8001bbc:	200041d2 	.word	0x200041d2
 8001bc0:	200041ce 	.word	0x200041ce
 8001bc4:	20000192 	.word	0x20000192
 8001bc8:	200001b8 	.word	0x200001b8
 8001bcc:	20000180 	.word	0x20000180
 8001bd0:	20000190 	.word	0x20000190
      if(Diagnostic_Control==BUS_UNDERVOLTAGE)
 8001bd4:	2b11      	cmp	r3, #17
 8001bd6:	f43f ae02 	beq.w	80017de <ExecControl+0x27e>
      if(Diagnostic_Control==GRID_VOLTAGE_OUT_OF_RANGE)
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	f43f adff 	beq.w	80017de <ExecControl+0x27e>
      if(Diagnostic_Control==FREQ_OUT_OF_RANGE)
 8001be0:	2b06      	cmp	r3, #6
 8001be2:	f43f adfc 	beq.w	80017de <ExecControl+0x27e>
      if(Diagnostic_Control==OUT_CURRENT_LIMIT)
 8001be6:	2b0d      	cmp	r3, #13
 8001be8:	f43f adf9 	beq.w	80017de <ExecControl+0x27e>
      if(Diagnostic_Control==PV_VOLTAGE_DVDT)
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	f43f adf6 	beq.w	80017de <ExecControl+0x27e>
 8001bf2:	e5f5      	b.n	80017e0 <ExecControl+0x280>
        Wait_BUS_DC_Reading =0;
 8001bf4:	2000      	movs	r0, #0
        Freq_Control= FREQ_OUT_OF_RANGE;
 8001bf6:	491b      	ldr	r1, [pc, #108]	; (8001c64 <ExecControl+0x704>)
        GDVoltage = GRID_VOLTAGE_OUT_OF_RANGE;
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <ExecControl+0x708>)
        Wait_BUS_DC_Reading =0;
 8001bfa:	6010      	str	r0, [r2, #0]
        State_Control=DIAGNOSTIC_AC_LINE;
 8001bfc:	f04f 0905 	mov.w	r9, #5
        Freq_Control= FREQ_OUT_OF_RANGE;
 8001c00:	2006      	movs	r0, #6
        GDVoltage = GRID_VOLTAGE_OUT_OF_RANGE;
 8001c02:	2208      	movs	r2, #8
        Freq_Control= FREQ_OUT_OF_RANGE;
 8001c04:	7008      	strb	r0, [r1, #0]
        GDVoltage = GRID_VOLTAGE_OUT_OF_RANGE;
 8001c06:	701a      	strb	r2, [r3, #0]
        State_Control=DIAGNOSTIC_AC_LINE;
 8001c08:	f884 9000 	strb.w	r9, [r4]
    CalcAndSetACComponents(State_Control);
 8001c0c:	e5d1      	b.n	80017b2 <ExecControl+0x252>
          DCDC_SendCommand(DCDC_ConverterStart);
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f000 f8e8 	bl	8001de4 <DCDC_SendCommand>
 8001c14:	4d15      	ldr	r5, [pc, #84]	; (8001c6c <ExecControl+0x70c>)
    CalcAndSetACComponents(State_Control);
 8001c16:	f894 9000 	ldrb.w	r9, [r4]
 8001c1a:	e694      	b.n	8001946 <ExecControl+0x3e6>
        DCDC_SendCommand(DCDC_ConverterStart);
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f000 f8e1 	bl	8001de4 <DCDC_SendCommand>
 8001c22:	e6d5      	b.n	80019d0 <ExecControl+0x470>
        DCDC_SendCommand(DCDC_ConverterStop);
 8001c24:	2001      	movs	r0, #1
 8001c26:	f000 f8dd 	bl	8001de4 <DCDC_SendCommand>
    if ((Bus_Voltage < DC_BUS_VOLTAGE_MIN))
 8001c2a:	f9b9 0000 	ldrsh.w	r0, [r9]
 8001c2e:	f7fe fd6f 	bl	8000710 <__aeabi_i2d>
 8001c32:	f9b8 6000 	ldrsh.w	r6, [r8]
 8001c36:	4682      	mov	sl, r0
 8001c38:	468b      	mov	fp, r1
 8001c3a:	e6bc      	b.n	80019b6 <ExecControl+0x456>
        bus_pre_charge=0;
 8001c3c:	4d0b      	ldr	r5, [pc, #44]	; (8001c6c <ExecControl+0x70c>)
        DCDC_SendCommand(DCDC_ConverterStop);
 8001c3e:	2001      	movs	r0, #1
 8001c40:	f000 f8d0 	bl	8001de4 <DCDC_SendCommand>
        bus_pre_charge=0;
 8001c44:	2200      	movs	r2, #0
        PRECHARGE_OK = TRUE;
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <ExecControl+0x710>)
        bus_pre_charge=0;
 8001c48:	802a      	strh	r2, [r5, #0]
        State_Control =START;
 8001c4a:	f04f 0912 	mov.w	r9, #18
        PRECHARGE_OK = TRUE;
 8001c4e:	2201      	movs	r2, #1
 8001c50:	701a      	strb	r2, [r3, #0]
        State_Control =START;
 8001c52:	f884 9000 	strb.w	r9, [r4]
 8001c56:	e676      	b.n	8001946 <ExecControl+0x3e6>
     PLL_par_red_ki=TRUE;
 8001c58:	4906      	ldr	r1, [pc, #24]	; (8001c74 <ExecControl+0x714>)
     waiting_time=0;
 8001c5a:	8002      	strh	r2, [r0, #0]
     PLL_par_red_kp=TRUE;
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	701a      	strb	r2, [r3, #0]
     PLL_par_red_ki=TRUE;
 8001c60:	700a      	strb	r2, [r1, #0]
     waiting_time=0;
 8001c62:	e4e3      	b.n	800162c <ExecControl+0xcc>
 8001c64:	20000012 	.word	0x20000012
 8001c68:	20000013 	.word	0x20000013
 8001c6c:	200041ca 	.word	0x200041ca
 8001c70:	20000189 	.word	0x20000189
 8001c74:	20000186 	.word	0x20000186

08001c78 <DCAC_Init>:
{
    DCAC_Error_t nRet;

    nRet = DCAC_ERROR_INVALID_PARAMETER;

    if (pDCACInit)
 8001c78:	b1e0      	cbz	r0, 8001cb4 <DCAC_Init+0x3c>
    {
        nRet = DCAC_ERROR_ON_INIT;
        if (LocalDevice.State != DCAC_Running)
 8001c7a:	4a0f      	ldr	r2, [pc, #60]	; (8001cb8 <DCAC_Init+0x40>)
 8001c7c:	7a13      	ldrb	r3, [r2, #8]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d016      	beq.n	8001cb0 <DCAC_Init+0x38>
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
//  TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
  TIM_OC3Init(TIM8, &TIM_OCInitStructure);
*/

	  TIM20->CCER |= TIM_CCER_CC2E; ////ENABLE CHANNEL 2
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <DCAC_Init+0x44>)
            LocalDevice.Init.Counter  = pDCACInit->Counter;
 8001c84:	6801      	ldr	r1, [r0, #0]
{
 8001c86:	b410      	push	{r4}
            LocalDevice.Init.Counter  = pDCACInit->Counter;
 8001c88:	6011      	str	r1, [r2, #0]
	  TIM20->CCER |= TIM_CCER_CC2E; ////ENABLE CHANNEL 2
 8001c8a:	6a19      	ldr	r1, [r3, #32]
            LocalDevice.Init.DeadTime = pDCACInit->DeadTime;
 8001c8c:	6844      	ldr	r4, [r0, #4]
	  TIM20->CCER |= TIM_CCER_CC2E; ////ENABLE CHANNEL 2
 8001c8e:	f041 0110 	orr.w	r1, r1, #16
 8001c92:	6219      	str	r1, [r3, #32]
	  TIM20->CCER |= TIM_CCER_CC2NE; ////ENABLE CHANNEL 2N
 8001c94:	6a19      	ldr	r1, [r3, #32]
 8001c96:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001c9a:	6219      	str	r1, [r3, #32]
	  TIM20->CR1  |= (TIM_CR1_ARPE | TIM_CR1_CEN); // ENABLE AUTORELOAD PRELOAD AND TIMER COUNTER
 8001c9c:	6819      	ldr	r1, [r3, #0]
            LocalDevice.Init.DeadTime = pDCACInit->DeadTime;
 8001c9e:	6054      	str	r4, [r2, #4]
            LocalDevice.State = DCAC_Stopped;
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	7210      	strb	r0, [r2, #8]
	  TIM20->CR1  |= (TIM_CR1_ARPE | TIM_CR1_CEN); // ENABLE AUTORELOAD PRELOAD AND TIMER COUNTER
 8001ca4:	f041 0181 	orr.w	r1, r1, #129	; 0x81
}
 8001ca8:	f85d 4b04 	ldr.w	r4, [sp], #4
	  TIM20->CR1  |= (TIM_CR1_ARPE | TIM_CR1_CEN); // ENABLE AUTORELOAD PRELOAD AND TIMER COUNTER
 8001cac:	6019      	str	r1, [r3, #0]
}
 8001cae:	4770      	bx	lr
        nRet = DCAC_ERROR_ON_INIT;
 8001cb0:	2002      	movs	r0, #2
}
 8001cb2:	4770      	bx	lr
    nRet = DCAC_ERROR_INVALID_PARAMETER;
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	4770      	bx	lr
 8001cb8:	200041ec 	.word	0x200041ec
 8001cbc:	40015000 	.word	0x40015000

08001cc0 <DCAC_SendCommand>:
    if (cmd == DCAC_Start)
 8001cc0:	bb08      	cbnz	r0, 8001d06 <DCAC_SendCommand+0x46>
    return LocalDevice.State;
 8001cc2:	4923      	ldr	r1, [pc, #140]	; (8001d50 <DCAC_SendCommand+0x90>)
       if (DCAC_GetStatus() != DCAC_Running)
 8001cc4:	7a0b      	ldrb	r3, [r1, #8]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d040      	beq.n	8001d4c <DCAC_SendCommand+0x8c>
           HRTIM1_COMMON->OENR |=HRTIM_OENR_TD2OEN; //TIMD OUTPUT 2 ENABLE
 8001cca:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <DCAC_SendCommand+0x94>)
 8001ccc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
           LocalDevice.State = DCAC_Running;
 8001cd0:	f04f 0c01 	mov.w	ip, #1
           HRTIM1_COMMON->OENR |=HRTIM_OENR_TD2OEN; //TIMD OUTPUT 2 ENABLE
 8001cd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
           LocalDevice.State = DCAC_Running;
 8001cd8:	f881 c008 	strb.w	ip, [r1, #8]
           HRTIM1_COMMON->OENR |=HRTIM_OENR_TD2OEN; //TIMD OUTPUT 2 ENABLE
 8001cdc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
           HRTIM1_COMMON->OENR |=HRTIM_OENR_TD1OEN; //TIMD OUTPUT 1 ENABLE
 8001ce0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001ce4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ce8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
           HRTIM1_COMMON->OENR |=HRTIM_OENR_TF2OEN; //TIMF OUTPUT 2 ENABLE
 8001cec:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001cf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cf4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
           HRTIM1_COMMON->OENR |=HRTIM_OENR_TF1OEN; //TIMF OUTPUT 1 ENABLE
 8001cf8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001cfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d00:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
          nRet = DCAC_ERROR_NONE;
 8001d04:	4770      	bx	lr
    if (cmd == DCAC_Stop)
 8001d06:	2801      	cmp	r0, #1
 8001d08:	d001      	beq.n	8001d0e <DCAC_SendCommand+0x4e>
    nRet = DCAC_ERROR_INVALID_COMMAND;
 8001d0a:	2003      	movs	r0, #3
 8001d0c:	4770      	bx	lr
    return LocalDevice.State;
 8001d0e:	4a10      	ldr	r2, [pc, #64]	; (8001d50 <DCAC_SendCommand+0x90>)
       if (DCAC_GetStatus() != DCAC_Stopped)
 8001d10:	7a13      	ldrb	r3, [r2, #8]
 8001d12:	b1db      	cbz	r3, 8001d4c <DCAC_SendCommand+0x8c>
           HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TD1ODIS; //TIMD OUTPUT 1 DISABLE
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <DCAC_SendCommand+0x94>)
 8001d16:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
           LocalDevice.State = DCAC_Stopped;
 8001d1a:	2000      	movs	r0, #0
           HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TD1ODIS; //TIMD OUTPUT 1 DISABLE
 8001d1c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
           LocalDevice.State = DCAC_Stopped;
 8001d20:	7210      	strb	r0, [r2, #8]
           HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TD1ODIS; //TIMD OUTPUT 1 DISABLE
 8001d22:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
           HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TD2ODIS; //TIMD OUTPUT 2 DISABLE
 8001d26:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001d2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d2e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
           HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TF1ODIS; //TIMF OUTPUT 1 DISABLE
 8001d32:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001d36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d3a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
           HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TF2ODIS; //TIMF OUTPUT 2 DISABLE
 8001d3e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d46:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
          nRet = DCAC_ERROR_NONE;
 8001d4a:	4770      	bx	lr
       nRet = DCAC_ERROR_ON_SEND_COMMAND;
 8001d4c:	2004      	movs	r0, #4
}
 8001d4e:	4770      	bx	lr
 8001d50:	200041ec 	.word	0x200041ec
 8001d54:	40016b00 	.word	0x40016b00

08001d58 <DCAC_SetPulse>:
      if(PulseChannel1>=DCAC_MAX_PULSE) PulseChannel1=DCAC_MAX_PULSE; //-110
 8001d58:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <DCAC_SetPulse+0x4c>)
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001d60:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
{
 8001d64:	b410      	push	{r4}
       if(iii <= 1000)
 8001d66:	4c10      	ldr	r4, [pc, #64]	; (8001da8 <DCAC_SetPulse+0x50>)
 8001d68:	4281      	cmp	r1, r0
      if(PulseChannel1>=DCAC_MAX_PULSE) PulseChannel1=DCAC_MAX_PULSE; //-110
 8001d6a:	ea4f 0242 	mov.w	r2, r2, lsl #1
       if(iii <= 1000)
 8001d6e:	f8b4 c000 	ldrh.w	ip, [r4]
 8001d72:	bf28      	it	cs
 8001d74:	4601      	movcs	r1, r0
      if(PulseChannel1<=DCAC_MIN_PULSE) PulseChannel1=DCAC_MIN_PULSE;
 8001d76:	428a      	cmp	r2, r1
 8001d78:	4613      	mov	r3, r2
 8001d7a:	bf38      	it	cc
 8001d7c:	460b      	movcc	r3, r1
       if(iii <= 1000)
 8001d7e:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 8001d82:	d805      	bhi.n	8001d90 <DCAC_SetPulse+0x38>
    	   Pulse_Buffer[iii] = PulseChannel1;
 8001d84:	4909      	ldr	r1, [pc, #36]	; (8001dac <DCAC_SetPulse+0x54>)
    	   iii++;
 8001d86:	f10c 0201 	add.w	r2, ip, #1
    	   Pulse_Buffer[iii] = PulseChannel1;
 8001d8a:	f821 301c 	strh.w	r3, [r1, ip, lsl #1]
    	   iii++;
 8001d8e:	8022      	strh	r2, [r4, #0]
      HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP1xR = (uint32_t)(PulseChannel1); //FROM CMP4
 8001d90:	4a07      	ldr	r2, [pc, #28]	; (8001db0 <DCAC_SetPulse+0x58>)
}
 8001d92:	f85d 4b04 	ldr.w	r4, [sp], #4
      HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_F].CMP1xR = (uint32_t)(PulseChannel1); //FROM CMP4
 8001d96:	f8c2 331c 	str.w	r3, [r2, #796]	; 0x31c
}
 8001d9a:	2000      	movs	r0, #0
      HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR = (uint32_t)(PulseChannel1);
 8001d9c:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	200041ec 	.word	0x200041ec
 8001da8:	200049c8 	.word	0x200049c8
 8001dac:	200041f8 	.word	0x200041f8
 8001db0:	40016800 	.word	0x40016800

08001db4 <DCAC_GetStatus>:
    return LocalDevice.State;
 8001db4:	4b01      	ldr	r3, [pc, #4]	; (8001dbc <DCAC_GetStatus+0x8>)
}
 8001db6:	7a18      	ldrb	r0, [r3, #8]
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	200041ec 	.word	0x200041ec

08001dc0 <HRTIM_TIMD_DMA_START>:
* Return         :
*******************************************************************************/
void HRTIM_TIMD_DMA_START()
{
	//HAL_HRTIM_SimplePWMStart_DMA(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, (uint32_t)&TIMD_DMA_Buffer[0], (uint32_t)&(HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].PERxR), 1);
	HAL_HRTIM_WaveformCountStart_DMA(&hhrtim1, HRTIM_TIMERID_TIMER_D);
 8001dc0:	4802      	ldr	r0, [pc, #8]	; (8001dcc <HRTIM_TIMD_DMA_START+0xc>)
 8001dc2:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8001dc6:	f005 bc87 	b.w	80076d8 <HAL_HRTIM_WaveformCountStart_DMA>
 8001dca:	bf00      	nop
 8001dcc:	20009118 	.word	0x20009118

08001dd0 <HRTIM_TIMD_DMA_STOP>:
}

void HRTIM_TIMD_DMA_STOP()
{
	//HAL_HRTIM_SimplePWMStop(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1);
}
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop

08001dd4 <HRTIM_TIMF_DMA_START>:

void HRTIM_TIMF_DMA_START()
{
	//HAL_HRTIM_SimplePWMStart_DMA(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF1, (uint32_t)&TIMF_DMA_Buffer[0], (uint32_t)&(HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR), 1);
	HAL_HRTIM_WaveformCountStart_DMA(&hhrtim1, HRTIM_TIMERID_TIMER_F);
 8001dd4:	4802      	ldr	r0, [pc, #8]	; (8001de0 <HRTIM_TIMF_DMA_START+0xc>)
 8001dd6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001dda:	f005 bc7d 	b.w	80076d8 <HAL_HRTIM_WaveformCountStart_DMA>
 8001dde:	bf00      	nop
 8001de0:	20009118 	.word	0x20009118

08001de4 <DCDC_SendCommand>:
{
    DCDC_Error_t nRet;

    nRet = DCDC_ERROR_INVALID_COMMAND;

    if (cmd == DCDC_ConverterStart)
 8001de4:	bb60      	cbnz	r0, 8001e40 <DCDC_SendCommand+0x5c>
* Input          : NONE
* Return         : Actual State of the device
*******************************************************************************/
DCDC_Status_t DCDC_GetStatus()
{
    return LocalDevice.State;
 8001de6:	4a2d      	ldr	r2, [pc, #180]	; (8001e9c <DCDC_SendCommand+0xb8>)
       if (DCDC_GetStatus() != DCDC_Running || (HRTIM1_COMMON->ODSR & HRTIM_ODSR_TA1ODS) || (HRTIM1_COMMON->ODSR & HRTIM_ODSR_TB1ODS))
 8001de8:	7d13      	ldrb	r3, [r2, #20]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d04b      	beq.n	8001e86 <DCDC_SendCommand+0xa2>
       	  uint32_t isrflags = HRTIM1->sCommonRegs.ISR;
 8001dee:	4b2c      	ldr	r3, [pc, #176]	; (8001ea0 <DCDC_SendCommand+0xbc>)
 8001df0:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
           LocalDevice.State = DCDC_Running;
 8001df4:	2001      	movs	r0, #1
 8001df6:	7510      	strb	r0, [r2, #20]
       	  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8001df8:	0709      	lsls	r1, r1, #28
       	  uint32_t ierits   = HRTIM1->sCommonRegs.IER;
 8001dfa:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
       	  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8001dfe:	d504      	bpl.n	8001e0a <DCDC_SendCommand+0x26>
       	    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8001e00:	0712      	lsls	r2, r2, #28
       	    	HRTIM1->sCommonRegs.ICR = HRTIM_ICR_FLT4C;
 8001e02:	bf44      	itt	mi
 8001e04:	2208      	movmi	r2, #8
 8001e06:	f8c3 238c 	strmi.w	r2, [r3, #908]	; 0x38c
            HRTIM1_COMMON->OENR |=HRTIM_OENR_TA1OEN; //TIMA OUTPUT 1 ENABLE
 8001e0a:	4b26      	ldr	r3, [pc, #152]	; (8001ea4 <DCDC_SendCommand+0xc0>)
 8001e0c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001e10:	f042 0201 	orr.w	r2, r2, #1
 8001e14:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            HRTIM1_COMMON->OENR |=HRTIM_OENR_TA2OEN; //TIMA OUTPUT 2 ENABLE
 8001e18:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001e1c:	f042 0202 	orr.w	r2, r2, #2
 8001e20:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            HRTIM1_COMMON->OENR |=HRTIM_OENR_TB1OEN; //TIMB OUTPUT 1 ENABLE
 8001e24:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001e28:	f042 0204 	orr.w	r2, r2, #4
 8001e2c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            HRTIM1_COMMON->OENR |=HRTIM_OENR_TB2OEN; //TIMB OUTPUT 2 ENABLE
 8001e30:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001e34:	f042 0208 	orr.w	r2, r2, #8
            nRet = DCDC_ERROR_NONE;
 8001e38:	2000      	movs	r0, #0
            HRTIM1_COMMON->OENR |=HRTIM_OENR_TB2OEN; //TIMB OUTPUT 2 ENABLE
 8001e3a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            nRet = DCDC_ERROR_NONE;
 8001e3e:	4770      	bx	lr
    if (cmd == DCDC_ConverterStop)
 8001e40:	2801      	cmp	r0, #1
 8001e42:	d11e      	bne.n	8001e82 <DCDC_SendCommand+0x9e>
    return LocalDevice.State;
 8001e44:	4a15      	ldr	r2, [pc, #84]	; (8001e9c <DCDC_SendCommand+0xb8>)
       if (DCDC_GetStatus() != DCDC_Stopped)
 8001e46:	7d13      	ldrb	r3, [r2, #20]
 8001e48:	b333      	cbz	r3, 8001e98 <DCDC_SendCommand+0xb4>
         HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TA1ODIS; //TIMA OUTPUT 1 DISABLE
 8001e4a:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <DCDC_SendCommand+0xc0>)
 8001e4c:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
         LocalDevice.State = DCDC_Stopped;
 8001e50:	2000      	movs	r0, #0
         HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TA1ODIS; //TIMA OUTPUT 1 DISABLE
 8001e52:	f041 0101 	orr.w	r1, r1, #1
         LocalDevice.State = DCDC_Stopped;
 8001e56:	7510      	strb	r0, [r2, #20]
         HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TA1ODIS; //TIMA OUTPUT 1 DISABLE
 8001e58:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
         HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TA2ODIS; //TIMA OUTPUT 2 DISABLE
 8001e5c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001e60:	f042 0202 	orr.w	r2, r2, #2
 8001e64:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
         HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TB1ODIS; //TIMB OUTPUT 1 DISABLE
 8001e68:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001e6c:	f042 0204 	orr.w	r2, r2, #4
 8001e70:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
         HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TB2ODIS; //TIMB OUTPUT 2 DISABLE
 8001e74:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001e78:	f042 0208 	orr.w	r2, r2, #8
 8001e7c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
          nRet = DCDC_ERROR_NONE;
 8001e80:	4770      	bx	lr
    nRet = DCDC_ERROR_INVALID_COMMAND;
 8001e82:	2003      	movs	r0, #3
 8001e84:	4770      	bx	lr
       if (DCDC_GetStatus() != DCDC_Running || (HRTIM1_COMMON->ODSR & HRTIM_ODSR_TA1ODS) || (HRTIM1_COMMON->ODSR & HRTIM_ODSR_TB1ODS))
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <DCDC_SendCommand+0xc0>)
 8001e88:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8001e8c:	07c9      	lsls	r1, r1, #31
 8001e8e:	d4ae      	bmi.n	8001dee <DCDC_SendCommand+0xa>
 8001e90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e94:	0758      	lsls	r0, r3, #29
 8001e96:	d4aa      	bmi.n	8001dee <DCDC_SendCommand+0xa>
       nRet = DCDC_ERROR_ON_SEND_COMMAND;
 8001e98:	2004      	movs	r0, #4
}
 8001e9a:	4770      	bx	lr
 8001e9c:	200049cc 	.word	0x200049cc
 8001ea0:	40016800 	.word	0x40016800
 8001ea4:	40016b00 	.word	0x40016b00

08001ea8 <DCDC_GetPeriod>:
* Input          : NONE
* Return         : the period
*******************************************************************************/
u32 DCDC_GetPeriod()
{
    return LocalDevice.Init.Counter;
 8001ea8:	4b01      	ldr	r3, [pc, #4]	; (8001eb0 <DCDC_GetPeriod+0x8>)
}
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	200049cc 	.word	0x200049cc

08001eb4 <DCDC_GetFrequency>:
* Input          : NONE
* Return         : Actual Frequency
*******************************************************************************/
u32 DCDC_GetFrequency()
{
    return LocalDevice.Init.frequency;
 8001eb4:	4b01      	ldr	r3, [pc, #4]	; (8001ebc <DCDC_GetFrequency+0x8>)
}
 8001eb6:	6918      	ldr	r0, [r3, #16]
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	200049cc 	.word	0x200049cc

08001ec0 <DCDC_GetPhaseShift>:
* Input          : NONE
* Return         : Actual Frequency
*******************************************************************************/
u32 DCDC_GetPhaseShift()
{
    return LocalDevice.Init.PhaseShift;
 8001ec0:	4b01      	ldr	r3, [pc, #4]	; (8001ec8 <DCDC_GetPhaseShift+0x8>)
}
 8001ec2:	6858      	ldr	r0, [r3, #4]
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	200049cc 	.word	0x200049cc

08001ecc <DCDC_SetPhaseShift>:
* Input          : dwPhaseShift the new phase shift
* Return         : Error on function 0 no error.
*******************************************************************************/
DCDC_Error_t DCDC_SetPhaseShift(u32 dwPhaseShift)
{
	u32 MAX_PHASE_SHIFT = (LocalDevice.Init.Counter)/2; // 180 DEG
 8001ecc:	4907      	ldr	r1, [pc, #28]	; (8001eec <DCDC_SetPhaseShift+0x20>)
 8001ece:	680a      	ldr	r2, [r1, #0]
 8001ed0:	0853      	lsrs	r3, r2, #1
	u32 MIN_PHASE_SHIFT = (LocalDevice.Init.Counter);  // 0 DEG

    DCDC_Error_t nRet;
    nRet = DCDC_ERROR_ON_SET_PHASESHIFT;
    if (dwPhaseShift >= (MAX_PHASE_SHIFT-1) && dwPhaseShift <= MIN_PHASE_SHIFT)
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	4283      	cmp	r3, r0
 8001ed6:	d806      	bhi.n	8001ee6 <DCDC_SetPhaseShift+0x1a>
 8001ed8:	4282      	cmp	r2, r0
 8001eda:	d304      	bcc.n	8001ee6 <DCDC_SetPhaseShift+0x1a>
        LocalDevice.Init.PhaseShift = dwPhaseShift;
        //TIM_SetCompare1(TIM1, TIM2_MAX_PULSE + TIM2_DEAD_TIME + LocalDevice.Init.PhaseShift);

        //LL_HRTIM_TIM_SetCompare1(HRTIM1, LL_HRTIM_TIMER_MASTER, (uint32_t)(LocalDevice.Init.PhaseShift));

        HRTIM1->sMasterRegs.MCMP1R = (uint32_t)(LocalDevice.Init.PhaseShift);
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <DCDC_SetPhaseShift+0x24>)
        LocalDevice.Init.PhaseShift = dwPhaseShift;
 8001ede:	6048      	str	r0, [r1, #4]
        HRTIM1->sMasterRegs.MCMP1R = (uint32_t)(LocalDevice.Init.PhaseShift);
 8001ee0:	61d8      	str	r0, [r3, #28]
        nRet = DCDC_ERROR_NONE;
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	4770      	bx	lr
    nRet = DCDC_ERROR_ON_SET_PHASESHIFT;
 8001ee6:	2008      	movs	r0, #8
    }
    return nRet;
}
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	200049cc 	.word	0x200049cc
 8001ef0:	40016800 	.word	0x40016800
 8001ef4:	00000000 	.word	0x00000000

08001ef8 <DCDC_SetFrequency>:
* Description    : Set the Frequency for the LLC DCDC converter
* Input          : MPPT new Frequency
* Return         : Error on function 0 no error.
*******************************************************************************/
DCDC_Error_t DCDC_SetFrequency(u32 LLC_frequency)
{
 8001ef8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return LocalDevice.Init.PhaseShift;
 8001efc:	f8df a2a0 	ldr.w	sl, [pc, #672]	; 80021a0 <DCDC_SetFrequency+0x2a8>
    DCDC_Error_t nRet;
    DCDC_TypeDef_t InitStructure;
    nRet = DCDC_ERROR_ON_SET_FREQUENCY;
    frequencyinc = LLC_frequency;
 8001f00:	4a9b      	ldr	r2, [pc, #620]	; (8002170 <DCDC_SetFrequency+0x278>)

   u32 Phase_Period_Ratio = (DCDC_GetPhaseShift() * 0xFFFF) / DCDC_GetPeriod();
 8001f02:	e9da 3400 	ldrd	r3, r4, [sl]
 8001f06:	ebc4 4404 	rsb	r4, r4, r4, lsl #16
 8001f0a:	fbb4 f4f3 	udiv	r4, r4, r3

   if((frequencyinc) <= MIN_FREQ)
 8001f0e:	4b99      	ldr	r3, [pc, #612]	; (8002174 <DCDC_SetFrequency+0x27c>)
 8001f10:	4298      	cmp	r0, r3
{
 8001f12:	ed2d 8b02 	vpush	{d8}
    frequencyinc = LLC_frequency;
 8001f16:	6010      	str	r0, [r2, #0]
   if((frequencyinc) <= MIN_FREQ)
 8001f18:	f240 80d7 	bls.w	80020ca <DCDC_SetFrequency+0x1d2>
                                 + HRTIM_CR2_TBSWU;

        nRet = DCDC_ERROR_NONE;

    }
  else if((frequencyinc) >= MAX_FREQ)
 8001f1c:	4b96      	ldr	r3, [pc, #600]	; (8002178 <DCDC_SetFrequency+0x280>)
 8001f1e:	4298      	cmp	r0, r3
 8001f20:	4605      	mov	r5, r0
 8001f22:	d940      	bls.n	8001fa6 <DCDC_SetFrequency+0xae>
    {
	    NEW_DCDC_PERIOD = ((uint16_t)(((uint64_t)HRTIM_INPUT_CLOCK * HRTIMER_LLC_PRESCALER) / MAX_FREQ));
 8001f24:	4a95      	ldr	r2, [pc, #596]	; (800217c <DCDC_SetFrequency+0x284>)
		//LL_TIM_OC_SetCompareCH3(TIM8, (NEW_isoDCDC_PERDIOD)*0.5);

	    HRTIM1->sMasterRegs.MPER = (uint32_t)(NEW_DCDC_PERIOD);
	    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].PERxR = (uint32_t)(NEW_DCDC_PERIOD);
	    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].PERxR = (uint32_t)(NEW_DCDC_PERIOD);
	    TIM8->ARR = (uint32_t)NEW_isoDCDC_PERDIOD;
 8001f26:	4896      	ldr	r0, [pc, #600]	; (8002180 <DCDC_SetFrequency+0x288>)
	    NEW_isoDCDC_PERDIOD = ((uint16_t)((uint64_t)TIM8_INPUT_CLOCK / (MAX_FREQ)));
 8001f28:	4e96      	ldr	r6, [pc, #600]	; (8002184 <DCDC_SetFrequency+0x28c>)
	    NEW_DCDC_PERIOD = ((uint16_t)(((uint64_t)HRTIM_INPUT_CLOCK * HRTIMER_LLC_PRESCALER) / MAX_FREQ));
 8001f2a:	f644 33e4 	movw	r3, #19428	; 0x4be4
 8001f2e:	6013      	str	r3, [r2, #0]
	    HRTIM1->sMasterRegs.MCMP3R = (uint32_t)(NEW_DCDC_PERIOD * MASTER_DUTY_CYCLE * ADC1_TRIG_DUTY_CYCLE);

        LocalDevice.Init.frequency=MAX_FREQ;
        LocalDevice.Init.Counter = NEW_DCDC_PERIOD;

        DCDC_SetPhaseShift((Phase_Period_Ratio * DCDC_GetPeriod())/0xFFFF);
 8001f30:	4a95      	ldr	r2, [pc, #596]	; (8002188 <DCDC_SetFrequency+0x290>)
 8001f32:	fb03 f404 	mul.w	r4, r3, r4
 8001f36:	fba2 2404 	umull	r2, r4, r2, r4
	    HRTIM1->sMasterRegs.MPER = (uint32_t)(NEW_DCDC_PERIOD);
 8001f3a:	4a94      	ldr	r2, [pc, #592]	; (800218c <DCDC_SetFrequency+0x294>)
	    NEW_isoDCDC_PERDIOD = ((uint16_t)((uint64_t)TIM8_INPUT_CLOCK / (MAX_FREQ)));
 8001f3c:	f240 255f 	movw	r5, #607	; 0x25f
 8001f40:	6035      	str	r5, [r6, #0]
	    HRTIM1->sMasterRegs.MPER = (uint32_t)(NEW_DCDC_PERIOD);
 8001f42:	6153      	str	r3, [r2, #20]
	    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].PERxR = (uint32_t)(NEW_DCDC_PERIOD);
 8001f44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].PERxR = (uint32_t)(NEW_DCDC_PERIOD);
 8001f48:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	    TIM8->ARR = (uint32_t)NEW_isoDCDC_PERDIOD;
 8001f4c:	62c5      	str	r5, [r0, #44]	; 0x2c
        LocalDevice.Init.frequency=MAX_FREQ;
 8001f4e:	4d90      	ldr	r5, [pc, #576]	; (8002190 <DCDC_SetFrequency+0x298>)
 8001f50:	f8ca 5010 	str.w	r5, [sl, #16]
	    TIM8->CCR3 = (uint32_t)NEW_isoDCDC_PERDIOD/2;
 8001f54:	f240 152f 	movw	r5, #303	; 0x12f
 8001f58:	63c5      	str	r5, [r0, #60]	; 0x3c
        DCDC_SetPhaseShift((Phase_Period_Ratio * DCDC_GetPeriod())/0xFFFF);
 8001f5a:	0be4      	lsrs	r4, r4, #15
	    HRTIM1->sMasterRegs.MCMP2R = (uint32_t)(NEW_DCDC_PERIOD * MASTER_DUTY_CYCLE * (1 + ADC1_TRIG_DUTY_CYCLE));
 8001f5c:	f642 30a3 	movw	r0, #11171	; 0x2ba3
 8001f60:	6250      	str	r0, [r2, #36]	; 0x24
    if (dwPhaseShift >= (MAX_PHASE_SHIFT-1) && dwPhaseShift <= MIN_PHASE_SHIFT)
 8001f62:	f5a4 5117 	sub.w	r1, r4, #9664	; 0x25c0
	    HRTIM1->sMasterRegs.MCMP3R = (uint32_t)(NEW_DCDC_PERIOD * MASTER_DUTY_CYCLE * ADC1_TRIG_DUTY_CYCLE);
 8001f66:	f240 50b1 	movw	r0, #1457	; 0x5b1
 8001f6a:	6290      	str	r0, [r2, #40]	; 0x28
    if (dwPhaseShift >= (MAX_PHASE_SHIFT-1) && dwPhaseShift <= MIN_PHASE_SHIFT)
 8001f6c:	3931      	subs	r1, #49	; 0x31
        LocalDevice.Init.Counter = NEW_DCDC_PERIOD;
 8001f6e:	f8ca 3000 	str.w	r3, [sl]
    if (dwPhaseShift >= (MAX_PHASE_SHIFT-1) && dwPhaseShift <= MIN_PHASE_SHIFT)
 8001f72:	f242 53f3 	movw	r3, #9715	; 0x25f3
 8001f76:	4299      	cmp	r1, r3
        LocalDevice.Init.PhaseShift = dwPhaseShift;
 8001f78:	bf98      	it	ls
 8001f7a:	f8ca 4004 	strls.w	r4, [sl, #4]
    dutyadj = dutycycle;
 8001f7e:	4b85      	ldr	r3, [pc, #532]	; (8002194 <DCDC_SetFrequency+0x29c>)
        HRTIM1->sMasterRegs.MCMP1R = (uint32_t)(LocalDevice.Init.PhaseShift);
 8001f80:	bf98      	it	ls
 8001f82:	61d4      	strls	r4, [r2, #28]

        DCDC_SetDutyCycle(NEW_DCDC_PERIOD/2); // FIXED 50% - TODO

        /*  update from shadow register */
        HRTIM1->sCommonRegs.CR2 |= HRTIM_CR2_TASWU
 8001f84:	4a81      	ldr	r2, [pc, #516]	; (800218c <DCDC_SetFrequency+0x294>)
    dutyadj = dutycycle;
 8001f86:	f242 51f2 	movw	r1, #9714	; 0x25f2

    }
     /*DCDC Converter configuration */

    return nRet;
}
 8001f8a:	ecbd 8b02 	vpop	{d8}
    dutyadj = dutycycle;
 8001f8e:	6019      	str	r1, [r3, #0]
        HRTIM1->sCommonRegs.CR2 |= HRTIM_CR2_TASWU
 8001f90:	f8d2 3384 	ldr.w	r3, [r2, #900]	; 0x384
        LocalDevice.Init.DutyCycle=dutyadj;
 8001f94:	f8ca 100c 	str.w	r1, [sl, #12]
        HRTIM1->sCommonRegs.CR2 |= HRTIM_CR2_TASWU
 8001f98:	f043 0306 	orr.w	r3, r3, #6
}
 8001f9c:	2000      	movs	r0, #0
        HRTIM1->sCommonRegs.CR2 |= HRTIM_CR2_TASWU
 8001f9e:	f8c2 3384 	str.w	r3, [r2, #900]	; 0x384
}
 8001fa2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    NEW_DCDC_PERIOD = ((uint16_t)(((uint64_t)HRTIM_INPUT_CLOCK * HRTIMER_LLC_PRESCALER) / frequencyinc));
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	2300      	movs	r3, #0
 8001faa:	a167      	add	r1, pc, #412	; (adr r1, 8002148 <DCDC_SetFrequency+0x250>)
 8001fac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001fb0:	f7fe fce8 	bl	8000984 <__aeabi_uldivmod>
	    HRTIM1->sMasterRegs.MPER = (uint32_t)(NEW_DCDC_PERIOD);
 8001fb4:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 800218c <DCDC_SetFrequency+0x294>
	    TIM8->ARR = (uint32_t)NEW_isoDCDC_PERDIOD;
 8001fb8:	4a71      	ldr	r2, [pc, #452]	; (8002180 <DCDC_SetFrequency+0x288>)
	    NEW_DCDC_PERIOD = ((uint16_t)(((uint64_t)HRTIM_INPUT_CLOCK * HRTIMER_LLC_PRESCALER) / frequencyinc));
 8001fba:	4b70      	ldr	r3, [pc, #448]	; (800217c <DCDC_SetFrequency+0x284>)
	    NEW_isoDCDC_PERDIOD = ((uint16_t)((uint64_t)TIM8_INPUT_CLOCK / (frequencyinc)));
 8001fbc:	4971      	ldr	r1, [pc, #452]	; (8002184 <DCDC_SetFrequency+0x28c>)
	    NEW_DCDC_PERIOD = ((uint16_t)(((uint64_t)HRTIM_INPUT_CLOCK * HRTIMER_LLC_PRESCALER) / frequencyinc));
 8001fbe:	fa1f f880 	uxth.w	r8, r0
 8001fc2:	f8c3 8000 	str.w	r8, [r3]
	    NEW_isoDCDC_PERDIOD = ((uint16_t)((uint64_t)TIM8_INPUT_CLOCK / (frequencyinc)));
 8001fc6:	4b74      	ldr	r3, [pc, #464]	; (8002198 <DCDC_SetFrequency+0x2a0>)
 8001fc8:	fbb3 f3f5 	udiv	r3, r3, r5
 8001fcc:	600b      	str	r3, [r1, #0]
	    HRTIM1->sMasterRegs.MPER = (uint32_t)(NEW_DCDC_PERIOD);
 8001fce:	f8c9 8014 	str.w	r8, [r9, #20]
	    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].PERxR = (uint32_t)(NEW_DCDC_PERIOD);
 8001fd2:	f8c9 8094 	str.w	r8, [r9, #148]	; 0x94
	    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].PERxR = (uint32_t)(NEW_DCDC_PERIOD);
 8001fd6:	f8c9 8114 	str.w	r8, [r9, #276]	; 0x114
	    TIM8->ARR = (uint32_t)NEW_isoDCDC_PERDIOD;
 8001fda:	62d3      	str	r3, [r2, #44]	; 0x2c
	    TIM8->CCR3 = (uint32_t)NEW_isoDCDC_PERDIOD/2;
 8001fdc:	085b      	lsrs	r3, r3, #1
 8001fde:	63d3      	str	r3, [r2, #60]	; 0x3c
	    HRTIM1->sMasterRegs.MCMP2R = (uint32_t)(NEW_DCDC_PERIOD * MASTER_DUTY_CYCLE * (1 + ADC1_TRIG_DUTY_CYCLE));
 8001fe0:	4640      	mov	r0, r8
 8001fe2:	f7fe fb85 	bl	80006f0 <__aeabi_ui2d>
 8001fe6:	4b6d      	ldr	r3, [pc, #436]	; (800219c <DCDC_SetFrequency+0x2a4>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	4606      	mov	r6, r0
 8001fec:	460f      	mov	r7, r1
 8001fee:	f7fe f913 	bl	8000218 <__aeabi_dmul>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	ec43 2b18 	vmov	d8, r2, r3
 8001ffa:	a355      	add	r3, pc, #340	; (adr r3, 8002150 <DCDC_SetFrequency+0x258>)
 8001ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002000:	f7fe f90a 	bl	8000218 <__aeabi_dmul>
 8002004:	f7fe fc9e 	bl	8000944 <__aeabi_d2uiz>
	    HRTIM1->sMasterRegs.MCMP3R = (uint32_t)(NEW_DCDC_PERIOD * MASTER_DUTY_CYCLE * ADC1_TRIG_DUTY_CYCLE);
 8002008:	a353      	add	r3, pc, #332	; (adr r3, 8002158 <DCDC_SetFrequency+0x260>)
 800200a:	e9d3 2300 	ldrd	r2, r3, [r3]
	    HRTIM1->sMasterRegs.MCMP2R = (uint32_t)(NEW_DCDC_PERIOD * MASTER_DUTY_CYCLE * (1 + ADC1_TRIG_DUTY_CYCLE));
 800200e:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
	    HRTIM1->sMasterRegs.MCMP3R = (uint32_t)(NEW_DCDC_PERIOD * MASTER_DUTY_CYCLE * ADC1_TRIG_DUTY_CYCLE);
 8002012:	ec51 0b18 	vmov	r0, r1, d8
 8002016:	f7fe f8ff 	bl	8000218 <__aeabi_dmul>
 800201a:	f7fe fc93 	bl	8000944 <__aeabi_d2uiz>
        DCDC_SetPhaseShift((Phase_Period_Ratio * DCDC_GetPeriod())/0xFFFF);
 800201e:	4b5a      	ldr	r3, [pc, #360]	; (8002188 <DCDC_SetFrequency+0x290>)
        LocalDevice.Init.frequency = frequencyinc;
 8002020:	f8ca 5010 	str.w	r5, [sl, #16]
	u32 MAX_PHASE_SHIFT = (LocalDevice.Init.Counter)/2; // 180 DEG
 8002024:	ea4f 0b58 	mov.w	fp, r8, lsr #1
        DCDC_SetPhaseShift((Phase_Period_Ratio * DCDC_GetPeriod())/0xFFFF);
 8002028:	fb04 f408 	mul.w	r4, r4, r8
 800202c:	fba3 3404 	umull	r3, r4, r3, r4
    if (dwPhaseShift >= (MAX_PHASE_SHIFT-1) && dwPhaseShift <= MIN_PHASE_SHIFT)
 8002030:	f10b 32ff 	add.w	r2, fp, #4294967295
 8002034:	ebb2 3fd4 	cmp.w	r2, r4, lsr #15
	    HRTIM1->sMasterRegs.MCMP3R = (uint32_t)(NEW_DCDC_PERIOD * MASTER_DUTY_CYCLE * ADC1_TRIG_DUTY_CYCLE);
 8002038:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
        DCDC_SetPhaseShift((Phase_Period_Ratio * DCDC_GetPeriod())/0xFFFF);
 800203c:	ea4f 33d4 	mov.w	r3, r4, lsr #15
        LocalDevice.Init.Counter = NEW_DCDC_PERIOD;
 8002040:	f8ca 8000 	str.w	r8, [sl]
    if (dwPhaseShift >= (MAX_PHASE_SHIFT-1) && dwPhaseShift <= MIN_PHASE_SHIFT)
 8002044:	d805      	bhi.n	8002052 <DCDC_SetFrequency+0x15a>
 8002046:	4598      	cmp	r8, r3
        HRTIM1->sMasterRegs.MCMP1R = (uint32_t)(LocalDevice.Init.PhaseShift);
 8002048:	bf24      	itt	cs
 800204a:	f8c9 301c 	strcs.w	r3, [r9, #28]
        LocalDevice.Init.PhaseShift = dwPhaseShift;
 800204e:	f8ca 3004 	strcs.w	r3, [sl, #4]
    dutyadj = dutycycle;
 8002052:	4b50      	ldr	r3, [pc, #320]	; (8002194 <DCDC_SetFrequency+0x29c>)
   if((dutyadj) <= DCDC_GetPeriod()*0.1)
 8002054:	4658      	mov	r0, fp
    dutyadj = dutycycle;
 8002056:	f8c3 b000 	str.w	fp, [r3]
   if((dutyadj) <= DCDC_GetPeriod()*0.1)
 800205a:	f7fe fb49 	bl	80006f0 <__aeabi_ui2d>
 800205e:	a340      	add	r3, pc, #256	; (adr r3, 8002160 <DCDC_SetFrequency+0x268>)
 8002060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002064:	4604      	mov	r4, r0
 8002066:	460d      	mov	r5, r1
 8002068:	4630      	mov	r0, r6
 800206a:	4639      	mov	r1, r7
 800206c:	f7fe f8d4 	bl	8000218 <__aeabi_dmul>
 8002070:	4680      	mov	r8, r0
 8002072:	4689      	mov	r9, r1
 8002074:	4620      	mov	r0, r4
 8002076:	4629      	mov	r1, r5
 8002078:	4642      	mov	r2, r8
 800207a:	464b      	mov	r3, r9
 800207c:	f7fe fc1c 	bl	80008b8 <__aeabi_dcmple>
 8002080:	2800      	cmp	r0, #0
 8002082:	d155      	bne.n	8002130 <DCDC_SetFrequency+0x238>
  else if((dutyadj) >= DCDC_GetPeriod()*0.9)
 8002084:	a338      	add	r3, pc, #224	; (adr r3, 8002168 <DCDC_SetFrequency+0x270>)
 8002086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208a:	4630      	mov	r0, r6
 800208c:	4639      	mov	r1, r7
 800208e:	f7fe f8c3 	bl	8000218 <__aeabi_dmul>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4620      	mov	r0, r4
 8002098:	4629      	mov	r1, r5
 800209a:	4614      	mov	r4, r2
 800209c:	461d      	mov	r5, r3
 800209e:	f7fe fc15 	bl	80008cc <__aeabi_dcmpge>
 80020a2:	2800      	cmp	r0, #0
 80020a4:	d04b      	beq.n	800213e <DCDC_SetFrequency+0x246>
        LocalDevice.Init.DutyCycle = (DCDC_GetPeriod()*0.9);
 80020a6:	4620      	mov	r0, r4
 80020a8:	4629      	mov	r1, r5
 80020aa:	f7fe fc4b 	bl	8000944 <__aeabi_d2uiz>
 80020ae:	f8ca 000c 	str.w	r0, [sl, #12]
        HRTIM1->sCommonRegs.CR2 |= HRTIM_CR2_TASWU
 80020b2:	4a36      	ldr	r2, [pc, #216]	; (800218c <DCDC_SetFrequency+0x294>)
}
 80020b4:	ecbd 8b02 	vpop	{d8}
        HRTIM1->sCommonRegs.CR2 |= HRTIM_CR2_TASWU
 80020b8:	f8d2 3384 	ldr.w	r3, [r2, #900]	; 0x384
 80020bc:	f043 0306 	orr.w	r3, r3, #6
}
 80020c0:	2000      	movs	r0, #0
        HRTIM1->sCommonRegs.CR2 |= HRTIM_CR2_TASWU
 80020c2:	f8c2 3384 	str.w	r3, [r2, #900]	; 0x384
}
 80020c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    NEW_DCDC_PERIOD = ((uint16_t)(((uint64_t)HRTIM_INPUT_CLOCK * HRTIMER_LLC_PRESCALER) / MIN_FREQ));
 80020ca:	492c      	ldr	r1, [pc, #176]	; (800217c <DCDC_SetFrequency+0x284>)
        LocalDevice.Init.frequency = MIN_FREQ;
 80020cc:	f8ca 3010 	str.w	r3, [sl, #16]
	    NEW_isoDCDC_PERDIOD = ((uint16_t)((uint64_t)TIM8_INPUT_CLOCK / (MIN_FREQ)));
 80020d0:	4a2c      	ldr	r2, [pc, #176]	; (8002184 <DCDC_SetFrequency+0x28c>)
        DCDC_SetPhaseShift((Phase_Period_Ratio * DCDC_GetPeriod())/0xFFFF);
 80020d2:	482d      	ldr	r0, [pc, #180]	; (8002188 <DCDC_SetFrequency+0x290>)
	    NEW_DCDC_PERIOD = ((uint16_t)(((uint64_t)HRTIM_INPUT_CLOCK * HRTIMER_LLC_PRESCALER) / MIN_FREQ));
 80020d4:	f642 7392 	movw	r3, #12178	; 0x2f92
 80020d8:	600b      	str	r3, [r1, #0]
        DCDC_SetPhaseShift((Phase_Period_Ratio * DCDC_GetPeriod())/0xFFFF);
 80020da:	fb03 f404 	mul.w	r4, r3, r4
	    NEW_isoDCDC_PERDIOD = ((uint16_t)((uint64_t)TIM8_INPUT_CLOCK / (MIN_FREQ)));
 80020de:	f640 117c 	movw	r1, #2428	; 0x97c
 80020e2:	6011      	str	r1, [r2, #0]
        DCDC_SetPhaseShift((Phase_Period_Ratio * DCDC_GetPeriod())/0xFFFF);
 80020e4:	fba0 0404 	umull	r0, r4, r0, r4
	    HRTIM1->sMasterRegs.MPER = (uint32_t)(NEW_DCDC_PERIOD);
 80020e8:	4a28      	ldr	r2, [pc, #160]	; (800218c <DCDC_SetFrequency+0x294>)
	    TIM8->ARR = (uint32_t)NEW_isoDCDC_PERDIOD;
 80020ea:	4825      	ldr	r0, [pc, #148]	; (8002180 <DCDC_SetFrequency+0x288>)
	    HRTIM1->sMasterRegs.MPER = (uint32_t)(NEW_DCDC_PERIOD);
 80020ec:	6153      	str	r3, [r2, #20]
	    TIM8->CCR3 = (uint32_t)NEW_isoDCDC_PERDIOD/2;
 80020ee:	f240 45be 	movw	r5, #1214	; 0x4be
	    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].PERxR = (uint32_t)(NEW_DCDC_PERIOD);
 80020f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        DCDC_SetPhaseShift((Phase_Period_Ratio * DCDC_GetPeriod())/0xFFFF);
 80020f6:	0be4      	lsrs	r4, r4, #15
	    HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].PERxR = (uint32_t)(NEW_DCDC_PERIOD);
 80020f8:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	    TIM8->ARR = (uint32_t)NEW_isoDCDC_PERDIOD;
 80020fc:	62c1      	str	r1, [r0, #44]	; 0x2c
	    TIM8->CCR3 = (uint32_t)NEW_isoDCDC_PERDIOD/2;
 80020fe:	63c5      	str	r5, [r0, #60]	; 0x3c
	    HRTIM1->sMasterRegs.MCMP2R = (uint32_t)(NEW_DCDC_PERIOD * MASTER_DUTY_CYCLE * (1 + ADC1_TRIG_DUTY_CYCLE));
 8002100:	f641 305a 	movw	r0, #7002	; 0x1b5a
 8002104:	6250      	str	r0, [r2, #36]	; 0x24
    if (dwPhaseShift >= (MAX_PHASE_SHIFT-1) && dwPhaseShift <= MIN_PHASE_SHIFT)
 8002106:	f5a4 51be 	sub.w	r1, r4, #6080	; 0x17c0
	    HRTIM1->sMasterRegs.MCMP3R = (uint32_t)(NEW_DCDC_PERIOD * MASTER_DUTY_CYCLE * ADC1_TRIG_DUTY_CYCLE);
 800210a:	f240 3091 	movw	r0, #913	; 0x391
 800210e:	6290      	str	r0, [r2, #40]	; 0x28
    if (dwPhaseShift >= (MAX_PHASE_SHIFT-1) && dwPhaseShift <= MIN_PHASE_SHIFT)
 8002110:	3908      	subs	r1, #8
        LocalDevice.Init.Counter = NEW_DCDC_PERIOD;
 8002112:	f8ca 3000 	str.w	r3, [sl]
    if (dwPhaseShift >= (MAX_PHASE_SHIFT-1) && dwPhaseShift <= MIN_PHASE_SHIFT)
 8002116:	f241 73ca 	movw	r3, #6090	; 0x17ca
 800211a:	4299      	cmp	r1, r3
        LocalDevice.Init.PhaseShift = dwPhaseShift;
 800211c:	bf98      	it	ls
 800211e:	f8ca 4004 	strls.w	r4, [sl, #4]
    dutyadj = dutycycle;
 8002122:	4b1c      	ldr	r3, [pc, #112]	; (8002194 <DCDC_SetFrequency+0x29c>)
        HRTIM1->sMasterRegs.MCMP1R = (uint32_t)(LocalDevice.Init.PhaseShift);
 8002124:	bf98      	it	ls
 8002126:	61d4      	strls	r4, [r2, #28]
    dutyadj = dutycycle;
 8002128:	f241 71c9 	movw	r1, #6089	; 0x17c9
        HRTIM1->sCommonRegs.CR2 |= HRTIM_CR2_TASWU
 800212c:	4a17      	ldr	r2, [pc, #92]	; (800218c <DCDC_SetFrequency+0x294>)
 800212e:	e72c      	b.n	8001f8a <DCDC_SetFrequency+0x92>
        LocalDevice.Init.DutyCycle = (DCDC_GetPeriod()*0.1);
 8002130:	4640      	mov	r0, r8
 8002132:	4649      	mov	r1, r9
 8002134:	f7fe fc06 	bl	8000944 <__aeabi_d2uiz>
 8002138:	f8ca 000c 	str.w	r0, [sl, #12]
        nRet = DCDC_ERROR_NONE;
 800213c:	e7b9      	b.n	80020b2 <DCDC_SetFrequency+0x1ba>
        LocalDevice.Init.DutyCycle=dutyadj;
 800213e:	f8ca b00c 	str.w	fp, [sl, #12]
        nRet = DCDC_ERROR_NONE;
 8002142:	e7b6      	b.n	80020b2 <DCDC_SetFrequency+0x1ba>
 8002144:	f3af 8000 	nop.w
 8002148:	443fd000 	.word	0x443fd000
 800214c:	00000001 	.word	0x00000001
 8002150:	66666666 	.word	0x66666666
 8002154:	3ff26666 	.word	0x3ff26666
 8002158:	33333333 	.word	0x33333333
 800215c:	3fc33333 	.word	0x3fc33333
 8002160:	9999999a 	.word	0x9999999a
 8002164:	3fb99999 	.word	0x3fb99999
 8002168:	cccccccd 	.word	0xcccccccd
 800216c:	3feccccc 	.word	0x3feccccc
 8002170:	200049f4 	.word	0x200049f4
 8002174:	00011170 	.word	0x00011170
 8002178:	000445bf 	.word	0x000445bf
 800217c:	200049e4 	.word	0x200049e4
 8002180:	40013400 	.word	0x40013400
 8002184:	200049e8 	.word	0x200049e8
 8002188:	80008001 	.word	0x80008001
 800218c:	40016800 	.word	0x40016800
 8002190:	000445c0 	.word	0x000445c0
 8002194:	200049f0 	.word	0x200049f0
 8002198:	0a21fe80 	.word	0x0a21fe80
 800219c:	3fe00000 	.word	0x3fe00000
 80021a0:	200049cc 	.word	0x200049cc

080021a4 <DCDC_TIMx_Configuration>:
* Description    : Timers configuration for DCDC converter
* Input          : NONE
* Return         : None
*******************************************************************************/
void DCDC_TIMx_Configuration(void)
{
 80021a4:	b510      	push	{r4, lr}

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_EventCfgTypeDef pEventCfg = {0};
 80021a6:	2400      	movs	r4, #0
{
 80021a8:	b0c8      	sub	sp, #288	; 0x120
  HRTIM_FaultBlankingCfgTypeDef pFaultBlkCfg = {0};
  HRTIM_FaultCfgTypeDef pFaultCfg = {0};
  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80021aa:	2260      	movs	r2, #96	; 0x60
 80021ac:	4621      	mov	r1, r4
 80021ae:	a830      	add	r0, sp, #192	; 0xc0
  HRTIM_FaultBlankingCfgTypeDef pFaultBlkCfg = {0};
 80021b0:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 80021b4:	e9cd 4401 	strd	r4, r4, [sp, #4]
  HRTIM_EventCfgTypeDef pEventCfg = {0};
 80021b8:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 80021bc:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  HRTIM_FaultCfgTypeDef pFaultCfg = {0};
 80021c0:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80021c4:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  HRTIM_EventCfgTypeDef pEventCfg = {0};
 80021c8:	9413      	str	r4, [sp, #76]	; 0x4c
  HRTIM_FaultBlankingCfgTypeDef pFaultBlkCfg = {0};
 80021ca:	9407      	str	r4, [sp, #28]
  HRTIM_FaultCfgTypeDef pFaultCfg = {0};
 80021cc:	940b      	str	r4, [sp, #44]	; 0x2c
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80021ce:	940f      	str	r4, [sp, #60]	; 0x3c
  HRTIM_FaultCfgTypeDef pFaultCfg = {0};
 80021d0:	940e      	str	r4, [sp, #56]	; 0x38
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80021d2:	9412      	str	r4, [sp, #72]	; 0x48
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80021d4:	f008 fb6a 	bl	800a8ac <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
  HRTIM_TimerEventFilteringCfgTypeDef pTimerEventFilteringCfg = {0};
  HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 80021d8:	2224      	movs	r2, #36	; 0x24
 80021da:	4621      	mov	r1, r4
 80021dc:	a827      	add	r0, sp, #156	; 0x9c
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 80021de:	e9cd 4408 	strd	r4, r4, [sp, #32]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 80021e2:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 80021e6:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
 80021ea:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
  HRTIM_TimerEventFilteringCfgTypeDef pTimerEventFilteringCfg = {0};
 80021ee:	e9cd 4403 	strd	r4, r4, [sp, #12]
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 80021f2:	940a      	str	r4, [sp, #40]	; 0x28
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 80021f4:	941e      	str	r4, [sp, #120]	; 0x78
  HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 80021f6:	f008 fb59 	bl	800a8ac <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80021fa:	2220      	movs	r2, #32
 80021fc:	4621      	mov	r1, r4
 80021fe:	a81f      	add	r0, sp, #124	; 0x7c
 8002200:	f008 fb54 	bl	800a8ac <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8002204:	48bf      	ldr	r0, [pc, #764]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
 8002206:	4bc0      	ldr	r3, [pc, #768]	; (8002508 <DCDC_TIMx_Configuration+0x364>)
 8002208:	6003      	str	r3, [r0, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_MASTER;
 800220a:	2301      	movs	r3, #1
 800220c:	6083      	str	r3, [r0, #8]
  hhrtim1.Init.SyncOutputSource = HRTIM_SYNCOUTPUTSOURCE_TIMA_CMP1;
  hhrtim1.Init.SyncOutputPolarity = HRTIM_SYNCOUTPUTPOLARITY_POSITIVE;
 800220e:	f44f 4e40 	mov.w	lr, #49152	; 0xc000
 8002212:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002216:	e9c0 e304 	strd	lr, r3, [r0, #16]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 800221a:	6044      	str	r4, [r0, #4]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 800221c:	f004 f8b6 	bl	800638c <HAL_HRTIM_Init>
 8002220:	2800      	cmp	r0, #0
 8002222:	f040 839a 	bne.w	800295a <DCDC_TIMx_Configuration+0x7b6>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8002226:	48b7      	ldr	r0, [pc, #732]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
 8002228:	210c      	movs	r1, #12
 800222a:	f004 f909 	bl	8006440 <HAL_HRTIM_DLLCalibrationStart>
 800222e:	2800      	cmp	r0, #0
 8002230:	f040 839c 	bne.w	800296c <DCDC_TIMx_Configuration+0x7c8>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8002234:	48b3      	ldr	r0, [pc, #716]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
 8002236:	210a      	movs	r1, #10
 8002238:	f004 f93a 	bl	80064b0 <HAL_HRTIM_PollForDLLCalibration>
 800223c:	2800      	cmp	r0, #0
 800223e:	f040 839e 	bne.w	800297e <DCDC_TIMx_Configuration+0x7da>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_EventPrescalerConfig(&hhrtim1, HRTIM_EVENTPRESCALER_DIV1) != HAL_OK)
 8002242:	48b0      	ldr	r0, [pc, #704]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
 8002244:	2100      	movs	r1, #0
 8002246:	f004 f9b1 	bl	80065ac <HAL_HRTIM_EventPrescalerConfig>
 800224a:	2800      	cmp	r0, #0
 800224c:	f040 83a0 	bne.w	8002990 <DCDC_TIMx_Configuration+0x7ec>
  {
    Error_Handler();
  }
  pEventCfg.Source = HRTIM_EEV6SRC_COMP1_OUT;
  pEventCfg.Polarity = HRTIM_EVENTPOLARITY_HIGH;
 8002250:	2300      	movs	r3, #0
  pEventCfg.Sensitivity = HRTIM_EVENTSENSITIVITY_LEVEL;
 8002252:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  pEventCfg.Source = HRTIM_EEV6SRC_COMP1_OUT;
 8002256:	2302      	movs	r3, #2
 8002258:	9313      	str	r3, [sp, #76]	; 0x4c
  pEventCfg.Filter = HRTIM_EVENTFILTER_3;
  if (HAL_HRTIM_EventConfig(&hhrtim1, HRTIM_EVENT_6, &pEventCfg) != HAL_OK)
 800225a:	48aa      	ldr	r0, [pc, #680]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
  pEventCfg.Filter = HRTIM_EVENTFILTER_3;
 800225c:	2303      	movs	r3, #3
  if (HAL_HRTIM_EventConfig(&hhrtim1, HRTIM_EVENT_6, &pEventCfg) != HAL_OK)
 800225e:	aa13      	add	r2, sp, #76	; 0x4c
 8002260:	2106      	movs	r1, #6
  pEventCfg.Filter = HRTIM_EVENTFILTER_3;
 8002262:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_HRTIM_EventConfig(&hhrtim1, HRTIM_EVENT_6, &pEventCfg) != HAL_OK)
 8002264:	f004 f982 	bl	800656c <HAL_HRTIM_EventConfig>
 8002268:	2800      	cmp	r0, #0
 800226a:	f040 846d 	bne.w	8002b48 <DCDC_TIMx_Configuration+0x9a4>
  {
    Error_Handler();
  }
  pEventCfg.Source = HRTIM_EEV7SRC_COMP4_OUT;
 800226e:	2301      	movs	r3, #1
  if (HAL_HRTIM_EventConfig(&hhrtim1, HRTIM_EVENT_7, &pEventCfg) != HAL_OK)
 8002270:	48a4      	ldr	r0, [pc, #656]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
  pEventCfg.Source = HRTIM_EEV7SRC_COMP4_OUT;
 8002272:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_HRTIM_EventConfig(&hhrtim1, HRTIM_EVENT_7, &pEventCfg) != HAL_OK)
 8002274:	aa13      	add	r2, sp, #76	; 0x4c
 8002276:	2107      	movs	r1, #7
 8002278:	f004 f978 	bl	800656c <HAL_HRTIM_EventConfig>
 800227c:	2800      	cmp	r0, #0
 800227e:	f040 845f 	bne.w	8002b40 <DCDC_TIMx_Configuration+0x99c>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_FaultPrescalerConfig(&hhrtim1, HRTIM_FAULTPRESCALER_DIV1) != HAL_OK)
 8002282:	48a0      	ldr	r0, [pc, #640]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
 8002284:	2100      	movs	r1, #0
 8002286:	f004 faad 	bl	80067e4 <HAL_HRTIM_FaultPrescalerConfig>
 800228a:	2800      	cmp	r0, #0
 800228c:	f040 8454 	bne.w	8002b38 <DCDC_TIMx_Configuration+0x994>
  {
    Error_Handler();
  }
  pFaultBlkCfg.Threshold = 0;
 8002290:	2300      	movs	r3, #0
  pFaultBlkCfg.ResetMode = HRTIM_FAULTCOUNTERRST_UNCONDITIONAL;
  pFaultBlkCfg.BlankingSource = HRTIM_FAULTBLANKINGMODE_RSTALIGNED;
  if (HAL_HRTIM_FaultCounterConfig(&hhrtim1, HRTIM_FAULT_2, &pFaultBlkCfg) != HAL_OK)
 8002292:	489c      	ldr	r0, [pc, #624]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
  pFaultBlkCfg.BlankingSource = HRTIM_FAULTBLANKINGMODE_RSTALIGNED;
 8002294:	9307      	str	r3, [sp, #28]
  if (HAL_HRTIM_FaultCounterConfig(&hhrtim1, HRTIM_FAULT_2, &pFaultBlkCfg) != HAL_OK)
 8002296:	aa05      	add	r2, sp, #20
 8002298:	2102      	movs	r1, #2
  pFaultBlkCfg.ResetMode = HRTIM_FAULTCOUNTERRST_UNCONDITIONAL;
 800229a:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if (HAL_HRTIM_FaultCounterConfig(&hhrtim1, HRTIM_FAULT_2, &pFaultBlkCfg) != HAL_OK)
 800229e:	f004 fb57 	bl	8006950 <HAL_HRTIM_FaultCounterConfig>
 80022a2:	2800      	cmp	r0, #0
 80022a4:	f040 843f 	bne.w	8002b26 <DCDC_TIMx_Configuration+0x982>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_FaultCounterConfig(&hhrtim1, HRTIM_FAULT_2, &pFaultBlkCfg) != HAL_OK)
 80022a8:	4896      	ldr	r0, [pc, #600]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
 80022aa:	aa05      	add	r2, sp, #20
 80022ac:	2102      	movs	r1, #2
 80022ae:	f004 fb4f 	bl	8006950 <HAL_HRTIM_FaultCounterConfig>
 80022b2:	2800      	cmp	r0, #0
 80022b4:	f040 8433 	bne.w	8002b1e <DCDC_TIMx_Configuration+0x97a>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_FaultCounterConfig(&hhrtim1, HRTIM_FAULT_2, &pFaultBlkCfg) != HAL_OK)
 80022b8:	4892      	ldr	r0, [pc, #584]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
 80022ba:	aa05      	add	r2, sp, #20
 80022bc:	2102      	movs	r1, #2
 80022be:	f004 fb47 	bl	8006950 <HAL_HRTIM_FaultCounterConfig>
 80022c2:	2800      	cmp	r0, #0
 80022c4:	f040 8427 	bne.w	8002b16 <DCDC_TIMx_Configuration+0x972>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_2, &pFaultBlkCfg) != HAL_OK)
 80022c8:	488e      	ldr	r0, [pc, #568]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
 80022ca:	aa05      	add	r2, sp, #20
 80022cc:	2102      	movs	r1, #2
 80022ce:	f004 faad 	bl	800682c <HAL_HRTIM_FaultBlankingConfigAndEnable>
 80022d2:	2800      	cmp	r0, #0
 80022d4:	f040 841b 	bne.w	8002b0e <DCDC_TIMx_Configuration+0x96a>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_2, &pFaultBlkCfg) != HAL_OK)
 80022d8:	488a      	ldr	r0, [pc, #552]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
 80022da:	aa05      	add	r2, sp, #20
 80022dc:	2102      	movs	r1, #2
 80022de:	f004 faa5 	bl	800682c <HAL_HRTIM_FaultBlankingConfigAndEnable>
 80022e2:	2800      	cmp	r0, #0
 80022e4:	f040 840f 	bne.w	8002b06 <DCDC_TIMx_Configuration+0x962>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_2, &pFaultBlkCfg) != HAL_OK)
 80022e8:	4886      	ldr	r0, [pc, #536]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
 80022ea:	aa05      	add	r2, sp, #20
 80022ec:	2102      	movs	r1, #2
 80022ee:	f004 fa9d 	bl	800682c <HAL_HRTIM_FaultBlankingConfigAndEnable>
 80022f2:	2800      	cmp	r0, #0
 80022f4:	f040 8403 	bne.w	8002afe <DCDC_TIMx_Configuration+0x95a>
  {
    Error_Handler();
  }
  pFaultCfg.Source = HRTIM_FAULTSOURCE_DIGITALINPUT;
 80022f8:	2300      	movs	r3, #0
 80022fa:	2102      	movs	r1, #2
 80022fc:	e9cd 310b 	strd	r3, r1, [sp, #44]	; 0x2c
  pFaultCfg.Polarity = HRTIM_FAULTPOLARITY_HIGH;
  pFaultCfg.Filter = HRTIM_FAULTFILTER_15;
  pFaultCfg.Lock = HRTIM_FAULTLOCK_READWRITE;
 8002300:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_HRTIM_FaultConfig(&hhrtim1, HRTIM_FAULT_2, &pFaultCfg) != HAL_OK)
 8002302:	4880      	ldr	r0, [pc, #512]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
  pFaultCfg.Filter = HRTIM_FAULTFILTER_15;
 8002304:	2378      	movs	r3, #120	; 0x78
  if (HAL_HRTIM_FaultConfig(&hhrtim1, HRTIM_FAULT_2, &pFaultCfg) != HAL_OK)
 8002306:	aa0b      	add	r2, sp, #44	; 0x2c
  pFaultCfg.Filter = HRTIM_FAULTFILTER_15;
 8002308:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_HRTIM_FaultConfig(&hhrtim1, HRTIM_FAULT_2, &pFaultCfg) != HAL_OK)
 800230a:	f004 f973 	bl	80065f4 <HAL_HRTIM_FaultConfig>
 800230e:	2800      	cmp	r0, #0
 8002310:	f040 83f2 	bne.w	8002af8 <DCDC_TIMx_Configuration+0x954>
  {
    Error_Handler();
  }
  HAL_HRTIM_FaultModeCtl(&hhrtim1, HRTIM_FAULT_2, HRTIM_FAULTMODECTL_DISABLED);
 8002314:	487b      	ldr	r0, [pc, #492]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
 8002316:	2200      	movs	r2, #0
 8002318:	2102      	movs	r1, #2
 800231a:	f004 fbb7 	bl	8006a8c <HAL_HRTIM_FaultModeCtl>
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_MASTER;
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_MASTER_CMP2;
 800231e:	2200      	movs	r2, #0
 8002320:	2302      	movs	r3, #2
 8002322:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 8002326:	4877      	ldr	r0, [pc, #476]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
 8002328:	aa01      	add	r2, sp, #4
 800232a:	2101      	movs	r1, #1
 800232c:	f004 fc04 	bl	8006b38 <HAL_HRTIM_ADCTriggerConfig>
 8002330:	2800      	cmp	r0, #0
 8002332:	f040 83de 	bne.w	8002af2 <DCDC_TIMx_Configuration+0x94e>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, 0x0) != HAL_OK)
 8002336:	4873      	ldr	r0, [pc, #460]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
 8002338:	2200      	movs	r2, #0
 800233a:	2101      	movs	r1, #1
 800233c:	f004 fd22 	bl	8006d84 <HAL_HRTIM_ADCPostScalerConfig>
 8002340:	2800      	cmp	r0, #0
 8002342:	f040 83d3 	bne.w	8002aec <DCDC_TIMx_Configuration+0x948>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, 0x0) != HAL_OK)
 8002346:	486f      	ldr	r0, [pc, #444]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
 8002348:	2200      	movs	r2, #0
 800234a:	2101      	movs	r1, #1
 800234c:	f004 fd1a 	bl	8006d84 <HAL_HRTIM_ADCPostScalerConfig>
 8002350:	2800      	cmp	r0, #0
 8002352:	f040 83c8 	bne.w	8002ae6 <DCDC_TIMx_Configuration+0x942>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, 0x0) != HAL_OK)
 8002356:	486b      	ldr	r0, [pc, #428]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
 8002358:	2200      	movs	r2, #0
 800235a:	2101      	movs	r1, #1
 800235c:	f004 fd12 	bl	8006d84 <HAL_HRTIM_ADCPostScalerConfig>
 8002360:	2800      	cmp	r0, #0
 8002362:	f040 83bd 	bne.w	8002ae0 <DCDC_TIMx_Configuration+0x93c>
  {
    Error_Handler();
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_F;
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERF_CMP3;
 8002366:	f44f 2ec0 	mov.w	lr, #393216	; 0x60000
 800236a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_3, &pADCTriggerCfg) != HAL_OK)
 800236e:	4865      	ldr	r0, [pc, #404]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
 8002370:	aa01      	add	r2, sp, #4
 8002372:	2104      	movs	r1, #4
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERF_CMP3;
 8002374:	e9cd e301 	strd	lr, r3, [sp, #4]
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_3, &pADCTriggerCfg) != HAL_OK)
 8002378:	f004 fbde 	bl	8006b38 <HAL_HRTIM_ADCTriggerConfig>
 800237c:	2800      	cmp	r0, #0
 800237e:	f040 83ac 	bne.w	8002ada <DCDC_TIMx_Configuration+0x936>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_3, 0x0) != HAL_OK)
 8002382:	4860      	ldr	r0, [pc, #384]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
 8002384:	2200      	movs	r2, #0
 8002386:	2104      	movs	r1, #4
 8002388:	f004 fcfc 	bl	8006d84 <HAL_HRTIM_ADCPostScalerConfig>
 800238c:	2800      	cmp	r0, #0
 800238e:	f040 83a1 	bne.w	8002ad4 <DCDC_TIMx_Configuration+0x930>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_3, 0x0) != HAL_OK)
 8002392:	485c      	ldr	r0, [pc, #368]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
 8002394:	2200      	movs	r2, #0
 8002396:	2104      	movs	r1, #4
 8002398:	f004 fcf4 	bl	8006d84 <HAL_HRTIM_ADCPostScalerConfig>
 800239c:	2800      	cmp	r0, #0
 800239e:	f040 8396 	bne.w	8002ace <DCDC_TIMx_Configuration+0x92a>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_3, 0x0) != HAL_OK)
 80023a2:	4858      	ldr	r0, [pc, #352]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	2104      	movs	r1, #4
 80023a8:	f004 fcec 	bl	8006d84 <HAL_HRTIM_ADCPostScalerConfig>
 80023ac:	2800      	cmp	r0, #0
 80023ae:	f040 838b 	bne.w	8002ac8 <DCDC_TIMx_Configuration+0x924>
  {
    Error_Handler();
  }
  pTimeBaseCfg.Period = (uint32_t)MASTER_PERIOD;
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80023b2:	2300      	movs	r3, #0
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 80023b4:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  pTimeBaseCfg.Period = (uint32_t)MASTER_PERIOD;
 80023b8:	f644 33e4 	movw	r3, #19428	; 0x4be4
 80023bc:	930f      	str	r3, [sp, #60]	; 0x3c
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 80023be:	4851      	ldr	r0, [pc, #324]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80023c0:	2308      	movs	r3, #8
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 80023c2:	aa0f      	add	r2, sp, #60	; 0x3c
 80023c4:	2106      	movs	r1, #6
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80023c6:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 80023c8:	f004 f894 	bl	80064f4 <HAL_HRTIM_TimeBaseConfig>
 80023cc:	2800      	cmp	r0, #0
 80023ce:	f040 8378 	bne.w	8002ac2 <DCDC_TIMx_Configuration+0x91e>
  {
    Error_Handler();
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 80023d2:	2300      	movs	r3, #0
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 80023d4:	e9cd 3330 	strd	r3, r3, [sp, #192]	; 0xc0
  pTimerCfg.DMASrcAddress = 0x0000;
  pTimerCfg.DMADstAddress = 0x0000;
 80023d8:	e9cd 3332 	strd	r3, r3, [sp, #200]	; 0xc8
  pTimerCfg.DMASize = 0x1;
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 80023dc:	e9cd 3335 	strd	r3, r3, [sp, #212]	; 0xd4
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80023e0:	e9cd 3337 	strd	r3, r3, [sp, #220]	; 0xdc
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 80023e4:	e9cd 3339 	strd	r3, r3, [sp, #228]	; 0xe4
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80023e8:	e9cd 333b 	strd	r3, r3, [sp, #236]	; 0xec
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80023ec:	933d      	str	r3, [sp, #244]	; 0xf4
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 80023ee:	9347      	str	r3, [sp, #284]	; 0x11c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 80023f0:	4844      	ldr	r0, [pc, #272]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
  pTimerCfg.DMASize = 0x1;
 80023f2:	2301      	movs	r3, #1
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 80023f4:	aa30      	add	r2, sp, #192	; 0xc0
 80023f6:	2106      	movs	r1, #6
  pTimerCfg.DMASize = 0x1;
 80023f8:	9334      	str	r3, [sp, #208]	; 0xd0
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 80023fa:	f004 fdbd 	bl	8006f78 <HAL_HRTIM_WaveformTimerConfig>
 80023fe:	2800      	cmp	r0, #0
 8002400:	f040 835c 	bne.w	8002abc <DCDC_TIMx_Configuration+0x918>
  {
    Error_Handler();
  }
  pCompareCfg.CompareValue = (uint32_t)(PHASE_SHIFT_INIT);
 8002404:	f242 53f2 	movw	r3, #9714	; 0x25f2
 8002408:	9308      	str	r3, [sp, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 800240a:	483e      	ldr	r0, [pc, #248]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
 800240c:	ab08      	add	r3, sp, #32
 800240e:	2201      	movs	r2, #1
 8002410:	2106      	movs	r1, #6
 8002412:	f005 f883 	bl	800751c <HAL_HRTIM_WaveformCompareConfig>
 8002416:	2800      	cmp	r0, #0
 8002418:	f040 834d 	bne.w	8002ab6 <DCDC_TIMx_Configuration+0x912>
  {
    Error_Handler();
  }
  pCompareCfg.CompareValue = (uint32_t)(MASTER_PERIOD * MASTER_DUTY_CYCLE * (1 + ADC1_TRIG_DUTY_CYCLE));
 800241c:	f642 33a3 	movw	r3, #11171	; 0x2ba3
 8002420:	9308      	str	r3, [sp, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8002422:	4838      	ldr	r0, [pc, #224]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
 8002424:	ab08      	add	r3, sp, #32
 8002426:	2202      	movs	r2, #2
 8002428:	2106      	movs	r1, #6
 800242a:	f005 f877 	bl	800751c <HAL_HRTIM_WaveformCompareConfig>
 800242e:	2800      	cmp	r0, #0
 8002430:	f040 833e 	bne.w	8002ab0 <DCDC_TIMx_Configuration+0x90c>
  {
    Error_Handler();
  }
  pCompareCfg.CompareValue = (uint32_t)(MASTER_PERIOD * MASTER_DUTY_CYCLE * ADC1_TRIG_DUTY_CYCLE);
 8002434:	f240 53b1 	movw	r3, #1457	; 0x5b1
 8002438:	9308      	str	r3, [sp, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 800243a:	4832      	ldr	r0, [pc, #200]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
 800243c:	ab08      	add	r3, sp, #32
 800243e:	2204      	movs	r2, #4
 8002440:	2106      	movs	r1, #6
 8002442:	f005 f86b 	bl	800751c <HAL_HRTIM_WaveformCompareConfig>
 8002446:	2800      	cmp	r0, #0
 8002448:	f040 832f 	bne.w	8002aaa <DCDC_TIMx_Configuration+0x906>
  {
    Error_Handler();
  }
  pCompareCfg.CompareValue = (uint32_t)(MASTER_PERIOD*0.75);
 800244c:	f643 03eb 	movw	r3, #14571	; 0x38eb
 8002450:	9308      	str	r3, [sp, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 8002452:	482c      	ldr	r0, [pc, #176]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
 8002454:	ab08      	add	r3, sp, #32
 8002456:	2208      	movs	r2, #8
 8002458:	2106      	movs	r1, #6
 800245a:	f005 f85f 	bl	800751c <HAL_HRTIM_WaveformCompareConfig>
 800245e:	2800      	cmp	r0, #0
 8002460:	f040 8320 	bne.w	8002aa4 <DCDC_TIMx_Configuration+0x900>
  {
    Error_Handler();
  }
  pTimeBaseCfg.Mode = HRTIM_MODE_SINGLESHOT_RETRIGGERABLE;
 8002464:	2310      	movs	r3, #16
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8002466:	4827      	ldr	r0, [pc, #156]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
  pTimeBaseCfg.Mode = HRTIM_MODE_SINGLESHOT_RETRIGGERABLE;
 8002468:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 800246a:	aa0f      	add	r2, sp, #60	; 0x3c
 800246c:	2100      	movs	r1, #0
 800246e:	f004 f841 	bl	80064f4 <HAL_HRTIM_TimeBaseConfig>
 8002472:	2800      	cmp	r0, #0
 8002474:	f040 8313 	bne.w	8002a9e <DCDC_TIMx_Configuration+0x8fa>
  {
    Error_Handler();
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 8002478:	2100      	movs	r1, #0
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 800247a:	4822      	ldr	r0, [pc, #136]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 800247c:	9118      	str	r1, [sp, #96]	; 0x60
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 800247e:	aa18      	add	r2, sp, #96	; 0x60
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 8002480:	911b      	str	r1, [sp, #108]	; 0x6c
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8002482:	911e      	str	r1, [sp, #120]	; 0x78
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 8002484:	f004 fed6 	bl	8007234 <HAL_HRTIM_WaveformTimerControl>
 8002488:	2800      	cmp	r0, #0
 800248a:	f040 8305 	bne.w	8002a98 <DCDC_TIMx_Configuration+0x8f4>
  {
    Error_Handler();
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_DLYPRT;
 800248e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002492:	9330      	str	r3, [sp, #192]	; 0xc0
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DUAL;
 8002494:	2302      	movs	r3, #2
 8002496:	9336      	str	r3, [sp, #216]	; 0xd8
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8002498:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDBOTH_EEV7;
 800249c:	f44f 7280 	mov.w	r2, #256	; 0x100
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 80024a0:	933a      	str	r3, [sp, #232]	; 0xe8
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDBOTH_EEV7;
 80024a2:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80024a6:	2100      	movs	r1, #0
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDBOTH_EEV7;
 80024a8:	e9cd 2341 	strd	r2, r3, [sp, #260]	; 0x104
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_MASTER;
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_MASTER_PER;
 80024ac:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
 80024b0:	2310      	movs	r3, #16
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 80024b2:	4814      	ldr	r0, [pc, #80]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80024b4:	9131      	str	r1, [sp, #196]	; 0xc4
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 80024b6:	aa30      	add	r2, sp, #192	; 0xc0
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 80024b8:	e9cd 113e 	strd	r1, r1, [sp, #248]	; 0xf8
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_MASTER_PER;
 80024bc:	e9cd 4344 	strd	r4, r3, [sp, #272]	; 0x110
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 80024c0:	9140      	str	r1, [sp, #256]	; 0x100
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 80024c2:	9146      	str	r1, [sp, #280]	; 0x118
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 80024c4:	f004 fd58 	bl	8006f78 <HAL_HRTIM_WaveformTimerConfig>
 80024c8:	2800      	cmp	r0, #0
 80024ca:	f040 82e2 	bne.w	8002a92 <DCDC_TIMx_Configuration+0x8ee>
  {
    Error_Handler();
  }
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 80024ce:	2300      	movs	r3, #0
 80024d0:	933a      	str	r3, [sp, #232]	; 0xe8
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_MASTER_CMP1;
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 80024d2:	480c      	ldr	r0, [pc, #48]	; (8002504 <DCDC_TIMx_Configuration+0x360>)
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_MASTER_CMP1;
 80024d4:	2320      	movs	r3, #32
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 80024d6:	aa30      	add	r2, sp, #192	; 0xc0
 80024d8:	2101      	movs	r1, #1
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_MASTER_CMP1;
 80024da:	9345      	str	r3, [sp, #276]	; 0x114
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 80024dc:	f004 fd4c 	bl	8006f78 <HAL_HRTIM_WaveformTimerConfig>
 80024e0:	2800      	cmp	r0, #0
 80024e2:	f040 82d3 	bne.w	8002a8c <DCDC_TIMx_Configuration+0x8e8>
  {
    Error_Handler();
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 80024e6:	2300      	movs	r3, #0
 80024e8:	9330      	str	r3, [sp, #192]	; 0xc0
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_RST1;//HRTIM_TIM_DMA_SET1;
  pTimerCfg.DMASrcAddress = (uint32_t)&TIMD_DMA_Buffer[0];//(uint32_t)&TIMD_DMA_Buffer[0];
  pTimerCfg.DMADstAddress = (uint32_t)&(HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R);//(uint32_t)&(hhrtim1.Instance->sCommonRegs.BDMADR); //(uint32_t)&(HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R);
  pTimerCfg.DMASize = 1; //ZMIANA Z 0x1
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 80024ea:	9336      	str	r3, [sp, #216]	; 0xd8
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_ENABLED;
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 80024ec:	9342      	str	r3, [sp, #264]	; 0x108
  pTimerCfg.DMASrcAddress = (uint32_t)&TIMD_DMA_Buffer[0];//(uint32_t)&TIMD_DMA_Buffer[0];
 80024ee:	4b07      	ldr	r3, [pc, #28]	; (800250c <DCDC_TIMx_Configuration+0x368>)
 80024f0:	9332      	str	r3, [sp, #200]	; 0xc8
  pTimerCfg.DMADstAddress = (uint32_t)&(HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R);//(uint32_t)&(hhrtim1.Instance->sCommonRegs.BDMADR); //(uint32_t)&(HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R);
 80024f2:	4b07      	ldr	r3, [pc, #28]	; (8002510 <DCDC_TIMx_Configuration+0x36c>)
 80024f4:	9333      	str	r3, [sp, #204]	; 0xcc
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_RST1;//HRTIM_TIM_DMA_SET1;
 80024f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80024fa:	9331      	str	r3, [sp, #196]	; 0xc4
  pTimerCfg.DMASize = 1; //ZMIANA Z 0x1
 80024fc:	2301      	movs	r3, #1
 80024fe:	9334      	str	r3, [sp, #208]	; 0xd0
 8002500:	e008      	b.n	8002514 <DCDC_TIMx_Configuration+0x370>
 8002502:	bf00      	nop
 8002504:	20009118 	.word	0x20009118
 8002508:	40016800 	.word	0x40016800
 800250c:	200049ec 	.word	0x200049ec
 8002510:	40016a3c 	.word	0x40016a3c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8002514:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002518:	933a      	str	r3, [sp, #232]	; 0xe8
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_ENABLED;
 800251a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  //pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED; //DODANE
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_TIMER_F; //HRTIM_TIMUPDATETRIGGER_TIMER_F;
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_OTHER5_CMP2;
 800251e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_ENABLED;
 8002522:	933d      	str	r3, [sp, #244]	; 0xf4
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_OTHER5_CMP2;
 8002524:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002528:	e9cd 2344 	strd	r2, r3, [sp, #272]	; 0x110
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_DMABURST;
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 800252c:	48be      	ldr	r0, [pc, #760]	; (8002828 <DCDC_TIMx_Configuration+0x684>)
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_DMABURST;
 800252e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 8002532:	aa30      	add	r2, sp, #192	; 0xc0
 8002534:	2103      	movs	r1, #3
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_DMABURST;
 8002536:	933b      	str	r3, [sp, #236]	; 0xec
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 8002538:	f004 fd1e 	bl	8006f78 <HAL_HRTIM_WaveformTimerConfig>
 800253c:	2800      	cmp	r0, #0
 800253e:	f040 82a2 	bne.w	8002a86 <DCDC_TIMx_Configuration+0x8e2>
  {
    Error_Handler();
  }

  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8002542:	2300      	movs	r3, #0
  pTimerCfg.DMASrcAddress = 0x0000;
 8002544:	e9cd 3331 	strd	r3, r3, [sp, #196]	; 0xc4
  pTimerCfg.DMADstAddress = 0x0000;
 8002548:	9333      	str	r3, [sp, #204]	; 0xcc
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_ENABLED;
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_TIMER_F;
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_OTHER5_CMP2;//HRTIM_TIMRESETTRIGGER_OTHER5_CMP2;
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 800254a:	933b      	str	r3, [sp, #236]	; 0xec
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 800254c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002550:	933a      	str	r3, [sp, #232]	; 0xe8
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_ENABLED;
 8002552:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002556:	933d      	str	r3, [sp, #244]	; 0xf4
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 8002558:	f44f 7380 	mov.w	r3, #256	; 0x100
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_OTHER5_CMP2;//HRTIM_TIMRESETTRIGGER_OTHER5_CMP2;
 800255c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 8002560:	9341      	str	r3, [sp, #260]	; 0x104
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_OTHER5_CMP2;//HRTIM_TIMRESETTRIGGER_OTHER5_CMP2;
 8002562:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002566:	e9cd 2344 	strd	r2, r3, [sp, #272]	; 0x110

  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 800256a:	48af      	ldr	r0, [pc, #700]	; (8002828 <DCDC_TIMx_Configuration+0x684>)
 800256c:	aa30      	add	r2, sp, #192	; 0xc0
 800256e:	2104      	movs	r1, #4
 8002570:	f004 fd02 	bl	8006f78 <HAL_HRTIM_WaveformTimerConfig>
 8002574:	2800      	cmp	r0, #0
 8002576:	f040 8283 	bne.w	8002a80 <DCDC_TIMx_Configuration+0x8dc>
  {
    Error_Handler();
  }
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_SET1;
  pTimerCfg.DMASrcAddress = 0x0000;//(uint32_t)&TIMF_DMA_Buffer[0];
 800257a:	2300      	movs	r3, #0
  pTimerCfg.DMADstAddress = 0x0000;//(uint32_t)&(HRTIM1_COMMON->CR2);
 800257c:	e9cd 3332 	strd	r3, r3, [sp, #200]	; 0xc8
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_ENABLED;
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_F_DELAYEDPROTECTION_DISABLED;
 8002580:	9342      	str	r3, [sp, #264]	; 0x108
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8002582:	9345      	str	r3, [sp, #276]	; 0x114
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_SET1;
 8002584:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002588:	9331      	str	r3, [sp, #196]	; 0xc4
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 800258a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800258e:	933a      	str	r3, [sp, #232]	; 0xe8
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_ENABLED;
 8002590:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002594:	933d      	str	r3, [sp, #244]	; 0xf4
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCfg) != HAL_OK)
 8002596:	48a4      	ldr	r0, [pc, #656]	; (8002828 <DCDC_TIMx_Configuration+0x684>)
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 8002598:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCfg) != HAL_OK)
 800259c:	aa30      	add	r2, sp, #192	; 0xc0
 800259e:	2105      	movs	r1, #5
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 80025a0:	9341      	str	r3, [sp, #260]	; 0x104
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCfg) != HAL_OK)
 80025a2:	f004 fce9 	bl	8006f78 <HAL_HRTIM_WaveformTimerConfig>
 80025a6:	2800      	cmp	r0, #0
 80025a8:	f040 8267 	bne.w	8002a7a <DCDC_TIMx_Configuration+0x8d6>
  {
    Error_Handler();
  }

  pCompareCfg.CompareValue = 0xFFF7;
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 80025ac:	2300      	movs	r3, #0
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 80025ae:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  pCompareCfg.CompareValue = 0xFFF7;
 80025b2:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80025b6:	9308      	str	r3, [sp, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 80025b8:	489b      	ldr	r0, [pc, #620]	; (8002828 <DCDC_TIMx_Configuration+0x684>)
 80025ba:	ab08      	add	r3, sp, #32
 80025bc:	2208      	movs	r2, #8
 80025be:	2103      	movs	r1, #3
 80025c0:	f004 ffac 	bl	800751c <HAL_HRTIM_WaveformCompareConfig>
 80025c4:	2800      	cmp	r0, #0
 80025c6:	f040 8255 	bne.w	8002a74 <DCDC_TIMx_Configuration+0x8d0>
  {
    Error_Handler();
  }
  pCompareCfg.CompareValue = (uint32_t)(TIMF_PERIOD*TIMF_DUTY_CYCLE);
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 80025ca:	2300      	movs	r3, #0
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 80025cc:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  pCompareCfg.CompareValue = (uint32_t)(TIMF_PERIOD*TIMF_DUTY_CYCLE);
 80025d0:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80025d4:	9308      	str	r3, [sp, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 80025d6:	4894      	ldr	r0, [pc, #592]	; (8002828 <DCDC_TIMx_Configuration+0x684>)
 80025d8:	ab08      	add	r3, sp, #32
 80025da:	2208      	movs	r2, #8
 80025dc:	2105      	movs	r1, #5
 80025de:	f004 ff9d 	bl	800751c <HAL_HRTIM_WaveformCompareConfig>
 80025e2:	2800      	cmp	r0, #0
 80025e4:	f040 8243 	bne.w	8002a6e <DCDC_TIMx_Configuration+0x8ca>
  {
    Error_Handler();
  }
  pTimerEventFilteringCfg.Filter = HRTIM_TIMEEVFLT_BLANKINGCMP1;
 80025e8:	2302      	movs	r3, #2
  pTimerEventFilteringCfg.Latch = HRTIM_TIMEVENTLATCH_DISABLED;
 80025ea:	2100      	movs	r1, #0
  pTimerEventFilteringCfg.Filter = HRTIM_TIMEEVFLT_BLANKINGCMP1;
 80025ec:	9303      	str	r3, [sp, #12]
  if (HAL_HRTIM_TimerEventFilteringConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_EVENT_6, &pTimerEventFilteringCfg) != HAL_OK)
 80025ee:	488e      	ldr	r0, [pc, #568]	; (8002828 <DCDC_TIMx_Configuration+0x684>)
  pTimerEventFilteringCfg.Latch = HRTIM_TIMEVENTLATCH_DISABLED;
 80025f0:	9104      	str	r1, [sp, #16]
  if (HAL_HRTIM_TimerEventFilteringConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_EVENT_6, &pTimerEventFilteringCfg) != HAL_OK)
 80025f2:	ab03      	add	r3, sp, #12
 80025f4:	2206      	movs	r2, #6
 80025f6:	f004 fe63 	bl	80072c0 <HAL_HRTIM_TimerEventFilteringConfig>
 80025fa:	2800      	cmp	r0, #0
 80025fc:	f040 8234 	bne.w	8002a68 <DCDC_TIMx_Configuration+0x8c4>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_TimerEventFilteringConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_EVENT_6, &pTimerEventFilteringCfg) != HAL_OK)
 8002600:	4889      	ldr	r0, [pc, #548]	; (8002828 <DCDC_TIMx_Configuration+0x684>)
 8002602:	ab03      	add	r3, sp, #12
 8002604:	2206      	movs	r2, #6
 8002606:	2101      	movs	r1, #1
 8002608:	f004 fe5a 	bl	80072c0 <HAL_HRTIM_TimerEventFilteringConfig>
 800260c:	2800      	cmp	r0, #0
 800260e:	f040 8228 	bne.w	8002a62 <DCDC_TIMx_Configuration+0x8be>
  {
    Error_Handler();
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL8;
 8002612:	2100      	movs	r1, #0
  pDeadTimeCfg.RisingValue = (uint32_t)(LLC_DEADTIME);
 8002614:	23b4      	movs	r3, #180	; 0xb4
  pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_WRITE;
  pDeadTimeCfg.FallingValue = (uint32_t)(LLC_DEADTIME);
  pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
  pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
  pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_WRITE;
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 8002616:	4884      	ldr	r0, [pc, #528]	; (8002828 <DCDC_TIMx_Configuration+0x684>)
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL8;
 8002618:	9127      	str	r1, [sp, #156]	; 0x9c
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 800261a:	aa27      	add	r2, sp, #156	; 0x9c
  pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_WRITE;
 800261c:	e9cd 1129 	strd	r1, r1, [sp, #164]	; 0xa4
  pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
 8002620:	e9cd 112d 	strd	r1, r1, [sp, #180]	; 0xb4
  pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_WRITE;
 8002624:	912b      	str	r1, [sp, #172]	; 0xac
  pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_WRITE;
 8002626:	912f      	str	r1, [sp, #188]	; 0xbc
  pDeadTimeCfg.RisingValue = (uint32_t)(LLC_DEADTIME);
 8002628:	9328      	str	r3, [sp, #160]	; 0xa0
  pDeadTimeCfg.FallingValue = (uint32_t)(LLC_DEADTIME);
 800262a:	932c      	str	r3, [sp, #176]	; 0xb0
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 800262c:	f004 ff22 	bl	8007474 <HAL_HRTIM_DeadTimeConfig>
 8002630:	2800      	cmp	r0, #0
 8002632:	f040 8213 	bne.w	8002a5c <DCDC_TIMx_Configuration+0x8b8>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pDeadTimeCfg) != HAL_OK)
 8002636:	487c      	ldr	r0, [pc, #496]	; (8002828 <DCDC_TIMx_Configuration+0x684>)
 8002638:	aa27      	add	r2, sp, #156	; 0x9c
 800263a:	2101      	movs	r1, #1
 800263c:	f004 ff1a 	bl	8007474 <HAL_HRTIM_DeadTimeConfig>
 8002640:	2800      	cmp	r0, #0
 8002642:	f040 8208 	bne.w	8002a56 <DCDC_TIMx_Configuration+0x8b2>
  {
    Error_Handler();
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL4;
  pDeadTimeCfg.RisingValue = (uint32_t)(TIMD_DEADTIME);
 8002646:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800264a:	9328      	str	r3, [sp, #160]	; 0xa0
  pDeadTimeCfg.FallingValue = (uint32_t)(TIMD_DEADTIME);
 800264c:	932c      	str	r3, [sp, #176]	; 0xb0
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pDeadTimeCfg) != HAL_OK)
 800264e:	4876      	ldr	r0, [pc, #472]	; (8002828 <DCDC_TIMx_Configuration+0x684>)
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL4;
 8002650:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pDeadTimeCfg) != HAL_OK)
 8002654:	aa27      	add	r2, sp, #156	; 0x9c
 8002656:	2103      	movs	r1, #3
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL4;
 8002658:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pDeadTimeCfg) != HAL_OK)
 800265a:	f004 ff0b 	bl	8007474 <HAL_HRTIM_DeadTimeConfig>
 800265e:	2800      	cmp	r0, #0
 8002660:	f040 81f6 	bne.w	8002a50 <DCDC_TIMx_Configuration+0x8ac>
  {
    Error_Handler();
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL4;
  pDeadTimeCfg.RisingValue = (uint32_t)(TIMF_DEADTIME);
 8002664:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002668:	9328      	str	r3, [sp, #160]	; 0xa0
  pDeadTimeCfg.FallingValue = (uint32_t)(TIMF_DEADTIME);
 800266a:	932c      	str	r3, [sp, #176]	; 0xb0
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pDeadTimeCfg) != HAL_OK)
 800266c:	486e      	ldr	r0, [pc, #440]	; (8002828 <DCDC_TIMx_Configuration+0x684>)
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL4;
 800266e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pDeadTimeCfg) != HAL_OK)
 8002672:	aa27      	add	r2, sp, #156	; 0x9c
 8002674:	2105      	movs	r1, #5
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL4;
 8002676:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pDeadTimeCfg) != HAL_OK)
 8002678:	f004 fefc 	bl	8007474 <HAL_HRTIM_DeadTimeConfig>
 800267c:	2800      	cmp	r0, #0
 800267e:	f040 81e4 	bne.w	8002a4a <DCDC_TIMx_Configuration+0x8a6>
  {
    Error_Handler();
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL4;
  pDeadTimeCfg.RisingValue = (uint32_t)(TIMF_DEADTIME);
 8002682:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002686:	9328      	str	r3, [sp, #160]	; 0xa0
  pDeadTimeCfg.FallingValue = (uint32_t)(TIMF_DEADTIME);
 8002688:	932c      	str	r3, [sp, #176]	; 0xb0
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pDeadTimeCfg) != HAL_OK)
 800268a:	4867      	ldr	r0, [pc, #412]	; (8002828 <DCDC_TIMx_Configuration+0x684>)
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL4;
 800268c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pDeadTimeCfg) != HAL_OK)
 8002690:	aa27      	add	r2, sp, #156	; 0x9c
 8002692:	2104      	movs	r1, #4
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL4;
 8002694:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pDeadTimeCfg) != HAL_OK)
 8002696:	f004 feed 	bl	8007474 <HAL_HRTIM_DeadTimeConfig>
 800269a:	2800      	cmp	r0, #0
 800269c:	f040 81d2 	bne.w	8002a44 <DCDC_TIMx_Configuration+0x8a0>
    Error_Handler();
  }

  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_MASTERPER;
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	2408      	movs	r4, #8
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 80026a4:	2100      	movs	r1, #0
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_MASTERPER;
 80026a6:	e9cd 4320 	strd	r4, r3, [sp, #128]	; 0x80
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 80026aa:	485f      	ldr	r0, [pc, #380]	; (8002828 <DCDC_TIMx_Configuration+0x684>)
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 80026ac:	911f      	str	r1, [sp, #124]	; 0x7c
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 80026ae:	ab1f      	add	r3, sp, #124	; 0x7c
 80026b0:	2201      	movs	r2, #1
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 80026b2:	e9cd 1122 	strd	r1, r1, [sp, #136]	; 0x88
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 80026b6:	e9cd 1124 	strd	r1, r1, [sp, #144]	; 0x90
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 80026ba:	9126      	str	r1, [sp, #152]	; 0x98
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 80026bc:	f004 ffea 	bl	8007694 <HAL_HRTIM_WaveformOutputConfig>
 80026c0:	2800      	cmp	r0, #0
 80026c2:	f040 81bc 	bne.w	8002a3e <DCDC_TIMx_Configuration+0x89a>
  {
    Error_Handler();
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_MASTERCMP1;
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 80026c6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80026ca:	2308      	movs	r3, #8
 80026cc:	e9cd 0320 	strd	r0, r3, [sp, #128]	; 0x80
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 80026d0:	2204      	movs	r2, #4
 80026d2:	4855      	ldr	r0, [pc, #340]	; (8002828 <DCDC_TIMx_Configuration+0x684>)
 80026d4:	ab1f      	add	r3, sp, #124	; 0x7c
 80026d6:	2101      	movs	r1, #1
 80026d8:	f004 ffdc 	bl	8007694 <HAL_HRTIM_WaveformOutputConfig>
 80026dc:	2800      	cmp	r0, #0
 80026de:	f040 81ab 	bne.w	8002a38 <DCDC_TIMx_Configuration+0x894>
  {
    Error_Handler();
  }
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 80026e2:	2300      	movs	r3, #0
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMDEV8_TIMFCMP1;//HRTIM_OUTPUTSET_TIMDEV8_TIMFCMP1; //HRTIM_OUTPUTSET_TIMCMP1;
 80026e4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 80026e8:	9323      	str	r3, [sp, #140]	; 0x8c
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE; //HRTIM_OUTPUTRESET_TIMDEV9_TIMFCMP3;
 80026ea:	9321      	str	r3, [sp, #132]	; 0x84
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMDEV8_TIMFCMP1;//HRTIM_OUTPUTSET_TIMDEV8_TIMFCMP1; //HRTIM_OUTPUTSET_TIMCMP1;
 80026ec:	9220      	str	r2, [sp, #128]	; 0x80
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 80026ee:	484e      	ldr	r0, [pc, #312]	; (8002828 <DCDC_TIMx_Configuration+0x684>)
 80026f0:	ab1f      	add	r3, sp, #124	; 0x7c
 80026f2:	2240      	movs	r2, #64	; 0x40
 80026f4:	2103      	movs	r1, #3
 80026f6:	f004 ffcd 	bl	8007694 <HAL_HRTIM_WaveformOutputConfig>
 80026fa:	2800      	cmp	r0, #0
 80026fc:	f040 8199 	bne.w	8002a32 <DCDC_TIMx_Configuration+0x88e>
  {
    Error_Handler();
  }
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8002700:	2300      	movs	r3, #0
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 8002702:	2208      	movs	r2, #8
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8002704:	9323      	str	r3, [sp, #140]	; 0x8c
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8002706:	9321      	str	r3, [sp, #132]	; 0x84
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 8002708:	9220      	str	r2, [sp, #128]	; 0x80
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF1, &pOutputCfg) != HAL_OK)
 800270a:	4847      	ldr	r0, [pc, #284]	; (8002828 <DCDC_TIMx_Configuration+0x684>)
 800270c:	ab1f      	add	r3, sp, #124	; 0x7c
 800270e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002712:	2105      	movs	r1, #5
 8002714:	f004 ffbe 	bl	8007694 <HAL_HRTIM_WaveformOutputConfig>
 8002718:	2800      	cmp	r0, #0
 800271a:	f040 8187 	bne.w	8002a2c <DCDC_TIMx_Configuration+0x888>
  {
    Error_Handler();
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 800271e:	2100      	movs	r1, #0
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8002720:	4841      	ldr	r0, [pc, #260]	; (8002828 <DCDC_TIMx_Configuration+0x684>)
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8002722:	9120      	str	r1, [sp, #128]	; 0x80
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8002724:	ab1f      	add	r3, sp, #124	; 0x7c
 8002726:	2202      	movs	r2, #2
 8002728:	f004 ffb4 	bl	8007694 <HAL_HRTIM_WaveformOutputConfig>
 800272c:	2800      	cmp	r0, #0
 800272e:	f040 817a 	bne.w	8002a26 <DCDC_TIMx_Configuration+0x882>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8002732:	483d      	ldr	r0, [pc, #244]	; (8002828 <DCDC_TIMx_Configuration+0x684>)
 8002734:	ab1f      	add	r3, sp, #124	; 0x7c
 8002736:	2208      	movs	r2, #8
 8002738:	2101      	movs	r1, #1
 800273a:	f004 ffab 	bl	8007694 <HAL_HRTIM_WaveformOutputConfig>
 800273e:	2800      	cmp	r0, #0
 8002740:	f040 816e 	bne.w	8002a20 <DCDC_TIMx_Configuration+0x87c>
  {
    Error_Handler();
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8002744:	2300      	movs	r3, #0
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE; //FROM CMP2
 8002746:	e9cd 3320 	strd	r3, r3, [sp, #128]	; 0x80
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 800274a:	4837      	ldr	r0, [pc, #220]	; (8002828 <DCDC_TIMx_Configuration+0x684>)
 800274c:	ab1f      	add	r3, sp, #124	; 0x7c
 800274e:	2280      	movs	r2, #128	; 0x80
 8002750:	2103      	movs	r1, #3
 8002752:	f004 ff9f 	bl	8007694 <HAL_HRTIM_WaveformOutputConfig>
 8002756:	2800      	cmp	r0, #0
 8002758:	f040 815f 	bne.w	8002a1a <DCDC_TIMx_Configuration+0x876>
  {
    Error_Handler();
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 800275c:	2300      	movs	r3, #0
  pOutputCfg.ResetSource = HRTIM_OUTPUTSET_NONE;
 800275e:	e9cd 3320 	strd	r3, r3, [sp, #128]	; 0x80
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8002762:	4831      	ldr	r0, [pc, #196]	; (8002828 <DCDC_TIMx_Configuration+0x684>)
 8002764:	ab1f      	add	r3, sp, #124	; 0x7c
 8002766:	f44f 7280 	mov.w	r2, #256	; 0x100
 800276a:	2104      	movs	r1, #4
 800276c:	f004 ff92 	bl	8007694 <HAL_HRTIM_WaveformOutputConfig>
 8002770:	2800      	cmp	r0, #0
 8002772:	f040 814f 	bne.w	8002a14 <DCDC_TIMx_Configuration+0x870>
  {
    Error_Handler();
  }

  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;//HRTIM_OUTPUTSET_TIMEEV8_TIMFCMP3;
 8002776:	2104      	movs	r1, #4
  pOutputCfg.ResetSource = HRTIM_OUTPUTSET_TIMPER;//HRTIM_OUTPUTSET_TIMEEV8_TIMFCMP3;
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE2, &pOutputCfg) != HAL_OK)
 8002778:	482b      	ldr	r0, [pc, #172]	; (8002828 <DCDC_TIMx_Configuration+0x684>)
 800277a:	ab1f      	add	r3, sp, #124	; 0x7c
 800277c:	f44f 7200 	mov.w	r2, #512	; 0x200
  pOutputCfg.ResetSource = HRTIM_OUTPUTSET_TIMPER;//HRTIM_OUTPUTSET_TIMEEV8_TIMFCMP3;
 8002780:	e9cd 1120 	strd	r1, r1, [sp, #128]	; 0x80
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE2, &pOutputCfg) != HAL_OK)
 8002784:	f004 ff86 	bl	8007694 <HAL_HRTIM_WaveformOutputConfig>
 8002788:	2800      	cmp	r0, #0
 800278a:	f040 8140 	bne.w	8002a0e <DCDC_TIMx_Configuration+0x86a>
  {
    Error_Handler();
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 800278e:	2200      	movs	r2, #0
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8002790:	e9cd 2220 	strd	r2, r2, [sp, #128]	; 0x80
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF2, &pOutputCfg) != HAL_OK)
 8002794:	4824      	ldr	r0, [pc, #144]	; (8002828 <DCDC_TIMx_Configuration+0x684>)
 8002796:	ab1f      	add	r3, sp, #124	; 0x7c
 8002798:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800279c:	2105      	movs	r1, #5
 800279e:	f004 ff79 	bl	8007694 <HAL_HRTIM_WaveformOutputConfig>
 80027a2:	2800      	cmp	r0, #0
 80027a4:	f040 8130 	bne.w	8002a08 <DCDC_TIMx_Configuration+0x864>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 80027a8:	481f      	ldr	r0, [pc, #124]	; (8002828 <DCDC_TIMx_Configuration+0x684>)
 80027aa:	aa0f      	add	r2, sp, #60	; 0x3c
 80027ac:	2101      	movs	r1, #1
 80027ae:	f003 fea1 	bl	80064f4 <HAL_HRTIM_TimeBaseConfig>
 80027b2:	2800      	cmp	r0, #0
 80027b4:	f040 8125 	bne.w	8002a02 <DCDC_TIMx_Configuration+0x85e>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCtl) != HAL_OK)
 80027b8:	481b      	ldr	r0, [pc, #108]	; (8002828 <DCDC_TIMx_Configuration+0x684>)
 80027ba:	aa18      	add	r2, sp, #96	; 0x60
 80027bc:	2101      	movs	r1, #1
 80027be:	f004 fd39 	bl	8007234 <HAL_HRTIM_WaveformTimerControl>
 80027c2:	2800      	cmp	r0, #0
 80027c4:	f040 811a 	bne.w	80029fc <DCDC_TIMx_Configuration+0x858>
  {
    Error_Handler();
  }
  pTimeBaseCfg.Period = (uint32_t)TIMF_PERIOD;
 80027c8:	f647 72ff 	movw	r2, #32767	; 0x7fff
  pTimeBaseCfg.RepetitionCounter = 1;
 80027cc:	2301      	movs	r3, #1
  pTimeBaseCfg.Period = (uint32_t)TIMF_PERIOD;
 80027ce:	920f      	str	r2, [sp, #60]	; 0x3c
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL16;
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 80027d0:	4815      	ldr	r0, [pc, #84]	; (8002828 <DCDC_TIMx_Configuration+0x684>)
 80027d2:	aa0f      	add	r2, sp, #60	; 0x3c
 80027d4:	2103      	movs	r1, #3
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL16;
 80027d6:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 80027da:	f003 fe8b 	bl	80064f4 <HAL_HRTIM_TimeBaseConfig>
 80027de:	2800      	cmp	r0, #0
 80027e0:	f040 8109 	bne.w	80029f6 <DCDC_TIMx_Configuration+0x852>
  {
    Error_Handler();
  }

  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UPDOWN;
  pTimerCtl.TrigHalf = HRTIM_TIMERTRIGHALF_DISABLED;
 80027e4:	2201      	movs	r2, #1
 80027e6:	2300      	movs	r3, #0
 80027e8:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCtl) != HAL_OK)
 80027ec:	480e      	ldr	r0, [pc, #56]	; (8002828 <DCDC_TIMx_Configuration+0x684>)
 80027ee:	aa18      	add	r2, sp, #96	; 0x60
 80027f0:	2103      	movs	r1, #3
 80027f2:	f004 fd1f 	bl	8007234 <HAL_HRTIM_WaveformTimerControl>
 80027f6:	2800      	cmp	r0, #0
 80027f8:	f040 80fa 	bne.w	80029f0 <DCDC_TIMx_Configuration+0x84c>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_RollOverModeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_TIM_FEROM_VALLEY|HRTIM_TIM_BMROM_VALLEY
 80027fc:	480a      	ldr	r0, [pc, #40]	; (8002828 <DCDC_TIMx_Configuration+0x684>)
 80027fe:	f245 5240 	movw	r2, #21824	; 0x5540
 8002802:	2103      	movs	r1, #3
 8002804:	f004 fb8a 	bl	8006f1c <HAL_HRTIM_RollOverModeConfig>
 8002808:	2800      	cmp	r0, #0
 800280a:	f040 80ee 	bne.w	80029ea <DCDC_TIMx_Configuration+0x846>
                              |HRTIM_TIM_ADROM_VALLEY|HRTIM_TIM_OUTROM_VALLEY
                              |HRTIM_TIM_ROM_VALLEY) != HAL_OK)
  {
    Error_Handler();
  }
  pCompareCfg.CompareValue = (uint32_t)(TIMD_PERIOD/2);
 800280e:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8002812:	9208      	str	r2, [sp, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8002814:	4804      	ldr	r0, [pc, #16]	; (8002828 <DCDC_TIMx_Configuration+0x684>)
 8002816:	ab08      	add	r3, sp, #32
 8002818:	2201      	movs	r2, #1
 800281a:	2103      	movs	r1, #3
 800281c:	f004 fe7e 	bl	800751c <HAL_HRTIM_WaveformCompareConfig>
 8002820:	2800      	cmp	r0, #0
 8002822:	f040 80df 	bne.w	80029e4 <DCDC_TIMx_Configuration+0x840>
 8002826:	e001      	b.n	800282c <DCDC_TIMx_Configuration+0x688>
 8002828:	20009118 	.word	0x20009118
  {
    Error_Handler();
  }
  pCompareCfg.CompareValue = (uint32_t)(TIMD_PERIOD*TIMD_DUTY_CYCLE);
 800282c:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8002830:	9208      	str	r2, [sp, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8002832:	48bf      	ldr	r0, [pc, #764]	; (8002b30 <DCDC_TIMx_Configuration+0x98c>)
 8002834:	ab08      	add	r3, sp, #32
 8002836:	2202      	movs	r2, #2
 8002838:	2103      	movs	r1, #3
 800283a:	f004 fe6f 	bl	800751c <HAL_HRTIM_WaveformCompareConfig>
 800283e:	2800      	cmp	r0, #0
 8002840:	f040 80cd 	bne.w	80029de <DCDC_TIMx_Configuration+0x83a>
  {
    Error_Handler();
  }
  pCompareCfg.CompareValue = (uint32_t)TIMF_PERIOD*1.5;
 8002844:	f64b 72fe 	movw	r2, #49150	; 0xbffe
 8002848:	9208      	str	r2, [sp, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 800284a:	48b9      	ldr	r0, [pc, #740]	; (8002b30 <DCDC_TIMx_Configuration+0x98c>)
 800284c:	ab08      	add	r3, sp, #32
 800284e:	2204      	movs	r2, #4
 8002850:	2103      	movs	r1, #3
 8002852:	f004 fe63 	bl	800751c <HAL_HRTIM_WaveformCompareConfig>
 8002856:	2800      	cmp	r0, #0
 8002858:	f040 80be 	bne.w	80029d8 <DCDC_TIMx_Configuration+0x834>
  {
    Error_Handler();
  }
  pTimeBaseCfg.Period = (uint32_t)(TIMF_PERIOD);
  pTimeBaseCfg.RepetitionCounter = 1;
 800285c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002860:	2301      	movs	r3, #1
 8002862:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
  pTimeBaseCfg.Mode = HRTIM_MODE_SINGLESHOT_RETRIGGERABLE;
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8002866:	48b2      	ldr	r0, [pc, #712]	; (8002b30 <DCDC_TIMx_Configuration+0x98c>)
  pTimeBaseCfg.Mode = HRTIM_MODE_SINGLESHOT_RETRIGGERABLE;
 8002868:	2310      	movs	r3, #16
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 800286a:	aa0f      	add	r2, sp, #60	; 0x3c
 800286c:	2104      	movs	r1, #4
  pTimeBaseCfg.Mode = HRTIM_MODE_SINGLESHOT_RETRIGGERABLE;
 800286e:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8002870:	f003 fe40 	bl	80064f4 <HAL_HRTIM_TimeBaseConfig>
 8002874:	2800      	cmp	r0, #0
 8002876:	f040 80ac 	bne.w	80029d2 <DCDC_TIMx_Configuration+0x82e>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCtl) != HAL_OK)
 800287a:	48ad      	ldr	r0, [pc, #692]	; (8002b30 <DCDC_TIMx_Configuration+0x98c>)
 800287c:	aa18      	add	r2, sp, #96	; 0x60
 800287e:	2104      	movs	r1, #4
 8002880:	f004 fcd8 	bl	8007234 <HAL_HRTIM_WaveformTimerControl>
 8002884:	2800      	cmp	r0, #0
 8002886:	f040 80a1 	bne.w	80029cc <DCDC_TIMx_Configuration+0x828>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_RollOverModeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_TIM_FEROM_BOTH|HRTIM_TIM_BMROM_BOTH
 800288a:	48a9      	ldr	r0, [pc, #676]	; (8002b30 <DCDC_TIMx_Configuration+0x98c>)
 800288c:	2200      	movs	r2, #0
 800288e:	2104      	movs	r1, #4
 8002890:	f004 fb44 	bl	8006f1c <HAL_HRTIM_RollOverModeConfig>
 8002894:	2800      	cmp	r0, #0
 8002896:	f040 8096 	bne.w	80029c6 <DCDC_TIMx_Configuration+0x822>
                              |HRTIM_TIM_ADROM_BOTH|HRTIM_TIM_OUTROM_BOTH
                              |HRTIM_TIM_ROM_BOTH) != HAL_OK)
  {
    Error_Handler();
  }
  pTimeBaseCfg.Period = (uint32_t)TIMF_PERIOD;
 800289a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800289e:	930f      	str	r3, [sp, #60]	; 0x3c
  pTimeBaseCfg.RepetitionCounter = 1;
 80028a0:	2301      	movs	r3, #1
 80028a2:	9310      	str	r3, [sp, #64]	; 0x40
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimeBaseCfg) != HAL_OK)
 80028a4:	48a2      	ldr	r0, [pc, #648]	; (8002b30 <DCDC_TIMx_Configuration+0x98c>)
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80028a6:	2308      	movs	r3, #8
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimeBaseCfg) != HAL_OK)
 80028a8:	aa0f      	add	r2, sp, #60	; 0x3c
 80028aa:	2105      	movs	r1, #5
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80028ac:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimeBaseCfg) != HAL_OK)
 80028ae:	f003 fe21 	bl	80064f4 <HAL_HRTIM_TimeBaseConfig>
 80028b2:	2800      	cmp	r0, #0
 80028b4:	f040 8084 	bne.w	80029c0 <DCDC_TIMx_Configuration+0x81c>
  {
    Error_Handler();
  }
  pTimerCtl.GreaterCMP3 = HRTIM_TIMERGTCMP3_EQUAL;
 80028b8:	2300      	movs	r3, #0
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCtl) != HAL_OK)
 80028ba:	489d      	ldr	r0, [pc, #628]	; (8002b30 <DCDC_TIMx_Configuration+0x98c>)
  pTimerCtl.GreaterCMP3 = HRTIM_TIMERGTCMP3_EQUAL;
 80028bc:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCtl) != HAL_OK)
 80028be:	aa18      	add	r2, sp, #96	; 0x60
 80028c0:	2105      	movs	r1, #5
 80028c2:	f004 fcb7 	bl	8007234 <HAL_HRTIM_WaveformTimerControl>
 80028c6:	2800      	cmp	r0, #0
 80028c8:	d177      	bne.n	80029ba <DCDC_TIMx_Configuration+0x816>
  {
    Error_Handler();
  }
  if (HAL_HRTIM_RollOverModeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_TIM_FEROM_VALLEY|HRTIM_TIM_BMROM_VALLEY
 80028ca:	4899      	ldr	r0, [pc, #612]	; (8002b30 <DCDC_TIMx_Configuration+0x98c>)
 80028cc:	f245 5240 	movw	r2, #21824	; 0x5540
 80028d0:	2105      	movs	r1, #5
 80028d2:	f004 fb23 	bl	8006f1c <HAL_HRTIM_RollOverModeConfig>
 80028d6:	2800      	cmp	r0, #0
 80028d8:	d16c      	bne.n	80029b4 <DCDC_TIMx_Configuration+0x810>
                              |HRTIM_TIM_ADROM_VALLEY|HRTIM_TIM_OUTROM_VALLEY
                              |HRTIM_TIM_ROM_VALLEY) != HAL_OK)
  {
    Error_Handler();
  }
  pCompareCfg.CompareValue = (uint32_t)(TIMF_PERIOD/2);
 80028da:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80028de:	9108      	str	r1, [sp, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80028e0:	4893      	ldr	r0, [pc, #588]	; (8002b30 <DCDC_TIMx_Configuration+0x98c>)
 80028e2:	ab08      	add	r3, sp, #32
 80028e4:	2201      	movs	r2, #1
 80028e6:	2104      	movs	r1, #4
 80028e8:	f004 fe18 	bl	800751c <HAL_HRTIM_WaveformCompareConfig>
 80028ec:	2800      	cmp	r0, #0
 80028ee:	d15e      	bne.n	80029ae <DCDC_TIMx_Configuration+0x80a>
  {
    Error_Handler();
  }
  pCompareCfg.CompareValue = (uint32_t)(TIMF_PERIOD/2);
 80028f0:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80028f4:	9108      	str	r1, [sp, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80028f6:	488e      	ldr	r0, [pc, #568]	; (8002b30 <DCDC_TIMx_Configuration+0x98c>)
 80028f8:	ab08      	add	r3, sp, #32
 80028fa:	2202      	movs	r2, #2
 80028fc:	2104      	movs	r1, #4
 80028fe:	f004 fe0d 	bl	800751c <HAL_HRTIM_WaveformCompareConfig>
 8002902:	2800      	cmp	r0, #0
 8002904:	d150      	bne.n	80029a8 <DCDC_TIMx_Configuration+0x804>
  {
    Error_Handler();
  }
  pCompareCfg.CompareValue = (uint32_t)(TIMF_PERIOD * TIMF_DUTY_CYCLE);
 8002906:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800290a:	9108      	str	r1, [sp, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 800290c:	4888      	ldr	r0, [pc, #544]	; (8002b30 <DCDC_TIMx_Configuration+0x98c>)
 800290e:	ab08      	add	r3, sp, #32
 8002910:	2201      	movs	r2, #1
 8002912:	2105      	movs	r1, #5
 8002914:	f004 fe02 	bl	800751c <HAL_HRTIM_WaveformCompareConfig>
 8002918:	2800      	cmp	r0, #0
 800291a:	d142      	bne.n	80029a2 <DCDC_TIMx_Configuration+0x7fe>
  {
    Error_Handler();
  }
  pCompareCfg.CompareValue = (uint32_t)(60);
 800291c:	213c      	movs	r1, #60	; 0x3c
 800291e:	9108      	str	r1, [sp, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8002920:	4883      	ldr	r0, [pc, #524]	; (8002b30 <DCDC_TIMx_Configuration+0x98c>)
 8002922:	ab08      	add	r3, sp, #32
 8002924:	2202      	movs	r2, #2
 8002926:	2105      	movs	r1, #5
 8002928:	f004 fdf8 	bl	800751c <HAL_HRTIM_WaveformCompareConfig>
 800292c:	2800      	cmp	r0, #0
 800292e:	d135      	bne.n	800299c <DCDC_TIMx_Configuration+0x7f8>
  {
    Error_Handler();
  }
  pCompareCfg.CompareValue = (uint32_t)((0));//(uint32_t)((TIMF_PERIOD * ADC23_TRIG_DUTY_CYCLE));
 8002930:	2100      	movs	r1, #0
 8002932:	9108      	str	r1, [sp, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8002934:	487e      	ldr	r0, [pc, #504]	; (8002b30 <DCDC_TIMx_Configuration+0x98c>)
 8002936:	ab08      	add	r3, sp, #32
 8002938:	2204      	movs	r2, #4
 800293a:	2105      	movs	r1, #5
 800293c:	f004 fdee 	bl	800751c <HAL_HRTIM_WaveformCompareConfig>
 8002940:	bb48      	cbnz	r0, 8002996 <DCDC_TIMx_Configuration+0x7f2>
  {
    Error_Handler();
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */
  HRTIM1_COMMON->CR2 |= (1 << 20);
 8002942:	4a7c      	ldr	r2, [pc, #496]	; (8002b34 <DCDC_TIMx_Configuration+0x990>)
  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8002944:	487a      	ldr	r0, [pc, #488]	; (8002b30 <DCDC_TIMx_Configuration+0x98c>)
  HRTIM1_COMMON->CR2 |= (1 << 20);
 8002946:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 800294a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800294e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8002952:	f002 fc9f 	bl	8005294 <HAL_HRTIM_MspPostInit>

  //HAL_HRTIM_BurstDMAConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_BURSTDMA_SET1R);
  //HAL_HRTIM_BurstDMATransfer(&hhrtim1,HRTIM_TIMERINDEX_TIMER_D,TIMD_DMA_Buffer[0],1);
}
 8002956:	b048      	add	sp, #288	; 0x120
 8002958:	bd10      	pop	{r4, pc}
    Error_Handler();
 800295a:	f002 fbc5 	bl	80050e8 <Error_Handler>
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 800295e:	4874      	ldr	r0, [pc, #464]	; (8002b30 <DCDC_TIMx_Configuration+0x98c>)
 8002960:	210c      	movs	r1, #12
 8002962:	f003 fd6d 	bl	8006440 <HAL_HRTIM_DLLCalibrationStart>
 8002966:	2800      	cmp	r0, #0
 8002968:	f43f ac64 	beq.w	8002234 <DCDC_TIMx_Configuration+0x90>
    Error_Handler();
 800296c:	f002 fbbc 	bl	80050e8 <Error_Handler>
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8002970:	486f      	ldr	r0, [pc, #444]	; (8002b30 <DCDC_TIMx_Configuration+0x98c>)
 8002972:	210a      	movs	r1, #10
 8002974:	f003 fd9c 	bl	80064b0 <HAL_HRTIM_PollForDLLCalibration>
 8002978:	2800      	cmp	r0, #0
 800297a:	f43f ac62 	beq.w	8002242 <DCDC_TIMx_Configuration+0x9e>
    Error_Handler();
 800297e:	f002 fbb3 	bl	80050e8 <Error_Handler>
  if (HAL_HRTIM_EventPrescalerConfig(&hhrtim1, HRTIM_EVENTPRESCALER_DIV1) != HAL_OK)
 8002982:	486b      	ldr	r0, [pc, #428]	; (8002b30 <DCDC_TIMx_Configuration+0x98c>)
 8002984:	2100      	movs	r1, #0
 8002986:	f003 fe11 	bl	80065ac <HAL_HRTIM_EventPrescalerConfig>
 800298a:	2800      	cmp	r0, #0
 800298c:	f43f ac60 	beq.w	8002250 <DCDC_TIMx_Configuration+0xac>
    Error_Handler();
 8002990:	f002 fbaa 	bl	80050e8 <Error_Handler>
 8002994:	e45c      	b.n	8002250 <DCDC_TIMx_Configuration+0xac>
    Error_Handler();
 8002996:	f002 fba7 	bl	80050e8 <Error_Handler>
 800299a:	e7d2      	b.n	8002942 <DCDC_TIMx_Configuration+0x79e>
    Error_Handler();
 800299c:	f002 fba4 	bl	80050e8 <Error_Handler>
 80029a0:	e7c6      	b.n	8002930 <DCDC_TIMx_Configuration+0x78c>
    Error_Handler();
 80029a2:	f002 fba1 	bl	80050e8 <Error_Handler>
 80029a6:	e7b9      	b.n	800291c <DCDC_TIMx_Configuration+0x778>
    Error_Handler();
 80029a8:	f002 fb9e 	bl	80050e8 <Error_Handler>
 80029ac:	e7ab      	b.n	8002906 <DCDC_TIMx_Configuration+0x762>
    Error_Handler();
 80029ae:	f002 fb9b 	bl	80050e8 <Error_Handler>
 80029b2:	e79d      	b.n	80028f0 <DCDC_TIMx_Configuration+0x74c>
    Error_Handler();
 80029b4:	f002 fb98 	bl	80050e8 <Error_Handler>
 80029b8:	e78f      	b.n	80028da <DCDC_TIMx_Configuration+0x736>
    Error_Handler();
 80029ba:	f002 fb95 	bl	80050e8 <Error_Handler>
 80029be:	e784      	b.n	80028ca <DCDC_TIMx_Configuration+0x726>
    Error_Handler();
 80029c0:	f002 fb92 	bl	80050e8 <Error_Handler>
 80029c4:	e778      	b.n	80028b8 <DCDC_TIMx_Configuration+0x714>
    Error_Handler();
 80029c6:	f002 fb8f 	bl	80050e8 <Error_Handler>
 80029ca:	e766      	b.n	800289a <DCDC_TIMx_Configuration+0x6f6>
    Error_Handler();
 80029cc:	f002 fb8c 	bl	80050e8 <Error_Handler>
 80029d0:	e75b      	b.n	800288a <DCDC_TIMx_Configuration+0x6e6>
    Error_Handler();
 80029d2:	f002 fb89 	bl	80050e8 <Error_Handler>
 80029d6:	e750      	b.n	800287a <DCDC_TIMx_Configuration+0x6d6>
    Error_Handler();
 80029d8:	f002 fb86 	bl	80050e8 <Error_Handler>
 80029dc:	e73e      	b.n	800285c <DCDC_TIMx_Configuration+0x6b8>
    Error_Handler();
 80029de:	f002 fb83 	bl	80050e8 <Error_Handler>
 80029e2:	e72f      	b.n	8002844 <DCDC_TIMx_Configuration+0x6a0>
    Error_Handler();
 80029e4:	f002 fb80 	bl	80050e8 <Error_Handler>
 80029e8:	e720      	b.n	800282c <DCDC_TIMx_Configuration+0x688>
    Error_Handler();
 80029ea:	f002 fb7d 	bl	80050e8 <Error_Handler>
 80029ee:	e70e      	b.n	800280e <DCDC_TIMx_Configuration+0x66a>
    Error_Handler();
 80029f0:	f002 fb7a 	bl	80050e8 <Error_Handler>
 80029f4:	e702      	b.n	80027fc <DCDC_TIMx_Configuration+0x658>
    Error_Handler();
 80029f6:	f002 fb77 	bl	80050e8 <Error_Handler>
 80029fa:	e6f3      	b.n	80027e4 <DCDC_TIMx_Configuration+0x640>
    Error_Handler();
 80029fc:	f002 fb74 	bl	80050e8 <Error_Handler>
 8002a00:	e6e2      	b.n	80027c8 <DCDC_TIMx_Configuration+0x624>
    Error_Handler();
 8002a02:	f002 fb71 	bl	80050e8 <Error_Handler>
 8002a06:	e6d7      	b.n	80027b8 <DCDC_TIMx_Configuration+0x614>
    Error_Handler();
 8002a08:	f002 fb6e 	bl	80050e8 <Error_Handler>
 8002a0c:	e6cc      	b.n	80027a8 <DCDC_TIMx_Configuration+0x604>
    Error_Handler();
 8002a0e:	f002 fb6b 	bl	80050e8 <Error_Handler>
 8002a12:	e6bc      	b.n	800278e <DCDC_TIMx_Configuration+0x5ea>
    Error_Handler();
 8002a14:	f002 fb68 	bl	80050e8 <Error_Handler>
 8002a18:	e6ad      	b.n	8002776 <DCDC_TIMx_Configuration+0x5d2>
    Error_Handler();
 8002a1a:	f002 fb65 	bl	80050e8 <Error_Handler>
 8002a1e:	e69d      	b.n	800275c <DCDC_TIMx_Configuration+0x5b8>
    Error_Handler();
 8002a20:	f002 fb62 	bl	80050e8 <Error_Handler>
 8002a24:	e68e      	b.n	8002744 <DCDC_TIMx_Configuration+0x5a0>
    Error_Handler();
 8002a26:	f002 fb5f 	bl	80050e8 <Error_Handler>
 8002a2a:	e682      	b.n	8002732 <DCDC_TIMx_Configuration+0x58e>
    Error_Handler();
 8002a2c:	f002 fb5c 	bl	80050e8 <Error_Handler>
 8002a30:	e675      	b.n	800271e <DCDC_TIMx_Configuration+0x57a>
    Error_Handler();
 8002a32:	f002 fb59 	bl	80050e8 <Error_Handler>
 8002a36:	e663      	b.n	8002700 <DCDC_TIMx_Configuration+0x55c>
    Error_Handler();
 8002a38:	f002 fb56 	bl	80050e8 <Error_Handler>
 8002a3c:	e651      	b.n	80026e2 <DCDC_TIMx_Configuration+0x53e>
    Error_Handler();
 8002a3e:	f002 fb53 	bl	80050e8 <Error_Handler>
 8002a42:	e640      	b.n	80026c6 <DCDC_TIMx_Configuration+0x522>
    Error_Handler();
 8002a44:	f002 fb50 	bl	80050e8 <Error_Handler>
 8002a48:	e62a      	b.n	80026a0 <DCDC_TIMx_Configuration+0x4fc>
    Error_Handler();
 8002a4a:	f002 fb4d 	bl	80050e8 <Error_Handler>
 8002a4e:	e618      	b.n	8002682 <DCDC_TIMx_Configuration+0x4de>
    Error_Handler();
 8002a50:	f002 fb4a 	bl	80050e8 <Error_Handler>
 8002a54:	e606      	b.n	8002664 <DCDC_TIMx_Configuration+0x4c0>
    Error_Handler();
 8002a56:	f002 fb47 	bl	80050e8 <Error_Handler>
 8002a5a:	e5f4      	b.n	8002646 <DCDC_TIMx_Configuration+0x4a2>
    Error_Handler();
 8002a5c:	f002 fb44 	bl	80050e8 <Error_Handler>
 8002a60:	e5e9      	b.n	8002636 <DCDC_TIMx_Configuration+0x492>
    Error_Handler();
 8002a62:	f002 fb41 	bl	80050e8 <Error_Handler>
 8002a66:	e5d4      	b.n	8002612 <DCDC_TIMx_Configuration+0x46e>
    Error_Handler();
 8002a68:	f002 fb3e 	bl	80050e8 <Error_Handler>
 8002a6c:	e5c8      	b.n	8002600 <DCDC_TIMx_Configuration+0x45c>
    Error_Handler();
 8002a6e:	f002 fb3b 	bl	80050e8 <Error_Handler>
 8002a72:	e5b9      	b.n	80025e8 <DCDC_TIMx_Configuration+0x444>
    Error_Handler();
 8002a74:	f002 fb38 	bl	80050e8 <Error_Handler>
 8002a78:	e5a7      	b.n	80025ca <DCDC_TIMx_Configuration+0x426>
    Error_Handler();
 8002a7a:	f002 fb35 	bl	80050e8 <Error_Handler>
 8002a7e:	e595      	b.n	80025ac <DCDC_TIMx_Configuration+0x408>
    Error_Handler();
 8002a80:	f002 fb32 	bl	80050e8 <Error_Handler>
 8002a84:	e579      	b.n	800257a <DCDC_TIMx_Configuration+0x3d6>
    Error_Handler();
 8002a86:	f002 fb2f 	bl	80050e8 <Error_Handler>
 8002a8a:	e55a      	b.n	8002542 <DCDC_TIMx_Configuration+0x39e>
    Error_Handler();
 8002a8c:	f002 fb2c 	bl	80050e8 <Error_Handler>
 8002a90:	e529      	b.n	80024e6 <DCDC_TIMx_Configuration+0x342>
    Error_Handler();
 8002a92:	f002 fb29 	bl	80050e8 <Error_Handler>
 8002a96:	e51a      	b.n	80024ce <DCDC_TIMx_Configuration+0x32a>
    Error_Handler();
 8002a98:	f002 fb26 	bl	80050e8 <Error_Handler>
 8002a9c:	e4f7      	b.n	800248e <DCDC_TIMx_Configuration+0x2ea>
    Error_Handler();
 8002a9e:	f002 fb23 	bl	80050e8 <Error_Handler>
 8002aa2:	e4e9      	b.n	8002478 <DCDC_TIMx_Configuration+0x2d4>
    Error_Handler();
 8002aa4:	f002 fb20 	bl	80050e8 <Error_Handler>
 8002aa8:	e4dc      	b.n	8002464 <DCDC_TIMx_Configuration+0x2c0>
    Error_Handler();
 8002aaa:	f002 fb1d 	bl	80050e8 <Error_Handler>
 8002aae:	e4cd      	b.n	800244c <DCDC_TIMx_Configuration+0x2a8>
    Error_Handler();
 8002ab0:	f002 fb1a 	bl	80050e8 <Error_Handler>
 8002ab4:	e4be      	b.n	8002434 <DCDC_TIMx_Configuration+0x290>
    Error_Handler();
 8002ab6:	f002 fb17 	bl	80050e8 <Error_Handler>
 8002aba:	e4af      	b.n	800241c <DCDC_TIMx_Configuration+0x278>
    Error_Handler();
 8002abc:	f002 fb14 	bl	80050e8 <Error_Handler>
 8002ac0:	e4a0      	b.n	8002404 <DCDC_TIMx_Configuration+0x260>
    Error_Handler();
 8002ac2:	f002 fb11 	bl	80050e8 <Error_Handler>
 8002ac6:	e484      	b.n	80023d2 <DCDC_TIMx_Configuration+0x22e>
    Error_Handler();
 8002ac8:	f002 fb0e 	bl	80050e8 <Error_Handler>
 8002acc:	e471      	b.n	80023b2 <DCDC_TIMx_Configuration+0x20e>
    Error_Handler();
 8002ace:	f002 fb0b 	bl	80050e8 <Error_Handler>
 8002ad2:	e466      	b.n	80023a2 <DCDC_TIMx_Configuration+0x1fe>
    Error_Handler();
 8002ad4:	f002 fb08 	bl	80050e8 <Error_Handler>
 8002ad8:	e45b      	b.n	8002392 <DCDC_TIMx_Configuration+0x1ee>
    Error_Handler();
 8002ada:	f002 fb05 	bl	80050e8 <Error_Handler>
 8002ade:	e450      	b.n	8002382 <DCDC_TIMx_Configuration+0x1de>
    Error_Handler();
 8002ae0:	f002 fb02 	bl	80050e8 <Error_Handler>
 8002ae4:	e43f      	b.n	8002366 <DCDC_TIMx_Configuration+0x1c2>
    Error_Handler();
 8002ae6:	f002 faff 	bl	80050e8 <Error_Handler>
 8002aea:	e434      	b.n	8002356 <DCDC_TIMx_Configuration+0x1b2>
    Error_Handler();
 8002aec:	f002 fafc 	bl	80050e8 <Error_Handler>
 8002af0:	e429      	b.n	8002346 <DCDC_TIMx_Configuration+0x1a2>
    Error_Handler();
 8002af2:	f002 faf9 	bl	80050e8 <Error_Handler>
 8002af6:	e41e      	b.n	8002336 <DCDC_TIMx_Configuration+0x192>
    Error_Handler();
 8002af8:	f002 faf6 	bl	80050e8 <Error_Handler>
 8002afc:	e40a      	b.n	8002314 <DCDC_TIMx_Configuration+0x170>
    Error_Handler();
 8002afe:	f002 faf3 	bl	80050e8 <Error_Handler>
 8002b02:	f7ff bbf9 	b.w	80022f8 <DCDC_TIMx_Configuration+0x154>
    Error_Handler();
 8002b06:	f002 faef 	bl	80050e8 <Error_Handler>
 8002b0a:	f7ff bbed 	b.w	80022e8 <DCDC_TIMx_Configuration+0x144>
    Error_Handler();
 8002b0e:	f002 faeb 	bl	80050e8 <Error_Handler>
 8002b12:	f7ff bbe1 	b.w	80022d8 <DCDC_TIMx_Configuration+0x134>
    Error_Handler();
 8002b16:	f002 fae7 	bl	80050e8 <Error_Handler>
 8002b1a:	f7ff bbd5 	b.w	80022c8 <DCDC_TIMx_Configuration+0x124>
    Error_Handler();
 8002b1e:	f002 fae3 	bl	80050e8 <Error_Handler>
 8002b22:	f7ff bbc9 	b.w	80022b8 <DCDC_TIMx_Configuration+0x114>
    Error_Handler();
 8002b26:	f002 fadf 	bl	80050e8 <Error_Handler>
 8002b2a:	f7ff bbbd 	b.w	80022a8 <DCDC_TIMx_Configuration+0x104>
 8002b2e:	bf00      	nop
 8002b30:	20009118 	.word	0x20009118
 8002b34:	40016b00 	.word	0x40016b00
    Error_Handler();
 8002b38:	f002 fad6 	bl	80050e8 <Error_Handler>
 8002b3c:	f7ff bba8 	b.w	8002290 <DCDC_TIMx_Configuration+0xec>
    Error_Handler();
 8002b40:	f002 fad2 	bl	80050e8 <Error_Handler>
 8002b44:	f7ff bb9d 	b.w	8002282 <DCDC_TIMx_Configuration+0xde>
    Error_Handler();
 8002b48:	f002 face 	bl	80050e8 <Error_Handler>
 8002b4c:	f7ff bb8f 	b.w	800226e <DCDC_TIMx_Configuration+0xca>

08002b50 <DCDC_Init>:
    if (pDCDCInit)
 8002b50:	b1a0      	cbz	r0, 8002b7c <DCDC_Init+0x2c>
{
 8002b52:	b538      	push	{r3, r4, r5, lr}
        if (LocalDevice.State != DCDC_Running)
 8002b54:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <DCDC_Init+0x30>)
 8002b56:	7d1a      	ldrb	r2, [r3, #20]
 8002b58:	2a01      	cmp	r2, #1
 8002b5a:	d00d      	beq.n	8002b78 <DCDC_Init+0x28>
            LocalDevice.Init.frequency = pDCDCInit->frequency;
 8002b5c:	e9d0 4103 	ldrd	r4, r1, [r0, #12]
            LocalDevice.Init.Counter = pDCDCInit->Counter;
 8002b60:	6805      	ldr	r5, [r0, #0]
            LocalDevice.Init.PhaseShift = pDCDCInit->PhaseShift;
 8002b62:	6842      	ldr	r2, [r0, #4]
            LocalDevice.Init.DutyCycle = pDCDCInit->DutyCycle;
 8002b64:	60dc      	str	r4, [r3, #12]
            LocalDevice.State = DCDC_Stopped;
 8002b66:	2400      	movs	r4, #0
            LocalDevice.Init.Counter = pDCDCInit->Counter;
 8002b68:	601d      	str	r5, [r3, #0]
            LocalDevice.Init.frequency = pDCDCInit->frequency;
 8002b6a:	6119      	str	r1, [r3, #16]
            LocalDevice.Init.PhaseShift = pDCDCInit->PhaseShift;
 8002b6c:	605a      	str	r2, [r3, #4]
            LocalDevice.State = DCDC_Stopped;
 8002b6e:	751c      	strb	r4, [r3, #20]
            DCDC_TIMx_Configuration();
 8002b70:	f7ff fb18 	bl	80021a4 <DCDC_TIMx_Configuration>
            nRet = DCDC_ERROR_NONE;
 8002b74:	4620      	mov	r0, r4
}
 8002b76:	bd38      	pop	{r3, r4, r5, pc}
        nRet = DCDC_ERROR_ON_INIT;
 8002b78:	2002      	movs	r0, #2
}
 8002b7a:	bd38      	pop	{r3, r4, r5, pc}
    nRet = DCDC_ERROR_INVALID_PARAMETER;
 8002b7c:	2001      	movs	r0, #1
}
 8002b7e:	4770      	bx	lr
 8002b80:	200049cc 	.word	0x200049cc

08002b84 <DQ_PLL_Grid>:
* Output         : w,Theta.
* Return         : none.
*******************************************************************************/
Volt_Components DQ_PLL_Grid(s16 Voltage)

{
 8002b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  static u8 Count_Beta_2=0;
  static u8 Count_Alpha_2=0;

  qValpha=Voltage;

  Count_Alpha_2=(u8)(Count_Beta_2+Delay90); //((1/50Hz)/(1/21.600kHz)/4)-256
 8002b88:	4d37      	ldr	r5, [pc, #220]	; (8002c68 <DQ_PLL_Grid+0xe4>)
  Count_Beta_2++;

//  Index_Sin=((u8)(Theta>>8));
//  Index_Cos =((u8)(Theta>>8)+64);

  Index_Sin = ((u16)(Theta>>7) & (u16)(0x01FF));
 8002b8a:	4a38      	ldr	r2, [pc, #224]	; (8002c6c <DQ_PLL_Grid+0xe8>)
  Count_Alpha_2=(u8)(Count_Beta_2+Delay90); //((1/50Hz)/(1/21.600kHz)/4)-256
 8002b8c:	782b      	ldrb	r3, [r5, #0]
  BUFFER_Beta_Voltage[Count_Beta_2]=qValpha;
 8002b8e:	4e38      	ldr	r6, [pc, #224]	; (8002c70 <DQ_PLL_Grid+0xec>)
  Index_Sin = ((u16)(Theta>>7) & (u16)(0x01FF));
 8002b90:	f9b2 2000 	ldrsh.w	r2, [r2]
  BUFFER_Beta_Voltage[Count_Beta_2]=qValpha;
 8002b94:	f826 0013 	strh.w	r0, [r6, r3, lsl #1]
  Count_Alpha_2=(u8)(Count_Beta_2+Delay90); //((1/50Hz)/(1/21.600kHz)/4)-256
 8002b98:	f1a3 0167 	sub.w	r1, r3, #103	; 0x67
  qVbeta=-BUFFER_Beta_Voltage[(u8)Count_Alpha_2];
 8002b9c:	b2c9      	uxtb	r1, r1
  Count_Beta_2++;
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	702b      	strb	r3, [r5, #0]
  Index_Cos = ((u16)(Theta>>7)+128) & (u16)(0x01FF);
 8002ba2:	11d3      	asrs	r3, r2, #7
  qVbeta=-BUFFER_Beta_Voltage[(u8)Count_Alpha_2];
 8002ba4:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8002ba8:	4d32      	ldr	r5, [pc, #200]	; (8002c74 <DQ_PLL_Grid+0xf0>)

//  Index_Sin = (u16)(new_mul_q15_q15_q31(Theta, 350) >> 16);
//  Index_Cos = (u16)(new_mul_q15_q15_q31(Theta, 350) >> 16)+88;

  Sin_Theta = Sin_Cos_Table[Index_Sin];
 8002baa:	4e33      	ldr	r6, [pc, #204]	; (8002c78 <DQ_PLL_Grid+0xf4>)
  Index_Sin = ((u16)(Theta>>7) & (u16)(0x01FF));
 8002bac:	4c33      	ldr	r4, [pc, #204]	; (8002c7c <DQ_PLL_Grid+0xf8>)
  qValpha=Voltage;
 8002bae:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8002c8c <DQ_PLL_Grid+0x108>
  Index_Cos = ((u16)(Theta>>7)+128) & (u16)(0x01FF);
 8002bb2:	3380      	adds	r3, #128	; 0x80
 8002bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
  Index_Sin = ((u16)(Theta>>7) & (u16)(0x01FF));
 8002bb8:	f3c2 12c8 	ubfx	r2, r2, #7, #9
  qVbeta=-BUFFER_Beta_Voltage[(u8)Count_Alpha_2];
 8002bbc:	4249      	negs	r1, r1
  Sin_Theta = Sin_Cos_Table[Index_Sin];
 8002bbe:	f836 7012 	ldrh.w	r7, [r6, r2, lsl #1]
  qVbeta=-BUFFER_Beta_Voltage[(u8)Count_Alpha_2];
 8002bc2:	8029      	strh	r1, [r5, #0]
  Cos_Theta = Sin_Cos_Table[Index_Cos];
 8002bc4:	f936 1013 	ldrsh.w	r1, [r6, r3, lsl #1]
  Sin_Theta = Sin_Cos_Table[Index_Sin];
 8002bc8:	4e2d      	ldr	r6, [pc, #180]	; (8002c80 <DQ_PLL_Grid+0xfc>)
  Index_Sin = ((u16)(Theta>>7) & (u16)(0x01FF));
 8002bca:	8022      	strh	r2, [r4, #0]
  Index_Cos = ((u16)(Theta>>7)+128) & (u16)(0x01FF);
 8002bcc:	4a2d      	ldr	r2, [pc, #180]	; (8002c84 <DQ_PLL_Grid+0x100>)
  Sin_Theta = Sin_Cos_Table[Index_Sin];
 8002bce:	8037      	strh	r7, [r6, #0]
{
 8002bd0:	b086      	sub	sp, #24
  Cos_Theta = Sin_Cos_Table[Index_Cos];
 8002bd2:	4f2d      	ldr	r7, [pc, #180]	; (8002c88 <DQ_PLL_Grid+0x104>)
  Index_Cos = ((u16)(Theta>>7)+128) & (u16)(0x01FF);
 8002bd4:	8013      	strh	r3, [r2, #0]
  s32 qVd_Grid_tmp_1=0, qVd_Grid_tmp_2=0;
 8002bd6:	2300      	movs	r3, #0


  mul_q15_q15_q31(qValpha,Cos_Theta,&qVq_Grid_tmp_1);
 8002bd8:	aa03      	add	r2, sp, #12
  s32 qVd_Grid_tmp_1=0, qVd_Grid_tmp_2=0;
 8002bda:	e9cd 3301 	strd	r3, r3, [sp, #4]
  s32 qVq_Grid_tmp_1=0, qVq_Grid_tmp_2=0;
 8002bde:	e9cd 3303 	strd	r3, r3, [sp, #12]
  Cos_Theta = Sin_Cos_Table[Index_Cos];
 8002be2:	8039      	strh	r1, [r7, #0]
  qValpha=Voltage;
 8002be4:	f8a8 0000 	strh.w	r0, [r8]
  mul_q15_q15_q31(qValpha,Cos_Theta,&qVq_Grid_tmp_1);
 8002be8:	f000 ffee 	bl	8003bc8 <mul_q15_q15_q31>
  mul_q15_q15_q31(qVbeta,Sin_Theta,&qVq_Grid_tmp_2);
 8002bec:	f9b6 1000 	ldrsh.w	r1, [r6]
 8002bf0:	f9b5 0000 	ldrsh.w	r0, [r5]
 8002bf4:	aa04      	add	r2, sp, #16
 8002bf6:	f000 ffe7 	bl	8003bc8 <mul_q15_q15_q31>


  qVq_Grid_1 = (s16)(qVq_Grid_tmp_1/65536);
 8002bfa:	9c03      	ldr	r4, [sp, #12]
  qVq_Grid_2 = (s16)(qVq_Grid_tmp_2/65536);
 8002bfc:	9b04      	ldr	r3, [sp, #16]


  Volt_Output.qV_Quadrature = (s16)((qVq_Grid_1)-(qVq_Grid_2));	//SECONDO NREL


  mul_q15_q15_q31(qValpha,Sin_Theta,&qVd_Grid_tmp_1);           // SECONDO NREL
 8002bfe:	f9b6 1000 	ldrsh.w	r1, [r6]
 8002c02:	f9b8 0000 	ldrsh.w	r0, [r8]
  qVq_Grid_1 = (s16)(qVq_Grid_tmp_1/65536);
 8002c06:	2c00      	cmp	r4, #0
 8002c08:	bfbc      	itt	lt
 8002c0a:	f504 447f 	addlt.w	r4, r4, #65280	; 0xff00
 8002c0e:	34ff      	addlt	r4, #255	; 0xff
  qVq_Grid_2 = (s16)(qVq_Grid_tmp_2/65536);
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bfbc      	itt	lt
 8002c14:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8002c18:	33ff      	addlt	r3, #255	; 0xff
  mul_q15_q15_q31(qValpha,Sin_Theta,&qVd_Grid_tmp_1);           // SECONDO NREL
 8002c1a:	aa01      	add	r2, sp, #4
  qVq_Grid_1 = (s16)(qVq_Grid_tmp_1/65536);
 8002c1c:	1424      	asrs	r4, r4, #16
  Volt_Output.qV_Quadrature = (s16)((qVq_Grid_1)-(qVq_Grid_2));	//SECONDO NREL
 8002c1e:	eba4 4423 	sub.w	r4, r4, r3, asr #16
  mul_q15_q15_q31(qValpha,Sin_Theta,&qVd_Grid_tmp_1);           // SECONDO NREL
 8002c22:	f000 ffd1 	bl	8003bc8 <mul_q15_q15_q31>
  mul_q15_q15_q31(qVbeta,Cos_Theta,&qVd_Grid_tmp_2);            // SECONDO NREL
 8002c26:	aa02      	add	r2, sp, #8
 8002c28:	f9b7 1000 	ldrsh.w	r1, [r7]
 8002c2c:	f9b5 0000 	ldrsh.w	r0, [r5]
 8002c30:	f000 ffca 	bl	8003bc8 <mul_q15_q15_q31>


  qVd_Grid_1 = ((s16)(qVd_Grid_tmp_1/65536));
 8002c34:	9b01      	ldr	r3, [sp, #4]
  qVd_Grid_2 = ((s16)(qVd_Grid_tmp_2/65536));
 8002c36:	9a02      	ldr	r2, [sp, #8]
  qVd_Grid_1 = ((s16)(qVd_Grid_tmp_1/65536));
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bfbc      	itt	lt
 8002c3c:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8002c40:	33ff      	addlt	r3, #255	; 0xff
  qVd_Grid_2 = ((s16)(qVd_Grid_tmp_2/65536));
 8002c42:	2a00      	cmp	r2, #0
 8002c44:	bfbc      	itt	lt
 8002c46:	f502 427f 	addlt.w	r2, r2, #65280	; 0xff00
 8002c4a:	32ff      	addlt	r2, #255	; 0xff
  Volt_Output.qV_Quadrature = (s16)((qVq_Grid_1)-(qVq_Grid_2));	//SECONDO NREL
 8002c4c:	b224      	sxth	r4, r4
  qVd_Grid_1 = ((s16)(qVd_Grid_tmp_1/65536));
 8002c4e:	141b      	asrs	r3, r3, #16
  Volt_Output.qV_Direct = (s16)((qVd_Grid_1)+(qVd_Grid_2));	  //Vd component




  return (Volt_Output);
 8002c50:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8002c54:	b2a4      	uxth	r4, r4
 8002c56:	2000      	movs	r0, #0
 8002c58:	f364 000f 	bfi	r0, r4, #0, #16
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	f363 401f 	bfi	r0, r3, #16, #16


}
 8002c62:	b006      	add	sp, #24
 8002c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c68:	20004dff 	.word	0x20004dff
 8002c6c:	20004e20 	.word	0x20004e20
 8002c70:	20004bfc 	.word	0x20004bfc
 8002c74:	20004e36 	.word	0x20004e36
 8002c78:	0800a8d4 	.word	0x0800a8d4
 8002c7c:	20004e0a 	.word	0x20004e0a
 8002c80:	20004e14 	.word	0x20004e14
 8002c84:	20004e08 	.word	0x20004e08
 8002c88:	20004dfc 	.word	0x20004dfc
 8002c8c:	20004e34 	.word	0x20004e34

08002c90 <DQ_Current_Inverter>:
* Output         : w,Theta.
* Return         : none.
*******************************************************************************/
Curr_Components DQ_Current_Inverter(s16 qIalpha,s16 qIbeta)

{
 8002c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 // static u8 Index=0;////  to be deleted if not used!!!

  s16 qId_Inverter_1=0,qId_Inverter_2=0;
  s16 qIq_Inverter_1=0,qIq_Inverter_2=0;

  mul_q15_q15_q31(qIalpha,Sin_Theta,&qId_Inverter_tmp_1);
 8002c94:	4e24      	ldr	r6, [pc, #144]	; (8002d28 <DQ_Current_Inverter+0x98>)
  mul_q15_q15_q31(qIbeta,Cos_Theta,&qId_Inverter_tmp_2) ;
 8002c96:	4f25      	ldr	r7, [pc, #148]	; (8002d2c <DQ_Current_Inverter+0x9c>)
{
 8002c98:	b086      	sub	sp, #24
  s32 qId_Inverter_tmp_1=0, qId_Inverter_tmp_2=0;
 8002c9a:	2300      	movs	r3, #0
{
 8002c9c:	460d      	mov	r5, r1
  mul_q15_q15_q31(qIalpha,Sin_Theta,&qId_Inverter_tmp_1);
 8002c9e:	aa01      	add	r2, sp, #4
 8002ca0:	f9b6 1000 	ldrsh.w	r1, [r6]
  s32 qId_Inverter_tmp_1=0, qId_Inverter_tmp_2=0;
 8002ca4:	e9cd 3301 	strd	r3, r3, [sp, #4]
  s32 qIq_Inverter_tmp_1=0, qIq_Inverter_tmp_2=0;
 8002ca8:	e9cd 3303 	strd	r3, r3, [sp, #12]
{
 8002cac:	4680      	mov	r8, r0
  mul_q15_q15_q31(qIalpha,Sin_Theta,&qId_Inverter_tmp_1);
 8002cae:	f000 ff8b 	bl	8003bc8 <mul_q15_q15_q31>
  mul_q15_q15_q31(qIbeta,Cos_Theta,&qId_Inverter_tmp_2) ;
 8002cb2:	f9b7 1000 	ldrsh.w	r1, [r7]
 8002cb6:	aa02      	add	r2, sp, #8
 8002cb8:	4628      	mov	r0, r5
 8002cba:	f000 ff85 	bl	8003bc8 <mul_q15_q15_q31>

  qId_Inverter_1 = (s16)(qId_Inverter_tmp_1/65536);
 8002cbe:	9c01      	ldr	r4, [sp, #4]
  qId_Inverter_2 = (s16)(qId_Inverter_tmp_2/65536);
 8002cc0:	9b02      	ldr	r3, [sp, #8]

  Curr_Output_Inverter.qI_Direct = (s16)((qId_Inverter_1)+(qId_Inverter_2));


  mul_q15_q15_q31(qIalpha,Cos_Theta,&qIq_Inverter_tmp_1);
 8002cc2:	f9b7 1000 	ldrsh.w	r1, [r7]
  qId_Inverter_1 = (s16)(qId_Inverter_tmp_1/65536);
 8002cc6:	2c00      	cmp	r4, #0
 8002cc8:	bfbc      	itt	lt
 8002cca:	f504 447f 	addlt.w	r4, r4, #65280	; 0xff00
 8002cce:	34ff      	addlt	r4, #255	; 0xff
  qId_Inverter_2 = (s16)(qId_Inverter_tmp_2/65536);
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	bfbc      	itt	lt
 8002cd4:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8002cd8:	33ff      	addlt	r3, #255	; 0xff
  mul_q15_q15_q31(qIalpha,Cos_Theta,&qIq_Inverter_tmp_1);
 8002cda:	aa03      	add	r2, sp, #12
 8002cdc:	4640      	mov	r0, r8
  qId_Inverter_1 = (s16)(qId_Inverter_tmp_1/65536);
 8002cde:	1424      	asrs	r4, r4, #16
  Curr_Output_Inverter.qI_Direct = (s16)((qId_Inverter_1)+(qId_Inverter_2));
 8002ce0:	eb04 4423 	add.w	r4, r4, r3, asr #16
  mul_q15_q15_q31(qIalpha,Cos_Theta,&qIq_Inverter_tmp_1);
 8002ce4:	f000 ff70 	bl	8003bc8 <mul_q15_q15_q31>
  mul_q15_q15_q31(qIbeta,Sin_Theta,&qIq_Inverter_tmp_2);
 8002ce8:	aa04      	add	r2, sp, #16
 8002cea:	f9b6 1000 	ldrsh.w	r1, [r6]
 8002cee:	4628      	mov	r0, r5
 8002cf0:	f000 ff6a 	bl	8003bc8 <mul_q15_q15_q31>


  qIq_Inverter_1 = ((s16)(qIq_Inverter_tmp_1/65536));
 8002cf4:	9b03      	ldr	r3, [sp, #12]
  qIq_Inverter_2 = ((s16)(qIq_Inverter_tmp_2/65536));
 8002cf6:	9a04      	ldr	r2, [sp, #16]
  qIq_Inverter_1 = ((s16)(qIq_Inverter_tmp_1/65536));
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	bfbc      	itt	lt
 8002cfc:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8002d00:	33ff      	addlt	r3, #255	; 0xff
  qIq_Inverter_2 = ((s16)(qIq_Inverter_tmp_2/65536));
 8002d02:	2a00      	cmp	r2, #0
 8002d04:	bfbc      	itt	lt
 8002d06:	f502 427f 	addlt.w	r2, r2, #65280	; 0xff00
 8002d0a:	32ff      	addlt	r2, #255	; 0xff
  qIq_Inverter_1 = ((s16)(qIq_Inverter_tmp_1/65536));
 8002d0c:	141b      	asrs	r3, r3, #16

  Curr_Output_Inverter.qI_Quadrature = (s16)((qIq_Inverter_1)-(qIq_Inverter_2));

  return (Curr_Output_Inverter);
 8002d0e:	eba3 4312 	sub.w	r3, r3, r2, lsr #16
 8002d12:	b29b      	uxth	r3, r3
  Curr_Output_Inverter.qI_Direct = (s16)((qId_Inverter_1)+(qId_Inverter_2));
 8002d14:	b224      	sxth	r4, r4
  return (Curr_Output_Inverter);
 8002d16:	2000      	movs	r0, #0
 8002d18:	f363 000f 	bfi	r0, r3, #0, #16
 8002d1c:	b2a4      	uxth	r4, r4
 8002d1e:	f364 401f 	bfi	r0, r4, #16, #16

}
 8002d22:	b006      	add	sp, #24
 8002d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d28:	20004e14 	.word	0x20004e14
 8002d2c:	20004dfc 	.word	0x20004dfc

08002d30 <Rev_Park>:
/*********************************Inverse Park Transformation *****************/
/**************Valfa=Vd*Cos(theta)-Vq*Sin(theta)*******************************/
/**************Vbeta=Vq*Cos(theta)+Vd*Sin(theta)  *****************************/
/******************************************************************************/
Volt_AlphaBeta_Components Rev_Park(s16 Output_QuadraturePID,s16 Output_DirectPID)
{
 8002d30:	b510      	push	{r4, lr}
  s16 qValpha_1,qValpha_2=0;          //qVbeta_1,qVbeta_2;
  Volt_AlphaBeta_Components Volt_Output;



   mul_q15_q15_q31(Output_DirectPID,Sin_Theta,&qValpha_tmp1);
 8002d32:	4b12      	ldr	r3, [pc, #72]	; (8002d7c <Rev_Park+0x4c>)
{
 8002d34:	b084      	sub	sp, #16
 8002d36:	468c      	mov	ip, r1
 8002d38:	4604      	mov	r4, r0
   mul_q15_q15_q31(Output_DirectPID,Sin_Theta,&qValpha_tmp1);
 8002d3a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002d3e:	aa01      	add	r2, sp, #4
  s32 qValpha_tmp1,qValpha_tmp2=0;    //qVbeta_tmp1,qVbeta_tmp2;
 8002d40:	2300      	movs	r3, #0
   mul_q15_q15_q31(Output_DirectPID,Sin_Theta,&qValpha_tmp1);
 8002d42:	4660      	mov	r0, ip
  s32 qValpha_tmp1,qValpha_tmp2=0;    //qVbeta_tmp1,qVbeta_tmp2;
 8002d44:	9302      	str	r3, [sp, #8]
   mul_q15_q15_q31(Output_DirectPID,Sin_Theta,&qValpha_tmp1);
 8002d46:	f000 ff3f 	bl	8003bc8 <mul_q15_q15_q31>

   mul_q15_q15_q31(Output_QuadraturePID,Cos_Theta,&qValpha_tmp2);
 8002d4a:	4b0d      	ldr	r3, [pc, #52]	; (8002d80 <Rev_Park+0x50>)
 8002d4c:	aa02      	add	r2, sp, #8
 8002d4e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002d52:	4620      	mov	r0, r4
 8002d54:	f000 ff38 	bl	8003bc8 <mul_q15_q15_q31>


  qValpha_1 = (s16)(qValpha_tmp1/65536);
 8002d58:	9801      	ldr	r0, [sp, #4]
  qValpha_2 = (s16)(qValpha_tmp2/65536);
 8002d5a:	9b02      	ldr	r3, [sp, #8]
  qValpha_1 = (s16)(qValpha_tmp1/65536);
 8002d5c:	2800      	cmp	r0, #0
 8002d5e:	bfbc      	itt	lt
 8002d60:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8002d64:	30ff      	addlt	r0, #255	; 0xff
  qValpha_2 = (s16)(qValpha_tmp2/65536);
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	bfbc      	itt	lt
 8002d6a:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8002d6e:	33ff      	addlt	r3, #255	; 0xff
  qValpha_1 = (s16)(qValpha_tmp1/65536);
 8002d70:	1400      	asrs	r0, r0, #16

  Volt_Output.qValpha = ((qValpha_1)+(qValpha_2));

  Volt_Output.qVbeta = 0;//((qVbeta_1)+(qVbeta_2));

  return(Volt_Output);
 8002d72:	eb00 4013 	add.w	r0, r0, r3, lsr #16
}
 8002d76:	b280      	uxth	r0, r0
 8002d78:	b004      	add	sp, #16
 8002d7a:	bd10      	pop	{r4, pc}
 8002d7c:	20004e14 	.word	0x20004e14
 8002d80:	20004dfc 	.word	0x20004dfc

08002d84 <Calc_Theta_Grid>:
  return(Volt_Output);
}


void Calc_Theta_Grid(s16 Input_Integration)
{
 8002d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 static s32 Delta_Theta_tmp=0;
 static s16 Delta_Theta=0;
 static u16 freq_monitor_time=0;

 mul_q15_q15_q31(Input_Integration,SAMPLING_TIME,&Delta_Theta_tmp);
 8002d88:	4e70      	ldr	r6, [pc, #448]	; (8002f4c <Calc_Theta_Grid+0x1c8>)

 Delta_Theta = (s16)(Delta_Theta_tmp>>16);

 Theta=Theta+Delta_Theta;//
 8002d8a:	4d71      	ldr	r5, [pc, #452]	; (8002f50 <Calc_Theta_Grid+0x1cc>)

 Theta_time++;
 8002d8c:	4c71      	ldr	r4, [pc, #452]	; (8002f54 <Calc_Theta_Grid+0x1d0>)
 mul_q15_q15_q31(Input_Integration,SAMPLING_TIME,&Delta_Theta_tmp);
 8002d8e:	f641 71fe 	movw	r1, #8190	; 0x1ffe
 8002d92:	4632      	mov	r2, r6
 8002d94:	f000 ff18 	bl	8003bc8 <mul_q15_q15_q31>
 Theta=Theta+Delta_Theta;//
 8002d98:	882b      	ldrh	r3, [r5, #0]
 Delta_Theta = (s16)(Delta_Theta_tmp>>16);
 8002d9a:	f9b6 1002 	ldrsh.w	r1, [r6, #2]

 if(tti<4096)
 8002d9e:	4a6e      	ldr	r2, [pc, #440]	; (8002f58 <Calc_Theta_Grid+0x1d4>)
 Theta=Theta+Delta_Theta;//
 8002da0:	4419      	add	r1, r3
 Theta_time++;
 8002da2:	8823      	ldrh	r3, [r4, #0]
 8002da4:	3301      	adds	r3, #1
 8002da6:	8023      	strh	r3, [r4, #0]
 if(tti<4096)
 8002da8:	8813      	ldrh	r3, [r2, #0]
 Theta=Theta+Delta_Theta;//
 8002daa:	b208      	sxth	r0, r1
 if(tti<4096)
 8002dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 Theta=Theta+Delta_Theta;//
 8002db0:	8028      	strh	r0, [r5, #0]
 8002db2:	b289      	uxth	r1, r1
 if(tti<4096)
 8002db4:	d375      	bcc.n	8002ea2 <Calc_Theta_Grid+0x11e>
 {
 tti++;
 theta_total[tti] = (int32_t)(((Theta+0x8000)-Theta_previous));//Theta; //(int32_t)(((Theta+0x8000)-Theta_previous));
 8002db6:	4e69      	ldr	r6, [pc, #420]	; (8002f5c <Calc_Theta_Grid+0x1d8>)
 }


  if(zero_detect==50)
 8002db8:	4d69      	ldr	r5, [pc, #420]	; (8002f60 <Calc_Theta_Grid+0x1dc>)
 theta_total[tti] = (int32_t)(((Theta+0x8000)-Theta_previous));//Theta; //(int32_t)(((Theta+0x8000)-Theta_previous));
 8002dba:	8833      	ldrh	r3, [r6, #0]
 8002dbc:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8002dc0:	1ac0      	subs	r0, r0, r3
  if(zero_detect==50)
 8002dc2:	882b      	ldrh	r3, [r5, #0]
 8002dc4:	2b32      	cmp	r3, #50	; 0x32
 8002dc6:	d07b      	beq.n	8002ec0 <Calc_Theta_Grid+0x13c>

 VqFiltered_prec = (u16)(Grid_Volt_q_d.qV_Quadrature + 0x8000);

 VqFiltered = (u16)(((s32)(((s32)VqFiltered<<8) - (s32)VqFiltered) +  (s32)(VqFiltered_prec))>>8);

  if(VqFiltered>VqFiltered_max) VqFiltered_max=VqFiltered;
 8002dc8:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8002fa4 <Calc_Theta_Grid+0x220>
  else if(VqFiltered<VqFiltered_min) VqFiltered_min=VqFiltered;
 8002dcc:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8002fa8 <Calc_Theta_Grid+0x224>
  if(VqFiltered>VqFiltered_max) VqFiltered_max=VqFiltered;
 8002dd0:	f8b8 3000 	ldrh.w	r3, [r8]
  else if(VqFiltered<VqFiltered_min) VqFiltered_min=VqFiltered;
 8002dd4:	f8b9 e000 	ldrh.w	lr, [r9]
 VqFiltered = (u16)(((s32)(((s32)VqFiltered<<8) - (s32)VqFiltered) +  (s32)(VqFiltered_prec))>>8);
 8002dd8:	4f62      	ldr	r7, [pc, #392]	; (8002f64 <Calc_Theta_Grid+0x1e0>)
 VqFiltered_prec = (u16)(Grid_Volt_q_d.qV_Quadrature + 0x8000);
 8002dda:	4a63      	ldr	r2, [pc, #396]	; (8002f68 <Calc_Theta_Grid+0x1e4>)
 8002ddc:	f8b2 c000 	ldrh.w	ip, [r2]
 VqFiltered = (u16)(((s32)(((s32)VqFiltered<<8) - (s32)VqFiltered) +  (s32)(VqFiltered_prec))>>8);
 8002de0:	883a      	ldrh	r2, [r7, #0]
 VqFiltered_prec = (u16)(Grid_Volt_q_d.qV_Quadrature + 0x8000);
 8002de2:	f48c 4c00 	eor.w	ip, ip, #32768	; 0x8000
 VqFiltered = (u16)(((s32)(((s32)VqFiltered<<8) - (s32)VqFiltered) +  (s32)(VqFiltered_prec))>>8);
 8002de6:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8002dea:	4462      	add	r2, ip
 8002dec:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8002df0:	803a      	strh	r2, [r7, #0]
 VqFiltered_prec = (u16)(Grid_Volt_q_d.qV_Quadrature + 0x8000);
 8002df2:	4f5e      	ldr	r7, [pc, #376]	; (8002f6c <Calc_Theta_Grid+0x1e8>)
  if(VqFiltered>VqFiltered_max) VqFiltered_max=VqFiltered;
 8002df4:	429a      	cmp	r2, r3
 VqFiltered_prec = (u16)(Grid_Volt_q_d.qV_Quadrature + 0x8000);
 8002df6:	f8a7 c000 	strh.w	ip, [r7]
  if(VqFiltered>VqFiltered_max) VqFiltered_max=VqFiltered;
 8002dfa:	d96f      	bls.n	8002edc <Calc_Theta_Grid+0x158>
 8002dfc:	f8a8 2000 	strh.w	r2, [r8]
 8002e00:	4613      	mov	r3, r2

  VqFiltered_mean=(u16)((VqFiltered_max+VqFiltered_min)>>1);
 8002e02:	4a5b      	ldr	r2, [pc, #364]	; (8002f70 <Calc_Theta_Grid+0x1ec>)
 8002e04:	4473      	add	r3, lr
 8002e06:	105b      	asrs	r3, r3, #1
 8002e08:	6013      	str	r3, [r2, #0]
}
*/
  //GPIOG -> ODR ^= (1 << 9);

  //265V max & 186V min
   if((VqFiltered_mean>=48641 || VqFiltered_mean<=32837) && State_Control==GRID_INSERTION && MPPT_EN==TRUE && zero_detect>5 && Vacprot==TRUE)
 8002e0a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002e0e:	f1a3 0746 	sub.w	r7, r3, #70	; 0x46
 8002e12:	f643 52ba 	movw	r2, #15802	; 0x3dba
 8002e16:	4297      	cmp	r7, r2
 8002e18:	d903      	bls.n	8002e22 <Calc_Theta_Grid+0x9e>
 8002e1a:	4a56      	ldr	r2, [pc, #344]	; (8002f74 <Calc_Theta_Grid+0x1f0>)
 8002e1c:	7817      	ldrb	r7, [r2, #0]
 8002e1e:	2f15      	cmp	r7, #21
 8002e20:	d062      	beq.n	8002ee8 <Calc_Theta_Grid+0x164>
  // {
	   //LL_GPIO_TogglePin(SD_CS_GPIO_Port, SD_CS_Pin);
  // }

 //************************** ISLANDING DETECTION *****************************
 if(((Theta+0x8000)-Theta_previous)<=-20000)
 8002e22:	4a55      	ldr	r2, [pc, #340]	; (8002f78 <Calc_Theta_Grid+0x1f4>)
 8002e24:	4290      	cmp	r0, r2
 8002e26:	da0f      	bge.n	8002e48 <Calc_Theta_Grid+0xc4>
 {
  zero_detect++;
 8002e28:	882a      	ldrh	r2, [r5, #0]
  Theta_Grid = Theta_time;

//****************** DIAGNOSTIC AC - VOLTAGE AND FREQ AT STARTUP ***************
  //Freq 47 Hz - 53 Hz
  //Vac 185V - 265V
  if((State_Control==DIAGNOSTIC_AC_LINE) || (State_Control==DIAGNOSTIC_DC_LINE))
 8002e2a:	4f52      	ldr	r7, [pc, #328]	; (8002f74 <Calc_Theta_Grid+0x1f0>)
  zero_detect++;
 8002e2c:	3201      	adds	r2, #1
  if((State_Control==DIAGNOSTIC_AC_LINE) || (State_Control==DIAGNOSTIC_DC_LINE))
 8002e2e:	7838      	ldrb	r0, [r7, #0]
  zero_detect++;
 8002e30:	802a      	strh	r2, [r5, #0]
  Theta_Grid = Theta_time;
 8002e32:	4d52      	ldr	r5, [pc, #328]	; (8002f7c <Calc_Theta_Grid+0x1f8>)
 8002e34:	8822      	ldrh	r2, [r4, #0]
 8002e36:	802a      	strh	r2, [r5, #0]
  if((State_Control==DIAGNOSTIC_AC_LINE) || (State_Control==DIAGNOSTIC_DC_LINE))
 8002e38:	2805      	cmp	r0, #5
 8002e3a:	d00a      	beq.n	8002e52 <Calc_Theta_Grid+0xce>
 8002e3c:	280c      	cmp	r0, #12
 8002e3e:	d008      	beq.n	8002e52 <Calc_Theta_Grid+0xce>
     }
   }
//****************** DIAGNOSTIC AC - VOLTAGE AND FREQ AT GRID CONNECTION *******
  else
  {
	  if(State_Control == GRID_INSERTION && MPPT_EN == TRUE)
 8002e40:	2815      	cmp	r0, #21
 8002e42:	d06a      	beq.n	8002f1a <Calc_Theta_Grid+0x196>
	  }
  }
//****************** DIAGNOSTIC AC - VOLTAGE AND FREQ AT GRID CONNECTION *******


    Theta_time=0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	8023      	strh	r3, [r4, #0]
 }

 Theta_previous=Theta+0x8000;
 8002e48:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8002e4c:	8031      	strh	r1, [r6, #0]



 //********************** END ISLANDING DETECTION ******************************

}
 8002e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if((Theta_time>(GRID_FREQ_MAX) && Theta_time<(GRID_FREQ_MIN)) && (VqFiltered_mean >= 32837 && VqFiltered_mean<=48641)) //48641 = 254V
 8002e52:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8002e56:	2a30      	cmp	r2, #48	; 0x30
 8002e58:	d813      	bhi.n	8002e82 <Calc_Theta_Grid+0xfe>
 8002e5a:	3b45      	subs	r3, #69	; 0x45
 8002e5c:	f643 52bc 	movw	r2, #15804	; 0x3dbc
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d80e      	bhi.n	8002e82 <Calc_Theta_Grid+0xfe>
      if(freq_monitor_time>=50) //1 sec
 8002e64:	4b46      	ldr	r3, [pc, #280]	; (8002f80 <Calc_Theta_Grid+0x1fc>)
 8002e66:	881a      	ldrh	r2, [r3, #0]
 8002e68:	2a31      	cmp	r2, #49	; 0x31
 8002e6a:	d866      	bhi.n	8002f3a <Calc_Theta_Grid+0x1b6>
      if(Freq_Control==FREQ_OUT_OF_RANGE && GDVoltage == GRID_VOLTAGE_OUT_OF_RANGE)
 8002e6c:	4845      	ldr	r0, [pc, #276]	; (8002f84 <Calc_Theta_Grid+0x200>)
 8002e6e:	7800      	ldrb	r0, [r0, #0]
 8002e70:	2806      	cmp	r0, #6
 8002e72:	d1e7      	bne.n	8002e44 <Calc_Theta_Grid+0xc0>
 8002e74:	4844      	ldr	r0, [pc, #272]	; (8002f88 <Calc_Theta_Grid+0x204>)
 8002e76:	7800      	ldrb	r0, [r0, #0]
 8002e78:	2808      	cmp	r0, #8
 8002e7a:	d1e3      	bne.n	8002e44 <Calc_Theta_Grid+0xc0>
         freq_monitor_time++;
 8002e7c:	3201      	adds	r2, #1
 8002e7e:	801a      	strh	r2, [r3, #0]
 8002e80:	e7e0      	b.n	8002e44 <Calc_Theta_Grid+0xc0>
       freq_monitor_time=0;
 8002e82:	4a3f      	ldr	r2, [pc, #252]	; (8002f80 <Calc_Theta_Grid+0x1fc>)
 8002e84:	2300      	movs	r3, #0
 8002e86:	8013      	strh	r3, [r2, #0]
       Grid_Voltage_max=0;
 8002e88:	4a40      	ldr	r2, [pc, #256]	; (8002f8c <Calc_Theta_Grid+0x208>)
 8002e8a:	8013      	strh	r3, [r2, #0]
       Grid_Voltage_min=0;
 8002e8c:	4a40      	ldr	r2, [pc, #256]	; (8002f90 <Calc_Theta_Grid+0x20c>)
 8002e8e:	8013      	strh	r3, [r2, #0]
       Freq_Control = FREQ_OUT_OF_RANGE;
 8002e90:	4b3c      	ldr	r3, [pc, #240]	; (8002f84 <Calc_Theta_Grid+0x200>)
 8002e92:	2206      	movs	r2, #6
 8002e94:	701a      	strb	r2, [r3, #0]
       GDVoltage = GRID_VOLTAGE_OUT_OF_RANGE;
 8002e96:	4b3c      	ldr	r3, [pc, #240]	; (8002f88 <Calc_Theta_Grid+0x204>)
 8002e98:	2208      	movs	r2, #8
 8002e9a:	701a      	strb	r2, [r3, #0]
    Theta_time=0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	8023      	strh	r3, [r4, #0]
 8002ea0:	e7d2      	b.n	8002e48 <Calc_Theta_Grid+0xc4>
 theta_total[tti] = (int32_t)(((Theta+0x8000)-Theta_previous));//Theta; //(int32_t)(((Theta+0x8000)-Theta_previous));
 8002ea2:	4e2e      	ldr	r6, [pc, #184]	; (8002f5c <Calc_Theta_Grid+0x1d8>)
 tti++;
 8002ea4:	3301      	adds	r3, #1
 theta_total[tti] = (int32_t)(((Theta+0x8000)-Theta_previous));//Theta; //(int32_t)(((Theta+0x8000)-Theta_previous));
 8002ea6:	8835      	ldrh	r5, [r6, #0]
 tti++;
 8002ea8:	b29b      	uxth	r3, r3
 theta_total[tti] = (int32_t)(((Theta+0x8000)-Theta_previous));//Theta; //(int32_t)(((Theta+0x8000)-Theta_previous));
 8002eaa:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 tti++;
 8002eae:	8013      	strh	r3, [r2, #0]
 theta_total[tti] = (int32_t)(((Theta+0x8000)-Theta_previous));//Theta; //(int32_t)(((Theta+0x8000)-Theta_previous));
 8002eb0:	1b40      	subs	r0, r0, r5
 8002eb2:	4a38      	ldr	r2, [pc, #224]	; (8002f94 <Calc_Theta_Grid+0x210>)
  if(zero_detect==50)
 8002eb4:	4d2a      	ldr	r5, [pc, #168]	; (8002f60 <Calc_Theta_Grid+0x1dc>)
 theta_total[tti] = (int32_t)(((Theta+0x8000)-Theta_previous));//Theta; //(int32_t)(((Theta+0x8000)-Theta_previous));
 8002eb6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  if(zero_detect==50)
 8002eba:	882b      	ldrh	r3, [r5, #0]
 8002ebc:	2b32      	cmp	r3, #50	; 0x32
 8002ebe:	d183      	bne.n	8002dc8 <Calc_Theta_Grid+0x44>
   VqFiltered_min=65500;
 8002ec0:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8002fa8 <Calc_Theta_Grid+0x224>
   VqFiltered_max=0;
 8002ec4:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8002fa4 <Calc_Theta_Grid+0x220>
 8002ec8:	2300      	movs	r3, #0
   VqFiltered_min=65500;
 8002eca:	f64f 7edc 	movw	lr, #65500	; 0xffdc
   VqFiltered_max=0;
 8002ece:	f8a8 3000 	strh.w	r3, [r8]
   Theta_time=0;
 8002ed2:	8023      	strh	r3, [r4, #0]
   zero_detect=0;
 8002ed4:	802b      	strh	r3, [r5, #0]
   VqFiltered_min=65500;
 8002ed6:	f8a9 e000 	strh.w	lr, [r9]
   zero_detect=0;
 8002eda:	e77d      	b.n	8002dd8 <Calc_Theta_Grid+0x54>
  else if(VqFiltered<VqFiltered_min) VqFiltered_min=VqFiltered;
 8002edc:	4572      	cmp	r2, lr
 8002ede:	bf3c      	itt	cc
 8002ee0:	f8a9 2000 	strhcc.w	r2, [r9]
 8002ee4:	4696      	movcc	lr, r2
 8002ee6:	e78c      	b.n	8002e02 <Calc_Theta_Grid+0x7e>
   if((VqFiltered_mean>=48641 || VqFiltered_mean<=32837) && State_Control==GRID_INSERTION && MPPT_EN==TRUE && zero_detect>5 && Vacprot==TRUE)
 8002ee8:	4f2b      	ldr	r7, [pc, #172]	; (8002f98 <Calc_Theta_Grid+0x214>)
 8002eea:	783f      	ldrb	r7, [r7, #0]
 8002eec:	2f00      	cmp	r7, #0
 8002eee:	d098      	beq.n	8002e22 <Calc_Theta_Grid+0x9e>
 8002ef0:	882f      	ldrh	r7, [r5, #0]
 8002ef2:	2f05      	cmp	r7, #5
 8002ef4:	d995      	bls.n	8002e22 <Calc_Theta_Grid+0x9e>
 8002ef6:	4f29      	ldr	r7, [pc, #164]	; (8002f9c <Calc_Theta_Grid+0x218>)
 8002ef8:	783f      	ldrb	r7, [r7, #0]
 8002efa:	2f00      	cmp	r7, #0
 8002efc:	d091      	beq.n	8002e22 <Calc_Theta_Grid+0x9e>
  WRITE_REG(GPIOx->BRR, PinMask);
 8002efe:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 8002fac <Calc_Theta_Grid+0x228>
       Diagnostic_Control=GRID_VOLTAGE_OUT_OF_RANGE;
 8002f02:	4f27      	ldr	r7, [pc, #156]	; (8002fa0 <Calc_Theta_Grid+0x21c>)
 8002f04:	f04f 0e10 	mov.w	lr, #16
 8002f08:	f8cc e028 	str.w	lr, [ip, #40]	; 0x28
       State_Control = STOP_WITH_DELAY;
 8002f0c:	f04f 0c16 	mov.w	ip, #22
 8002f10:	f882 c000 	strb.w	ip, [r2]
       Diagnostic_Control=GRID_VOLTAGE_OUT_OF_RANGE;
 8002f14:	2208      	movs	r2, #8
 8002f16:	703a      	strb	r2, [r7, #0]
 8002f18:	e783      	b.n	8002e22 <Calc_Theta_Grid+0x9e>
	  if(State_Control == GRID_INSERTION && MPPT_EN == TRUE)
 8002f1a:	4b1f      	ldr	r3, [pc, #124]	; (8002f98 <Calc_Theta_Grid+0x214>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d090      	beq.n	8002e44 <Calc_Theta_Grid+0xc0>
	   if((Theta_time<=GRID_FREQ_MAX || Theta_time>=GRID_FREQ_MIN))
 8002f22:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8002f26:	2a30      	cmp	r2, #48	; 0x30
 8002f28:	d98c      	bls.n	8002e44 <Calc_Theta_Grid+0xc0>
		   Diagnostic_Control=FREQ_OUT_OF_RANGE;
 8002f2a:	4a1d      	ldr	r2, [pc, #116]	; (8002fa0 <Calc_Theta_Grid+0x21c>)
		   State_Control = STOP_WITH_DELAY;
 8002f2c:	2316      	movs	r3, #22
 8002f2e:	703b      	strb	r3, [r7, #0]
		   Diagnostic_Control=FREQ_OUT_OF_RANGE;
 8002f30:	2306      	movs	r3, #6
 8002f32:	7013      	strb	r3, [r2, #0]
		   Freq_Control = FREQ_OUT_OF_RANGE;
 8002f34:	4a13      	ldr	r2, [pc, #76]	; (8002f84 <Calc_Theta_Grid+0x200>)
 8002f36:	7013      	strb	r3, [r2, #0]
 8002f38:	e784      	b.n	8002e44 <Calc_Theta_Grid+0xc0>
        GDVoltage = GRID_VOLTAGE_INSIDE_RANGE;
 8002f3a:	4813      	ldr	r0, [pc, #76]	; (8002f88 <Calc_Theta_Grid+0x204>)
        Freq_Control = FREQ_INSIDE_RANGE; //inside the G83 freq range
 8002f3c:	4a11      	ldr	r2, [pc, #68]	; (8002f84 <Calc_Theta_Grid+0x200>)
        GDVoltage = GRID_VOLTAGE_INSIDE_RANGE;
 8002f3e:	2509      	movs	r5, #9
 8002f40:	7005      	strb	r5, [r0, #0]
        Freq_Control = FREQ_INSIDE_RANGE; //inside the G83 freq range
 8002f42:	2007      	movs	r0, #7
 8002f44:	7010      	strb	r0, [r2, #0]
        freq_monitor_time=0;
 8002f46:	2200      	movs	r2, #0
 8002f48:	801a      	strh	r2, [r3, #0]
      if(Freq_Control==FREQ_OUT_OF_RANGE && GDVoltage == GRID_VOLTAGE_OUT_OF_RANGE)
 8002f4a:	e77b      	b.n	8002e44 <Calc_Theta_Grid+0xc0>
 8002f4c:	20004e00 	.word	0x20004e00
 8002f50:	20004e20 	.word	0x20004e20
 8002f54:	20004e26 	.word	0x20004e26
 8002f58:	20008e38 	.word	0x20008e38
 8002f5c:	20004e24 	.word	0x20004e24
 8002f60:	20008e3a 	.word	0x20008e3a
 8002f64:	20004e28 	.word	0x20004e28
 8002f68:	20004e04 	.word	0x20004e04
 8002f6c:	20004e30 	.word	0x20004e30
 8002f70:	20004e2c 	.word	0x20004e2c
 8002f74:	200001b2 	.word	0x200001b2
 8002f78:	ffffb1e1 	.word	0xffffb1e1
 8002f7c:	20004e22 	.word	0x20004e22
 8002f80:	20004e32 	.word	0x20004e32
 8002f84:	20000012 	.word	0x20000012
 8002f88:	20000013 	.word	0x20000013
 8002f8c:	2000016e 	.word	0x2000016e
 8002f90:	20000170 	.word	0x20000170
 8002f94:	20004e38 	.word	0x20004e38
 8002f98:	20000173 	.word	0x20000173
 8002f9c:	200001b8 	.word	0x200001b8
 8002fa0:	20000158 	.word	0x20000158
 8002fa4:	20004e2a 	.word	0x20004e2a
 8002fa8:	20000014 	.word	0x20000014
 8002fac:	48000c00 	.word	0x48000c00

08002fb0 <DQ_Power_Estimation>:
* Return         : None
*******************************************************************************/


Power_Components DQ_Power_Estimation(Curr_Components QD_Current)
{
 8002fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   s16 P_Active_1,P_Active_2=0;
   s16 Q_Reactive_1,Q_Reactive_2=0;



   mul_q15_q15_q31(Grid_Volt_q_d.qV_Direct,QD_Current.qI_Direct,&P_Active_tmp_1) ;
 8002fb2:	4d24      	ldr	r5, [pc, #144]	; (8003044 <DQ_Power_Estimation+0x94>)
{
 8002fb4:	b089      	sub	sp, #36	; 0x24
 8002fb6:	1407      	asrs	r7, r0, #16
   s32 P_Active_tmp_1,P_Active_tmp_2=0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	b206      	sxth	r6, r0
{
 8002fbc:	9001      	str	r0, [sp, #4]
   mul_q15_q15_q31(Grid_Volt_q_d.qV_Direct,QD_Current.qI_Direct,&P_Active_tmp_1) ;
 8002fbe:	aa03      	add	r2, sp, #12
 8002fc0:	4639      	mov	r1, r7
 8002fc2:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
   s32 P_Active_tmp_1,P_Active_tmp_2=0;
 8002fc6:	9304      	str	r3, [sp, #16]
   s32 Q_Reactive_tmp_1,Q_Reactive_tmp_2=0;
 8002fc8:	9306      	str	r3, [sp, #24]
   mul_q15_q15_q31(Grid_Volt_q_d.qV_Direct,QD_Current.qI_Direct,&P_Active_tmp_1) ;
 8002fca:	f000 fdfd 	bl	8003bc8 <mul_q15_q15_q31>
   mul_q15_q15_q31(Grid_Volt_q_d.qV_Quadrature,QD_Current.qI_Quadrature,&P_Active_tmp_2);
 8002fce:	aa04      	add	r2, sp, #16
 8002fd0:	4631      	mov	r1, r6
 8002fd2:	f9b5 0000 	ldrsh.w	r0, [r5]
 8002fd6:	f000 fdf7 	bl	8003bc8 <mul_q15_q15_q31>

  P_Active_1 = (s16)(P_Active_tmp_1/65536);
 8002fda:	9c03      	ldr	r4, [sp, #12]
  P_Active_2 = (s16)(P_Active_tmp_2/65536);
 8002fdc:	9a04      	ldr	r2, [sp, #16]

Power_Output.P_Active = (s16)((P_Active_1)+(P_Active_2));

  mul_q15_q15_q31(Grid_Volt_q_d.qV_Direct,QD_Current.qI_Quadrature,&Q_Reactive_tmp_1) ;
 8002fde:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
  P_Active_1 = (s16)(P_Active_tmp_1/65536);
 8002fe2:	2c00      	cmp	r4, #0
 8002fe4:	bfbc      	itt	lt
 8002fe6:	f504 447f 	addlt.w	r4, r4, #65280	; 0xff00
 8002fea:	34ff      	addlt	r4, #255	; 0xff
  P_Active_2 = (s16)(P_Active_tmp_2/65536);
 8002fec:	2a00      	cmp	r2, #0
 8002fee:	bfbc      	itt	lt
 8002ff0:	f502 427f 	addlt.w	r2, r2, #65280	; 0xff00
 8002ff4:	32ff      	addlt	r2, #255	; 0xff
  P_Active_1 = (s16)(P_Active_tmp_1/65536);
 8002ff6:	1424      	asrs	r4, r4, #16
  mul_q15_q15_q31(Grid_Volt_q_d.qV_Direct,QD_Current.qI_Quadrature,&Q_Reactive_tmp_1) ;
 8002ff8:	4631      	mov	r1, r6
Power_Output.P_Active = (s16)((P_Active_1)+(P_Active_2));
 8002ffa:	eb04 4422 	add.w	r4, r4, r2, asr #16
  mul_q15_q15_q31(Grid_Volt_q_d.qV_Direct,QD_Current.qI_Quadrature,&Q_Reactive_tmp_1) ;
 8002ffe:	aa05      	add	r2, sp, #20
 8003000:	f000 fde2 	bl	8003bc8 <mul_q15_q15_q31>
  mul_q15_q15_q31(Grid_Volt_q_d.qV_Quadrature,QD_Current.qI_Direct,&Q_Reactive_tmp_2);
 8003004:	aa06      	add	r2, sp, #24
 8003006:	f9b5 0000 	ldrsh.w	r0, [r5]
 800300a:	4639      	mov	r1, r7
 800300c:	f000 fddc 	bl	8003bc8 <mul_q15_q15_q31>


  Q_Reactive_1 = (s16)(Q_Reactive_tmp_1/65536);
  Q_Reactive_2 = (s16)(Q_Reactive_tmp_2/65536);
 8003010:	9b06      	ldr	r3, [sp, #24]
  Q_Reactive_1 = (s16)(Q_Reactive_tmp_1/65536);
 8003012:	9a05      	ldr	r2, [sp, #20]
  Q_Reactive_2 = (s16)(Q_Reactive_tmp_2/65536);
 8003014:	2b00      	cmp	r3, #0
 8003016:	bfbc      	itt	lt
 8003018:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 800301c:	33ff      	addlt	r3, #255	; 0xff
  Q_Reactive_1 = (s16)(Q_Reactive_tmp_1/65536);
 800301e:	2a00      	cmp	r2, #0
 8003020:	bfbc      	itt	lt
 8003022:	f502 427f 	addlt.w	r2, r2, #65280	; 0xff00
 8003026:	32ff      	addlt	r2, #255	; 0xff
Power_Output.P_Active = (s16)((P_Active_1)+(P_Active_2));
 8003028:	b224      	sxth	r4, r4
  Q_Reactive_2 = (s16)(Q_Reactive_tmp_2/65536);
 800302a:	141b      	asrs	r3, r3, #16

  //Power_Output.Q_Reactive = (s16)((Q_Reactive_1)+(Q_Reactive_2));

  Power_Output.Q_Reactive = (s16)(-(Q_Reactive_1)+(Q_Reactive_2));
  return (Power_Output);
 800302c:	eba3 4312 	sub.w	r3, r3, r2, lsr #16
 8003030:	b2a4      	uxth	r4, r4
 8003032:	2000      	movs	r0, #0
 8003034:	f364 000f 	bfi	r0, r4, #0, #16
 8003038:	b29b      	uxth	r3, r3
 800303a:	f363 401f 	bfi	r0, r3, #16, #16


}
 800303e:	b009      	add	sp, #36	; 0x24
 8003040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003042:	bf00      	nop
 8003044:	20004e04 	.word	0x20004e04

08003048 <CrossDecoupling_Control>:
*******************************************************************************/



void CrossDecoupling_Control(void)
{
 8003048:	b530      	push	{r4, r5, lr}

  s32 Omega_L_tmp, Omega_L_Quadrature_tmp,Omega_L_Direct_tmp=0;
  s16 Omega_L,Omega_L_Direct,Omega_L_Quadrature=0;

  mul_q15_q15_q31(INDUCTANCE_VALUE,Output_qVd_Grid,&Omega_L_tmp);
 800304a:	4b14      	ldr	r3, [pc, #80]	; (800309c <CrossDecoupling_Control+0x54>)
  Omega_L = (s16)(Omega_L_tmp>>16);

  mul_q15_q15_q31(Omega_L,Inverter_q_d.qI_Direct,&Omega_L_Direct_tmp);
 800304c:	4d14      	ldr	r5, [pc, #80]	; (80030a0 <CrossDecoupling_Control+0x58>)
  mul_q15_q15_q31(INDUCTANCE_VALUE,Output_qVd_Grid,&Omega_L_tmp);
 800304e:	f9b3 1000 	ldrsh.w	r1, [r3]
{
 8003052:	b085      	sub	sp, #20
  s32 Omega_L_tmp, Omega_L_Quadrature_tmp,Omega_L_Direct_tmp=0;
 8003054:	2300      	movs	r3, #0
  mul_q15_q15_q31(INDUCTANCE_VALUE,Output_qVd_Grid,&Omega_L_tmp);
 8003056:	aa01      	add	r2, sp, #4
 8003058:	f44f 70be 	mov.w	r0, #380	; 0x17c
  s32 Omega_L_tmp, Omega_L_Quadrature_tmp,Omega_L_Direct_tmp=0;
 800305c:	9303      	str	r3, [sp, #12]
  mul_q15_q15_q31(INDUCTANCE_VALUE,Output_qVd_Grid,&Omega_L_tmp);
 800305e:	f000 fdb3 	bl	8003bc8 <mul_q15_q15_q31>
  Omega_L = (s16)(Omega_L_tmp>>16);
 8003062:	f9bd 4006 	ldrsh.w	r4, [sp, #6]
  mul_q15_q15_q31(Omega_L,Inverter_q_d.qI_Direct,&Omega_L_Direct_tmp);
 8003066:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 800306a:	aa03      	add	r2, sp, #12
 800306c:	4620      	mov	r0, r4
 800306e:	f000 fdab 	bl	8003bc8 <mul_q15_q15_q31>
  mul_q15_q15_q31(Omega_L,Inverter_q_d.qI_Quadrature,&Omega_L_Quadrature_tmp);
 8003072:	f9b5 1000 	ldrsh.w	r1, [r5]
 8003076:	aa02      	add	r2, sp, #8
 8003078:	4620      	mov	r0, r4
 800307a:	f000 fda5 	bl	8003bc8 <mul_q15_q15_q31>

  Omega_L_Direct =    (s16)(Omega_L_Direct_tmp>>16);
  Omega_L_Quadrature =(s16)(Omega_L_Quadrature_tmp>>16);

   Output_qIq_Inverter=(s16)(Output_qIq_Inverter-Omega_L_Direct);//+(Grid_Volt_q_d.qV_Quadrature));//+Grid_Volt_q_d.qV_Quadrature);//);//Omega_L_Direct);//
   Output_qId_Inverter=(s16)(Output_qId_Inverter+Omega_L_Quadrature);//+(Grid_Volt_q_d.qV_Direct));//+Grid_Volt_q_d.qV_Direct);//-Omega_L_Quadrature);    // -Omega_L_Quadrature);//+Grid_Volt_q_d.qV_Direct
 800307e:	4809      	ldr	r0, [pc, #36]	; (80030a4 <CrossDecoupling_Control+0x5c>)
  Omega_L_Quadrature =(s16)(Omega_L_Quadrature_tmp>>16);
 8003080:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
   Output_qId_Inverter=(s16)(Output_qId_Inverter+Omega_L_Quadrature);//+(Grid_Volt_q_d.qV_Direct));//+Grid_Volt_q_d.qV_Direct);//-Omega_L_Quadrature);    // -Omega_L_Quadrature);//+Grid_Volt_q_d.qV_Direct
 8003084:	8804      	ldrh	r4, [r0, #0]
   Output_qIq_Inverter=(s16)(Output_qIq_Inverter-Omega_L_Direct);//+(Grid_Volt_q_d.qV_Quadrature));//+Grid_Volt_q_d.qV_Quadrature);//);//Omega_L_Direct);//
 8003086:	4908      	ldr	r1, [pc, #32]	; (80030a8 <CrossDecoupling_Control+0x60>)
   Output_qId_Inverter=(s16)(Output_qId_Inverter+Omega_L_Quadrature);//+(Grid_Volt_q_d.qV_Direct));//+Grid_Volt_q_d.qV_Direct);//-Omega_L_Quadrature);    // -Omega_L_Quadrature);//+Grid_Volt_q_d.qV_Direct
 8003088:	4422      	add	r2, r4
   Output_qIq_Inverter=(s16)(Output_qIq_Inverter-Omega_L_Direct);//+(Grid_Volt_q_d.qV_Quadrature));//+Grid_Volt_q_d.qV_Quadrature);//);//Omega_L_Direct);//
 800308a:	880b      	ldrh	r3, [r1, #0]
   Output_qId_Inverter=(s16)(Output_qId_Inverter+Omega_L_Quadrature);//+(Grid_Volt_q_d.qV_Direct));//+Grid_Volt_q_d.qV_Direct);//-Omega_L_Quadrature);    // -Omega_L_Quadrature);//+Grid_Volt_q_d.qV_Direct
 800308c:	8002      	strh	r2, [r0, #0]
  Omega_L_Direct =    (s16)(Omega_L_Direct_tmp>>16);
 800308e:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
   Output_qIq_Inverter=(s16)(Output_qIq_Inverter-Omega_L_Direct);//+(Grid_Volt_q_d.qV_Quadrature));//+Grid_Volt_q_d.qV_Quadrature);//);//Omega_L_Direct);//
 8003092:	1a9b      	subs	r3, r3, r2
 8003094:	800b      	strh	r3, [r1, #0]

}
 8003096:	b005      	add	sp, #20
 8003098:	bd30      	pop	{r4, r5, pc}
 800309a:	bf00      	nop
 800309c:	20000184 	.word	0x20000184
 80030a0:	20004e0c 	.word	0x20004e0c
 80030a4:	20004e10 	.word	0x20004e10
 80030a8:	20004e12 	.word	0x20004e12

080030ac <RevPark_Circle_Limitation>:
void RevPark_Circle_Limitation(void)
{
s32 temp;

temp = Output_qIq_Inverter * Output_qIq_Inverter
             + Output_qId_Inverter * Output_qId_Inverter;  // min value 0, max value 2*32767*32767
 80030ac:	4816      	ldr	r0, [pc, #88]	; (8003108 <RevPark_Circle_Limitation+0x5c>)
{
 80030ae:	b430      	push	{r4, r5}
temp = Output_qIq_Inverter * Output_qIq_Inverter
 80030b0:	4c16      	ldr	r4, [pc, #88]	; (800310c <RevPark_Circle_Limitation+0x60>)
             + Output_qId_Inverter * Output_qId_Inverter;  // min value 0, max value 2*32767*32767
 80030b2:	f9b0 2000 	ldrsh.w	r2, [r0]
temp = Output_qIq_Inverter * Output_qIq_Inverter
 80030b6:	f9b4 1000 	ldrsh.w	r1, [r4]

if ( temp > (32767*32767) )       // temp > 32767*32767,
 80030ba:	4d15      	ldr	r5, [pc, #84]	; (8003110 <RevPark_Circle_Limitation+0x64>)
             + Output_qId_Inverter * Output_qId_Inverter;  // min value 0, max value 2*32767*32767
 80030bc:	fb02 f302 	mul.w	r3, r2, r2
temp = Output_qIq_Inverter * Output_qIq_Inverter
 80030c0:	fb01 3301 	mla	r3, r1, r1, r3
if ( temp > (32767*32767) )       // temp > 32767*32767,
 80030c4:	42ab      	cmp	r3, r5
 80030c6:	dd1c      	ble.n	8003102 <RevPark_Circle_Limitation+0x56>
   unsigned long long temp2;
   u16 index;

   //temp2 = (unsigned long long ) 128*temp;
   //temp2 /= (32767*32767);   // min value 128, max value 256
   temp2 = (unsigned long long )257*temp;
 80030c8:	f240 1c01 	movw	ip, #257	; 0x101
 80030cc:	fb83 3c0c 	smull	r3, ip, r3, ip
   temp2 /= (u32)(32768*32768);   // min value 128, max value 256
   temp = temp2/2;
 80030d0:	0fdb      	lsrs	r3, r3, #31
 80030d2:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
   temp -= 128;   // min value 0, max value 128
   index = circle_limit_table[(u8)temp];
 80030d6:	4d0f      	ldr	r5, [pc, #60]	; (8003114 <RevPark_Circle_Limitation+0x68>)
 80030d8:	3b80      	subs	r3, #128	; 0x80

   temp = (s16)Output_qIq_Inverter * (u16)(index);
 80030da:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 80030de:	fb03 f101 	mul.w	r1, r3, r1
   Output_qIq_Inverter = (s16)(temp/32768);
 80030e2:	2900      	cmp	r1, #0

   temp = (s16)Output_qId_Inverter * (u16)(index);
 80030e4:	fb03 f202 	mul.w	r2, r3, r2
   Output_qIq_Inverter = (s16)(temp/32768);
 80030e8:	bfbc      	itt	lt
 80030ea:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 80030ee:	317f      	addlt	r1, #127	; 0x7f
   Output_qId_Inverter = (s16)(temp/32768);
 80030f0:	2a00      	cmp	r2, #0
 80030f2:	bfbc      	itt	lt
 80030f4:	f502 42ff 	addlt.w	r2, r2, #32640	; 0x7f80
 80030f8:	327f      	addlt	r2, #127	; 0x7f
   Output_qIq_Inverter = (s16)(temp/32768);
 80030fa:	13c9      	asrs	r1, r1, #15
   Output_qId_Inverter = (s16)(temp/32768);
 80030fc:	13d2      	asrs	r2, r2, #15
   Output_qIq_Inverter = (s16)(temp/32768);
 80030fe:	8021      	strh	r1, [r4, #0]
   Output_qId_Inverter = (s16)(temp/32768);
 8003100:	8002      	strh	r2, [r0, #0]
   }
}
 8003102:	bc30      	pop	{r4, r5}
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	20004e10 	.word	0x20004e10
 800310c:	20004e12 	.word	0x20004e12
 8003110:	3fff0001 	.word	0x3fff0001
 8003114:	0800acd4 	.word	0x0800acd4

08003118 <DQ_Filtering>:



Curr_Components DQ_Filtering(Curr_Components QD_Current) //// 10 próbek / 25khz/10 = 2.5khz filter zero -> 250hz HIT

{
 8003118:	b470      	push	{r4, r5, r6}

  static s32 Sum_Quadrature=0;
  static s32 Sum_Direct=0;


   Sum_Quadrature=(s32)((Sum_Quadrature+QD_Current.qI_Quadrature)-(AVG_Quadrature_Current));
 800311a:	4e16      	ldr	r6, [pc, #88]	; (8003174 <DQ_Filtering+0x5c>)
 800311c:	4916      	ldr	r1, [pc, #88]	; (8003178 <DQ_Filtering+0x60>)
 800311e:	6832      	ldr	r2, [r6, #0]
   Sum_Direct=(s32)((Sum_Direct+QD_Current.qI_Direct)-(AVG_Direct_Current));
 8003120:	4d16      	ldr	r5, [pc, #88]	; (800317c <DQ_Filtering+0x64>)
   Sum_Quadrature=(s32)((Sum_Quadrature+QD_Current.qI_Quadrature)-(AVG_Quadrature_Current));
 8003122:	f9b1 3000 	ldrsh.w	r3, [r1]
   Sum_Direct=(s32)((Sum_Direct+QD_Current.qI_Direct)-(AVG_Direct_Current));
 8003126:	4c16      	ldr	r4, [pc, #88]	; (8003180 <DQ_Filtering+0x68>)
   Sum_Quadrature=(s32)((Sum_Quadrature+QD_Current.qI_Quadrature)-(AVG_Quadrature_Current));
 8003128:	fa02 f280 	sxtah	r2, r2, r0
 800312c:	1ad2      	subs	r2, r2, r3
   Sum_Direct=(s32)((Sum_Direct+QD_Current.qI_Direct)-(AVG_Direct_Current));
 800312e:	682b      	ldr	r3, [r5, #0]
   Sum_Quadrature=(s32)((Sum_Quadrature+QD_Current.qI_Quadrature)-(AVG_Quadrature_Current));
 8003130:	6032      	str	r2, [r6, #0]
   Sum_Direct=(s32)((Sum_Direct+QD_Current.qI_Direct)-(AVG_Direct_Current));
 8003132:	eb03 4020 	add.w	r0, r3, r0, asr #16
 8003136:	f9b4 3000 	ldrsh.w	r3, [r4]
 800313a:	1ac0      	subs	r0, r0, r3

   AVG_Quadrature_Current=(s16)((Sum_Quadrature/12));
 800313c:	4b11      	ldr	r3, [pc, #68]	; (8003184 <DQ_Filtering+0x6c>)
   Sum_Direct=(s32)((Sum_Direct+QD_Current.qI_Direct)-(AVG_Direct_Current));
 800313e:	6028      	str	r0, [r5, #0]
   AVG_Quadrature_Current=(s16)((Sum_Quadrature/12));
 8003140:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8003144:	fb83 5202 	smull	r5, r2, r3, r2
 8003148:	ebcc 0262 	rsb	r2, ip, r2, asr #1
   AVG_Direct_Current=(s16)((Sum_Direct/12));
 800314c:	fb83 3c00 	smull	r3, ip, r3, r0
 8003150:	17c3      	asrs	r3, r0, #31
   AVG_Quadrature_Current=(s16)((Sum_Quadrature/12));
 8003152:	b212      	sxth	r2, r2
   AVG_Direct_Current=(s16)((Sum_Direct/12));
 8003154:	ebc3 036c 	rsb	r3, r3, ip, asr #1
 8003158:	b21b      	sxth	r3, r3
   AVG_Quadrature_Current=(s16)((Sum_Quadrature/12));
 800315a:	800a      	strh	r2, [r1, #0]

   AVG_Current.qI_Direct = AVG_Direct_Current;
   AVG_Current.qI_Quadrature = AVG_Quadrature_Current;

   return AVG_Current;
 800315c:	2000      	movs	r0, #0
 800315e:	b292      	uxth	r2, r2
 8003160:	f362 000f 	bfi	r0, r2, #0, #16
 8003164:	b29a      	uxth	r2, r3
{
 8003166:	b085      	sub	sp, #20
   return AVG_Current;
 8003168:	f362 401f 	bfi	r0, r2, #16, #16
   AVG_Direct_Current=(s16)((Sum_Direct/12));
 800316c:	8023      	strh	r3, [r4, #0]

 }
 800316e:	b005      	add	sp, #20
 8003170:	bc70      	pop	{r4, r5, r6}
 8003172:	4770      	bx	lr
 8003174:	20004e1c 	.word	0x20004e1c
 8003178:	200049fa 	.word	0x200049fa
 800317c:	20004e18 	.word	0x20004e18
 8003180:	200049f8 	.word	0x200049f8
 8003184:	2aaaaaab 	.word	0x2aaaaaab

08003188 <Generate_90Degrees_Delay>:
* Return         : None
*******************************************************************************/

s16 Generate_90Degrees_Delay( s16 Alpha_Component)

{
 8003188:	b410      	push	{r4}
  static u8 Count_Beta=0;
  static u8 Count_Alpha=0;

  s16 Output=0;

  Count_Alpha=(u8)((Count_Beta+Delay90));// for 90 degrees 36 //((1/50Hz)/(1/20.600kHz)/4)-256
 800318a:	4c08      	ldr	r4, [pc, #32]	; (80031ac <Generate_90Degrees_Delay+0x24>)
  //Count_Alpha=(u8)((Count_Beta+141));// for 90 degrees 36
  BUFFER_Beta_Acquisitions[Count_Beta]=Alpha_Component;
 800318c:	4908      	ldr	r1, [pc, #32]	; (80031b0 <Generate_90Degrees_Delay+0x28>)
  Count_Alpha=(u8)((Count_Beta+Delay90));// for 90 degrees 36 //((1/50Hz)/(1/20.600kHz)/4)-256
 800318e:	7823      	ldrb	r3, [r4, #0]
 8003190:	f1a3 0267 	sub.w	r2, r3, #103	; 0x67
  BUFFER_Beta_Acquisitions[Count_Beta]=Alpha_Component;
 8003194:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]

  Output=-(BUFFER_Beta_Acquisitions[(u8)Count_Alpha]);// to compensate offset
 8003198:	b2d2      	uxtb	r2, r2

  Count_Beta++;
 800319a:	3301      	adds	r3, #1
  Output=-(BUFFER_Beta_Acquisitions[(u8)Count_Alpha]);// to compensate offset
 800319c:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
  Count_Beta++;
 80031a0:	7023      	strb	r3, [r4, #0]
  Output=-(BUFFER_Beta_Acquisitions[(u8)Count_Alpha]);// to compensate offset
 80031a2:	4240      	negs	r0, r0

  return ((s16)(Output));


}
 80031a4:	b200      	sxth	r0, r0
 80031a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	20004dfe 	.word	0x20004dfe
 80031b0:	200049fc 	.word	0x200049fc

080031b4 <DS_ADC_EnableAndCalibrate>:
* Description    : Enable and calibrate Analog to digital converter
* Input          : ADCx the adc to calibrate
* Return         : None
*******************************************************************************/
void DS_ADC_EnableAndCalibrate(ADC_TypeDef* ADCx)
{
 80031b4:	b082      	sub	sp, #8
	  __IO uint32_t wait_loop_index = 0U;
 80031b6:	2200      	movs	r2, #0
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_ADRDY(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_ADRDY);
 80031b8:	2301      	movs	r3, #1
 80031ba:	9201      	str	r2, [sp, #4]
 80031bc:	6003      	str	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031be:	6883      	ldr	r3, [r0, #8]
	  #if (USE_TIMEOUT == 1)
	  uint32_t Timeout = 0U; /* Variable used for timeout management */
	  #endif /* USE_TIMEOUT */
	//if(LL_ADC_ClearFlag_ADRDY(ADCx) == )
	  LL_ADC_ClearFlag_ADRDY(ADCx);
	if (LL_ADC_IsEnabled(ADCx) == 0)
 80031c0:	07da      	lsls	r2, r3, #31
 80031c2:	d448      	bmi.n	8003256 <DS_ADC_EnableAndCalibrate+0xa2>
	    /* Compute number of CPU cycles to wait for, from delay in us.            */
	    /* Note: Variable divided by 2 to compensate partially                    */
	    /*       CPU processing cycles (depends on compilation optimization).     */
	    /* Note: If system core clock frequency is below 200kHz, wait time        */
	    /*       is only a few CPU processing cycles.                             */
	    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 80031c4:	4b25      	ldr	r3, [pc, #148]	; (800325c <DS_ADC_EnableAndCalibrate+0xa8>)
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80031c6:	6882      	ldr	r2, [r0, #8]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4925      	ldr	r1, [pc, #148]	; (8003260 <DS_ADC_EnableAndCalibrate+0xac>)
 80031cc:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 80031d0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80031d4:	099b      	lsrs	r3, r3, #6
 80031d6:	6082      	str	r2, [r0, #8]
 80031d8:	fba1 2303 	umull	r2, r3, r1, r3
 80031dc:	099b      	lsrs	r3, r3, #6
  MODIFY_REG(ADCx->CR,
 80031de:	6882      	ldr	r2, [r0, #8]
 80031e0:	4920      	ldr	r1, [pc, #128]	; (8003264 <DS_ADC_EnableAndCalibrate+0xb0>)
 80031e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80031e6:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80031f0:	fba1 1303 	umull	r1, r3, r1, r3
 80031f4:	08db      	lsrs	r3, r3, #3
 80031f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80031fa:	6082      	str	r2, [r0, #8]
 80031fc:	9301      	str	r3, [sp, #4]
	    while(wait_loop_index != 0)
 80031fe:	9b01      	ldr	r3, [sp, #4]
 8003200:	b12b      	cbz	r3, 800320e <DS_ADC_EnableAndCalibrate+0x5a>
	    {
	      wait_loop_index--;
 8003202:	9b01      	ldr	r3, [sp, #4]
 8003204:	3b01      	subs	r3, #1
 8003206:	9301      	str	r3, [sp, #4]
	    while(wait_loop_index != 0)
 8003208:	9b01      	ldr	r3, [sp, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f9      	bne.n	8003202 <DS_ADC_EnableAndCalibrate+0x4e>
  MODIFY_REG(ADCx->CR,
 800320e:	6883      	ldr	r3, [r0, #8]
 8003210:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003214:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003218:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800321c:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800321e:	6883      	ldr	r3, [r0, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	dbfc      	blt.n	800321e <DS_ADC_EnableAndCalibrate+0x6a>
	    }

	    /* Delay between ADC end of calibration and ADC enable.                   */
	    /* Note: Variable divided by 2 to compensate partially                    */
	    /*       CPU processing cycles (depends on compilation optimization).     */
	    wait_loop_index = (ADC_DELAY_CALIB_ENABLE_CPU_CYCLES >> 1);
 8003224:	2340      	movs	r3, #64	; 0x40
 8003226:	9301      	str	r3, [sp, #4]
	    while(wait_loop_index != 0)
 8003228:	9b01      	ldr	r3, [sp, #4]
 800322a:	b12b      	cbz	r3, 8003238 <DS_ADC_EnableAndCalibrate+0x84>
	    {
	      wait_loop_index--;
 800322c:	9b01      	ldr	r3, [sp, #4]
 800322e:	3b01      	subs	r3, #1
 8003230:	9301      	str	r3, [sp, #4]
	    while(wait_loop_index != 0)
 8003232:	9b01      	ldr	r3, [sp, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1f9      	bne.n	800322c <DS_ADC_EnableAndCalibrate+0x78>
  MODIFY_REG(ADCx->CR,
 8003238:	6883      	ldr	r3, [r0, #8]
 800323a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800323e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003242:	f043 0301 	orr.w	r3, r3, #1
 8003246:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003248:	6803      	ldr	r3, [r0, #0]
	    /* Poll for ADC ready to convert */
	    #if (USE_TIMEOUT == 1)
	    Timeout = ADC_ENABLE_TIMEOUT_MS;
	    #endif /* USE_TIMEOUT */

	    while (LL_ADC_IsActiveFlag_ADRDY(ADCx) == 0)
 800324a:	07db      	lsls	r3, r3, #31
 800324c:	d5fc      	bpl.n	8003248 <DS_ADC_EnableAndCalibrate+0x94>
	    /* Note: ADC flag ADRDY is not cleared here to be able to check ADC       */
	    /*       status afterwards.                                               */
	    /*       This flag should be cleared at ADC Deactivation, before a new    */
	    /*       ADC activation, using function "LL_ADC_ClearFlag_ADRDY()".       */

	    ADCx->CR |=ADC_CR_ADSTART;
 800324e:	6883      	ldr	r3, [r0, #8]
 8003250:	f043 0304 	orr.w	r3, r3, #4
 8003254:	6083      	str	r3, [r0, #8]
	  }

}
 8003256:	b002      	add	sp, #8
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	2000001c 	.word	0x2000001c
 8003260:	053e2d63 	.word	0x053e2d63
 8003264:	cccccccd 	.word	0xcccccccd

08003268 <DS_Init>:
    if (pDSInit)
 8003268:	2800      	cmp	r0, #0
 800326a:	d045      	beq.n	80032f8 <DS_Init+0x90>
        if (DataSensing.State != DS_Running)
 800326c:	4a23      	ldr	r2, [pc, #140]	; (80032fc <DS_Init+0x94>)
 800326e:	7c13      	ldrb	r3, [r2, #16]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d03f      	beq.n	80032f4 <DS_Init+0x8c>
{
 8003274:	b570      	push	{r4, r5, r6, lr}
            DataSensing.Init.Counter       = pDSInit->Counter;
 8003276:	6804      	ldr	r4, [r0, #0]
 8003278:	6014      	str	r4, [r2, #0]
            DataSensing.Init.OnAcquisition = pDSInit->OnAcquisition;
 800327a:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
	   DMA1_Channel1->CPAR  = (uint32_t)(&(ADC1->DR)); // peripheral (source) address
 800327e:	4b20      	ldr	r3, [pc, #128]	; (8003300 <DS_Init+0x98>)
            DataSensing.Init.DataRegister  = pDSInit->DataRegister;
 8003280:	6841      	ldr	r1, [r0, #4]
	   DMA1_Channel1->CPAR  = (uint32_t)(&(ADC1->DR)); // peripheral (source) address
 8003282:	4820      	ldr	r0, [pc, #128]	; (8003304 <DS_Init+0x9c>)
	   DMA1_Channel5->CPAR  = (uint32_t)(&(ADC2->DR)); // peripheral (source) address
 8003284:	4e20      	ldr	r6, [pc, #128]	; (8003308 <DS_Init+0xa0>)
            DataSensing.Init.RegisterSize  = pDSInit->RegisterSize;
 8003286:	e9c2 1401 	strd	r1, r4, [r2, #4]
	   DMA1_Channel1->CPAR  = (uint32_t)(&(ADC1->DR)); // peripheral (source) address
 800328a:	6118      	str	r0, [r3, #16]
	   DMA1_Channel1->CMAR = (uint32_t)(DataSensing.Init.DataRegister+3); //MEMORY ADDRESS
 800328c:	1d88      	adds	r0, r1, #6
 800328e:	6158      	str	r0, [r3, #20]
	   DMA1_Channel1->CNDTR = ( uint16_t )ADC1_DATA_SIZE; //TRANSFER SIZE
 8003290:	2002      	movs	r0, #2
 8003292:	60d8      	str	r0, [r3, #12]
	   DMA1_Channel1->CCR |= ( DMA_CCR_EN ); //CHANNEL ENABLE
 8003294:	6898      	ldr	r0, [r3, #8]
 8003296:	f040 0001 	orr.w	r0, r0, #1
 800329a:	6098      	str	r0, [r3, #8]
            DataSensing.State = DS_Stopped;
 800329c:	2400      	movs	r4, #0
            DataSensing.Init.OnAcquisition = pDSInit->OnAcquisition;
 800329e:	60d5      	str	r5, [r2, #12]
	   DMA1_Channel5->CMAR = (uint32_t)(DataSensing.Init.DataRegister+9); //MEMORY ADDRESS
 80032a0:	f101 0512 	add.w	r5, r1, #18
            DataSensing.State = DS_Stopped;
 80032a4:	7414      	strb	r4, [r2, #16]
	   DMA1_Channel2->CPAR  = (uint32_t)(&(SPI4->DR)); // peripheral (source) address
 80032a6:	4819      	ldr	r0, [pc, #100]	; (800330c <DS_Init+0xa4>)
	   DMA1_Channel5->CPAR  = (uint32_t)(&(ADC2->DR)); // peripheral (source) address
 80032a8:	661e      	str	r6, [r3, #96]	; 0x60
	   DMA1_Channel2->CNDTR = ( uint16_t )SPI4_DATA_SIZE; //TRANSFER SIZE
 80032aa:	2203      	movs	r2, #3
	   DMA1_Channel5->CMAR = (uint32_t)(DataSensing.Init.DataRegister+9); //MEMORY ADDRESS
 80032ac:	665d      	str	r5, [r3, #100]	; 0x64
	   DMA1_Channel5->CNDTR = ( uint16_t )ADC2_DATA_SIZE; //TRANSFER SIZE
 80032ae:	2501      	movs	r5, #1
 80032b0:	65dd      	str	r5, [r3, #92]	; 0x5c
	   DMA1_Channel2->CPAR  = (uint32_t)(&(SPI4->DR)); // peripheral (source) address
 80032b2:	6258      	str	r0, [r3, #36]	; 0x24
	   DMA1_Channel2->CMAR = (uint32_t)(DataSensing.Init.DataRegister); //MEMORY ADDRESS
 80032b4:	6299      	str	r1, [r3, #40]	; 0x28
	   DMA1_Channel2->CNDTR = ( uint16_t )SPI4_DATA_SIZE; //TRANSFER SIZE
 80032b6:	621a      	str	r2, [r3, #32]
	   DMA1_Channel2->CCR |= DMA_CCR_TCIE; //ENABLE TRANSFER COMPLETE INTERRUPT
 80032b8:	69d9      	ldr	r1, [r3, #28]
	   DMA1_Channel4->CMAR = (uint32_t)(DCAC_DATA); //MEMORY ADDRESS
 80032ba:	4e15      	ldr	r6, [pc, #84]	; (8003310 <DS_Init+0xa8>)
	   DMA1_Channel2->CCR |= DMA_CCR_TCIE; //ENABLE TRANSFER COMPLETE INTERRUPT
 80032bc:	f041 0102 	orr.w	r1, r1, #2
 80032c0:	61d9      	str	r1, [r3, #28]
	   DMA1_Channel2->CCR |= ( DMA_CCR_EN ); //CHANNEL ENABLE
 80032c2:	69d9      	ldr	r1, [r3, #28]
 80032c4:	4329      	orrs	r1, r5
 80032c6:	61d9      	str	r1, [r3, #28]
	   DMA1_Channel4->CPAR  = (uint32_t)(&(SPI3->DR)); // peripheral (source) address
 80032c8:	4d12      	ldr	r5, [pc, #72]	; (8003314 <DS_Init+0xac>)
	   DMA1_Channel3->CMAR = (uint32_t)(to_grid_State_Control); //MEMORY ADDRESS
 80032ca:	4913      	ldr	r1, [pc, #76]	; (8003318 <DS_Init+0xb0>)
	   DMA1_Channel3->CPAR  = (uint32_t)(&(SPI4->DR)); // peripheral (source) address
 80032cc:	6398      	str	r0, [r3, #56]	; 0x38
	   DMA1_Channel3->CMAR = (uint32_t)(to_grid_State_Control); //MEMORY ADDRESS
 80032ce:	63d9      	str	r1, [r3, #60]	; 0x3c
	   DMA1_Channel3->CNDTR = ( uint16_t )SPI4_DATA_SIZE; //TRANSFER SIZE
 80032d0:	635a      	str	r2, [r3, #52]	; 0x34
	   DMA1_Channel4->CPAR  = (uint32_t)(&(SPI3->DR)); // peripheral (source) address
 80032d2:	64dd      	str	r5, [r3, #76]	; 0x4c
	   DMA1_Channel4->CMAR = (uint32_t)(DCAC_DATA); //MEMORY ADDRESS
 80032d4:	651e      	str	r6, [r3, #80]	; 0x50
	   DMA1_Channel4->CNDTR = ( uint16_t )ADC4_DATA_SIZE; //TRANSFER SIZE
 80032d6:	2605      	movs	r6, #5
 80032d8:	649e      	str	r6, [r3, #72]	; 0x48
  DS_ADC_EnableAndCalibrate(ADC1);
 80032da:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
	    DMA1_Channel6->CPAR  = (uint32_t)(&(SPI3->DR)); // peripheral (source) address
 80032de:	675d      	str	r5, [r3, #116]	; 0x74
	    DMA1_Channel6->CMAR = (uint32_t)(to_grid_State_Control); //MEMORY ADDRESS
 80032e0:	6799      	str	r1, [r3, #120]	; 0x78
	    DMA1_Channel6->CNDTR = ( uint16_t )SPI4_DATA_SIZE; //TRANSFER SIZE
 80032e2:	671a      	str	r2, [r3, #112]	; 0x70
  DS_ADC_EnableAndCalibrate(ADC1);
 80032e4:	f7ff ff66 	bl	80031b4 <DS_ADC_EnableAndCalibrate>
  DS_ADC_EnableAndCalibrate(ADC2);
 80032e8:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80032ec:	f7ff ff62 	bl	80031b4 <DS_ADC_EnableAndCalibrate>
            nRet = DS_ERROR_NONE;
 80032f0:	4620      	mov	r0, r4
}
 80032f2:	bd70      	pop	{r4, r5, r6, pc}
        nRet = DS_ERROR_ON_INIT;
 80032f4:	2002      	movs	r0, #2
}
 80032f6:	4770      	bx	lr
    nRet = DS_ERROR_INVALID_PARAMETER;
 80032f8:	2001      	movs	r0, #1
 80032fa:	4770      	bx	lr
 80032fc:	20008e44 	.word	0x20008e44
 8003300:	40020000 	.word	0x40020000
 8003304:	50000040 	.word	0x50000040
 8003308:	50000140 	.word	0x50000140
 800330c:	40013c0c 	.word	0x40013c0c
 8003310:	20008e3c 	.word	0x20008e3c
 8003314:	40003c0c 	.word	0x40003c0c
 8003318:	20008e60 	.word	0x20008e60

0800331c <DS_SetAcquistionEvent>:
  if (pfFn)
 800331c:	b108      	cbz	r0, 8003322 <DS_SetAcquistionEvent+0x6>
    DataSensing.Init.OnAcquisition = pfFn;
 800331e:	4b01      	ldr	r3, [pc, #4]	; (8003324 <DS_SetAcquistionEvent+0x8>)
 8003320:	60d8      	str	r0, [r3, #12]
}
 8003322:	4770      	bx	lr
 8003324:	20008e44 	.word	0x20008e44

08003328 <DS_SendCommand>:
{
 8003328:	b530      	push	{r4, r5, lr}
    if (cmd == DS_Start)
 800332a:	4604      	mov	r4, r0
{
 800332c:	b09f      	sub	sp, #124	; 0x7c
    if (cmd == DS_Start)
 800332e:	2800      	cmp	r0, #0
 8003330:	f040 8130 	bne.w	8003594 <DS_SendCommand+0x26c>
    return DataSensing.State;
 8003334:	4b9d      	ldr	r3, [pc, #628]	; (80035ac <DS_SendCommand+0x284>)
       if (DS_GetStatus() != DS_Running)
 8003336:	7c1a      	ldrb	r2, [r3, #16]
 8003338:	2a01      	cmp	r2, #1
 800333a:	f000 8130 	beq.w	800359e <DS_SendCommand+0x276>
          DataSensing.State = DS_Running;
 800333e:	2201      	movs	r2, #1
 8003340:	741a      	strb	r2, [r3, #16]

	  /* USER CODE BEGIN TIM1_Init 0 */

	  /* USER CODE END TIM1_Init 0 */

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003342:	e9cd 0007 	strd	r0, r0, [sp, #28]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003346:	e9cd 0001 	strd	r0, r0, [sp, #4]
	  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800334a:	e9cd 0004 	strd	r0, r0, [sp, #16]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 800334e:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
 8003352:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
 8003356:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800335a:	9006      	str	r0, [sp, #24]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800335c:	9000      	str	r0, [sp, #0]
	  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800335e:	9003      	str	r0, [sp, #12]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8003360:	900a      	str	r0, [sp, #40]	; 0x28
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003362:	9009      	str	r0, [sp, #36]	; 0x24
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003364:	4601      	mov	r1, r0
 8003366:	2234      	movs	r2, #52	; 0x34
 8003368:	a811      	add	r0, sp, #68	; 0x44
 800336a:	f007 fa9f 	bl	800a8ac <memset>

	  /* USER CODE BEGIN TIM1_Init 1 */

	  /* USER CODE END TIM1_Init 1 */
	  htim1.Instance = TIM1;
 800336e:	4890      	ldr	r0, [pc, #576]	; (80035b0 <DS_SendCommand+0x288>)
 8003370:	4b90      	ldr	r3, [pc, #576]	; (80035b4 <DS_SendCommand+0x28c>)
 8003372:	6003      	str	r3, [r0, #0]
	  htim1.Init.Prescaler = 0;
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
	  htim1.Init.Period = 65535;
 8003374:	f64f 73ff 	movw	r3, #65535	; 0xffff
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003378:	e9c0 4401 	strd	r4, r4, [r0, #4]
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	  htim1.Init.RepetitionCounter = 0;
 800337c:	e9c0 4404 	strd	r4, r4, [r0, #16]
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003380:	6184      	str	r4, [r0, #24]
	  htim1.Init.Period = 65535;
 8003382:	60c3      	str	r3, [r0, #12]
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003384:	f005 f976 	bl	8008674 <HAL_TIM_Base_Init>
 8003388:	2800      	cmp	r0, #0
 800338a:	f040 81c5 	bne.w	8003718 <DS_SendCommand+0x3f0>
	  {
	    Error_Handler();
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800338e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003392:	4887      	ldr	r0, [pc, #540]	; (80035b0 <DS_SendCommand+0x288>)
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003394:	9306      	str	r3, [sp, #24]
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003396:	a906      	add	r1, sp, #24
 8003398:	f005 f80e 	bl	80083b8 <HAL_TIM_ConfigClockSource>
 800339c:	2800      	cmp	r0, #0
 800339e:	f040 81b8 	bne.w	8003712 <DS_SendCommand+0x3ea>
	  {
	    Error_Handler();
	  }
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80033a2:	4883      	ldr	r0, [pc, #524]	; (80035b0 <DS_SendCommand+0x288>)
 80033a4:	f005 f998 	bl	80086d8 <HAL_TIM_PWM_Init>
 80033a8:	2800      	cmp	r0, #0
 80033aa:	f040 81af 	bne.w	800370c <DS_SendCommand+0x3e4>
	  {
	    Error_Handler();
	  }
	  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 80033ae:	4880      	ldr	r0, [pc, #512]	; (80035b0 <DS_SendCommand+0x288>)
 80033b0:	2108      	movs	r1, #8
 80033b2:	f005 f9c3 	bl	800873c <HAL_TIM_OnePulse_Init>
 80033b6:	2800      	cmp	r0, #0
 80033b8:	f040 81a5 	bne.w	8003706 <DS_SendCommand+0x3de>
	  {
	    Error_Handler();
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033bc:	2300      	movs	r3, #0
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033be:	487c      	ldr	r0, [pc, #496]	; (80035b0 <DS_SendCommand+0x288>)
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033c0:	9302      	str	r3, [sp, #8]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033c2:	4669      	mov	r1, sp
	  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80033c4:	e9cd 3300 	strd	r3, r3, [sp]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033c8:	f005 fb1a 	bl	8008a00 <HAL_TIMEx_MasterConfigSynchronization>
 80033cc:	2800      	cmp	r0, #0
 80033ce:	f040 8197 	bne.w	8003700 <DS_SendCommand+0x3d8>
	  {
	    Error_Handler();
	  }

	  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 80033d2:	2101      	movs	r1, #1
	  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
	  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80033d4:	2300      	movs	r3, #0
	  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80033d6:	4876      	ldr	r0, [pc, #472]	; (80035b0 <DS_SendCommand+0x288>)
	  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80033d8:	9305      	str	r3, [sp, #20]
	  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80033da:	aa03      	add	r2, sp, #12
	  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80033dc:	e9cd 1103 	strd	r1, r1, [sp, #12]
	  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80033e0:	f005 fbbc 	bl	8008b5c <HAL_TIMEx_ConfigBreakInput>
 80033e4:	2800      	cmp	r0, #0
 80033e6:	f040 8188 	bne.w	80036fa <DS_SendCommand+0x3d2>
	  {
	    Error_Handler();
	  }

	  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP7;
 80033ea:	2380      	movs	r3, #128	; 0x80
	  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80033ec:	2101      	movs	r1, #1
	  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP7;
 80033ee:	9303      	str	r3, [sp, #12]
	  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;

	  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80033f0:	486f      	ldr	r0, [pc, #444]	; (80035b0 <DS_SendCommand+0x288>)
	  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80033f2:	2300      	movs	r3, #0
	  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80033f4:	aa03      	add	r2, sp, #12
	  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80033f6:	e9cd 1304 	strd	r1, r3, [sp, #16]
	  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80033fa:	f005 fbaf 	bl	8008b5c <HAL_TIMEx_ConfigBreakInput>
 80033fe:	2800      	cmp	r0, #0
 8003400:	f040 8178 	bne.w	80036f4 <DS_SendCommand+0x3cc>
	    Error_Handler();
	  }

	  //TIM1->AF1 &= ~TIM1_AF1_BKINE; //DISABLE

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003404:	2360      	movs	r3, #96	; 0x60
 8003406:	930a      	str	r3, [sp, #40]	; 0x28
	  sConfigOC.Pulse = 65535;
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003408:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800340c:	2302      	movs	r3, #2
 800340e:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8003412:	2208      	movs	r2, #8
	  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003414:	2304      	movs	r3, #4
 8003416:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800341a:	f44f 7580 	mov.w	r5, #256	; 0x100
 800341e:	2300      	movs	r3, #0
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003420:	4863      	ldr	r0, [pc, #396]	; (80035b0 <DS_SendCommand+0x288>)
 8003422:	a90a      	add	r1, sp, #40	; 0x28
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003424:	e9cd 530f 	strd	r5, r3, [sp, #60]	; 0x3c
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003428:	f005 fa0a 	bl	8008840 <HAL_TIM_PWM_ConfigChannel>
 800342c:	2800      	cmp	r0, #0
 800342e:	f040 815e 	bne.w	80036ee <DS_SendCommand+0x3c6>
	    Error_Handler();
	  }



	  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8003432:	485f      	ldr	r0, [pc, #380]	; (80035b0 <DS_SendCommand+0x288>)
 8003434:	f005 fc2c 	bl	8008c90 <HAL_TIMEx_EnableDeadTimePreload>
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8003438:	f44f 6400 	mov.w	r4, #2048	; 0x800
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800343c:	f44f 6280 	mov.w	r2, #1024	; 0x400
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003440:	2300      	movs	r3, #0
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8003442:	e9cd 4211 	strd	r4, r2, [sp, #68]	; 0x44
	  sBreakDeadTimeConfig.DeadTime = 150; // 150 = 1 us
 8003446:	2496      	movs	r4, #150	; 0x96
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE; //zmiana
 8003448:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	  sBreakDeadTimeConfig.DeadTime = 150; // 150 = 1 us
 800344c:	e9cd 3413 	strd	r3, r4, [sp, #76]	; 0x4c
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE; //zmiana
 8003450:	9215      	str	r2, [sp, #84]	; 0x54
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
	  sBreakDeadTimeConfig.BreakFilter = 3; // 5 = 160 ns
 8003452:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 8003456:	2203      	movs	r2, #3
 8003458:	e9cd 4216 	strd	r4, r2, [sp, #88]	; 0x58
	  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
	  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
	  sBreakDeadTimeConfig.Break2Filter = 0;
	  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800345c:	4854      	ldr	r0, [pc, #336]	; (80035b0 <DS_SendCommand+0x288>)
	  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800345e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003462:	a911      	add	r1, sp, #68	; 0x44
	  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003464:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
	  sBreakDeadTimeConfig.Break2Filter = 0;
 8003468:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800346c:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003470:	f005 fb22 	bl	8008ab8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003474:	2800      	cmp	r0, #0
 8003476:	f040 8137 	bne.w	80036e8 <DS_SendCommand+0x3c0>
          TIM_CCxChannelCmd(TIM1, TIM_CHANNEL_3, TIM_CCx_ENABLE);
 800347a:	4c4e      	ldr	r4, [pc, #312]	; (80035b4 <DS_SendCommand+0x28c>)
	    Error_Handler();
	  }
	  /* USER CODE BEGIN TIM1_Init 2 */

	  /* USER CODE END TIM1_Init 2 */
	  HAL_TIM_MspPostInit(&htim1);
 800347c:	484c      	ldr	r0, [pc, #304]	; (80035b0 <DS_SendCommand+0x288>)
          TIM8->CCER |= TIM_CCER_CC3E; ////ENABLE CHANNEL 3
 800347e:	4d4e      	ldr	r5, [pc, #312]	; (80035b8 <DS_SendCommand+0x290>)
	  HAL_TIM_MspPostInit(&htim1);
 8003480:	f002 f8ae 	bl	80055e0 <HAL_TIM_MspPostInit>
          TIM_CCxChannelCmd(TIM1, TIM_CHANNEL_3, TIM_CCx_ENABLE);
 8003484:	4620      	mov	r0, r4
 8003486:	2201      	movs	r2, #1
 8003488:	2108      	movs	r1, #8
 800348a:	f005 fa69 	bl	8008960 <TIM_CCxChannelCmd>
          TIM1->CCER &=  ~tmp;
 800348e:	6a23      	ldr	r3, [r4, #32]
          COMP7 ->CSR &= ~COMP_CSR_EN;
 8003490:	4a4a      	ldr	r2, [pc, #296]	; (80035bc <DS_SendCommand+0x294>)
          TIM1->CCER &=  ~tmp;
 8003492:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003496:	6223      	str	r3, [r4, #32]
          TIM1->CCER |= (uint32_t)(TIM_CCxN_ENABLE << (TIM_CHANNEL_3 & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003498:	6a23      	ldr	r3, [r4, #32]
 800349a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800349e:	6223      	str	r3, [r4, #32]
          TIM1->BDTR |= TIM_BDTR_MOE; //ENABLE ALL OUTPUTS
 80034a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80034a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034a6:	6463      	str	r3, [r4, #68]	; 0x44
          TIM1->AF1 &= ~TIM1_AF1_BKINE;
 80034a8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80034aa:	f023 0301 	bic.w	r3, r3, #1
 80034ae:	6623      	str	r3, [r4, #96]	; 0x60
          COMP7 ->CSR &= ~COMP_CSR_EN;
 80034b0:	f8d2 3218 	ldr.w	r3, [r2, #536]	; 0x218
 80034b4:	f023 0301 	bic.w	r3, r3, #1
 80034b8:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218
          delay_us(10000);
 80034bc:	f242 7010 	movw	r0, #10000	; 0x2710
 80034c0:	f001 fdfa 	bl	80050b8 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80034c4:	4b3e      	ldr	r3, [pc, #248]	; (80035c0 <DS_SendCommand+0x298>)
 80034c6:	2204      	movs	r2, #4
 80034c8:	619a      	str	r2, [r3, #24]
          TIM8->CCER |= TIM_CCER_CC3E; ////ENABLE CHANNEL 3
 80034ca:	6a2b      	ldr	r3, [r5, #32]
 80034cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d0:	622b      	str	r3, [r5, #32]
          TIM8->BDTR |= TIM_BDTR_MOE; //ENABLE ALL OUTPUTS
 80034d2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80034d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034d8:	646b      	str	r3, [r5, #68]	; 0x44
          TIM8->CR1  |= TIM_CR1_ARPE | TIM_CR1_CEN; // ENABLE AUTORELOAD PRELOAD AND TIMER COUNTER
 80034da:	682b      	ldr	r3, [r5, #0]
 80034dc:	f043 0381 	orr.w	r3, r3, #129	; 0x81
          delay_us(10000);
 80034e0:	f242 7010 	movw	r0, #10000	; 0x2710
          TIM8->CR1  |= TIM_CR1_ARPE | TIM_CR1_CEN; // ENABLE AUTORELOAD PRELOAD AND TIMER COUNTER
 80034e4:	602b      	str	r3, [r5, #0]
          for (int new_value=ISO_DCDC_PERIOD*ISO_DCDC_DUTY; new_value<=ISO_DCDC_PERIOD*0.5; new_value++){
 80034e6:	240f      	movs	r4, #15
          delay_us(10000);
 80034e8:	f001 fde6 	bl	80050b8 <delay_us>
        	  TIM8->CCR3 = new_value;
 80034ec:	63ec      	str	r4, [r5, #60]	; 0x3c
        	  delay_us(300);;
 80034ee:	f44f 7096 	mov.w	r0, #300	; 0x12c
          for (int new_value=ISO_DCDC_PERIOD*ISO_DCDC_DUTY; new_value<=ISO_DCDC_PERIOD*0.5; new_value++){
 80034f2:	3401      	adds	r4, #1
        	  delay_us(300);;
 80034f4:	f001 fde0 	bl	80050b8 <delay_us>
          for (int new_value=ISO_DCDC_PERIOD*ISO_DCDC_DUTY; new_value<=ISO_DCDC_PERIOD*0.5; new_value++){
 80034f8:	2c98      	cmp	r4, #152	; 0x98
 80034fa:	d1f7      	bne.n	80034ec <DS_SendCommand+0x1c4>
          delay_us(100000);
 80034fc:	4831      	ldr	r0, [pc, #196]	; (80035c4 <DS_SendCommand+0x29c>)
 80034fe:	f001 fddb 	bl	80050b8 <delay_us>
          HRTIM_TIMF_DMA_START();
 8003502:	f7fe fc67 	bl	8001dd4 <HRTIM_TIMF_DMA_START>
          HRTIM_TIMD_DMA_START();
 8003506:	f7fe fc5b 	bl	8001dc0 <HRTIM_TIMD_DMA_START>
          HRTIM1->sMasterRegs.MCR |= (HRTIM_MCR_MCEN | HRTIM_MCR_TACEN | HRTIM_MCR_TBCEN | HRTIM_MCR_TDCEN | HRTIM_MCR_TECEN | HRTIM_MCR_TFCEN);
 800350a:	492f      	ldr	r1, [pc, #188]	; (80035c8 <DS_SendCommand+0x2a0>)
          HRTIM1_COMMON->OENR |=HRTIM_OENR_TE2OEN; //TIME OUTPUT 2 ENABLE
 800350c:	4a2f      	ldr	r2, [pc, #188]	; (80035cc <DS_SendCommand+0x2a4>)
          HRTIM1->sMasterRegs.MCR |= (HRTIM_MCR_MCEN | HRTIM_MCR_TACEN | HRTIM_MCR_TBCEN | HRTIM_MCR_TDCEN | HRTIM_MCR_TECEN | HRTIM_MCR_TFCEN);
 800350e:	680b      	ldr	r3, [r1, #0]
          delay_us(100000);
 8003510:	482c      	ldr	r0, [pc, #176]	; (80035c4 <DS_SendCommand+0x29c>)
          HRTIM1->sMasterRegs.MCR |= (HRTIM_MCR_MCEN | HRTIM_MCR_TACEN | HRTIM_MCR_TBCEN | HRTIM_MCR_TDCEN | HRTIM_MCR_TECEN | HRTIM_MCR_TFCEN);
 8003512:	f443 03ee 	orr.w	r3, r3, #7798784	; 0x770000
 8003516:	600b      	str	r3, [r1, #0]
          HRTIM1_COMMON->OENR |=HRTIM_OENR_TE2OEN; //TIME OUTPUT 2 ENABLE
 8003518:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800351c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003520:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          delay_us(100000);
 8003524:	f001 fdc8 	bl	80050b8 <delay_us>
          SPI4->CR2 &= ~(SPI_RXFIFO_THRESHOLD || SPI_CR2_LDMARX);
 8003528:	4929      	ldr	r1, [pc, #164]	; (80035d0 <DS_SendCommand+0x2a8>)
          DMA1_Channel2->CCR |= ( DMA_CCR_EN );
 800352a:	4a2a      	ldr	r2, [pc, #168]	; (80035d4 <DS_SendCommand+0x2ac>)
          SPI4->CR2 &= ~(SPI_RXFIFO_THRESHOLD || SPI_CR2_LDMARX);
 800352c:	6848      	ldr	r0, [r1, #4]
          SPI3->CR2 &= ~(SPI_RXFIFO_THRESHOLD || SPI_CR2_LDMARX);
 800352e:	4b2a      	ldr	r3, [pc, #168]	; (80035d8 <DS_SendCommand+0x2b0>)
          SPI4->CR2 &= ~(SPI_RXFIFO_THRESHOLD || SPI_CR2_LDMARX);
 8003530:	f020 0001 	bic.w	r0, r0, #1
 8003534:	6048      	str	r0, [r1, #4]
          DMA1_Channel2->CCR |= ( DMA_CCR_EN );
 8003536:	69d0      	ldr	r0, [r2, #28]
 8003538:	f040 0001 	orr.w	r0, r0, #1
 800353c:	61d0      	str	r0, [r2, #28]
          DMA1_Channel3->CCR |= ( DMA_CCR_EN );
 800353e:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8003540:	f040 0001 	orr.w	r0, r0, #1
 8003544:	6310      	str	r0, [r2, #48]	; 0x30
          SPI4->CR1 |=  ( SPI_CR1_SPE );
 8003546:	6808      	ldr	r0, [r1, #0]
 8003548:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800354c:	6008      	str	r0, [r1, #0]
          SPI4->CR2 |= (SPI_CR2_TXDMAEN);
 800354e:	6848      	ldr	r0, [r1, #4]
 8003550:	f040 0002 	orr.w	r0, r0, #2
 8003554:	6048      	str	r0, [r1, #4]
          SPI4->CR2 |= (SPI_CR2_RXDMAEN);
 8003556:	6848      	ldr	r0, [r1, #4]
 8003558:	f040 0001 	orr.w	r0, r0, #1
 800355c:	6048      	str	r0, [r1, #4]
          SPI3->CR2 &= ~(SPI_RXFIFO_THRESHOLD || SPI_CR2_LDMARX);
 800355e:	6859      	ldr	r1, [r3, #4]
 8003560:	f021 0101 	bic.w	r1, r1, #1
 8003564:	6059      	str	r1, [r3, #4]
          DMA1_Channel4->CCR |= ( DMA_CCR_EN );
 8003566:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003568:	f041 0101 	orr.w	r1, r1, #1
 800356c:	6451      	str	r1, [r2, #68]	; 0x44
          DMA1_Channel6->CCR |= ( DMA_CCR_EN );
 800356e:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
 8003570:	f041 0101 	orr.w	r1, r1, #1
 8003574:	66d1      	str	r1, [r2, #108]	; 0x6c
          SPI3->CR1 |=  ( SPI_CR1_SPE );
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800357c:	601a      	str	r2, [r3, #0]
          SPI3->CR2 |= (SPI_CR2_TXDMAEN);
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	f042 0202 	orr.w	r2, r2, #2
 8003584:	605a      	str	r2, [r3, #4]
          SPI3->CR2 |= (SPI_CR2_RXDMAEN);
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	f042 0201 	orr.w	r2, r2, #1
          nRet = DS_ERROR_NONE;
 800358c:	2000      	movs	r0, #0
          SPI3->CR2 |= (SPI_CR2_RXDMAEN);
 800358e:	605a      	str	r2, [r3, #4]
}
 8003590:	b01f      	add	sp, #124	; 0x7c
 8003592:	bd30      	pop	{r4, r5, pc}
    if (cmd == DS_Stop)
 8003594:	2801      	cmp	r0, #1
 8003596:	d105      	bne.n	80035a4 <DS_SendCommand+0x27c>
    return DataSensing.State;
 8003598:	4b04      	ldr	r3, [pc, #16]	; (80035ac <DS_SendCommand+0x284>)
       if (DS_GetStatus() != DS_Stopped)
 800359a:	7c1a      	ldrb	r2, [r3, #16]
 800359c:	b9f2      	cbnz	r2, 80035dc <DS_SendCommand+0x2b4>
       nRet = DS_ERROR_ON_SEND_COMMAND;
 800359e:	2004      	movs	r0, #4
}
 80035a0:	b01f      	add	sp, #124	; 0x7c
 80035a2:	bd30      	pop	{r4, r5, pc}
    nRet = DS_ERROR_INVALID_COMMAND;
 80035a4:	2003      	movs	r0, #3
}
 80035a6:	b01f      	add	sp, #124	; 0x7c
 80035a8:	bd30      	pop	{r4, r5, pc}
 80035aa:	bf00      	nop
 80035ac:	20008e44 	.word	0x20008e44
 80035b0:	20009340 	.word	0x20009340
 80035b4:	40012c00 	.word	0x40012c00
 80035b8:	40013400 	.word	0x40013400
 80035bc:	40010000 	.word	0x40010000
 80035c0:	48000c00 	.word	0x48000c00
 80035c4:	000186a0 	.word	0x000186a0
 80035c8:	40016800 	.word	0x40016800
 80035cc:	40016b00 	.word	0x40016b00
 80035d0:	40013c00 	.word	0x40013c00
 80035d4:	40020000 	.word	0x40020000
 80035d8:	40003c00 	.word	0x40003c00
            HRTIM1->sMasterRegs.MCR &=~HRTIM_MCR_MCEN; //MASTER TIMER COUNTER DISABLE
 80035dc:	4c54      	ldr	r4, [pc, #336]	; (8003730 <DS_SendCommand+0x408>)
            HAL_SPI_DMAStop(&hspi4);
 80035de:	4855      	ldr	r0, [pc, #340]	; (8003734 <DS_SendCommand+0x40c>)
            DataSensing.State = DS_Stopped;
 80035e0:	2500      	movs	r5, #0
 80035e2:	741d      	strb	r5, [r3, #16]
            HAL_SPI_DMAStop(&hspi4);
 80035e4:	f004 fd1e 	bl	8008024 <HAL_SPI_DMAStop>
            HRTIM1->sMasterRegs.MCR &=~HRTIM_MCR_MCEN; //MASTER TIMER COUNTER DISABLE
 80035e8:	6823      	ldr	r3, [r4, #0]
            HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TE2ODIS; //TIME OUTPUT 2 DISABLE
 80035ea:	4a53      	ldr	r2, [pc, #332]	; (8003738 <DS_SendCommand+0x410>)
            HRTIM1->sMasterRegs.MCR &=~HRTIM_MCR_MCEN; //MASTER TIMER COUNTER DISABLE
 80035ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035f0:	6023      	str	r3, [r4, #0]
            HRTIM1->sMasterRegs.MCR &=~HRTIM_MCR_TACEN; //TIMER A COUNTER DISABLE
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80035f8:	6023      	str	r3, [r4, #0]
            HRTIM1->sMasterRegs.MCR &=~HRTIM_MCR_TBCEN; //TIMER B COUNTER DISABLE
 80035fa:	6823      	ldr	r3, [r4, #0]
 80035fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003600:	6023      	str	r3, [r4, #0]
            HRTIM1->sMasterRegs.MCR &=~HRTIM_MCR_TFCEN; //TIMER F COUNTER DISABLE
 8003602:	6823      	ldr	r3, [r4, #0]
 8003604:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003608:	6023      	str	r3, [r4, #0]
            HRTIM1->sMasterRegs.MCR &=~HRTIM_MCR_TECEN; //TIMER E COUNTER DISABLE
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003610:	6023      	str	r3, [r4, #0]
            HRTIM1_COMMON->ODISR |=HRTIM_ODISR_TE2ODIS; //TIME OUTPUT 2 DISABLE
 8003612:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003616:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800361a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
            HRTIM_TIMD_DMA_STOP();
 800361e:	f7fe fbd7 	bl	8001dd0 <HRTIM_TIMD_DMA_STOP>
            TIM8->CCER &= ~TIM_CCER_CC3NE; //DISABLE CHANNEL 3N
 8003622:	4b46      	ldr	r3, [pc, #280]	; (800373c <DS_SendCommand+0x414>)
  WRITE_REG(GPIOx->BRR, PinMask);
 8003624:	4946      	ldr	r1, [pc, #280]	; (8003740 <DS_SendCommand+0x418>)
 8003626:	6a1a      	ldr	r2, [r3, #32]
            HAL_TIMEx_OnePulseN_Stop(&htim1, TIM_CHANNEL_3); // (High default) Enable/Disable HS gate drivers
 8003628:	4846      	ldr	r0, [pc, #280]	; (8003744 <DS_SendCommand+0x41c>)
            TIM8->CCER &= ~TIM_CCER_CC3NE; //DISABLE CHANNEL 3N
 800362a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800362e:	621a      	str	r2, [r3, #32]
            TIM8->CCER &= ~TIM_CCER_CC3E; ////DISABLE CHANNEL 3
 8003630:	6a1a      	ldr	r2, [r3, #32]
 8003632:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003636:	621a      	str	r2, [r3, #32]
            TIM8->BDTR &= ~TIM_BDTR_MOE; //DISABLE ALL OUTPUTS
 8003638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800363a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800363e:	645a      	str	r2, [r3, #68]	; 0x44
            TIM8->CR1  &= ~(TIM_CR1_ARPE | TIM_CR1_CEN); // DISABLE AUTORELOAD PRELOAD AND TIMER COUNTER
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	f022 0281 	bic.w	r2, r2, #129	; 0x81
 8003646:	601a      	str	r2, [r3, #0]
            SPI4->CR2 &= ~(SPI_CR2_TXDMAEN);
 8003648:	4a3f      	ldr	r2, [pc, #252]	; (8003748 <DS_SendCommand+0x420>)
 800364a:	2304      	movs	r3, #4
 800364c:	628b      	str	r3, [r1, #40]	; 0x28
 800364e:	6851      	ldr	r1, [r2, #4]
            DMA1_Channel2->CCR &= ~( DMA_CCR_EN );
 8003650:	4b3e      	ldr	r3, [pc, #248]	; (800374c <DS_SendCommand+0x424>)
            SPI4->CR2 &= ~(SPI_CR2_TXDMAEN);
 8003652:	f021 0102 	bic.w	r1, r1, #2
 8003656:	6051      	str	r1, [r2, #4]
            SPI4->CR2 &= ~(SPI_CR2_RXDMAEN);
 8003658:	6851      	ldr	r1, [r2, #4]
 800365a:	f021 0101 	bic.w	r1, r1, #1
 800365e:	6051      	str	r1, [r2, #4]
            SPI4->CR1 &= ~SPI_CR1_SPE;
 8003660:	6811      	ldr	r1, [r2, #0]
 8003662:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8003666:	6011      	str	r1, [r2, #0]
            DMA1_Channel2->CCR &= ~( DMA_CCR_EN );
 8003668:	69d9      	ldr	r1, [r3, #28]
 800366a:	f021 0101 	bic.w	r1, r1, #1
 800366e:	61d9      	str	r1, [r3, #28]
            DMA1_Channel3->CCR &= ~( DMA_CCR_EN );
 8003670:	6b19      	ldr	r1, [r3, #48]	; 0x30
            SPI3->CR2 &= ~(SPI_CR2_TXDMAEN);
 8003672:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
            DMA1_Channel3->CCR &= ~( DMA_CCR_EN );
 8003676:	f021 0101 	bic.w	r1, r1, #1
 800367a:	6319      	str	r1, [r3, #48]	; 0x30
            SPI3->CR2 &= ~(SPI_CR2_TXDMAEN);
 800367c:	6851      	ldr	r1, [r2, #4]
 800367e:	f021 0102 	bic.w	r1, r1, #2
 8003682:	6051      	str	r1, [r2, #4]
            SPI3->CR2 &= ~(SPI_CR2_RXDMAEN);
 8003684:	6851      	ldr	r1, [r2, #4]
 8003686:	f021 0101 	bic.w	r1, r1, #1
 800368a:	6051      	str	r1, [r2, #4]
            SPI3->CR1 &= ~SPI_CR1_SPE;
 800368c:	6811      	ldr	r1, [r2, #0]
 800368e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8003692:	6011      	str	r1, [r2, #0]
            DMA1_Channel4->CCR &= ~( DMA_CCR_EN );
 8003694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003696:	f022 0201 	bic.w	r2, r2, #1
 800369a:	645a      	str	r2, [r3, #68]	; 0x44
            DMA1_Channel6->CCR &= ~( DMA_CCR_EN );
 800369c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800369e:	f022 0201 	bic.w	r2, r2, #1
 80036a2:	66da      	str	r2, [r3, #108]	; 0x6c
            HAL_TIMEx_OnePulseN_Stop(&htim1, TIM_CHANNEL_3); // (High default) Enable/Disable HS gate drivers
 80036a4:	2108      	movs	r1, #8
 80036a6:	f005 f96b 	bl	8008980 <HAL_TIMEx_OnePulseN_Stop>
            HAL_TIM_OnePulse_Stop(&htim1, TIM_CHANNEL_3); // (Low default) OC signal to DCAC
 80036aa:	2108      	movs	r1, #8
 80036ac:	4825      	ldr	r0, [pc, #148]	; (8003744 <DS_SendCommand+0x41c>)
 80036ae:	f004 fe33 	bl	8008318 <HAL_TIM_OnePulse_Stop>
            TIM1->AF1 &= ~TIM1_AF1_BKINE;
 80036b2:	4927      	ldr	r1, [pc, #156]	; (8003750 <DS_SendCommand+0x428>)
            COMP7 ->CSR &= ~COMP_CSR_EN;
 80036b4:	4a27      	ldr	r2, [pc, #156]	; (8003754 <DS_SendCommand+0x42c>)
            TIM1->AF1 &= ~TIM1_AF1_BKINE;
 80036b6:	6e0b      	ldr	r3, [r1, #96]	; 0x60
            delay_us(100000);
 80036b8:	4827      	ldr	r0, [pc, #156]	; (8003758 <DS_SendCommand+0x430>)
            TIM1->AF1 &= ~TIM1_AF1_BKINE;
 80036ba:	f023 0301 	bic.w	r3, r3, #1
 80036be:	660b      	str	r3, [r1, #96]	; 0x60
            COMP7 ->CSR &= ~COMP_CSR_EN;
 80036c0:	f8d2 3218 	ldr.w	r3, [r2, #536]	; 0x218
 80036c4:	f023 0301 	bic.w	r3, r3, #1
 80036c8:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218
            delay_us(100000);
 80036cc:	f001 fcf4 	bl	80050b8 <delay_us>
      	  uint32_t isrflags = HRTIM1->sCommonRegs.ISR;
 80036d0:	f8d4 3388 	ldr.w	r3, [r4, #904]	; 0x388
      	  uint32_t ierits   = HRTIM1->sCommonRegs.IER;
 80036d4:	f8d4 2390 	ldr.w	r2, [r4, #912]	; 0x390
      	  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 80036d8:	f013 0308 	ands.w	r3, r3, #8
 80036dc:	d01f      	beq.n	800371e <DS_SendCommand+0x3f6>
      	    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 80036de:	f012 0208 	ands.w	r2, r2, #8
 80036e2:	d11e      	bne.n	8003722 <DS_SendCommand+0x3fa>
            nRet = DS_ERROR_NONE;
 80036e4:	4610      	mov	r0, r2
 80036e6:	e753      	b.n	8003590 <DS_SendCommand+0x268>
	    Error_Handler();
 80036e8:	f001 fcfe 	bl	80050e8 <Error_Handler>
 80036ec:	e6c5      	b.n	800347a <DS_SendCommand+0x152>
	    Error_Handler();
 80036ee:	f001 fcfb 	bl	80050e8 <Error_Handler>
 80036f2:	e69e      	b.n	8003432 <DS_SendCommand+0x10a>
	    Error_Handler();
 80036f4:	f001 fcf8 	bl	80050e8 <Error_Handler>
 80036f8:	e684      	b.n	8003404 <DS_SendCommand+0xdc>
	    Error_Handler();
 80036fa:	f001 fcf5 	bl	80050e8 <Error_Handler>
 80036fe:	e674      	b.n	80033ea <DS_SendCommand+0xc2>
	    Error_Handler();
 8003700:	f001 fcf2 	bl	80050e8 <Error_Handler>
 8003704:	e665      	b.n	80033d2 <DS_SendCommand+0xaa>
	    Error_Handler();
 8003706:	f001 fcef 	bl	80050e8 <Error_Handler>
 800370a:	e657      	b.n	80033bc <DS_SendCommand+0x94>
	    Error_Handler();
 800370c:	f001 fcec 	bl	80050e8 <Error_Handler>
 8003710:	e64d      	b.n	80033ae <DS_SendCommand+0x86>
	    Error_Handler();
 8003712:	f001 fce9 	bl	80050e8 <Error_Handler>
 8003716:	e644      	b.n	80033a2 <DS_SendCommand+0x7a>
	    Error_Handler();
 8003718:	f001 fce6 	bl	80050e8 <Error_Handler>
 800371c:	e637      	b.n	800338e <DS_SendCommand+0x66>
            nRet = DS_ERROR_NONE;
 800371e:	4618      	mov	r0, r3
 8003720:	e736      	b.n	8003590 <DS_SendCommand+0x268>
      	    	HRTIM1->sCommonRegs.ICR = HRTIM_ICR_FLT4C;
 8003722:	2308      	movs	r3, #8
 8003724:	f8c4 338c 	str.w	r3, [r4, #908]	; 0x38c
      	    	DCDC_TIMx_Configuration(); //added to riconfigure the timer for DCDC
 8003728:	f7fe fd3c 	bl	80021a4 <DCDC_TIMx_Configuration>
            nRet = DS_ERROR_NONE;
 800372c:	4628      	mov	r0, r5
 800372e:	e72f      	b.n	8003590 <DS_SendCommand+0x268>
 8003730:	40016800 	.word	0x40016800
 8003734:	200092dc 	.word	0x200092dc
 8003738:	40016b00 	.word	0x40016b00
 800373c:	40013400 	.word	0x40013400
 8003740:	48000c00 	.word	0x48000c00
 8003744:	20009340 	.word	0x20009340
 8003748:	40013c00 	.word	0x40013c00
 800374c:	40020000 	.word	0x40020000
 8003750:	40012c00 	.word	0x40012c00
 8003754:	40010000 	.word	0x40010000
 8003758:	000186a0 	.word	0x000186a0

0800375c <DMA1_Channel2_IRQHandler>:
{
 800375c:	b508      	push	{r3, lr}
				if(Pulse2_IT==FALSE)
 800375e:	4b38      	ldr	r3, [pc, #224]	; (8003840 <DMA1_Channel2_IRQHandler+0xe4>)
 8003760:	781a      	ldrb	r2, [r3, #0]
 8003762:	b102      	cbz	r2, 8003766 <DMA1_Channel2_IRQHandler+0xa>
				else if (Pulse2_IT==TRUE)
 8003764:	781b      	ldrb	r3, [r3, #0]
				  SET_BIT(*pReg, HRTIM_MICR_MREP);
 8003766:	4a37      	ldr	r2, [pc, #220]	; (8003844 <DMA1_Channel2_IRQHandler+0xe8>)
		  if (DMA1->ISR & DMA_ISR_TCIF2)
 8003768:	4937      	ldr	r1, [pc, #220]	; (8003848 <DMA1_Channel2_IRQHandler+0xec>)
				  SET_BIT(*pReg, HRTIM_MICR_MREP);
 800376a:	f8d2 3b08 	ldr.w	r3, [r2, #2824]	; 0xb08
 800376e:	f043 0310 	orr.w	r3, r3, #16
 8003772:	f8c2 3b08 	str.w	r3, [r2, #2824]	; 0xb08
		  if (DMA1->ISR & DMA_ISR_TCIF2)
 8003776:	680b      	ldr	r3, [r1, #0]
 8003778:	069b      	lsls	r3, r3, #26
 800377a:	d50b      	bpl.n	8003794 <DMA1_Channel2_IRQHandler+0x38>
				if (DataSensing.State == DS_Running)
 800377c:	4b33      	ldr	r3, [pc, #204]	; (800384c <DMA1_Channel2_IRQHandler+0xf0>)
  WRITE_REG(GPIOx->BSRR, PinMask);
 800377e:	4934      	ldr	r1, [pc, #208]	; (8003850 <DMA1_Channel2_IRQHandler+0xf4>)
 8003780:	7c1a      	ldrb	r2, [r3, #16]
 8003782:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003786:	2a01      	cmp	r2, #1
 8003788:	6188      	str	r0, [r1, #24]
 800378a:	d054      	beq.n	8003836 <DMA1_Channel2_IRQHandler+0xda>
			  DMA2_CLEAR_IT = 1;
 800378c:	4b31      	ldr	r3, [pc, #196]	; (8003854 <DMA1_Channel2_IRQHandler+0xf8>)
 800378e:	2201      	movs	r2, #1
 8003790:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		  if (DMA1->ISR & DMA_ISR_TCIF1)
 8003794:	4b2c      	ldr	r3, [pc, #176]	; (8003848 <DMA1_Channel2_IRQHandler+0xec>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	0798      	lsls	r0, r3, #30
 800379a:	d503      	bpl.n	80037a4 <DMA1_Channel2_IRQHandler+0x48>
		  DMA1_CLEAR_IT = 1;
 800379c:	4b2d      	ldr	r3, [pc, #180]	; (8003854 <DMA1_Channel2_IRQHandler+0xf8>)
 800379e:	2201      	movs	r2, #1
 80037a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		  if (DMA1->ISR & DMA_ISR_TCIF5)
 80037a4:	4b28      	ldr	r3, [pc, #160]	; (8003848 <DMA1_Channel2_IRQHandler+0xec>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	0399      	lsls	r1, r3, #14
 80037aa:	d503      	bpl.n	80037b4 <DMA1_Channel2_IRQHandler+0x58>
		  DMA5_CLEAR_IT = 1;
 80037ac:	4b29      	ldr	r3, [pc, #164]	; (8003854 <DMA1_Channel2_IRQHandler+0xf8>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		  if (DMA1->ISR & DMA_ISR_TCIF3)
 80037b4:	4b24      	ldr	r3, [pc, #144]	; (8003848 <DMA1_Channel2_IRQHandler+0xec>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	059a      	lsls	r2, r3, #22
 80037ba:	d503      	bpl.n	80037c4 <DMA1_Channel2_IRQHandler+0x68>
			  DMA3_CLEAR_IT = 1;
 80037bc:	4b25      	ldr	r3, [pc, #148]	; (8003854 <DMA1_Channel2_IRQHandler+0xf8>)
 80037be:	2201      	movs	r2, #1
 80037c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		  if (DMA1->ISR & DMA_ISR_TCIF4)
 80037c4:	4b20      	ldr	r3, [pc, #128]	; (8003848 <DMA1_Channel2_IRQHandler+0xec>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	049b      	lsls	r3, r3, #18
 80037ca:	d503      	bpl.n	80037d4 <DMA1_Channel2_IRQHandler+0x78>
			  DMA4_CLEAR_IT = 1;
 80037cc:	4b21      	ldr	r3, [pc, #132]	; (8003854 <DMA1_Channel2_IRQHandler+0xf8>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		  if (DMA1->ISR & DMA_ISR_TCIF6)
 80037d4:	4b1c      	ldr	r3, [pc, #112]	; (8003848 <DMA1_Channel2_IRQHandler+0xec>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	0298      	lsls	r0, r3, #10
 80037da:	d503      	bpl.n	80037e4 <DMA1_Channel2_IRQHandler+0x88>
			  DMA6_CLEAR_IT = 1;
 80037dc:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <DMA1_Channel2_IRQHandler+0xf8>)
 80037de:	2201      	movs	r2, #1
 80037e0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		  if ((DMA1->ISR & DMA_ISR_TCIF7) || (DMA1->ISR & DMA_ISR_HTIF7) || (DMA1->ISR & DMA_ISR_GIF7))
 80037e4:	4b18      	ldr	r3, [pc, #96]	; (8003848 <DMA1_Channel2_IRQHandler+0xec>)
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	0191      	lsls	r1, r2, #6
 80037ea:	d402      	bmi.n	80037f2 <DMA1_Channel2_IRQHandler+0x96>
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	0152      	lsls	r2, r2, #5
 80037f0:	d51d      	bpl.n	800382e <DMA1_Channel2_IRQHandler+0xd2>
			  DMA7_CLEAR_IT = 1;
 80037f2:	4b18      	ldr	r3, [pc, #96]	; (8003854 <DMA1_Channel2_IRQHandler+0xf8>)
 80037f4:	2201      	movs	r2, #1
			  DMA7_CLEAR_GIT = 1;
 80037f6:	e9c3 2238 	strd	r2, r2, [r3, #224]	; 0xe0
			  DMA7_CLEAR_HIT = 1;
 80037fa:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		  if ((DMA1->ISR & DMA_ISR_TCIF8) || (DMA1->ISR & DMA_ISR_HTIF8) || (DMA1->ISR & DMA_ISR_GIF8))
 80037fe:	4b12      	ldr	r3, [pc, #72]	; (8003848 <DMA1_Channel2_IRQHandler+0xec>)
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	0091      	lsls	r1, r2, #2
 8003804:	d402      	bmi.n	800380c <DMA1_Channel2_IRQHandler+0xb0>
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	0052      	lsls	r2, r2, #1
 800380a:	d506      	bpl.n	800381a <DMA1_Channel2_IRQHandler+0xbe>
			  DMA8_CLEAR_IT = 1;
 800380c:	4b11      	ldr	r3, [pc, #68]	; (8003854 <DMA1_Channel2_IRQHandler+0xf8>)
 800380e:	2201      	movs	r2, #1
			  DMA8_CLEAR_GIT = 1;
 8003810:	e9c3 223c 	strd	r2, r2, [r3, #240]	; 0xf0
			  DMA8_CLEAR_HIT = 1;
 8003814:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
}
 8003818:	bd08      	pop	{r3, pc}
		  if ((DMA1->ISR & DMA_ISR_TCIF8) || (DMA1->ISR & DMA_ISR_HTIF8) || (DMA1->ISR & DMA_ISR_GIF8))
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	d5fb      	bpl.n	8003818 <DMA1_Channel2_IRQHandler+0xbc>
			  DMA8_CLEAR_IT = 1;
 8003820:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <DMA1_Channel2_IRQHandler+0xf8>)
 8003822:	2201      	movs	r2, #1
			  DMA8_CLEAR_GIT = 1;
 8003824:	e9c3 223c 	strd	r2, r2, [r3, #240]	; 0xf0
			  DMA8_CLEAR_HIT = 1;
 8003828:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 800382c:	e7f4      	b.n	8003818 <DMA1_Channel2_IRQHandler+0xbc>
		  if ((DMA1->ISR & DMA_ISR_TCIF7) || (DMA1->ISR & DMA_ISR_HTIF7) || (DMA1->ISR & DMA_ISR_GIF7))
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	01d8      	lsls	r0, r3, #7
 8003832:	d5e4      	bpl.n	80037fe <DMA1_Channel2_IRQHandler+0xa2>
 8003834:	e7dd      	b.n	80037f2 <DMA1_Channel2_IRQHandler+0x96>
					if (DataSensing.Init.OnAcquisition)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0a7      	beq.n	800378c <DMA1_Channel2_IRQHandler+0x30>
						DataSensing.Init.OnAcquisition();
 800383c:	4798      	blx	r3
 800383e:	e7a5      	b.n	800378c <DMA1_Channel2_IRQHandler+0x30>
 8003840:	20008e5c 	.word	0x20008e5c
 8003844:	40016000 	.word	0x40016000
 8003848:	40020000 	.word	0x40020000
 800384c:	20008e44 	.word	0x20008e44
 8003850:	48000800 	.word	0x48000800
 8003854:	42400000 	.word	0x42400000

08003858 <PID_Init>:


//*********************************************************************************************************************
void PID_Init(PI_ControllerTYPEDEF *Direct_PID, PI_ControllerTYPEDEF *Quadrature_PID,PI_ControllerTYPEDEF *Reactive_PID,PI_ControllerTYPEDEF *Active_PID,PI_ControllerTYPEDEF *Bus_DC_PID, PI_ControllerTYPEDEF *PLL_PID,PI_ControllerTYPEDEF *MPPT_PID)

{
 8003858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800385c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
  PLL_PID->Reference =0;    //PID_DIRECT_VOLTAGE_REFERENCE;
  PLL_PID->Kp_Gain =2700;//2750;//405; //500//3000//450 //50Hz   //PID_DIRECT_VOLTAGE_KP_DEFAULT;8000
 8003860:	f640 288c 	movw	r8, #2700	; 0xa8c
 8003864:	f8a5 8002 	strh.w	r8, [r5, #2]
  PLL_PID->Reference =0;    //PID_DIRECT_VOLTAGE_REFERENCE;
 8003868:	2300      	movs	r3, #0
  PLL_PID->Ki_Gain =35;//35;//4; //10//100/20//50Hz;   //PID_DIRECT_VOLTAGE_KI_DEFAULT;500

  PLL_PID->Lower_Limit_Output=-S16_MAX;         //Lower Limit for Output limitation
  PLL_PID->Upper_Limit_Output=S16_MAX;          //Upper Limit for Output limitation
 800386a:	f647 7cff 	movw	ip, #32767	; 0x7fff
  PLL_PID->Lower_Limit_Output=-S16_MAX;         //Lower Limit for Output limitation
 800386e:	f248 0701 	movw	r7, #32769	; 0x8001
  PLL_PID->Ki_Gain =35;//35;//4; //10//100/20//50Hz;   //PID_DIRECT_VOLTAGE_KI_DEFAULT;500
 8003872:	f04f 0823 	mov.w	r8, #35	; 0x23
  PLL_PID->Reference =0;    //PID_DIRECT_VOLTAGE_REFERENCE;
 8003876:	802b      	strh	r3, [r5, #0]
  PLL_PID->Max_PID_Output = FALSE;
 8003878:	816b      	strh	r3, [r5, #10]
  PLL_PID->Upper_Limit_Output=S16_MAX;          //Upper Limit for Output limitation
 800387a:	f8a5 c008 	strh.w	ip, [r5, #8]
  PLL_PID->Lower_Limit_Output=-S16_MAX;         //Lower Limit for Output limitation
 800387e:	80ef      	strh	r7, [r5, #6]
  PLL_PID->Ki_Gain =35;//35;//4; //10//100/20//50Hz;   //PID_DIRECT_VOLTAGE_KI_DEFAULT;500
 8003880:	f8a5 8004 	strh.w	r8, [r5, #4]
  PLL_PID->Min_PID_Output = FALSE;

  //PI Id
  Direct_PID->Reference =0;                       //Output_PID_Reactive_Power; //Brak zmian (load żarówki)
  Direct_PID->Kp_Gain = 200;//1100;//870;//2407;//3000;//9488;//7600;//4253428;//4100;//6500;  // filtro RIPEM 7500              //PID_KP_DEFAULT;
  Direct_PID->Ki_Gain = 2000;//2857;//4489;//425;//56;//200;//10;//20;//                     //PID_KI_DEFAULT;
 8003884:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
 8003888:	8085      	strh	r5, [r0, #4]

  Direct_PID->Lower_Limit_Output=  -6900;//-8900;// -6900;       //Lower Limit for Output limitation
 800388a:	f24e 550c 	movw	r5, #58636	; 0xe50c
 800388e:	80c5      	strh	r5, [r0, #6]
  Direct_PID->Kp_Gain = 200;//1100;//870;//2407;//3000;//9488;//7600;//4253428;//4100;//6500;  // filtro RIPEM 7500              //PID_KP_DEFAULT;
 8003890:	f04f 0ec8 	mov.w	lr, #200	; 0xc8
  Direct_PID->Upper_Limit_Output=  6900;// 8900;//6900;      //Upper Limit for Output limitation  THD
 8003894:	f641 25f4 	movw	r5, #6900	; 0x1af4
  Direct_PID->Reference =0;                       //Output_PID_Reactive_Power; //Brak zmian (load żarówki)
 8003898:	8003      	strh	r3, [r0, #0]
  Direct_PID->Kp_Gain = 200;//1100;//870;//2407;//3000;//9488;//7600;//4253428;//4100;//6500;  // filtro RIPEM 7500              //PID_KP_DEFAULT;
 800389a:	f8a0 e002 	strh.w	lr, [r0, #2]
  Direct_PID->Max_PID_Output =      FALSE;
 800389e:	8143      	strh	r3, [r0, #10]
  Direct_PID->Upper_Limit_Output=  6900;// 8900;//6900;      //Upper Limit for Output limitation  THD
 80038a0:	8105      	strh	r5, [r0, #8]
  //PI Iq
  Quadrature_PID->Reference =0;           //PID_DEFAULT;
  Quadrature_PID->Kp_Gain = 200;//1178;//134;//1158;//3350;//3400;//4100;//6190;//4000;      // filtro RIPEM 12000  power factor
  Quadrature_PID->Ki_Gain = 1500;//3660;//7452;//700;//650;//700;//1;    //20   //PID_KI_DEFAULT;

  Quadrature_PID->Lower_Limit_Output=-32067;//-32030;    // Lower Limit for Output limitation
 80038a2:	f248 20bd 	movw	r0, #33469	; 0x82bd
 80038a6:	80c8      	strh	r0, [r1, #6]
  Quadrature_PID->Ki_Gain = 1500;//3660;//7452;//700;//650;//700;//1;    //20   //PID_KI_DEFAULT;
 80038a8:	f240 56dc 	movw	r6, #1500	; 0x5dc
  Quadrature_PID->Upper_Limit_Output= 32067;//32030;    //  Upper Limit for Output limitation
 80038ac:	f647 5043 	movw	r0, #32067	; 0x7d43
  Quadrature_PID->Reference =0;           //PID_DEFAULT;
 80038b0:	800b      	strh	r3, [r1, #0]
  Quadrature_PID->Kp_Gain = 200;//1178;//134;//1158;//3350;//3400;//4100;//6190;//4000;      // filtro RIPEM 12000  power factor
 80038b2:	f8a1 e002 	strh.w	lr, [r1, #2]
  Quadrature_PID->Ki_Gain = 1500;//3660;//7452;//700;//650;//700;//1;    //20   //PID_KI_DEFAULT;
 80038b6:	808e      	strh	r6, [r1, #4]
  Quadrature_PID->Max_PID_Output =     FALSE;
 80038b8:	814b      	strh	r3, [r1, #10]
  Quadrature_PID->Upper_Limit_Output= 32067;//32030;    //  Upper Limit for Output limitation
 80038ba:	8108      	strh	r0, [r1, #8]
  // cambiamo il ref....
  Reactive_PID->Reference =0;//30               //PID REFERENCE DEFAULT
  Reactive_PID->Kp_Gain =1500; // filtro RIPEM 3400 //PID_KP_DEFAULT; //Brak zmian (load żarówki)
  Reactive_PID->Ki_Gain =1500;                 //PID_KI_DEFAULT;      //Brak zmian (load żarówki)

  Reactive_PID->Lower_Limit_Output=-32767;    //Lower Limit for Output limitation
 80038bc:	80d7      	strh	r7, [r2, #6]
  Reactive_PID->Reference =0;//30               //PID REFERENCE DEFAULT
 80038be:	8013      	strh	r3, [r2, #0]
  Reactive_PID->Kp_Gain =1500; // filtro RIPEM 3400 //PID_KP_DEFAULT; //Brak zmian (load żarówki)
 80038c0:	8056      	strh	r6, [r2, #2]
  Reactive_PID->Ki_Gain =1500;                 //PID_KI_DEFAULT;      //Brak zmian (load żarówki)
 80038c2:	8096      	strh	r6, [r2, #4]
  Reactive_PID->Upper_Limit_Output=32767;     //Upper Limit for Output limitation
 80038c4:	f8a2 c008 	strh.w	ip, [r2, #8]
  Reactive_PID->Max_PID_Output = FALSE;
 80038c8:	8153      	strh	r3, [r2, #10]
  Reactive_PID->Min_PID_Output = FALSE;

  Bus_DC_PID->Reference = 10500;//11000; //7692; //8200;//8500; //13000; //15000  //Brak zmian (load żarówki)
 80038ca:	f642 1204 	movw	r2, #10500	; 0x2904
 80038ce:	8022      	strh	r2, [r4, #0]
  Bus_DC_PID->Kp_Gain = 8000;//8116;//8100;//8100;//10000;//24000;   //5000      //PID_KP_DEFAULT;
 80038d0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80038d4:	8062      	strh	r2, [r4, #2]
  Bus_DC_PID->Ki_Gain = 200;//600;//200;//1050;//20//400;    //300   //PID_KI_DEFAULT;
 80038d6:	f8a4 e004 	strh.w	lr, [r4, #4]

  Bus_DC_PID->Lower_Limit_Output= 0;  //S16_MIN;     //Lower Limit for Output limitation
 80038da:	80e3      	strh	r3, [r4, #6]
  Bus_DC_PID->Upper_Limit_Output= 32767; //Upper Limit for Output limitation
 80038dc:	f8a4 c008 	strh.w	ip, [r4, #8]
  Bus_DC_PID->Max_PID_Output = FALSE;
 80038e0:	8163      	strh	r3, [r4, #10]
  Bus_DC_PID->Min_PID_Output = FALSE;
}
 80038e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038e6:	bf00      	nop

080038e8 <PID_DirectCurrent>:
s16 PID_DirectCurrent(PI_ControllerTYPEDEF *Direct_PID, s16 qIdirect_Input)
{
  s32 wProportional_Term=0, wIntegral_Term=0, wIntegralTerm=0, wOutput_32,wIntegral_sum_temp=0;
  s32 Error;

  Error = (Direct_PID->Reference- qIdirect_Input); // Inverter_Current_Components
 80038e8:	f9b0 2000 	ldrsh.w	r2, [r0]

  /* Proportional term computation*/
  wProportional_Term = Direct_PID->Kp_Gain * Error;
 80038ec:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  Error = (Direct_PID->Reference- qIdirect_Input); // Inverter_Current_Components
 80038f0:	1a51      	subs	r1, r2, r1
  {
    wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = Direct_PID->Ki_Gain * Error;
 80038f2:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
  wProportional_Term = Direct_PID->Kp_Gain * Error;
 80038f6:	fb01 f303 	mul.w	r3, r1, r3
 /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/

  wOutput_32 = (wProportional_Term/4096) + (wIntegralTerm/4096);
 80038fa:	2b00      	cmp	r3, #0
    wIntegral_Term = Direct_PID->Ki_Gain * Error;
 80038fc:	fb02 f101 	mul.w	r1, r2, r1
  wOutput_32 = (wProportional_Term/4096) + (wIntegralTerm/4096);
 8003900:	bfb8      	it	lt
 8003902:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 8003906:	2900      	cmp	r1, #0
 8003908:	bfb8      	it	lt
 800390a:	f601 71ff 	addwlt	r1, r1, #4095	; 0xfff

  if (wOutput_32 > Direct_PID->Upper_Limit_Output)
 800390e:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
  wOutput_32 = (wProportional_Term/4096) + (wIntegralTerm/4096);
 8003912:	131b      	asrs	r3, r3, #12
 8003914:	eb03 3321 	add.w	r3, r3, r1, asr #12
  if (wOutput_32 > Direct_PID->Upper_Limit_Output)
 8003918:	429a      	cmp	r2, r3
 800391a:	db05      	blt.n	8003928 <PID_DirectCurrent+0x40>
  {
    wOutput_32 = Direct_PID->Upper_Limit_Output;
  }
  else if (wOutput_32 < Direct_PID->Lower_Limit_Output)
 800391c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
    wOutput_32 = Direct_PID->Lower_Limit_Output;
  }
  else
  {}

  return((s16)(wOutput_32));
 8003920:	4293      	cmp	r3, r2
 8003922:	bfb8      	it	lt
 8003924:	4613      	movlt	r3, r2
 8003926:	b21a      	sxth	r2, r3
}
 8003928:	4610      	mov	r0, r2
 800392a:	4770      	bx	lr

0800392c <PID_QuadratureCurrent>:
 800392c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8003930:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8003934:	1a51      	subs	r1, r2, r1
 8003936:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800393a:	fb01 f303 	mul.w	r3, r1, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	fb02 f101 	mul.w	r1, r2, r1
 8003944:	bfb8      	it	lt
 8003946:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 800394a:	2900      	cmp	r1, #0
 800394c:	bfb8      	it	lt
 800394e:	f601 71ff 	addwlt	r1, r1, #4095	; 0xfff
 8003952:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8003956:	131b      	asrs	r3, r3, #12
 8003958:	eb03 3321 	add.w	r3, r3, r1, asr #12
 800395c:	4293      	cmp	r3, r2
 800395e:	dc05      	bgt.n	800396c <PID_QuadratureCurrent+0x40>
 8003960:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8003964:	4293      	cmp	r3, r2
 8003966:	bfb8      	it	lt
 8003968:	4613      	movlt	r3, r2
 800396a:	b21a      	sxth	r2, r3
 800396c:	4610      	mov	r0, r2
 800396e:	4770      	bx	lr

08003970 <PID_Reactive_Power>:
s16 PID_Reactive_Power(PI_ControllerTYPEDEF *Reactive_PID, s16 qReactive_Input)
{
  s32 wProportional_Term=0, wIntegral_Term=0, wIntegralTerm=0, wOutput_32,wIntegral_sum_temp=0;
  s32 Error;

  Error = (Reactive_PID->Reference- qReactive_Input);
 8003970:	f9b0 2000 	ldrsh.w	r2, [r0]

  /* Proportional term computation*/
  wProportional_Term = Reactive_PID->Kp_Gain * Error;
 8003974:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  Error = (Reactive_PID->Reference- qReactive_Input);
 8003978:	1a51      	subs	r1, r2, r1
  {
    wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = Reactive_PID->Ki_Gain * Error;
 800397a:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
  wProportional_Term = Reactive_PID->Kp_Gain * Error;
 800397e:	fb01 f303 	mul.w	r3, r1, r3
 /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/

  wOutput_32 = (wProportional_Term/4096) + (wIntegralTerm/32768);
 8003982:	2b00      	cmp	r3, #0
    wIntegral_Term = Reactive_PID->Ki_Gain * Error;
 8003984:	fb02 f101 	mul.w	r1, r2, r1
  wOutput_32 = (wProportional_Term/4096) + (wIntegralTerm/32768);
 8003988:	bfb8      	it	lt
 800398a:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 800398e:	2900      	cmp	r1, #0
 8003990:	bfbc      	itt	lt
 8003992:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 8003996:	317f      	addlt	r1, #127	; 0x7f

  if (wOutput_32 > Reactive_PID->Upper_Limit_Output)
 8003998:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
  wOutput_32 = (wProportional_Term/4096) + (wIntegralTerm/32768);
 800399c:	131b      	asrs	r3, r3, #12
 800399e:	eb03 33e1 	add.w	r3, r3, r1, asr #15
  if (wOutput_32 > Reactive_PID->Upper_Limit_Output)
 80039a2:	429a      	cmp	r2, r3
 80039a4:	db05      	blt.n	80039b2 <PID_Reactive_Power+0x42>
  {
    wOutput_32 = Reactive_PID->Upper_Limit_Output;
  }
  else if (wOutput_32 < Reactive_PID->Lower_Limit_Output)
 80039a6:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
    wOutput_32 = Reactive_PID->Lower_Limit_Output;
  }
  else
  {}

  return((s16)(wOutput_32));
 80039aa:	4293      	cmp	r3, r2
 80039ac:	bfb8      	it	lt
 80039ae:	4613      	movlt	r3, r2
 80039b0:	b21a      	sxth	r2, r3
}
 80039b2:	4610      	mov	r0, r2
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop

080039b8 <PID_Init_Integral_Part>:
*******************************************************************************/

//void PID_Init_Integral_Part(PI_ControllerTYPEDEF *Direct_PID, PI_ControllerTYPEDEF *Quadrature_PID,PI_ControllerTYPEDEF *Reactive_PID,PI_ControllerTYPEDEF *Active_PID)
void PID_Init_Integral_Part(void)
{
   Integral_Voltage = 0;  // reset integral value
 80039b8:	4902      	ldr	r1, [pc, #8]	; (80039c4 <PID_Init_Integral_Part+0xc>)
   Integral_MPPT = 0;
   Integral_Direct_Current=0;
   Integral_Quadrature_Current=0;
   Integral_Reactive_Power=0;
   Integral_Active_Power=0;
   Integral_Bus_Voltage=0;
 80039ba:	4a03      	ldr	r2, [pc, #12]	; (80039c8 <PID_Init_Integral_Part+0x10>)
   Integral_Voltage = 0;  // reset integral value
 80039bc:	2300      	movs	r3, #0
 80039be:	600b      	str	r3, [r1, #0]
   Integral_Bus_Voltage=0;
 80039c0:	6013      	str	r3, [r2, #0]

}
 80039c2:	4770      	bx	lr
 80039c4:	20008e6c 	.word	0x20008e6c
 80039c8:	20008e68 	.word	0x20008e68

080039cc <PLL_PID_Regulator>:
* Output         : s16
* Return         : None
*******************************************************************************/

s16 PLL_PID_Regulator(PI_ControllerTYPEDEF *PLL_PID, Volt_Components Grid_Voltage_Components_Input)
{
 80039cc:	b4f0      	push	{r4, r5, r6, r7}

Error = (PLL_PID->Reference - Grid_Voltage_Components_Input.qV_Direct); // Grid_Voltage_Components_Input

//*****************************************************************************
// *********************** PLL Ki reducing ************************************
if(PLL_par_red_ki==TRUE && PLL_par_red_ki_n==1750)
 80039ce:	4d53      	ldr	r5, [pc, #332]	; (8003b1c <PLL_PID_Regulator+0x150>)
Error = (PLL_PID->Reference - Grid_Voltage_Components_Input.qV_Direct); // Grid_Voltage_Components_Input
 80039d0:	f9b0 2000 	ldrsh.w	r2, [r0]
if(PLL_par_red_ki==TRUE && PLL_par_red_ki_n==1750)
 80039d4:	782b      	ldrb	r3, [r5, #0]
{
 80039d6:	b082      	sub	sp, #8
Error = (PLL_PID->Reference - Grid_Voltage_Components_Input.qV_Direct); // Grid_Voltage_Components_Input
 80039d8:	eba2 4221 	sub.w	r2, r2, r1, asr #16
if(PLL_par_red_ki==TRUE && PLL_par_red_ki_n==1750)
 80039dc:	b13b      	cbz	r3, 80039ee <PLL_PID_Regulator+0x22>
 80039de:	4950      	ldr	r1, [pc, #320]	; (8003b20 <PLL_PID_Regulator+0x154>)
 80039e0:	880b      	ldrh	r3, [r1, #0]
 80039e2:	f240 64d6 	movw	r4, #1750	; 0x6d6
 80039e6:	42a3      	cmp	r3, r4
 80039e8:	d068      	beq.n	8003abc <PLL_PID_Regulator+0xf0>
   }
    PLL_par_red_ki_n=0;
}
else if(PLL_par_red_ki==TRUE && PLL_par_red_ki_n!=1750)
{
  PLL_par_red_ki_n++;
 80039ea:	3301      	adds	r3, #1
 80039ec:	800b      	strh	r3, [r1, #0]
}

//*********************** PLL Kp reducing ************************************
if(PLL_par_red_kp==TRUE && PLL_par_red_kp_n==1750 && PLL_PID->Ki_Gain==1)
 80039ee:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  // Proportional term computation
  Proportional_Term = PLL_PID->Kp_Gain * Error;

  // Integral term computation
  Integral_Term = PLL_PID->Ki_Gain * Error;
 80039f2:	fb02 f403 	mul.w	r4, r2, r3
if(PLL_par_red_kp==TRUE && PLL_par_red_kp_n==1750 && PLL_PID->Ki_Gain==1)
 80039f6:	4e4b      	ldr	r6, [pc, #300]	; (8003b24 <PLL_PID_Regulator+0x158>)
 80039f8:	7831      	ldrb	r1, [r6, #0]
 80039fa:	2900      	cmp	r1, #0
 80039fc:	d032      	beq.n	8003a64 <PLL_PID_Regulator+0x98>
 80039fe:	4f4a      	ldr	r7, [pc, #296]	; (8003b28 <PLL_PID_Regulator+0x15c>)
 8003a00:	8839      	ldrh	r1, [r7, #0]
 8003a02:	f240 6cd6 	movw	ip, #1750	; 0x6d6
 8003a06:	4561      	cmp	r1, ip
 8003a08:	d063      	beq.n	8003ad2 <PLL_PID_Regulator+0x106>
else if(PLL_par_red_kp==TRUE && PLL_par_red_kp_n!=1750 && PLL_PID->Ki_Gain==1)
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d070      	beq.n	8003af0 <PLL_PID_Regulator+0x124>
if(PLL_PID->Kp_Gain==300 && PLL_PID->Ki_Gain==1 && PLL_reducing!=TRUE)
 8003a0e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]


 if ( (Integral_Voltage >= 0) && (Integral_Term >= 0) && (PLL_PID->Max_PID_Output == FALSE) )  // freeze integral term in case of over/underflow
 8003a12:	4d46      	ldr	r5, [pc, #280]	; (8003b2c <PLL_PID_Regulator+0x160>)
 8003a14:	682b      	ldr	r3, [r5, #0]
 8003a16:	2b00      	cmp	r3, #0
  Proportional_Term = PLL_PID->Kp_Gain * Error;
 8003a18:	fb02 f101 	mul.w	r1, r2, r1
 if ( (Integral_Voltage >= 0) && (Integral_Term >= 0) && (PLL_PID->Max_PID_Output == FALSE) )  // freeze integral term in case of over/underflow
 8003a1c:	db44      	blt.n	8003aa8 <PLL_PID_Regulator+0xdc>
 8003a1e:	2c00      	cmp	r4, #0
 8003a20:	db02      	blt.n	8003a28 <PLL_PID_Regulator+0x5c>
 8003a22:	7a82      	ldrb	r2, [r0, #10]
 8003a24:	2a00      	cmp	r2, #0
 8003a26:	d135      	bne.n	8003a94 <PLL_PID_Regulator+0xc8>
    {
     Integral_Voltage += Integral_Term;
    }
  else if ( (Integral_Voltage >= 0) && (Integral_Term <= 0) )
    {
     Integral_Voltage += Integral_Term;
 8003a28:	4423      	add	r3, r4
 8003a2a:	602b      	str	r3, [r5, #0]
    }


  output_s32 = (Proportional_Term/8192 + Integral_Voltage/32768);
 8003a2c:	2900      	cmp	r1, #0
 8003a2e:	bfbc      	itt	lt
 8003a30:	f501 51ff 	addlt.w	r1, r1, #8160	; 0x1fe0
 8003a34:	311f      	addlt	r1, #31
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	bfbc      	itt	lt
 8003a3a:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 8003a3e:	337f      	addlt	r3, #127	; 0x7f


    if (output_s32 >= (s32)(PLL_PID->Upper_Limit_Output))
 8003a40:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
  output_s32 = (Proportional_Term/8192 + Integral_Voltage/32768);
 8003a44:	1349      	asrs	r1, r1, #13
 8003a46:	eb01 31e3 	add.w	r1, r1, r3, asr #15
    if (output_s32 >= (s32)(PLL_PID->Upper_Limit_Output))
 8003a4a:	428a      	cmp	r2, r1
 8003a4c:	dd26      	ble.n	8003a9c <PLL_PID_Regulator+0xd0>
      {
      PLL_PID->Max_PID_Output = TRUE;
      return(PLL_PID->Upper_Limit_Output);
      }
    else if (output_s32 < (s32)(PLL_PID->Lower_Limit_Output))
 8003a4e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8003a52:	428a      	cmp	r2, r1
 8003a54:	dc18      	bgt.n	8003a88 <PLL_PID_Regulator+0xbc>
      return(PLL_PID->Lower_Limit_Output);
      }
    else
      {
      PLL_PID->Min_PID_Output = FALSE;
      PLL_PID->Max_PID_Output = FALSE;
 8003a56:	2300      	movs	r3, #0


      return((s16)(output_s32));
 8003a58:	b20a      	sxth	r2, r1
      PLL_PID->Max_PID_Output = FALSE;
 8003a5a:	8143      	strh	r3, [r0, #10]
      }

}
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	b002      	add	sp, #8
 8003a60:	bcf0      	pop	{r4, r5, r6, r7}
 8003a62:	4770      	bx	lr
if(PLL_PID->Kp_Gain==300 && PLL_PID->Ki_Gain==1 && PLL_reducing!=TRUE)
 8003a64:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8003a68:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
 8003a6c:	d1d1      	bne.n	8003a12 <PLL_PID_Regulator+0x46>
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d1cf      	bne.n	8003a12 <PLL_PID_Regulator+0x46>
 8003a72:	4f2f      	ldr	r7, [pc, #188]	; (8003b30 <PLL_PID_Regulator+0x164>)
 8003a74:	783b      	ldrb	r3, [r7, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d148      	bne.n	8003b0c <PLL_PID_Regulator+0x140>
    PLL_par_red_kp=FALSE;
 8003a7a:	7033      	strb	r3, [r6, #0]
    PLL_par_red_ki=FALSE;
 8003a7c:	702b      	strb	r3, [r5, #0]
    PLL_reducing=TRUE;
 8003a7e:	2301      	movs	r3, #1
    PLL_par_red_ki=FALSE;
 8003a80:	f44f 7196 	mov.w	r1, #300	; 0x12c
    PLL_reducing=TRUE;
 8003a84:	703b      	strb	r3, [r7, #0]
    PLL_par_red_ki=FALSE;
 8003a86:	e7c4      	b.n	8003a12 <PLL_PID_Regulator+0x46>
      PLL_PID->Min_PID_Output = TRUE;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	72c3      	strb	r3, [r0, #11]
}
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	b002      	add	sp, #8
 8003a90:	bcf0      	pop	{r4, r5, r6, r7}
 8003a92:	4770      	bx	lr
  else if ( (Integral_Voltage <= 0) && (Integral_Term <= 0) && (PLL_PID->Min_PID_Output == FALSE) )
 8003a94:	b143      	cbz	r3, 8003aa8 <PLL_PID_Regulator+0xdc>
  else if ( (Integral_Voltage >= 0) && (Integral_Term <= 0) )
 8003a96:	2c00      	cmp	r4, #0
 8003a98:	d1c8      	bne.n	8003a2c <PLL_PID_Regulator+0x60>
 8003a9a:	e7c5      	b.n	8003a28 <PLL_PID_Regulator+0x5c>
      PLL_PID->Max_PID_Output = TRUE;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	7283      	strb	r3, [r0, #10]
}
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	b002      	add	sp, #8
 8003aa4:	bcf0      	pop	{r4, r5, r6, r7}
 8003aa6:	4770      	bx	lr
  else if ( (Integral_Voltage <= 0) && (Integral_Term <= 0) && (PLL_PID->Min_PID_Output == FALSE) )
 8003aa8:	2c00      	cmp	r4, #0
 8003aaa:	dcbd      	bgt.n	8003a28 <PLL_PID_Regulator+0x5c>
 8003aac:	7ac2      	ldrb	r2, [r0, #11]
 8003aae:	2a00      	cmp	r2, #0
 8003ab0:	d0ba      	beq.n	8003a28 <PLL_PID_Regulator+0x5c>
  else if ( (Integral_Voltage <= 0) && (Integral_Term >= 0) )
 8003ab2:	2c00      	cmp	r4, #0
 8003ab4:	d0b8      	beq.n	8003a28 <PLL_PID_Regulator+0x5c>
  else if ( (Integral_Voltage >= 0) && (Integral_Term <= 0) )
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	dbb8      	blt.n	8003a2c <PLL_PID_Regulator+0x60>
 8003aba:	e7b5      	b.n	8003a28 <PLL_PID_Regulator+0x5c>
  if((s16)(PLL_PID->Ki_Gain - 2)<=1)
 8003abc:	8883      	ldrh	r3, [r0, #4]
 8003abe:	3b02      	subs	r3, #2
 8003ac0:	b21b      	sxth	r3, r3
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	dd1c      	ble.n	8003b00 <PLL_PID_Regulator+0x134>
    PLL_PID->Ki_Gain = PLL_PID->Ki_Gain - 2;
 8003ac6:	8083      	strh	r3, [r0, #4]
  Integral_Term = PLL_PID->Ki_Gain * Error;
 8003ac8:	fb02 f403 	mul.w	r4, r2, r3
    PLL_par_red_ki_n=0;
 8003acc:	2600      	movs	r6, #0
 8003ace:	800e      	strh	r6, [r1, #0]
 8003ad0:	e791      	b.n	80039f6 <PLL_PID_Regulator+0x2a>
if(PLL_par_red_kp==TRUE && PLL_par_red_kp_n==1750 && PLL_PID->Ki_Gain==1)
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d19b      	bne.n	8003a0e <PLL_PID_Regulator+0x42>
  if((s16)(PLL_PID->Kp_Gain - 30)<=300)
 8003ad6:	8843      	ldrh	r3, [r0, #2]
 8003ad8:	3b1e      	subs	r3, #30
 8003ada:	b21b      	sxth	r3, r3
 8003adc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003ae0:	dc17      	bgt.n	8003b12 <PLL_PID_Regulator+0x146>
     PLL_par_red_kp=FALSE;
 8003ae2:	2300      	movs	r3, #0
    PLL_par_red_kp_n=0;
 8003ae4:	803b      	strh	r3, [r7, #0]
     PLL_par_red_kp=FALSE;
 8003ae6:	7033      	strb	r3, [r6, #0]
     PLL_PID->Kp_Gain=300;
 8003ae8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003aec:	8043      	strh	r3, [r0, #2]
if(PLL_PID->Kp_Gain==300 && PLL_PID->Ki_Gain==1 && PLL_reducing!=TRUE)
 8003aee:	e7c0      	b.n	8003a72 <PLL_PID_Regulator+0xa6>
  PLL_par_red_kp_n++;
 8003af0:	3101      	adds	r1, #1
 8003af2:	8039      	strh	r1, [r7, #0]
if(PLL_PID->Kp_Gain==300 && PLL_PID->Ki_Gain==1 && PLL_reducing!=TRUE)
 8003af4:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8003af8:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
 8003afc:	d189      	bne.n	8003a12 <PLL_PID_Regulator+0x46>
 8003afe:	e7b8      	b.n	8003a72 <PLL_PID_Regulator+0xa6>
     PLL_par_red_ki=FALSE;
 8003b00:	2400      	movs	r4, #0
     PLL_PID->Ki_Gain=1;
 8003b02:	2301      	movs	r3, #1
     PLL_par_red_ki=FALSE;
 8003b04:	702c      	strb	r4, [r5, #0]
     PLL_PID->Ki_Gain=1;
 8003b06:	8083      	strh	r3, [r0, #4]
     PLL_par_red_ki=FALSE;
 8003b08:	4614      	mov	r4, r2
 8003b0a:	e7df      	b.n	8003acc <PLL_PID_Regulator+0x100>
 8003b0c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003b10:	e77f      	b.n	8003a12 <PLL_PID_Regulator+0x46>
    PLL_PID->Kp_Gain = PLL_PID->Kp_Gain - 30;
 8003b12:	8043      	strh	r3, [r0, #2]
  Proportional_Term = PLL_PID->Kp_Gain * Error;
 8003b14:	4619      	mov	r1, r3
    PLL_par_red_kp_n=0;
 8003b16:	2300      	movs	r3, #0
 8003b18:	803b      	strh	r3, [r7, #0]
if(PLL_PID->Kp_Gain==300 && PLL_PID->Ki_Gain==1 && PLL_reducing!=TRUE)
 8003b1a:	e77a      	b.n	8003a12 <PLL_PID_Regulator+0x46>
 8003b1c:	20000186 	.word	0x20000186
 8003b20:	20008e70 	.word	0x20008e70
 8003b24:	20000187 	.word	0x20000187
 8003b28:	20008e72 	.word	0x20008e72
 8003b2c:	20008e6c 	.word	0x20008e6c
 8003b30:	20000188 	.word	0x20000188

08003b34 <PID_Bus_Voltage>:

s32 Error;


  // cambiato il segno
   Error = (qBus_Voltage_Input-Bus_DC_PID->Reference);
 8003b34:	f9b0 2000 	ldrsh.w	r2, [r0]

   Proportional_Term =Bus_DC_PID->Kp_Gain * Error;
 8003b38:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   Error = (qBus_Voltage_Input-Bus_DC_PID->Reference);
 8003b3c:	1a89      	subs	r1, r1, r2
{
 8003b3e:	b430      	push	{r4, r5}

   // Integral term computation
   Integral_Term = Bus_DC_PID->Ki_Gain * Error;
 8003b40:	f9b0 2004 	ldrsh.w	r2, [r0, #4]


 if ( (Integral_Bus_Voltage >= 0) && (Integral_Term >= 0) && (Bus_DC_PID->Max_PID_Output == FALSE) )  // freeze integral term in case of over/underflow
 8003b44:	4c1f      	ldr	r4, [pc, #124]	; (8003bc4 <PID_Bus_Voltage+0x90>)
   Proportional_Term =Bus_DC_PID->Kp_Gain * Error;
 8003b46:	fb01 f303 	mul.w	r3, r1, r3
   Integral_Term = Bus_DC_PID->Ki_Gain * Error;
 8003b4a:	fb02 f101 	mul.w	r1, r2, r1
 if ( (Integral_Bus_Voltage >= 0) && (Integral_Term >= 0) && (Bus_DC_PID->Max_PID_Output == FALSE) )  // freeze integral term in case of over/underflow
 8003b4e:	6822      	ldr	r2, [r4, #0]
 8003b50:	2a00      	cmp	r2, #0
 8003b52:	db2d      	blt.n	8003bb0 <PID_Bus_Voltage+0x7c>
 8003b54:	2900      	cmp	r1, #0
 8003b56:	db01      	blt.n	8003b5c <PID_Bus_Voltage+0x28>
 8003b58:	7a85      	ldrb	r5, [r0, #10]
 8003b5a:	bb05      	cbnz	r5, 8003b9e <PID_Bus_Voltage+0x6a>
    {
     Integral_Bus_Voltage += Integral_Term;
    }
  else if ( (Integral_Bus_Voltage >= 0) && (Integral_Term <= 0) )
    {
     Integral_Bus_Voltage += Integral_Term;
 8003b5c:	440a      	add	r2, r1
 8003b5e:	6022      	str	r2, [r4, #0]
    }


  output_s32 = (Proportional_Term/4096 + Integral_Bus_Voltage/(32768));
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	bfb8      	it	lt
 8003b64:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 8003b68:	2a00      	cmp	r2, #0
 8003b6a:	bfbc      	itt	lt
 8003b6c:	f502 42ff 	addlt.w	r2, r2, #32640	; 0x7f80
 8003b70:	327f      	addlt	r2, #127	; 0x7f


    if (output_s32 >= (s32)(Bus_DC_PID->Upper_Limit_Output))
 8003b72:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
  output_s32 = (Proportional_Term/4096 + Integral_Bus_Voltage/(32768));
 8003b76:	131b      	asrs	r3, r3, #12
 8003b78:	eb03 33e2 	add.w	r3, r3, r2, asr #15
    if (output_s32 >= (s32)(Bus_DC_PID->Upper_Limit_Output))
 8003b7c:	4299      	cmp	r1, r3
 8003b7e:	dd12      	ble.n	8003ba6 <PID_Bus_Voltage+0x72>
      {
      Bus_DC_PID->Max_PID_Output = TRUE;
      return(Bus_DC_PID->Upper_Limit_Output);
      }
    else if (output_s32 < (s32)(Bus_DC_PID->Lower_Limit_Output))
 8003b80:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8003b84:	4299      	cmp	r1, r3
 8003b86:	dc05      	bgt.n	8003b94 <PID_Bus_Voltage+0x60>
      return(Bus_DC_PID->Lower_Limit_Output);
      }
    else
      {
      Bus_DC_PID->Min_PID_Output = FALSE;
      Bus_DC_PID->Max_PID_Output = FALSE;
 8003b88:	2200      	movs	r2, #0


      return((s16)(output_s32));
 8003b8a:	b219      	sxth	r1, r3
      Bus_DC_PID->Max_PID_Output = FALSE;
 8003b8c:	8142      	strh	r2, [r0, #10]


      }

}
 8003b8e:	bc30      	pop	{r4, r5}
 8003b90:	4608      	mov	r0, r1
 8003b92:	4770      	bx	lr
      Bus_DC_PID->Min_PID_Output = TRUE;
 8003b94:	2301      	movs	r3, #1
 8003b96:	72c3      	strb	r3, [r0, #11]
}
 8003b98:	bc30      	pop	{r4, r5}
 8003b9a:	4608      	mov	r0, r1
 8003b9c:	4770      	bx	lr
  else if ( (Integral_Bus_Voltage <= 0) && (Integral_Term <= 0) && (Bus_DC_PID->Min_PID_Output == FALSE) )
 8003b9e:	b13a      	cbz	r2, 8003bb0 <PID_Bus_Voltage+0x7c>
  else if ( (Integral_Bus_Voltage >= 0) && (Integral_Term <= 0) )
 8003ba0:	2900      	cmp	r1, #0
 8003ba2:	d1dd      	bne.n	8003b60 <PID_Bus_Voltage+0x2c>
 8003ba4:	e7da      	b.n	8003b5c <PID_Bus_Voltage+0x28>
      Bus_DC_PID->Max_PID_Output = TRUE;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	7283      	strb	r3, [r0, #10]
}
 8003baa:	bc30      	pop	{r4, r5}
 8003bac:	4608      	mov	r0, r1
 8003bae:	4770      	bx	lr
  else if ( (Integral_Bus_Voltage <= 0) && (Integral_Term <= 0) && (Bus_DC_PID->Min_PID_Output == FALSE) )
 8003bb0:	2900      	cmp	r1, #0
 8003bb2:	dcd3      	bgt.n	8003b5c <PID_Bus_Voltage+0x28>
 8003bb4:	7ac5      	ldrb	r5, [r0, #11]
 8003bb6:	2d00      	cmp	r5, #0
 8003bb8:	d0d0      	beq.n	8003b5c <PID_Bus_Voltage+0x28>
  else if ( (Integral_Bus_Voltage <= 0) && (Integral_Term >= 0) )
 8003bba:	2900      	cmp	r1, #0
 8003bbc:	d0ce      	beq.n	8003b5c <PID_Bus_Voltage+0x28>
  else if ( (Integral_Bus_Voltage >= 0) && (Integral_Term <= 0) )
 8003bbe:	2a00      	cmp	r2, #0
 8003bc0:	dbce      	blt.n	8003b60 <PID_Bus_Voltage+0x2c>
 8003bc2:	e7cb      	b.n	8003b5c <PID_Bus_Voltage+0x28>
 8003bc4:	20008e68 	.word	0x20008e68

08003bc8 <mul_q15_q15_q31>:

 void mul_q15_q15_q31(s16 Op1, s16 Op2, s32 *Out)
{
  s32 temp;

  temp = (s32)Op1*(s32)Op2;
 8003bc8:	fb00 f101 	mul.w	r1, r0, r1

  if (temp>=0x40000000)   /* Overflow (-1*-1) */
 8003bcc:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  {
    temp=0x7fffffff;
  }
  else
  {
    temp=temp<<1;       /* One bit left shift to remove redondant sign bit */
 8003bd0:	bf14      	ite	ne
 8003bd2:	0049      	lslne	r1, r1, #1
    temp=0x7fffffff;
 8003bd4:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000



  }
  *Out=temp;
 8003bd8:	6011      	str	r1, [r2, #0]

}
 8003bda:	4770      	bx	lr

08003bdc <SystemClock_Config>:
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8003bdc:	4a38      	ldr	r2, [pc, #224]	; (8003cc0 <SystemClock_Config+0xe4>)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003bde:	b508      	push	{r3, lr}
 8003be0:	6813      	ldr	r3, [r2, #0]
 8003be2:	f023 030f 	bic.w	r3, r3, #15
 8003be6:	f043 0304 	orr.w	r3, r3, #4
 8003bea:	6013      	str	r3, [r2, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8003bec:	6813      	ldr	r3, [r2, #0]
 8003bee:	f003 030f 	and.w	r3, r3, #15
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4)
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d1fa      	bne.n	8003bec <SystemClock_Config+0x10>
  * @rmtoll CR5          R1MODE        LL_PWR_EnableRange1BoostMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableRange1BoostMode(void)
{
  CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bf6:	4933      	ldr	r1, [pc, #204]	; (8003cc4 <SystemClock_Config+0xe8>)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003bf8:	4b33      	ldr	r3, [pc, #204]	; (8003cc8 <SystemClock_Config+0xec>)
 8003bfa:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 8003bfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c02:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003c0c:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	0392      	lsls	r2, r2, #14
 8003c12:	d5fc      	bpl.n	8003c0e <SystemClock_Config+0x32>
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8003c14:	68d8      	ldr	r0, [r3, #12]
 8003c16:	4a2d      	ldr	r2, [pc, #180]	; (8003ccc <SystemClock_Config+0xf0>)
  *         @arg @ref LL_RCC_PLLP_DIV_31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_ADC(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLPDIV,
 8003c18:	492d      	ldr	r1, [pc, #180]	; (8003cd0 <SystemClock_Config+0xf4>)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8003c1a:	4002      	ands	r2, r0
 8003c1c:	f442 42aa 	orr.w	r2, r2, #21760	; 0x5500
 8003c20:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8003c24:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLPDIV,
 8003c26:	68d8      	ldr	r0, [r3, #12]
 8003c28:	4a2a      	ldr	r2, [pc, #168]	; (8003cd4 <SystemClock_Config+0xf8>)
 8003c2a:	4001      	ands	r1, r0
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	60da      	str	r2, [r3, #12]
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8003c30:	68da      	ldr	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003c32:	4925      	ldr	r1, [pc, #148]	; (8003cc8 <SystemClock_Config+0xec>)
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8003c34:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003c38:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN);
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003c40:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003c48:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003c4a:	680b      	ldr	r3, [r1, #0]
 8003c4c:	019b      	lsls	r3, r3, #6
 8003c4e:	d5fc      	bpl.n	8003c4a <SystemClock_Config+0x6e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003c50:	688b      	ldr	r3, [r1, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003c52:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <SystemClock_Config+0xec>)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003c54:	f043 0303 	orr.w	r3, r3, #3
 8003c58:	608b      	str	r3, [r1, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003c5a:	688b      	ldr	r3, [r1, #8]
 8003c5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c64:	608b      	str	r3, [r1, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003c66:	6893      	ldr	r3, [r2, #8]
 8003c68:	f003 030c 	and.w	r3, r3, #12
  }

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003c6c:	2b0c      	cmp	r3, #12
 8003c6e:	d1fa      	bne.n	8003c66 <SystemClock_Config+0x8a>
  {
  }

  /* Insure 1�s transition state at intermediate medium speed clock based on DWT */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003c70:	4919      	ldr	r1, [pc, #100]	; (8003cd8 <SystemClock_Config+0xfc>)
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003c72:	4a1a      	ldr	r2, [pc, #104]	; (8003cdc <SystemClock_Config+0x100>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003c74:	f8d1 30fc 	ldr.w	r3, [r1, #252]	; 0xfc
 8003c78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c7c:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003c80:	6813      	ldr	r3, [r2, #0]
  DWT->CYCCNT = 0;
 8003c82:	2000      	movs	r0, #0
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;
 8003c8a:	6050      	str	r0, [r2, #4]
  while(DWT->CYCCNT < 100);
 8003c8c:	6853      	ldr	r3, [r2, #4]
 8003c8e:	2b63      	cmp	r3, #99	; 0x63
 8003c90:	d9fc      	bls.n	8003c8c <SystemClock_Config+0xb0>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003c92:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <SystemClock_Config+0xec>)
  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_SetSystemCoreClock(170000000);
 8003c94:	4812      	ldr	r0, [pc, #72]	; (8003ce0 <SystemClock_Config+0x104>)
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003c9c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ca4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 8003cac:	609a      	str	r2, [r3, #8]
 8003cae:	f005 ffbb 	bl	8009c28 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8003cb2:	200f      	movs	r0, #15
 8003cb4:	f001 fd42 	bl	800573c <HAL_InitTick>
 8003cb8:	b108      	cbz	r0, 8003cbe <SystemClock_Config+0xe2>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cba:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cbc:	e7fe      	b.n	8003cbc <SystemClock_Config+0xe0>
}
 8003cbe:	bd08      	pop	{r3, pc}
 8003cc0:	40022000 	.word	0x40022000
 8003cc4:	40007000 	.word	0x40007000
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	f9ff800c 	.word	0xf9ff800c
 8003cd0:	07ff800c 	.word	0x07ff800c
 8003cd4:	30005553 	.word	0x30005553
 8003cd8:	e000ed00 	.word	0xe000ed00
 8003cdc:	e0001000 	.word	0xe0001000
 8003ce0:	0a21fe80 	.word	0x0a21fe80

08003ce4 <main>:
{
 8003ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ce8:	2400      	movs	r4, #0
{
 8003cea:	b0cb      	sub	sp, #300	; 0x12c
  HAL_Init();
 8003cec:	f001 fd4c 	bl	8005788 <HAL_Init>
  SystemClock_Config();
 8003cf0:	f7ff ff74 	bl	8003bdc <SystemClock_Config>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf4:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 8003cf8:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003cfc:	4dbd      	ldr	r5, [pc, #756]	; (8003ff4 <main+0x310>)
 8003cfe:	943f      	str	r4, [sp, #252]	; 0xfc
 8003d00:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  WRITE_REG(GPIOx->BRR, PinMask);
 8003d02:	f8df 8308 	ldr.w	r8, [pc, #776]	; 800400c <main+0x328>
 8003d06:	4ebc      	ldr	r6, [pc, #752]	; (8003ff8 <main+0x314>)
 8003d08:	f8df 9304 	ldr.w	r9, [pc, #772]	; 8004010 <main+0x32c>
  LL_GPIO_Init(IN_TOP_LF_MOS_GPIO_GPIO_Port, &GPIO_InitStruct);
 8003d0c:	48bb      	ldr	r0, [pc, #748]	; (8003ffc <main+0x318>)
 8003d0e:	f043 0310 	orr.w	r3, r3, #16
 8003d12:	64eb      	str	r3, [r5, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003d14:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003d16:	f003 0310 	and.w	r3, r3, #16
 8003d1a:	9324      	str	r3, [sp, #144]	; 0x90
  (void)tmpreg;
 8003d1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003d1e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003d20:	f043 0304 	orr.w	r3, r3, #4
 8003d24:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003d26:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	9325      	str	r3, [sp, #148]	; 0x94
  (void)tmpreg;
 8003d2e:	9b25      	ldr	r3, [sp, #148]	; 0x94
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003d30:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003d32:	f04f 0b20 	mov.w	fp, #32
 8003d36:	ea43 030b 	orr.w	r3, r3, fp
 8003d3a:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003d3c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003d3e:	ea03 030b 	and.w	r3, r3, fp
 8003d42:	9326      	str	r3, [sp, #152]	; 0x98
  (void)tmpreg;
 8003d44:	9b26      	ldr	r3, [sp, #152]	; 0x98
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003d46:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003d48:	f043 0301 	orr.w	r3, r3, #1
 8003d4c:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003d4e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	9327      	str	r3, [sp, #156]	; 0x9c
  (void)tmpreg;
 8003d56:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003d58:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003d5a:	f043 0302 	orr.w	r3, r3, #2
 8003d5e:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003d60:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	9328      	str	r3, [sp, #160]	; 0xa0
  (void)tmpreg;
 8003d68:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003d6a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003d6c:	f043 0308 	orr.w	r3, r3, #8
 8003d70:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003d72:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	9329      	str	r3, [sp, #164]	; 0xa4
  (void)tmpreg;
 8003d7a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003d7c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003d7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d82:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003d84:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8a:	932a      	str	r3, [sp, #168]	; 0xa8
  (void)tmpreg;
 8003d8c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003d8e:	f8c8 b028 	str.w	fp, [r8, #40]	; 0x28
 8003d92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d96:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 8003d9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d9e:	2204      	movs	r2, #4
 8003da0:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 8003da4:	f04f 0a08 	mov.w	sl, #8
 8003da8:	2310      	movs	r3, #16
 8003daa:	62b2      	str	r2, [r6, #40]	; 0x28
 8003dac:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
 8003db0:	62b3      	str	r3, [r6, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003db6:	61b3      	str	r3, [r6, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003db8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dbc:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
 8003dc0:	a93e      	add	r1, sp, #248	; 0xf8
  GPIO_InitStruct.Pin = IN_TOP_LF_MOS_GPIO_Pin;
 8003dc2:	f8cd a0f8 	str.w	sl, [sp, #248]	; 0xf8
  LL_GPIO_Init(IN_TOP_LF_MOS_GPIO_GPIO_Port, &GPIO_InitStruct);
 8003dc6:	f005 fbb9 	bl	800953c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = PGOOD_5V_Pin;
 8003dca:	2310      	movs	r3, #16
  LL_GPIO_Init(PGOOD_5V_GPIO_Port, &GPIO_InitStruct);
 8003dcc:	a93e      	add	r1, sp, #248	; 0xf8
 8003dce:	488b      	ldr	r0, [pc, #556]	; (8003ffc <main+0x318>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003dd0:	9442      	str	r4, [sp, #264]	; 0x108
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003dd2:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003dd4:	e9cd 343e 	strd	r3, r4, [sp, #248]	; 0xf8
  LL_GPIO_Init(PGOOD_5V_GPIO_Port, &GPIO_InitStruct);
 8003dd8:	f005 fbb0 	bl	800953c <LL_GPIO_Init>
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003ddc:	a93e      	add	r1, sp, #248	; 0xf8
 8003dde:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8003de0:	f8cd b0f8 	str.w	fp, [sp, #248]	; 0xf8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003de4:	973f      	str	r7, [sp, #252]	; 0xfc
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003de6:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003dea:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003dec:	f005 fba6 	bl	800953c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = STATUS2_LED_Pin;
 8003df0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  LL_GPIO_Init(STATUS2_LED_GPIO_Port, &GPIO_InitStruct);
 8003df4:	a93e      	add	r1, sp, #248	; 0xf8
 8003df6:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003df8:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003dfc:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003e00:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(STATUS2_LED_GPIO_Port, &GPIO_InitStruct);
 8003e02:	f005 fb9b 	bl	800953c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = STATUS1_LED_Pin;
 8003e06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  LL_GPIO_Init(STATUS1_LED_GPIO_Port, &GPIO_InitStruct);
 8003e0a:	4640      	mov	r0, r8
 8003e0c:	a93e      	add	r1, sp, #248	; 0xf8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003e0e:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003e12:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003e16:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(STATUS1_LED_GPIO_Port, &GPIO_InitStruct);
 8003e18:	f005 fb90 	bl	800953c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = ESP_EN_Pin;
 8003e1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  LL_GPIO_Init(ESP_EN_GPIO_Port, &GPIO_InitStruct);
 8003e20:	a93e      	add	r1, sp, #248	; 0xf8
 8003e22:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003e24:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8003e28:	e9cd 4740 	strd	r4, r7, [sp, #256]	; 0x100
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003e2c:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(ESP_EN_GPIO_Port, &GPIO_InitStruct);
 8003e2e:	f005 fb85 	bl	800953c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = HVDC_FUSE_MON_Pin;
 8003e32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  LL_GPIO_Init(HVDC_FUSE_MON_GPIO_Port, &GPIO_InitStruct);
 8003e36:	a93e      	add	r1, sp, #248	; 0xf8
 8003e38:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003e3a:	e9cd 343e 	strd	r3, r4, [sp, #248]	; 0xf8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003e3e:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(HVDC_FUSE_MON_GPIO_Port, &GPIO_InitStruct);
 8003e40:	f005 fb7c 	bl	800953c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = AC_FUSE_MON_Pin;
 8003e44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  LL_GPIO_Init(AC_FUSE_MON_GPIO_Port, &GPIO_InitStruct);
 8003e48:	a93e      	add	r1, sp, #248	; 0xf8
 8003e4a:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = IN_BOTT_LF_MOS_GPIO_Pin;
 8003e4c:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Pin = AC_FUSE_MON_Pin;
 8003e50:	933e      	str	r3, [sp, #248]	; 0xf8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003e52:	943f      	str	r4, [sp, #252]	; 0xfc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003e54:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(AC_FUSE_MON_GPIO_Port, &GPIO_InitStruct);
 8003e56:	f005 fb71 	bl	800953c <LL_GPIO_Init>
  LL_GPIO_Init(IN_BOTT_LF_MOS_GPIO_GPIO_Port, &GPIO_InitStruct);
 8003e5a:	a93e      	add	r1, sp, #248	; 0xf8
 8003e5c:	4868      	ldr	r0, [pc, #416]	; (8004000 <main+0x31c>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003e5e:	943f      	str	r4, [sp, #252]	; 0xfc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003e60:	9442      	str	r4, [sp, #264]	; 0x108
  GPIO_InitStruct.Pin = IN_BOTT_LF_MOS_GPIO_Pin;
 8003e62:	f8cd 80f8 	str.w	r8, [sp, #248]	; 0xf8
  LL_GPIO_Init(IN_BOTT_LF_MOS_GPIO_GPIO_Port, &GPIO_InitStruct);
 8003e66:	f005 fb69 	bl	800953c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8003e6a:	f44f 7380 	mov.w	r3, #256	; 0x100
  LL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8003e6e:	a93e      	add	r1, sp, #248	; 0xf8
 8003e70:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003e72:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8003e76:	9742      	str	r7, [sp, #264]	; 0x108
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003e78:	e9cd 8440 	strd	r8, r4, [sp, #256]	; 0x100
  LL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8003e7c:	f005 fb5e 	bl	800953c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = EN_isoDCDC_Pin;
 8003e80:	2204      	movs	r2, #4
  LL_GPIO_Init(EN_isoDCDC_GPIO_Port, &GPIO_InitStruct);
 8003e82:	a93e      	add	r1, sp, #248	; 0xf8
 8003e84:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003e86:	e9cd 273e 	strd	r2, r7, [sp, #248]	; 0xf8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003e8a:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003e8e:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(EN_isoDCDC_GPIO_Port, &GPIO_InitStruct);
 8003e90:	f005 fb54 	bl	800953c <LL_GPIO_Init>
  LL_GPIO_Init(RELAY_GRID_LVL2_GPIO_Port, &GPIO_InitStruct);
 8003e94:	a93e      	add	r1, sp, #248	; 0xf8
 8003e96:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003e98:	e9cd a73e 	strd	sl, r7, [sp, #248]	; 0xf8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003e9c:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003ea0:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(RELAY_GRID_LVL2_GPIO_Port, &GPIO_InitStruct);
 8003ea2:	f005 fb4b 	bl	800953c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = RELAY_GRID_Pin;
 8003ea6:	2310      	movs	r3, #16
  LL_GPIO_Init(RELAY_GRID_GPIO_Port, &GPIO_InitStruct);
 8003ea8:	a93e      	add	r1, sp, #248	; 0xf8
 8003eaa:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003eac:	e9cd 373e 	strd	r3, r7, [sp, #248]	; 0xf8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003eb0:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003eb4:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(RELAY_GRID_GPIO_Port, &GPIO_InitStruct);
 8003eb6:	f005 fb41 	bl	800953c <LL_GPIO_Init>
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003eba:	a93e      	add	r1, sp, #248	; 0xf8
 8003ebc:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003ebe:	e9cd b43e 	strd	fp, r4, [sp, #248]	; 0xf8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003ec2:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ec4:	f005 fb3a 	bl	800953c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8003ec8:	2340      	movs	r3, #64	; 0x40
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003eca:	a93e      	add	r1, sp, #248	; 0xf8
 8003ecc:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8003ece:	933e      	str	r3, [sp, #248]	; 0xf8
  GPIO_InitStruct.Pin = PGOOD_12V_Pin;
 8003ed0:	f04f 0b80 	mov.w	fp, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003ed4:	943f      	str	r4, [sp, #252]	; 0xfc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003ed6:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ed8:	f005 fb30 	bl	800953c <LL_GPIO_Init>
  LL_GPIO_Init(PGOOD_12V_GPIO_Port, &GPIO_InitStruct);
 8003edc:	4630      	mov	r0, r6
 8003ede:	a93e      	add	r1, sp, #248	; 0xf8
  GPIO_InitStruct.Pin = PGOOD_12V_Pin;
 8003ee0:	f8cd b0f8 	str.w	fp, [sp, #248]	; 0xf8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003ee4:	943f      	str	r4, [sp, #252]	; 0xfc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003ee6:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(PGOOD_12V_GPIO_Port, &GPIO_InitStruct);
 8003ee8:	f005 fb28 	bl	800953c <LL_GPIO_Init>
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003eec:	a93e      	add	r1, sp, #248	; 0xf8
 8003eee:	4843      	ldr	r0, [pc, #268]	; (8003ffc <main+0x318>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003ef0:	9442      	str	r4, [sp, #264]	; 0x108
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003ef2:	e9cd 743e 	strd	r7, r4, [sp, #248]	; 0xf8
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ef6:	f005 fb21 	bl	800953c <LL_GPIO_Init>
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003efa:	a93e      	add	r1, sp, #248	; 0xf8
 8003efc:	483f      	ldr	r0, [pc, #252]	; (8003ffc <main+0x318>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003efe:	9442      	str	r4, [sp, #264]	; 0x108
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003f00:	e9cd 843e 	strd	r8, r4, [sp, #248]	; 0xf8
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f04:	f005 fb1a 	bl	800953c <LL_GPIO_Init>
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003f08:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8003f0a:	f043 0304 	orr.w	r3, r3, #4
 8003f0e:	64ab      	str	r3, [r5, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003f10:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	9322      	str	r3, [sp, #136]	; 0x88
  (void)tmpreg;
 8003f18:	9b22      	ldr	r3, [sp, #136]	; 0x88
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003f1a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8003f1c:	433b      	orrs	r3, r7
 8003f1e:	64ab      	str	r3, [r5, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003f20:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8003f22:	403b      	ands	r3, r7
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 1, 0);
 8003f24:	4622      	mov	r2, r4
 8003f26:	4639      	mov	r1, r7
 8003f28:	9323      	str	r3, [sp, #140]	; 0x8c
 8003f2a:	200c      	movs	r0, #12
  (void)tmpreg;
 8003f2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8003f2e:	4f35      	ldr	r7, [pc, #212]	; (8004004 <main+0x320>)
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 1, 0);
 8003f30:	f001 fc5e 	bl	80057f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003f34:	200c      	movs	r0, #12
 8003f36:	f001 fc99 	bl	800586c <HAL_NVIC_EnableIRQ>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8003f3a:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8003f3e:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
 8003f42:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
 8003f46:	e9cd 443a 	strd	r4, r4, [sp, #232]	; 0xe8
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f4a:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 8003f4e:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8003f52:	9432      	str	r4, [sp, #200]	; 0xc8
  MODIFY_REG(RCC->CCIPR, 3U << ((ADCxSource & 0x001F0000U) >> 16U), ((ADCxSource & 0x000000FFU) << ((ADCxSource & 0x001F0000U) >> 16U)));
 8003f54:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8003f58:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f60:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003f64:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003f66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f6a:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003f6c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003f6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f72:	9320      	str	r3, [sp, #128]	; 0x80
  (void)tmpreg;
 8003f74:	9b20      	ldr	r3, [sp, #128]	; 0x80
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003f76:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003f78:	f043 0304 	orr.w	r3, r3, #4
 8003f7c:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003f7e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  GPIO_InitStruct.Pin = NTC_MOS_ADC2_IN7_COMP3_Pin;
 8003f80:	f8cd 80f8 	str.w	r8, [sp, #248]	; 0xf8
 8003f84:	f003 0304 	and.w	r3, r3, #4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003f88:	2603      	movs	r6, #3
 8003f8a:	9321      	str	r3, [sp, #132]	; 0x84
  LL_GPIO_Init(NTC_MOS_ADC2_IN7_COMP3_GPIO_Port, &GPIO_InitStruct);
 8003f8c:	a93e      	add	r1, sp, #248	; 0xf8
 8003f8e:	4648      	mov	r0, r9
  (void)tmpreg;
 8003f90:	9b21      	ldr	r3, [sp, #132]	; 0x84
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003f92:	963f      	str	r6, [sp, #252]	; 0xfc
  LL_GPIO_Init(NTC_MOS_ADC2_IN7_COMP3_GPIO_Port, &GPIO_InitStruct);
 8003f94:	f005 fad2 	bl	800953c <LL_GPIO_Init>
  LL_GPIO_Init(NTC_SHUNT_ADC2_IN9_GPIO_Port, &GPIO_InitStruct);
 8003f98:	a93e      	add	r1, sp, #248	; 0xf8
 8003f9a:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003f9c:	e9cd a63e 	strd	sl, r6, [sp, #248]	; 0xf8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003fa0:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(NTC_SHUNT_ADC2_IN9_GPIO_Port, &GPIO_InitStruct);
 8003fa2:	f005 facb 	bl	800953c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = I_LLC_ADC2_IN5_Pin;
 8003fa6:	2310      	movs	r3, #16
  LL_GPIO_Init(I_LLC_ADC2_IN5_GPIO_Port, &GPIO_InitStruct);
 8003fa8:	4648      	mov	r0, r9
 8003faa:	a93e      	add	r1, sp, #248	; 0xf8
  GPIO_InitStruct.Pin = I_LLC_ADC2_IN5_Pin;
 8003fac:	933e      	str	r3, [sp, #248]	; 0xf8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003fae:	963f      	str	r6, [sp, #252]	; 0xfc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003fb0:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(I_LLC_ADC2_IN5_GPIO_Port, &GPIO_InitStruct);
 8003fb2:	f005 fac3 	bl	800953c <LL_GPIO_Init>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8003fb6:	4b14      	ldr	r3, [pc, #80]	; (8004008 <main+0x324>)
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003fb8:	f8df a058 	ldr.w	sl, [pc, #88]	; 8004014 <main+0x330>
 8003fbc:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 8003fc0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fc4:	f042 0224 	orr.w	r2, r2, #36	; 0x24
 8003fc8:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8003fcc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003fce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003fd2:	f022 0210 	bic.w	r2, r2, #16
 8003fd6:	659a      	str	r2, [r3, #88]	; 0x58
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8003fd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003fda:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8003fde:	659a      	str	r2, [r3, #88]	; 0x58
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8003fe0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003fe2:	f042 0220 	orr.w	r2, r2, #32
 8003fe6:	659a      	str	r2, [r3, #88]	; 0x58
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8003fe8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003fea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fee:	659a      	str	r2, [r3, #88]	; 0x58
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8003ff0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003ff2:	e011      	b.n	8004018 <main+0x334>
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	48000c00 	.word	0x48000c00
 8003ffc:	48001000 	.word	0x48001000
 8004000:	48001800 	.word	0x48001800
 8004004:	50000100 	.word	0x50000100
 8004008:	40020000 	.word	0x40020000
 800400c:	48001400 	.word	0x48001400
 8004010:	48000800 	.word	0x48000800
 8004014:	5fffffc0 	.word	0x5fffffc0
 8004018:	ea42 020b 	orr.w	r2, r2, fp
 800401c:	659a      	str	r2, [r3, #88]	; 0x58
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 800401e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004020:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004024:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004028:	659a      	str	r2, [r3, #88]	; 0x58
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 800402a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800402c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004030:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8004034:	4638      	mov	r0, r7
 8004036:	659a      	str	r2, [r3, #88]	; 0x58
 8004038:	a930      	add	r1, sp, #192	; 0xc0
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800403a:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800403e:	9432      	str	r4, [sp, #200]	; 0xc8
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8004040:	f005 f9be 	bl	80093c0 <LL_ADC_Init>
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8004044:	4638      	mov	r0, r7
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_HRTIM_TRG3;
 8004046:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 800404a:	a936      	add	r1, sp, #216	; 0xd8
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_HRTIM_TRG3;
 800404c:	9236      	str	r2, [sp, #216]	; 0xd8
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800404e:	e9cd 4437 	strd	r4, r4, [sp, #220]	; 0xdc
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8004052:	e9cd 4639 	strd	r4, r6, [sp, #228]	; 0xe4
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8004056:	943b      	str	r4, [sp, #236]	; 0xec
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8004058:	f005 f9cc 	bl	80093f4 <LL_ADC_REG_Init>
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 800405c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
  LL_GPIO_Init(VMON_V12_GPIO_Port, &GPIO_InitStruct);
 8004060:	48ca      	ldr	r0, [pc, #808]	; (800438c <main+0x6a8>)
 8004062:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004066:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800406a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004074:	613b      	str	r3, [r7, #16]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800407c:	f023 0303 	bic.w	r3, r3, #3
 8004080:	613b      	str	r3, [r7, #16]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004088:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800408c:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	ea03 030a 	and.w	r3, r3, sl
 8004094:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(ADCx->CR,
 8004096:	68b9      	ldr	r1, [r7, #8]
 8004098:	4bbd      	ldr	r3, [pc, #756]	; (8004390 <main+0x6ac>)
 800409a:	4019      	ands	r1, r3
  MODIFY_REG(*preg,
 800409c:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
  MODIFY_REG(ADCx->CR,
 80040a0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80040a4:	60b9      	str	r1, [r7, #8]
  MODIFY_REG(*preg,
 80040a6:	f8d9 1130 	ldr.w	r1, [r9, #304]	; 0x130
 80040aa:	f421 61f8 	bic.w	r1, r1, #1984	; 0x7c0
 80040ae:	f441 71a0 	orr.w	r1, r1, #320	; 0x140
 80040b2:	f8c9 1130 	str.w	r1, [r9, #304]	; 0x130
  MODIFY_REG(*preg,
 80040b6:	f8d9 1114 	ldr.w	r1, [r9, #276]	; 0x114
 80040ba:	f421 3160 	bic.w	r1, r1, #229376	; 0x38000
 80040be:	f8c9 1114 	str.w	r1, [r9, #276]	; 0x114
    CLEAR_BIT(ADCx->DIFSEL,
 80040c2:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80040c6:	f021 0120 	bic.w	r1, r1, #32
 80040ca:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80040ce:	e9cd 442b 	strd	r4, r4, [sp, #172]	; 0xac
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80040d2:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
 80040d6:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
 80040da:	e9cd 443a 	strd	r4, r4, [sp, #232]	; 0xe8
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80040de:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
 80040e2:	e9cd 4432 	strd	r4, r4, [sp, #200]	; 0xc8
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80040e6:	942d      	str	r4, [sp, #180]	; 0xb4
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040e8:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 80040ec:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
 80040f0:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 80040f4:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 80040f8:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80040fc:	f8c5 1088 	str.w	r1, [r5, #136]	; 0x88
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004100:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8004102:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004106:	64e9      	str	r1, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004108:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800410a:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800410e:	911e      	str	r1, [sp, #120]	; 0x78
  (void)tmpreg;
 8004110:	991e      	ldr	r1, [sp, #120]	; 0x78
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004112:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8004114:	f041 0110 	orr.w	r1, r1, #16
 8004118:	64e9      	str	r1, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800411a:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
  GPIO_InitStruct.Pin = VMON_V12_Pin;
 800411c:	f8cd b0f8 	str.w	fp, [sp, #248]	; 0xf8
 8004120:	f001 0110 	and.w	r1, r1, #16
 8004124:	911f      	str	r1, [sp, #124]	; 0x7c
  (void)tmpreg;
 8004126:	991f      	ldr	r1, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004128:	963f      	str	r6, [sp, #252]	; 0xfc
  LL_GPIO_Init(VMON_V12_GPIO_Port, &GPIO_InitStruct);
 800412a:	a93e      	add	r1, sp, #248	; 0xf8
 800412c:	f005 fa06 	bl	800953c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = NTC5_Pin;
 8004130:	f44f 7380 	mov.w	r3, #256	; 0x100
  LL_GPIO_Init(NTC5_GPIO_Port, &GPIO_InitStruct);
 8004134:	a93e      	add	r1, sp, #248	; 0xf8
 8004136:	4895      	ldr	r0, [pc, #596]	; (800438c <main+0x6a8>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004138:	9442      	str	r4, [sp, #264]	; 0x108
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800413a:	e9cd 363e 	strd	r3, r6, [sp, #248]	; 0xf8
  LL_GPIO_Init(NTC5_GPIO_Port, &GPIO_InitStruct);
 800413e:	f005 f9fd 	bl	800953c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = NTC4_Pin;
 8004142:	f44f 6380 	mov.w	r3, #1024	; 0x400
  LL_GPIO_Init(NTC4_GPIO_Port, &GPIO_InitStruct);
 8004146:	a93e      	add	r1, sp, #248	; 0xf8
 8004148:	4890      	ldr	r0, [pc, #576]	; (800438c <main+0x6a8>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800414a:	9442      	str	r4, [sp, #264]	; 0x108
  LL_ADC_Init(ADC3, &ADC_InitStruct);
 800414c:	f507 7740 	add.w	r7, r7, #768	; 0x300
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004150:	e9cd 363e 	strd	r3, r6, [sp, #248]	; 0xf8
  LL_GPIO_Init(NTC4_GPIO_Port, &GPIO_InitStruct);
 8004154:	f005 f9f2 	bl	800953c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = NTC3_Pin;
 8004158:	f44f 6300 	mov.w	r3, #2048	; 0x800
  LL_GPIO_Init(NTC3_GPIO_Port, &GPIO_InitStruct);
 800415c:	a93e      	add	r1, sp, #248	; 0xf8
 800415e:	488b      	ldr	r0, [pc, #556]	; (800438c <main+0x6a8>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004160:	9442      	str	r4, [sp, #264]	; 0x108
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004162:	e9cd 363e 	strd	r3, r6, [sp, #248]	; 0xf8
  LL_GPIO_Init(NTC3_GPIO_Port, &GPIO_InitStruct);
 8004166:	f005 f9e9 	bl	800953c <LL_GPIO_Init>
  LL_ADC_Init(ADC3, &ADC_InitStruct);
 800416a:	4638      	mov	r0, r7
 800416c:	a92b      	add	r1, sp, #172	; 0xac
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800416e:	e9cd 442b 	strd	r4, r4, [sp, #172]	; 0xac
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8004172:	942d      	str	r4, [sp, #180]	; 0xb4
  LL_ADC_Init(ADC3, &ADC_InitStruct);
 8004174:	f005 f924 	bl	80093c0 <LL_ADC_Init>
  LL_ADC_REG_Init(ADC3, &ADC_REG_InitStruct);
 8004178:	4638      	mov	r0, r7
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_HRTIM_TRG3;
 800417a:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
  LL_ADC_REG_Init(ADC3, &ADC_REG_InitStruct);
 800417e:	a936      	add	r1, sp, #216	; 0xd8
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8004180:	e9cd 2436 	strd	r2, r4, [sp, #216]	; 0xd8
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8004184:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8004188:	e9cd 443a 	strd	r4, r4, [sp, #232]	; 0xe8
  LL_ADC_REG_Init(ADC3, &ADC_REG_InitStruct);
 800418c:	f005 f932 	bl	80093f4 <LL_ADC_REG_Init>
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8004190:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC3), &ADC_CommonInitStruct);
 8004194:	487f      	ldr	r0, [pc, #508]	; (8004394 <main+0x6b0>)
 8004196:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 800419a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800419e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 80041a2:	6939      	ldr	r1, [r7, #16]
 80041a4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80041a8:	6139      	str	r1, [r7, #16]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 80041aa:	6939      	ldr	r1, [r7, #16]
 80041ac:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80041b0:	f021 0103 	bic.w	r1, r1, #3
 80041b4:	6139      	str	r1, [r7, #16]
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 80041b6:	f44f 3b40 	mov.w	fp, #196608	; 0x30000
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC3), &ADC_CommonInitStruct);
 80041ba:	a930      	add	r1, sp, #192	; 0xc0
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80041bc:	9431      	str	r4, [sp, #196]	; 0xc4
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 80041be:	f8cd b0c0 	str.w	fp, [sp, #192]	; 0xc0
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC3), &ADC_CommonInitStruct);
 80041c2:	f005 f8bb 	bl	800933c <LL_ADC_CommonInit>
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
 80041c6:	68f9      	ldr	r1, [r7, #12]
  MODIFY_REG(ADCx->CR,
 80041c8:	4b71      	ldr	r3, [pc, #452]	; (8004390 <main+0x6ac>)
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
 80041ca:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 80041ce:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80041d2:	60f9      	str	r1, [r7, #12]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80041d4:	68b9      	ldr	r1, [r7, #8]
 80041d6:	ea01 010a 	and.w	r1, r1, sl
 80041da:	60b9      	str	r1, [r7, #8]
  MODIFY_REG(ADCx->CR,
 80041dc:	68b9      	ldr	r1, [r7, #8]
 80041de:	4019      	ands	r1, r3
 80041e0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80041e4:	60b9      	str	r1, [r7, #8]
  MODIFY_REG(*preg,
 80041e6:	f8d9 1430 	ldr.w	r1, [r9, #1072]	; 0x430
 80041ea:	f421 61f8 	bic.w	r1, r1, #1984	; 0x7c0
 80041ee:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80041f2:	f8c9 1430 	str.w	r1, [r9, #1072]	; 0x430
  MODIFY_REG(*preg,
 80041f6:	f8d9 1414 	ldr.w	r1, [r9, #1044]	; 0x414
 80041fa:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80041fe:	f8c9 1414 	str.w	r1, [r9, #1044]	; 0x414
    CLEAR_BIT(ADCx->DIFSEL,
 8004202:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8004206:	f021 0110 	bic.w	r1, r1, #16
 800420a:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800420e:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8004212:	e9cd 443e 	strd	r4, r4, [sp, #248]	; 0xf8
 8004216:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 800421a:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800421e:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
 8004222:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8004226:	9432      	str	r4, [sp, #200]	; 0xc8
 8004228:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 800422c:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8004230:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8004234:	f8c5 1088 	str.w	r1, [r5, #136]	; 0x88
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004238:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800423a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800423e:	64e9      	str	r1, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004240:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8004242:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
  LL_ADC_Init(ADC5, &ADC_InitStruct);
 8004246:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800424a:	911d      	str	r1, [sp, #116]	; 0x74
  (void)tmpreg;
 800424c:	991d      	ldr	r1, [sp, #116]	; 0x74
 800424e:	4638      	mov	r0, r7
 8004250:	a930      	add	r1, sp, #192	; 0xc0
 8004252:	f005 f8b5 	bl	80093c0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_HRTIM_TRG3;
 8004256:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
  LL_ADC_REG_Init(ADC5, &ADC_REG_InitStruct);
 800425a:	a93e      	add	r1, sp, #248	; 0xf8
 800425c:	4638      	mov	r0, r7
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800425e:	e9cd 243e 	strd	r2, r4, [sp, #248]	; 0xf8
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8004262:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8004266:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  LL_ADC_REG_Init(ADC5, &ADC_REG_InitStruct);
 800426a:	f005 f8c3 	bl	80093f4 <LL_ADC_REG_Init>
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 800426e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC5), &ADC_CommonInitStruct);
 8004272:	4848      	ldr	r0, [pc, #288]	; (8004394 <main+0x6b0>)
 8004274:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8004278:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800427c:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004286:	613a      	str	r2, [r7, #16]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800428e:	f022 0203 	bic.w	r2, r2, #3
 8004292:	613a      	str	r2, [r7, #16]
 8004294:	a936      	add	r1, sp, #216	; 0xd8
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8004296:	f8cd b0d8 	str.w	fp, [sp, #216]	; 0xd8
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC5), &ADC_CommonInitStruct);
 800429a:	f005 f84f 	bl	800933c <LL_ADC_CommonInit>
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
 800429e:	68fa      	ldr	r2, [r7, #12]
  MODIFY_REG(ADCx->CR,
 80042a0:	4b3b      	ldr	r3, [pc, #236]	; (8004390 <main+0x6ac>)
  LL_GPIO_Init(I_LLC_COMP1_GPIO_Port, &GPIO_InitStruct);
 80042a2:	483d      	ldr	r0, [pc, #244]	; (8004398 <main+0x6b4>)
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
 80042a4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80042a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042ac:	60fa      	str	r2, [r7, #12]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	ea02 020a 	and.w	r2, r2, sl
 80042b4:	60ba      	str	r2, [r7, #8]
  MODIFY_REG(ADCx->CR,
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	4013      	ands	r3, r2
 80042ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(*preg,
 80042c0:	f8d9 3630 	ldr.w	r3, [r9, #1584]	; 0x630
 80042c4:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 80042c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042cc:	f8c9 3630 	str.w	r3, [r9, #1584]	; 0x630
  MODIFY_REG(*preg,
 80042d0:	f8d9 3614 	ldr.w	r3, [r9, #1556]	; 0x614
 80042d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042d8:	f8c9 3614 	str.w	r3, [r9, #1556]	; 0x614
    CLEAR_BIT(ADCx->DIFSEL,
 80042dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80042e0:	f023 0310 	bic.w	r3, r3, #16
 80042e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 80042e8:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
 80042ec:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042f0:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 80042f4:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 80042f8:	943a      	str	r4, [sp, #232]	; 0xe8
  SET_BIT(RCC->AHB2ENR, Periphs);
 80042fa:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80042fc:	ea43 0308 	orr.w	r3, r3, r8
 8004300:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004302:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 8004304:	4d25      	ldr	r5, [pc, #148]	; (800439c <main+0x6b8>)
 8004306:	ea03 0308 	and.w	r3, r3, r8
 800430a:	931c      	str	r3, [sp, #112]	; 0x70
  LL_GPIO_Init(I_LLC_COMP1_GPIO_Port, &GPIO_InitStruct);
 800430c:	a93e      	add	r1, sp, #248	; 0xf8
  (void)tmpreg;
 800430e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004310:	e9cd 863e 	strd	r8, r6, [sp, #248]	; 0xf8
  LL_GPIO_Init(I_LLC_COMP1_GPIO_Port, &GPIO_InitStruct);
 8004314:	f005 f912 	bl	800953c <LL_GPIO_Init>
  COMP_InitStruct.InputMinus = LL_COMP_INPUT_MINUS_DAC3_CH1;
 8004318:	f44f 7180 	mov.w	r1, #256	; 0x100
 800431c:	2340      	movs	r3, #64	; 0x40
 800431e:	e9cd 1336 	strd	r1, r3, [sp, #216]	; 0xd8
  LL_COMP_Init(COMP1, &COMP_InitStruct);
 8004322:	481f      	ldr	r0, [pc, #124]	; (80043a0 <main+0x6bc>)
  COMP_InitStruct.InputHysteresis = LL_COMP_HYSTERESIS_30MV;
 8004324:	f8cd b0e0 	str.w	fp, [sp, #224]	; 0xe0
  COMP_InitStruct.OutputPolarity = LL_COMP_OUTPUTPOL_INVERTED;
 8004328:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  LL_COMP_Init(COMP1, &COMP_InitStruct);
 800432c:	a936      	add	r1, sp, #216	; 0xd8
  COMP_InitStruct.OutputBlankingSource = LL_COMP_BLANKINGSRC_NONE;
 800432e:	e9cd 3439 	strd	r3, r4, [sp, #228]	; 0xe4
  LL_COMP_Init(COMP1, &COMP_InitStruct);
 8004332:	f005 f88f 	bl	8009454 <LL_COMP_Init>
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 8004336:	4a1b      	ldr	r2, [pc, #108]	; (80043a4 <main+0x6c0>)
 8004338:	682b      	ldr	r3, [r5, #0]
  __IO uint32_t wait_loop_index = 0;
 800433a:	941b      	str	r4, [sp, #108]	; 0x6c
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 800433c:	fba2 2303 	umull	r2, r3, r2, r3
 8004340:	0cdb      	lsrs	r3, r3, #19
 8004342:	22c8      	movs	r2, #200	; 0xc8
 8004344:	fb02 f303 	mul.w	r3, r2, r3
 8004348:	931b      	str	r3, [sp, #108]	; 0x6c
  while(wait_loop_index != 0)
 800434a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800434c:	b12b      	cbz	r3, 800435a <main+0x676>
    wait_loop_index--;
 800434e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004350:	3b01      	subs	r3, #1
 8004352:	931b      	str	r3, [sp, #108]	; 0x6c
  while(wait_loop_index != 0)
 8004354:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1f9      	bne.n	800434e <main+0x66a>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800435a:	4b13      	ldr	r3, [pc, #76]	; (80043a8 <main+0x6c4>)
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8004362:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004364:	681a      	ldr	r2, [r3, #0]
  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 8004366:	2400      	movs	r4, #0
 8004368:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
 8004372:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004376:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 800437a:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  SET_BIT(RCC->AHB2ENR, Periphs);
 800437e:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 8004382:	943a      	str	r4, [sp, #232]	; 0xe8
 8004384:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004386:	f042 0201 	orr.w	r2, r2, #1
 800438a:	e00f      	b.n	80043ac <main+0x6c8>
 800438c:	48001000 	.word	0x48001000
 8004390:	6fffffc0 	.word	0x6fffffc0
 8004394:	50000700 	.word	0x50000700
 8004398:	48000400 	.word	0x48000400
 800439c:	2000001c 	.word	0x2000001c
 80043a0:	40010200 	.word	0x40010200
 80043a4:	431bde83 	.word	0x431bde83
 80043a8:	40010400 	.word	0x40010400
 80043ac:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80043ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	931a      	str	r3, [sp, #104]	; 0x68
  (void)tmpreg;
 80043b6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  LL_GPIO_Init(I_PV_COMP2_GPIO_Port, &GPIO_InitStruct);
 80043b8:	a93e      	add	r1, sp, #248	; 0xf8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80043ba:	2303      	movs	r3, #3
 80043bc:	f04f 0b80 	mov.w	fp, #128	; 0x80
  LL_GPIO_Init(I_PV_COMP2_GPIO_Port, &GPIO_InitStruct);
 80043c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80043c4:	e9cd b33e 	strd	fp, r3, [sp, #248]	; 0xf8
  LL_GPIO_Init(I_PV_COMP2_GPIO_Port, &GPIO_InitStruct);
 80043c8:	f005 f8b8 	bl	800953c <LL_GPIO_Init>
  COMP_InitStruct.InputHysteresis = LL_COMP_HYSTERESIS_30MV;
 80043cc:	2250      	movs	r2, #80	; 0x50
 80043ce:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  LL_COMP_Init(COMP2, &COMP_InitStruct);
 80043d2:	48b4      	ldr	r0, [pc, #720]	; (80046a4 <main+0x9c0>)
  COMP_InitStruct.InputPlus = LL_COMP_INPUT_PLUS_IO1;
 80043d4:	9436      	str	r4, [sp, #216]	; 0xd8
  LL_COMP_Init(COMP2, &COMP_InitStruct);
 80043d6:	a936      	add	r1, sp, #216	; 0xd8
  COMP_InitStruct.InputHysteresis = LL_COMP_HYSTERESIS_30MV;
 80043d8:	e9cd 2337 	strd	r2, r3, [sp, #220]	; 0xdc
  COMP_InitStruct.OutputBlankingSource = LL_COMP_BLANKINGSRC_NONE;
 80043dc:	e9cd 4439 	strd	r4, r4, [sp, #228]	; 0xe4
  LL_COMP_Init(COMP2, &COMP_InitStruct);
 80043e0:	f005 f838 	bl	8009454 <LL_COMP_Init>
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80043e4:	4ab0      	ldr	r2, [pc, #704]	; (80046a8 <main+0x9c4>)
 80043e6:	682b      	ldr	r3, [r5, #0]
  __IO uint32_t wait_loop_index = 0;
 80043e8:	9419      	str	r4, [sp, #100]	; 0x64
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	0cdb      	lsrs	r3, r3, #19
 80043f0:	22c8      	movs	r2, #200	; 0xc8
 80043f2:	fb02 f303 	mul.w	r3, r2, r3
 80043f6:	9319      	str	r3, [sp, #100]	; 0x64
  while(wait_loop_index != 0)
 80043f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80043fa:	b12b      	cbz	r3, 8004408 <main+0x724>
    wait_loop_index--;
 80043fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80043fe:	3b01      	subs	r3, #1
 8004400:	9319      	str	r3, [sp, #100]	; 0x64
  while(wait_loop_index != 0)
 8004402:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1f9      	bne.n	80043fc <main+0x718>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004408:	4ba8      	ldr	r3, [pc, #672]	; (80046ac <main+0x9c8>)
  LL_GPIO_Init(I_LLC_OPAMP2_COMP4_GPIO_Port, &GPIO_InitStruct);
 800440a:	48a9      	ldr	r0, [pc, #676]	; (80046b0 <main+0x9cc>)
 800440c:	689a      	ldr	r2, [r3, #8]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 800440e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004412:	430a      	orrs	r2, r1
 8004414:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004416:	68da      	ldr	r2, [r3, #12]
 8004418:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800441c:	60da      	str	r2, [r3, #12]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800441e:	6159      	str	r1, [r3, #20]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	430a      	orrs	r2, r1
 8004424:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004426:	681a      	ldr	r2, [r3, #0]
  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 8004428:	2400      	movs	r4, #0
 800442a:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
 8004434:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004438:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 800443c:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004440:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 8004444:	943a      	str	r4, [sp, #232]	; 0xe8
 8004446:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004448:	f042 0202 	orr.w	r2, r2, #2
 800444c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800444e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	9318      	str	r3, [sp, #96]	; 0x60
  (void)tmpreg;
 8004456:	9b18      	ldr	r3, [sp, #96]	; 0x60
  LL_GPIO_Init(I_LLC_OPAMP2_COMP4_GPIO_Port, &GPIO_InitStruct);
 8004458:	a93e      	add	r1, sp, #248	; 0xf8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800445a:	2303      	movs	r3, #3
 800445c:	f04f 0901 	mov.w	r9, #1
 8004460:	e9cd 933e 	strd	r9, r3, [sp, #248]	; 0xf8
  COMP_InitStruct.InputHysteresis = LL_COMP_HYSTERESIS_30MV;
 8004464:	f04f 0a40 	mov.w	sl, #64	; 0x40
  LL_GPIO_Init(I_LLC_OPAMP2_COMP4_GPIO_Port, &GPIO_InitStruct);
 8004468:	f005 f868 	bl	800953c <LL_GPIO_Init>
  COMP_InitStruct.InputHysteresis = LL_COMP_HYSTERESIS_30MV;
 800446c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  LL_COMP_Init(COMP4, &COMP_InitStruct);
 8004470:	4890      	ldr	r0, [pc, #576]	; (80046b4 <main+0x9d0>)
  COMP_InitStruct.InputPlus = LL_COMP_INPUT_PLUS_IO1;
 8004472:	9436      	str	r4, [sp, #216]	; 0xd8
  LL_COMP_Init(COMP4, &COMP_InitStruct);
 8004474:	a936      	add	r1, sp, #216	; 0xd8
  COMP_InitStruct.InputHysteresis = LL_COMP_HYSTERESIS_30MV;
 8004476:	e9cd a337 	strd	sl, r3, [sp, #220]	; 0xdc
  COMP_InitStruct.OutputBlankingSource = LL_COMP_BLANKINGSRC_NONE;
 800447a:	e9cd 4439 	strd	r4, r4, [sp, #228]	; 0xe4
  LL_COMP_Init(COMP4, &COMP_InitStruct);
 800447e:	f004 ffe9 	bl	8009454 <LL_COMP_Init>
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 8004482:	4a89      	ldr	r2, [pc, #548]	; (80046a8 <main+0x9c4>)
 8004484:	682b      	ldr	r3, [r5, #0]
  __IO uint32_t wait_loop_index = 0;
 8004486:	9417      	str	r4, [sp, #92]	; 0x5c
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 8004488:	fba2 2303 	umull	r2, r3, r2, r3
 800448c:	0cdb      	lsrs	r3, r3, #19
 800448e:	22c8      	movs	r2, #200	; 0xc8
 8004490:	fb02 f303 	mul.w	r3, r2, r3
 8004494:	9317      	str	r3, [sp, #92]	; 0x5c
  while(wait_loop_index != 0)
 8004496:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004498:	b12b      	cbz	r3, 80044a6 <main+0x7c2>
    wait_loop_index--;
 800449a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800449c:	3b01      	subs	r3, #1
 800449e:	9317      	str	r3, [sp, #92]	; 0x5c
  while(wait_loop_index != 0)
 80044a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f9      	bne.n	800449a <main+0x7b6>
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80044a6:	4b81      	ldr	r3, [pc, #516]	; (80046ac <main+0x9c8>)
  LL_GPIO_Init(RELAY_SENSE_COMP6_GPIO_Port, &GPIO_InitStruct);
 80044a8:	4883      	ldr	r0, [pc, #524]	; (80046b8 <main+0x9d4>)
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80044b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80044b2:	681a      	ldr	r2, [r3, #0]
  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 80044b4:	2400      	movs	r4, #0
 80044b6:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
 80044c0:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044c4:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 80044c8:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  SET_BIT(RCC->AHB2ENR, Periphs);
 80044cc:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 80044d0:	943a      	str	r4, [sp, #232]	; 0xe8
 80044d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044d4:	f042 0208 	orr.w	r2, r2, #8
 80044d8:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80044da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044dc:	f003 0308 	and.w	r3, r3, #8
 80044e0:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80044e2:	f44f 6e00 	mov.w	lr, #2048	; 0x800
  (void)tmpreg;
 80044e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
  LL_GPIO_Init(RELAY_SENSE_COMP6_GPIO_Port, &GPIO_InitStruct);
 80044e8:	a93e      	add	r1, sp, #248	; 0xf8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e9cd e33e 	strd	lr, r3, [sp, #248]	; 0xf8
  COMP_InitStruct.InputMinus = LL_COMP_INPUT_MINUS_DAC2_CH1;
 80044f0:	f44f 7880 	mov.w	r8, #256	; 0x100
  LL_GPIO_Init(RELAY_SENSE_COMP6_GPIO_Port, &GPIO_InitStruct);
 80044f4:	f005 f822 	bl	800953c <LL_GPIO_Init>
  COMP_InitStruct.InputMinus = LL_COMP_INPUT_MINUS_DAC2_CH1;
 80044f8:	2350      	movs	r3, #80	; 0x50
  LL_COMP_Init(COMP6, &COMP_InitStruct);
 80044fa:	4870      	ldr	r0, [pc, #448]	; (80046bc <main+0x9d8>)
  COMP_InitStruct.OutputBlankingSource = LL_COMP_BLANKINGSRC_NONE;
 80044fc:	943a      	str	r4, [sp, #232]	; 0xe8
  LL_COMP_Init(COMP6, &COMP_InitStruct);
 80044fe:	a936      	add	r1, sp, #216	; 0xd8
  COMP_InitStruct.InputMinus = LL_COMP_INPUT_MINUS_DAC2_CH1;
 8004500:	e9cd 8336 	strd	r8, r3, [sp, #216]	; 0xd8
  COMP_InitStruct.OutputPolarity = LL_COMP_OUTPUTPOL_NONINVERTED;
 8004504:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
  LL_COMP_Init(COMP6, &COMP_InitStruct);
 8004508:	f004 ffa4 	bl	8009454 <LL_COMP_Init>
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 800450c:	4a66      	ldr	r2, [pc, #408]	; (80046a8 <main+0x9c4>)
 800450e:	682b      	ldr	r3, [r5, #0]
  __IO uint32_t wait_loop_index = 0;
 8004510:	9415      	str	r4, [sp, #84]	; 0x54
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 8004512:	fba2 2303 	umull	r2, r3, r2, r3
 8004516:	0cdb      	lsrs	r3, r3, #19
 8004518:	22c8      	movs	r2, #200	; 0xc8
 800451a:	fb02 f303 	mul.w	r3, r2, r3
 800451e:	9315      	str	r3, [sp, #84]	; 0x54
  while(wait_loop_index != 0)
 8004520:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004522:	b12b      	cbz	r3, 8004530 <main+0x84c>
    wait_loop_index--;
 8004524:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004526:	3b01      	subs	r3, #1
 8004528:	9315      	str	r3, [sp, #84]	; 0x54
  while(wait_loop_index != 0)
 800452a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1f9      	bne.n	8004524 <main+0x840>
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8004530:	4b5e      	ldr	r3, [pc, #376]	; (80046ac <main+0x9c8>)
  LL_GPIO_Init(OC_OUT_GRID_GPIO_Port, &GPIO_InitStruct);
 8004532:	4861      	ldr	r0, [pc, #388]	; (80046b8 <main+0x9d4>)
 8004534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004536:	f022 0201 	bic.w	r2, r2, #1
 800453a:	625a      	str	r2, [r3, #36]	; 0x24
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800453c:	6a1a      	ldr	r2, [r3, #32]
  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 800453e:	2400      	movs	r4, #0
 8004540:	f022 0201 	bic.w	r2, r2, #1
 8004544:	621a      	str	r2, [r3, #32]
 8004546:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
 800454a:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800454e:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 8004552:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004556:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 800455a:	943a      	str	r4, [sp, #232]	; 0xe8
 800455c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800455e:	f042 0208 	orr.w	r2, r2, #8
 8004562:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004566:	f003 0308 	and.w	r3, r3, #8
 800456a:	9314      	str	r3, [sp, #80]	; 0x50
  (void)tmpreg;
 800456c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  LL_GPIO_Init(OC_OUT_GRID_GPIO_Port, &GPIO_InitStruct);
 800456e:	a93e      	add	r1, sp, #248	; 0xf8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004570:	2303      	movs	r3, #3
 8004572:	f44f 4780 	mov.w	r7, #16384	; 0x4000
 8004576:	e9cd 733e 	strd	r7, r3, [sp, #248]	; 0xf8
  LL_GPIO_Init(OC_OUT_GRID_GPIO_Port, &GPIO_InitStruct);
 800457a:	f004 ffdf 	bl	800953c <LL_GPIO_Init>
  COMP_InitStruct.InputMinus = LL_COMP_INPUT_MINUS_DAC2_CH1;
 800457e:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8004582:	2350      	movs	r3, #80	; 0x50
 8004584:	e9cd c336 	strd	ip, r3, [sp, #216]	; 0xd8
  LL_COMP_Init(COMP7, &COMP_InitStruct);
 8004588:	484d      	ldr	r0, [pc, #308]	; (80046c0 <main+0x9dc>)
  COMP_InitStruct.InputHysteresis = LL_COMP_HYSTERESIS_30MV;
 800458a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  LL_COMP_Init(COMP7, &COMP_InitStruct);
 800458e:	a936      	add	r1, sp, #216	; 0xd8
  COMP_InitStruct.InputHysteresis = LL_COMP_HYSTERESIS_30MV;
 8004590:	9338      	str	r3, [sp, #224]	; 0xe0
  COMP_InitStruct.OutputBlankingSource = LL_COMP_BLANKINGSRC_NONE;
 8004592:	e9cd 4439 	strd	r4, r4, [sp, #228]	; 0xe4
  LL_COMP_Init(COMP7, &COMP_InitStruct);
 8004596:	f004 ff5d 	bl	8009454 <LL_COMP_Init>
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 800459a:	4a43      	ldr	r2, [pc, #268]	; (80046a8 <main+0x9c4>)
 800459c:	682b      	ldr	r3, [r5, #0]
  __IO uint32_t wait_loop_index = 0;
 800459e:	9413      	str	r4, [sp, #76]	; 0x4c
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80045a0:	fba2 2303 	umull	r2, r3, r2, r3
 80045a4:	0cdb      	lsrs	r3, r3, #19
 80045a6:	22c8      	movs	r2, #200	; 0xc8
 80045a8:	fb02 f303 	mul.w	r3, r2, r3
 80045ac:	9313      	str	r3, [sp, #76]	; 0x4c
  while(wait_loop_index != 0)
 80045ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80045b0:	b12b      	cbz	r3, 80045be <main+0x8da>
    wait_loop_index--;
 80045b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80045b4:	3b01      	subs	r3, #1
 80045b6:	9313      	str	r3, [sp, #76]	; 0x4c
  while(wait_loop_index != 0)
 80045b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f9      	bne.n	80045b2 <main+0x8ce>
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80045be:	4b3b      	ldr	r3, [pc, #236]	; (80046ac <main+0x9c8>)
  SET_BIT(RCC->AHB2ENR, Periphs);
 80045c0:	4f40      	ldr	r7, [pc, #256]	; (80046c4 <main+0x9e0>)
 80045c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  *         @arg @ref LL_DAC_SIGNED_FORMAT_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_DAC_SetSignedFormat(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t SignedFormat)
{
  MODIFY_REG(DACx->MCR,
 80045c4:	4e40      	ldr	r6, [pc, #256]	; (80046c8 <main+0x9e4>)
 80045c6:	f022 0202 	bic.w	r2, r2, #2
 80045ca:	625a      	str	r2, [r3, #36]	; 0x24
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80045cc:	6a1a      	ldr	r2, [r3, #32]
  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 80045ce:	2400      	movs	r4, #0
 80045d0:	f022 0202 	bic.w	r2, r2, #2
 80045d4:	621a      	str	r2, [r3, #32]
 80045d6:	e9cd 443e 	strd	r4, r4, [sp, #248]	; 0xf8
 80045da:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 80045de:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e2:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
 80045e6:	e9cd 443a 	strd	r4, r4, [sp, #232]	; 0xe8
  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 80045ea:	9444      	str	r4, [sp, #272]	; 0x110
 80045ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80045f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045fa:	9311      	str	r3, [sp, #68]	; 0x44
  (void)tmpreg;
 80045fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  SET_BIT(RCC->AHB2ENR, Periphs);
 80045fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004600:	f043 0301 	orr.w	r3, r3, #1
 8004604:	64fb      	str	r3, [r7, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800460e:	f04f 0803 	mov.w	r8, #3
  (void)tmpreg;
 8004612:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004614:	f8cd 80dc 	str.w	r8, [sp, #220]	; 0xdc
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8004618:	2310      	movs	r3, #16
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800461a:	a936      	add	r1, sp, #216	; 0xd8
 800461c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8004620:	9336      	str	r3, [sp, #216]	; 0xd8
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004622:	f004 ff8b 	bl	800953c <LL_GPIO_Init>
 8004626:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8004628:	4928      	ldr	r1, [pc, #160]	; (80046cc <main+0x9e8>)
 800462a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800462e:	63f3      	str	r3, [r6, #60]	; 0x3c
 8004630:	aa3e      	add	r2, sp, #248	; 0xf8
 8004632:	4630      	mov	r0, r6
  DAC_InitStruct.TriggerSource2 = LL_DAC_TRIG_SOFTWARE;
 8004634:	e9cd 443e 	strd	r4, r4, [sp, #248]	; 0xf8
  DAC_InitStruct.OutputConnection = LL_DAC_OUTPUT_CONNECT_GPIO;
 8004638:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  DAC_InitStruct.WaveAutoGeneration = LL_DAC_WAVE_AUTO_GENERATION_NONE;
 800463c:	9440      	str	r4, [sp, #256]	; 0x100
  DAC_InitStruct.OutputMode = LL_DAC_OUTPUT_MODE_NORMAL;
 800463e:	9444      	str	r4, [sp, #272]	; 0x110
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8004640:	f004 ff22 	bl	8009488 <LL_DAC_Init>
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_DisableTrigger(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  CLEAR_BIT(DACx->CR,
 8004644:	6833      	ldr	r3, [r6, #0]
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &DAC_InitStruct);
 8004646:	4922      	ldr	r1, [pc, #136]	; (80046d0 <main+0x9ec>)
 8004648:	f023 0302 	bic.w	r3, r3, #2
 800464c:	6033      	str	r3, [r6, #0]
  CLEAR_BIT(DACx->MCR,
 800464e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8004650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004654:	63f3      	str	r3, [r6, #60]	; 0x3c
  MODIFY_REG(DACx->MCR,
 8004656:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8004658:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  DAC_InitStruct.OutputConnection = LL_DAC_OUTPUT_CONNECT_INTERNAL;
 800465c:	f04f 0b01 	mov.w	fp, #1
 8004660:	f04f 0902 	mov.w	r9, #2
 8004664:	63f3      	str	r3, [r6, #60]	; 0x3c
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &DAC_InitStruct);
 8004666:	aa3e      	add	r2, sp, #248	; 0xf8
 8004668:	4630      	mov	r0, r6
  DAC_InitStruct.OutputConnection = LL_DAC_OUTPUT_CONNECT_INTERNAL;
 800466a:	e9cd 9b42 	strd	r9, fp, [sp, #264]	; 0x108
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &DAC_InitStruct);
 800466e:	f004 ff0b 	bl	8009488 <LL_DAC_Init>
  CLEAR_BIT(DACx->CR,
 8004672:	6833      	ldr	r3, [r6, #0]
 8004674:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004678:	6033      	str	r3, [r6, #0]
  CLEAR_BIT(DACx->MCR,
 800467a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 800467c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004680:	63f3      	str	r3, [r6, #60]	; 0x3c
  LL_OPAMP_InitTypeDef OPAMP_InitStruct = {0};
 8004682:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
 8004686:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800468a:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 800468e:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004694:	ea43 030b 	orr.w	r3, r3, fp
 8004698:	64fb      	str	r3, [r7, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800469a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800469c:	ea03 030b 	and.w	r3, r3, fp
 80046a0:	e018      	b.n	80046d4 <main+0x9f0>
 80046a2:	bf00      	nop
 80046a4:	40010204 	.word	0x40010204
 80046a8:	431bde83 	.word	0x431bde83
 80046ac:	40010400 	.word	0x40010400
 80046b0:	48000400 	.word	0x48000400
 80046b4:	4001020c 	.word	0x4001020c
 80046b8:	48000c00 	.word	0x48000c00
 80046bc:	40010214 	.word	0x40010214
 80046c0:	40010218 	.word	0x40010218
 80046c4:	40021000 	.word	0x40021000
 80046c8:	50000800 	.word	0x50000800
 80046cc:	02110001 	.word	0x02110001
 80046d0:	354200f2 	.word	0x354200f2
 80046d4:	930f      	str	r3, [sp, #60]	; 0x3c
  (void)tmpreg;
 80046d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  SET_BIT(RCC->AHB2ENR, Periphs);
 80046d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046da:	f043 0304 	orr.w	r3, r3, #4
 80046de:	64fb      	str	r3, [r7, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80046e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  GPIO_InitStruct.Pin = I_PV_OPAMP_VINP_Pin;
 80046e2:	f8cd 90f8 	str.w	r9, [sp, #248]	; 0xf8
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	9310      	str	r3, [sp, #64]	; 0x40
  LL_GPIO_Init(I_PV_OPAMP_VINP_GPIO_Port, &GPIO_InitStruct);
 80046ec:	a93e      	add	r1, sp, #248	; 0xf8
 80046ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  (void)tmpreg;
 80046f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80046f4:	f8cd 80fc 	str.w	r8, [sp, #252]	; 0xfc
  GPIO_InitStruct.Pin = I_PV_OPAMP1_OUT_Pin;
 80046f8:	f04f 0a04 	mov.w	sl, #4
  LL_GPIO_Init(I_PV_OPAMP_VINP_GPIO_Port, &GPIO_InitStruct);
 80046fc:	f004 ff1e 	bl	800953c <LL_GPIO_Init>
  LL_GPIO_Init(I_PV_OPAMP1_OUT_GPIO_Port, &GPIO_InitStruct);
 8004700:	a93e      	add	r1, sp, #248	; 0xf8
 8004702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004706:	f8cd 80fc 	str.w	r8, [sp, #252]	; 0xfc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800470a:	9442      	str	r4, [sp, #264]	; 0x108
  GPIO_InitStruct.Pin = I_PV_OPAMP1_OUT_Pin;
 800470c:	f8cd a0f8 	str.w	sl, [sp, #248]	; 0xf8
  LL_GPIO_Init(I_PV_OPAMP1_OUT_GPIO_Port, &GPIO_InitStruct);
 8004710:	f004 ff14 	bl	800953c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = I_PV_OPAMP_VINM0_Pin;
 8004714:	2208      	movs	r2, #8
  LL_GPIO_Init(I_PV_OPAMP_VINM0_GPIO_Port, &GPIO_InitStruct);
 8004716:	a93e      	add	r1, sp, #248	; 0xf8
 8004718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = I_PV_OPAMP_VINM0_Pin;
 800471c:	923e      	str	r2, [sp, #248]	; 0xf8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800471e:	f8cd 80fc 	str.w	r8, [sp, #252]	; 0xfc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004722:	9442      	str	r4, [sp, #264]	; 0x108
  LL_OPAMP_Init(OPAMP1, &OPAMP_InitStruct);
 8004724:	f106 4670 	add.w	r6, r6, #4026531840	; 0xf0000000
  LL_GPIO_Init(I_PV_OPAMP_VINM0_GPIO_Port, &GPIO_InitStruct);
 8004728:	f004 ff08 	bl	800953c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = I_PV_OPAMP_VINM1_Pin;
 800472c:	2320      	movs	r3, #32
  LL_GPIO_Init(I_PV_OPAMP_VINM1_GPIO_Port, &GPIO_InitStruct);
 800472e:	a93e      	add	r1, sp, #248	; 0xf8
 8004730:	48a5      	ldr	r0, [pc, #660]	; (80049c8 <main+0xce4>)
  GPIO_InitStruct.Pin = I_PV_OPAMP_VINM1_Pin;
 8004732:	933e      	str	r3, [sp, #248]	; 0xf8
  LL_OPAMP_Init(OPAMP1, &OPAMP_InitStruct);
 8004734:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004738:	f8cd 80fc 	str.w	r8, [sp, #252]	; 0xfc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800473c:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(I_PV_OPAMP_VINM1_GPIO_Port, &GPIO_InitStruct);
 800473e:	f004 fefd 	bl	800953c <LL_GPIO_Init>
  OPAMP_InitStruct.PowerMode = LL_OPAMP_POWERMODE_HIGHSPEED;
 8004742:	4aa2      	ldr	r2, [pc, #648]	; (80049cc <main+0xce8>)
  OPAMP_InitStruct.InputNonInverting = LL_OPAMP_INPUT_NONINVERT_IO0;
 8004744:	9438      	str	r4, [sp, #224]	; 0xe0
  OPAMP_InitStruct.PowerMode = LL_OPAMP_POWERMODE_HIGHSPEED;
 8004746:	2380      	movs	r3, #128	; 0x80
  LL_OPAMP_Init(OPAMP1, &OPAMP_InitStruct);
 8004748:	a936      	add	r1, sp, #216	; 0xd8
 800474a:	4630      	mov	r0, r6
  OPAMP_InitStruct.PowerMode = LL_OPAMP_POWERMODE_HIGHSPEED;
 800474c:	e9cd 3236 	strd	r3, r2, [sp, #216]	; 0xd8
  LL_OPAMP_Init(OPAMP1, &OPAMP_InitStruct);
 8004750:	f004 ffd4 	bl	80096fc <LL_OPAMP_Init>
  *         On this STM32 series, this value is not available on all devices. Refer to datasheet for details.
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetInputsMuxMode(OPAMP_TypeDef *OPAMPx, uint32_t InputsMuxMode)
{
  MODIFY_REG(OPAMPx->TCMR, OPAMP_TCMR_T1CMEN | OPAMP_TCMR_T8CMEN | OPAMP_TCMR_T20CMEN, InputsMuxMode);
 8004754:	69b3      	ldr	r3, [r6, #24]
 8004756:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800475a:	61b3      	str	r3, [r6, #24]
  *         @arg @ref LL_OPAMP_INTERNAL_OUPUT_ENABLED
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetInternalOutput(OPAMP_TypeDef *OPAMPx, uint32_t InternalOutput)
{
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_OPAMPINTEN, InternalOutput);
 800475c:	6833      	ldr	r3, [r6, #0]
 800475e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004762:	6033      	str	r3, [r6, #0]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_PGGAIN_2 | OPAMP_CSR_PGGAIN_1 | OPAMP_CSR_PGGAIN_0, PGAGain);
 8004764:	6833      	ldr	r3, [r6, #0]
 8004766:	f423 33e0 	bic.w	r3, r3, #114688	; 0x1c000
 800476a:	6033      	str	r3, [r6, #0]
  *         @arg @ref LL_OPAMP_TRIMMING_USER
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_SetTrimmingMode(OPAMP_TypeDef *OPAMPx, uint32_t TrimmingMode)
{
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_USERTRIM, TrimmingMode);
 800476c:	6833      	ldr	r3, [r6, #0]
 800476e:	f023 0310 	bic.w	r3, r3, #16
 8004772:	6033      	str	r3, [r6, #0]
  LL_OPAMP_InitTypeDef OPAMP_InitStruct = {0};
 8004774:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
 8004778:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800477c:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 8004780:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004786:	ea43 030b 	orr.w	r3, r3, fp
 800478a:	64fb      	str	r3, [r7, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800478c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800478e:	ea03 030b 	and.w	r3, r3, fp
 8004792:	930d      	str	r3, [sp, #52]	; 0x34
  (void)tmpreg;
 8004794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004798:	ea43 0309 	orr.w	r3, r3, r9
 800479c:	64fb      	str	r3, [r7, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800479e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80047a0:	f8cd 80fc 	str.w	r8, [sp, #252]	; 0xfc
 80047a4:	ea03 0309 	and.w	r3, r3, r9
 80047a8:	930e      	str	r3, [sp, #56]	; 0x38
  (void)tmpreg;
 80047aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  LL_GPIO_Init(I_LLC_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80047ac:	a93e      	add	r1, sp, #248	; 0xf8
  GPIO_InitStruct.Pin = I_LLC_OPAMP2_OUT_Pin;
 80047ae:	2340      	movs	r3, #64	; 0x40
  LL_GPIO_Init(I_LLC_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80047b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = I_LLC_OPAMP2_OUT_Pin;
 80047b4:	933e      	str	r3, [sp, #248]	; 0xf8
  LL_GPIO_Init(I_LLC_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80047b6:	f004 fec1 	bl	800953c <LL_GPIO_Init>
  LL_GPIO_Init(I_LLC_OPAMP2_COMP4_GPIO_Port, &GPIO_InitStruct);
 80047ba:	a93e      	add	r1, sp, #248	; 0xf8
 80047bc:	4884      	ldr	r0, [pc, #528]	; (80049d0 <main+0xcec>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80047be:	9442      	str	r4, [sp, #264]	; 0x108
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80047c0:	e9cd b83e 	strd	fp, r8, [sp, #248]	; 0xf8
  LL_GPIO_Init(I_LLC_OPAMP2_COMP4_GPIO_Port, &GPIO_InitStruct);
 80047c4:	f004 feba 	bl	800953c <LL_GPIO_Init>
  OPAMP_InitStruct.InputNonInverting = LL_OPAMP_INPUT_NONINVERT_IO2;
 80047c8:	2208      	movs	r2, #8
  OPAMP_InitStruct.FunctionalMode = LL_OPAMP_MODE_PGA;
 80047ca:	2340      	movs	r3, #64	; 0x40
  LL_OPAMP_Init(OPAMP2, &OPAMP_InitStruct);
 80047cc:	a936      	add	r1, sp, #216	; 0xd8
 80047ce:	4881      	ldr	r0, [pc, #516]	; (80049d4 <main+0xcf0>)
  OPAMP_InitStruct.InputNonInverting = LL_OPAMP_INPUT_NONINVERT_IO2;
 80047d0:	9238      	str	r2, [sp, #224]	; 0xe0
  OPAMP_InitStruct.FunctionalMode = LL_OPAMP_MODE_PGA;
 80047d2:	9337      	str	r3, [sp, #220]	; 0xdc
  OPAMP_InitStruct.InputInverting = LL_OPAMP_INPUT_INVERT_CONNECT_NO;
 80047d4:	9339      	str	r3, [sp, #228]	; 0xe4
  OPAMP_InitStruct.PowerMode = LL_OPAMP_POWERMODE_NORMALSPEED;
 80047d6:	9436      	str	r4, [sp, #216]	; 0xd8
  LL_OPAMP_Init(OPAMP2, &OPAMP_InitStruct);
 80047d8:	f004 ff90 	bl	80096fc <LL_OPAMP_Init>
  MODIFY_REG(OPAMPx->TCMR, OPAMP_TCMR_T1CMEN | OPAMP_TCMR_T8CMEN | OPAMP_TCMR_T20CMEN, InputsMuxMode);
 80047dc:	69f3      	ldr	r3, [r6, #28]
  LL_GPIO_Init(VPV_OPAMP4_VINM_GPIO_Port, &GPIO_InitStruct);
 80047de:	487c      	ldr	r0, [pc, #496]	; (80049d0 <main+0xcec>)
 80047e0:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80047e4:	61f3      	str	r3, [r6, #28]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_OPAMPINTEN, InternalOutput);
 80047e6:	6873      	ldr	r3, [r6, #4]
 80047e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047ec:	6073      	str	r3, [r6, #4]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_PGGAIN_2 | OPAMP_CSR_PGGAIN_1 | OPAMP_CSR_PGGAIN_0, PGAGain);
 80047ee:	6873      	ldr	r3, [r6, #4]
 80047f0:	f423 33e0 	bic.w	r3, r3, #114688	; 0x1c000
 80047f4:	6073      	str	r3, [r6, #4]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_USERTRIM, TrimmingMode);
 80047f6:	6873      	ldr	r3, [r6, #4]
 80047f8:	f023 0310 	bic.w	r3, r3, #16
 80047fc:	6073      	str	r3, [r6, #4]
  LL_OPAMP_InitTypeDef OPAMP_InitStruct = {0};
 80047fe:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
 8004802:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004806:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 800480a:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  SET_BIT(RCC->AHB2ENR, Periphs);
 800480e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004810:	ea43 0309 	orr.w	r3, r3, r9
 8004814:	64fb      	str	r3, [r7, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004818:	f8cd 80fc 	str.w	r8, [sp, #252]	; 0xfc
 800481c:	ea03 0309 	and.w	r3, r3, r9
 8004820:	930c      	str	r3, [sp, #48]	; 0x30
  (void)tmpreg;
 8004822:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  LL_GPIO_Init(VPV_OPAMP4_VINM_GPIO_Port, &GPIO_InitStruct);
 8004824:	a93e      	add	r1, sp, #248	; 0xf8
  GPIO_InitStruct.Pin = VPV_OPAMP4_VINM_Pin;
 8004826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800482a:	933e      	str	r3, [sp, #248]	; 0xf8
  GPIO_InitStruct.Pin = VPV_OPAMP4_OUT_Pin;
 800482c:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  LL_GPIO_Init(VPV_OPAMP4_VINM_GPIO_Port, &GPIO_InitStruct);
 8004830:	f004 fe84 	bl	800953c <LL_GPIO_Init>
  LL_GPIO_Init(VPV_OPAMP4_OUT_GPIO_Port, &GPIO_InitStruct);
 8004834:	a93e      	add	r1, sp, #248	; 0xf8
 8004836:	4866      	ldr	r0, [pc, #408]	; (80049d0 <main+0xcec>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004838:	f8cd 80fc 	str.w	r8, [sp, #252]	; 0xfc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800483c:	9442      	str	r4, [sp, #264]	; 0x108
  GPIO_InitStruct.Pin = VPV_OPAMP4_OUT_Pin;
 800483e:	f8cd b0f8 	str.w	fp, [sp, #248]	; 0xf8
  LL_GPIO_Init(VPV_OPAMP4_OUT_GPIO_Port, &GPIO_InitStruct);
 8004842:	f004 fe7b 	bl	800953c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = VPV_OPAMP4_INP_Pin;
 8004846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  LL_GPIO_Init(VPV_OPAMP4_INP_GPIO_Port, &GPIO_InitStruct);
 800484a:	a93e      	add	r1, sp, #248	; 0xf8
 800484c:	4860      	ldr	r0, [pc, #384]	; (80049d0 <main+0xcec>)
  GPIO_InitStruct.Pin = VPV_OPAMP4_INP_Pin;
 800484e:	933e      	str	r3, [sp, #248]	; 0xf8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004850:	f8cd 80fc 	str.w	r8, [sp, #252]	; 0xfc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004854:	9442      	str	r4, [sp, #264]	; 0x108
  LL_GPIO_Init(VPV_OPAMP4_INP_GPIO_Port, &GPIO_InitStruct);
 8004856:	f004 fe71 	bl	800953c <LL_GPIO_Init>
  LL_OPAMP_Init(OPAMP4, &OPAMP_InitStruct);
 800485a:	a936      	add	r1, sp, #216	; 0xd8
 800485c:	485e      	ldr	r0, [pc, #376]	; (80049d8 <main+0xcf4>)
  OPAMP_InitStruct.FunctionalMode = LL_OPAMP_MODE_STANDALONE;
 800485e:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
  OPAMP_InitStruct.InputInverting = LL_OPAMP_INPUT_INVERT_IO0;
 8004862:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
  LL_OPAMP_Init(OPAMP4, &OPAMP_InitStruct);
 8004866:	f004 ff49 	bl	80096fc <LL_OPAMP_Init>
  MODIFY_REG(OPAMPx->TCMR, OPAMP_TCMR_T1CMEN | OPAMP_TCMR_T8CMEN | OPAMP_TCMR_T20CMEN, InputsMuxMode);
 800486a:	6a73      	ldr	r3, [r6, #36]	; 0x24
  LL_GPIO_Init(RELAY_SENSE_OPAMP5_GPIO_Port, &GPIO_InitStruct);
 800486c:	485b      	ldr	r0, [pc, #364]	; (80049dc <main+0xcf8>)
 800486e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004872:	6273      	str	r3, [r6, #36]	; 0x24
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_OPAMPINTEN, InternalOutput);
 8004874:	68f3      	ldr	r3, [r6, #12]
 8004876:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800487a:	60f3      	str	r3, [r6, #12]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_USERTRIM, TrimmingMode);
 800487c:	68f3      	ldr	r3, [r6, #12]
 800487e:	f023 0310 	bic.w	r3, r3, #16
 8004882:	60f3      	str	r3, [r6, #12]
  LL_OPAMP_InitTypeDef OPAMP_InitStruct = {0};
 8004884:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
 8004888:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800488c:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 8004890:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004896:	f043 0308 	orr.w	r3, r3, #8
 800489a:	64fb      	str	r3, [r7, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800489c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  GPIO_InitStruct.Pin = RELAY_SENSE_OPAMP5_Pin;
 800489e:	f8cd b0f8 	str.w	fp, [sp, #248]	; 0xf8
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	930b      	str	r3, [sp, #44]	; 0x2c
  LL_GPIO_Init(RELAY_SENSE_OPAMP5_GPIO_Port, &GPIO_InitStruct);
 80048a8:	a93e      	add	r1, sp, #248	; 0xf8
  (void)tmpreg;
 80048aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80048ac:	f8cd 80fc 	str.w	r8, [sp, #252]	; 0xfc
  LL_GPIO_Init(RELAY_SENSE_OPAMP5_GPIO_Port, &GPIO_InitStruct);
 80048b0:	f004 fe44 	bl	800953c <LL_GPIO_Init>
  OPAMP_InitStruct.FunctionalMode = LL_OPAMP_MODE_FOLLOWER;
 80048b4:	2360      	movs	r3, #96	; 0x60
  LL_OPAMP_Init(OPAMP5, &OPAMP_InitStruct);
 80048b6:	484a      	ldr	r0, [pc, #296]	; (80049e0 <main+0xcfc>)
  OPAMP_InitStruct.FunctionalMode = LL_OPAMP_MODE_FOLLOWER;
 80048b8:	9337      	str	r3, [sp, #220]	; 0xdc
  LL_OPAMP_Init(OPAMP5, &OPAMP_InitStruct);
 80048ba:	a936      	add	r1, sp, #216	; 0xd8
  OPAMP_InitStruct.InputNonInverting = LL_OPAMP_INPUT_NONINVERT_IO1;
 80048bc:	f8cd a0e0 	str.w	sl, [sp, #224]	; 0xe0
  OPAMP_InitStruct.PowerMode = LL_OPAMP_POWERMODE_NORMALSPEED;
 80048c0:	9436      	str	r4, [sp, #216]	; 0xd8
  LL_OPAMP_Init(OPAMP5, &OPAMP_InitStruct);
 80048c2:	f004 ff1b 	bl	80096fc <LL_OPAMP_Init>
  MODIFY_REG(OPAMPx->TCMR, OPAMP_TCMR_T1CMEN | OPAMP_TCMR_T8CMEN | OPAMP_TCMR_T20CMEN, InputsMuxMode);
 80048c6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  hspi4.Instance = SPI4;
 80048c8:	4846      	ldr	r0, [pc, #280]	; (80049e4 <main+0xd00>)
 80048ca:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80048ce:	62b3      	str	r3, [r6, #40]	; 0x28
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_OPAMPINTEN, InternalOutput);
 80048d0:	6933      	ldr	r3, [r6, #16]
 80048d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048d6:	6133      	str	r3, [r6, #16]
  MODIFY_REG(OPAMPx->CSR, OPAMP_CSR_USERTRIM, TrimmingMode);
 80048d8:	6933      	ldr	r3, [r6, #16]
 80048da:	f023 0310 	bic.w	r3, r3, #16
 80048de:	6133      	str	r3, [r6, #16]
 80048e0:	4b41      	ldr	r3, [pc, #260]	; (80049e8 <main+0xd04>)
 80048e2:	6003      	str	r3, [r0, #0]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 80048e4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80048e8:	60c3      	str	r3, [r0, #12]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80048ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048ee:	6183      	str	r3, [r0, #24]
  hspi4.Init.CRCPolynomial = 7;
 80048f0:	2307      	movs	r3, #7
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80048f2:	e9c0 4401 	strd	r4, r4, [r0, #4]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80048f6:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80048fa:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80048fe:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004902:	6284      	str	r4, [r0, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8004904:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8004906:	f003 f9bf 	bl	8007c88 <HAL_SPI_Init>
 800490a:	b108      	cbz	r0, 8004910 <main+0xc2c>
 800490c:	b672      	cpsid	i
  while (1)
 800490e:	e7fe      	b.n	800490e <main+0xc2a>
  huart3.Instance = USART3;
 8004910:	4c36      	ldr	r4, [pc, #216]	; (80049ec <main+0xd08>)
  huart3.Init.BaudRate = 115200;
 8004912:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 80049fc <main+0xd18>
  huart3.Init.Parity = UART_PARITY_NONE;
 8004916:	6120      	str	r0, [r4, #16]
  huart3.Init.BaudRate = 115200;
 8004918:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart3.Init.StopBits = UART_STOPBITS_1;
 800491c:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004920:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004924:	e9c4 0008 	strd	r0, r0, [r4, #32]
  huart3.Init.BaudRate = 115200;
 8004928:	e9c4 a300 	strd	sl, r3, [r4]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800492c:	62a0      	str	r0, [r4, #40]	; 0x28
  huart3.Init.Mode = UART_MODE_TX_RX;
 800492e:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004930:	4620      	mov	r0, r4
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004932:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004934:	f004 fc3c 	bl	80091b0 <HAL_UART_Init>
 8004938:	b108      	cbz	r0, 800493e <main+0xc5a>
 800493a:	b672      	cpsid	i
  while (1)
 800493c:	e7fe      	b.n	800493c <main+0xc58>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800493e:	4601      	mov	r1, r0
 8004940:	4620      	mov	r0, r4
 8004942:	f004 fca7 	bl	8009294 <HAL_UARTEx_SetTxFifoThreshold>
 8004946:	b108      	cbz	r0, 800494c <main+0xc68>
 8004948:	b672      	cpsid	i
  while (1)
 800494a:	e7fe      	b.n	800494a <main+0xc66>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800494c:	4601      	mov	r1, r0
 800494e:	4620      	mov	r0, r4
 8004950:	f004 fcca 	bl	80092e8 <HAL_UARTEx_SetRxFifoThreshold>
 8004954:	b108      	cbz	r0, 800495a <main+0xc76>
 8004956:	b672      	cpsid	i
  while (1)
 8004958:	e7fe      	b.n	8004958 <main+0xc74>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800495a:	4620      	mov	r0, r4
 800495c:	f004 fc7c 	bl	8009258 <HAL_UARTEx_DisableFifoMode>
 8004960:	4604      	mov	r4, r0
 8004962:	b108      	cbz	r0, 8004968 <main+0xc84>
 8004964:	b672      	cpsid	i
  while (1)
 8004966:	e7fe      	b.n	8004966 <main+0xc82>
  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 8004968:	e9cd 0036 	strd	r0, r0, [sp, #216]	; 0xd8
 800496c:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004970:	e9cd 0040 	strd	r0, r0, [sp, #256]	; 0x100
 8004974:	e9cd 0042 	strd	r0, r0, [sp, #264]	; 0x108
  LL_COMP_InitTypeDef COMP_InitStruct = {0};
 8004978:	903a      	str	r0, [sp, #232]	; 0xe8
  SET_BIT(RCC->AHB2ENR, Periphs);
 800497a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  LL_GPIO_Init(NTC_MOS_ADC2_IN7_COMP3_GPIO_Port, &GPIO_InitStruct);
 800497c:	4812      	ldr	r0, [pc, #72]	; (80049c8 <main+0xce4>)
 800497e:	f043 0304 	orr.w	r3, r3, #4
 8004982:	64fb      	str	r3, [r7, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004986:	f003 0304 	and.w	r3, r3, #4
 800498a:	930a      	str	r3, [sp, #40]	; 0x28
 800498c:	a93e      	add	r1, sp, #248	; 0xf8
  (void)tmpreg;
 800498e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004990:	e9cd 983e 	strd	r9, r8, [sp, #248]	; 0xf8
  LL_GPIO_Init(NTC_MOS_ADC2_IN7_COMP3_GPIO_Port, &GPIO_InitStruct);
 8004994:	f004 fdd2 	bl	800953c <LL_GPIO_Init>
  COMP_InitStruct.InputMinus = LL_COMP_INPUT_MINUS_VREFINT;
 8004998:	4b15      	ldr	r3, [pc, #84]	; (80049f0 <main+0xd0c>)
 800499a:	9337      	str	r3, [sp, #220]	; 0xdc
  COMP_InitStruct.InputPlus = LL_COMP_INPUT_PLUS_IO2;
 800499c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049a0:	9336      	str	r3, [sp, #216]	; 0xd8
  LL_COMP_Init(COMP3, &COMP_InitStruct);
 80049a2:	a936      	add	r1, sp, #216	; 0xd8
  COMP_InitStruct.InputHysteresis = LL_COMP_HYSTERESIS_30MV;
 80049a4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  LL_COMP_Init(COMP3, &COMP_InitStruct);
 80049a8:	4812      	ldr	r0, [pc, #72]	; (80049f4 <main+0xd10>)
  COMP_InitStruct.InputHysteresis = LL_COMP_HYSTERESIS_30MV;
 80049aa:	9338      	str	r3, [sp, #224]	; 0xe0
  COMP_InitStruct.OutputBlankingSource = LL_COMP_BLANKINGSRC_NONE;
 80049ac:	e9cd 4439 	strd	r4, r4, [sp, #228]	; 0xe4
  LL_COMP_Init(COMP3, &COMP_InitStruct);
 80049b0:	f004 fd50 	bl	8009454 <LL_COMP_Init>
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80049b4:	22c8      	movs	r2, #200	; 0xc8
 80049b6:	682b      	ldr	r3, [r5, #0]
 80049b8:	490f      	ldr	r1, [pc, #60]	; (80049f8 <main+0xd14>)
 80049ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80049be:	fb02 f303 	mul.w	r3, r2, r3
  __IO uint32_t wait_loop_index = 0;
 80049c2:	9409      	str	r4, [sp, #36]	; 0x24
  wait_loop_index = (LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80049c4:	9309      	str	r3, [sp, #36]	; 0x24
  while(wait_loop_index != 0)
 80049c6:	e01e      	b.n	8004a06 <main+0xd22>
 80049c8:	48000800 	.word	0x48000800
 80049cc:	00060040 	.word	0x00060040
 80049d0:	48000400 	.word	0x48000400
 80049d4:	40010304 	.word	0x40010304
 80049d8:	4001030c 	.word	0x4001030c
 80049dc:	48000c00 	.word	0x48000c00
 80049e0:	40010310 	.word	0x40010310
 80049e4:	200092dc 	.word	0x200092dc
 80049e8:	40013c00 	.word	0x40013c00
 80049ec:	2000938c 	.word	0x2000938c
 80049f0:	00800030 	.word	0x00800030
 80049f4:	40010208 	.word	0x40010208
 80049f8:	001e8480 	.word	0x001e8480
 80049fc:	40004800 	.word	0x40004800
    wait_loop_index--;
 8004a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a02:	3b01      	subs	r3, #1
 8004a04:	9309      	str	r3, [sp, #36]	; 0x24
  while(wait_loop_index != 0)
 8004a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1f9      	bne.n	8004a00 <main+0xd1c>
  hfdcan1.Instance = FDCAN1;
 8004a0c:	4820      	ldr	r0, [pc, #128]	; (8004a90 <main+0xdac>)
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004a0e:	4a21      	ldr	r2, [pc, #132]	; (8004a94 <main+0xdb0>)
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8004a10:	8203      	strh	r3, [r0, #16]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8004a12:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hfdcan1.Init.ExtFiltersNbr = 0;
 8004a16:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan1.Init.ProtocolException = DISABLE;
 8004a1a:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8004a1c:	63c3      	str	r3, [r0, #60]	; 0x3c
 8004a1e:	6853      	ldr	r3, [r2, #4]
 8004a20:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004a24:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004a26:	6813      	ldr	r3, [r2, #0]
 8004a28:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004a2c:	6013      	str	r3, [r2, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV30;
 8004a2e:	4b1a      	ldr	r3, [pc, #104]	; (8004a98 <main+0xdb4>)
  hfdcan1.Init.NominalPrescaler = 1;
 8004a30:	2701      	movs	r7, #1
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8004a32:	f04f 0a02 	mov.w	sl, #2
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV30;
 8004a36:	260f      	movs	r6, #15
 8004a38:	e9c0 3600 	strd	r3, r6, [r0]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8004a3c:	e9c0 7705 	strd	r7, r7, [r0, #20]
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8004a40:	e9c0 7709 	strd	r7, r7, [r0, #36]	; 0x24
  hfdcan1.Init.DataTimeSeg2 = 1;
 8004a44:	e9c0 770b 	strd	r7, r7, [r0, #44]	; 0x2c
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8004a48:	e9c0 aa07 	strd	sl, sl, [r0, #28]
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8004a4c:	f001 f862 	bl	8005b14 <HAL_FDCAN_Init>
 8004a50:	4603      	mov	r3, r0
 8004a52:	b108      	cbz	r0, 8004a58 <main+0xd74>
 8004a54:	b672      	cpsid	i
  while (1)
 8004a56:	e7fe      	b.n	8004a56 <main+0xd72>
  hspi3.Instance = SPI3;
 8004a58:	4810      	ldr	r0, [pc, #64]	; (8004a9c <main+0xdb8>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004a5a:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a62:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004a66:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a6a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Instance = SPI3;
 8004a6c:	4b0c      	ldr	r3, [pc, #48]	; (8004aa0 <main+0xdbc>)
 8004a6e:	6003      	str	r3, [r0, #0]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8004a70:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8004a74:	60c3      	str	r3, [r0, #12]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004a76:	f44f 7800 	mov.w	r8, #512	; 0x200
  hspi3.Init.CRCPolynomial = 7;
 8004a7a:	2307      	movs	r3, #7
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004a7c:	f8c0 8018 	str.w	r8, [r0, #24]
  hspi3.Init.CRCPolynomial = 7;
 8004a80:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004a82:	f003 f901 	bl	8007c88 <HAL_SPI_Init>
 8004a86:	4604      	mov	r4, r0
 8004a88:	b160      	cbz	r0, 8004aa4 <main+0xdc0>
 8004a8a:	b672      	cpsid	i
  while (1)
 8004a8c:	e7fe      	b.n	8004a8c <main+0xda8>
 8004a8e:	bf00      	nop
 8004a90:	200090b4 	.word	0x200090b4
 8004a94:	40010400 	.word	0x40010400
 8004a98:	40006400 	.word	0x40006400
 8004a9c:	20009278 	.word	0x20009278
 8004aa0:	40003c00 	.word	0x40003c00
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8004aa4:	4601      	mov	r1, r0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004aa6:	e9cd 002b 	strd	r0, r0, [sp, #172]	; 0xac
 8004aaa:	e9cd 002d 	strd	r0, r0, [sp, #180]	; 0xb4
 8004aae:	902f      	str	r0, [sp, #188]	; 0xbc
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	a836      	add	r0, sp, #216	; 0xd8
 8004ab4:	f005 fefa 	bl	800a8ac <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8004ab8:	2230      	movs	r2, #48	; 0x30
 8004aba:	4621      	mov	r1, r4
 8004abc:	a83e      	add	r0, sp, #248	; 0xf8
 8004abe:	f005 fef5 	bl	800a8ac <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ac2:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
 8004ac6:	e9cd 4432 	strd	r4, r4, [sp, #200]	; 0xc8
 8004aca:	e9cd 4434 	strd	r4, r4, [sp, #208]	; 0xd0
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004ace:	4dcc      	ldr	r5, [pc, #816]	; (8004e00 <main+0x111c>)
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 8004ad0:	f8df 9348 	ldr.w	r9, [pc, #840]	; 8004e1c <main+0x1138>
 8004ad4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8004ad6:	f8df b348 	ldr.w	fp, [pc, #840]	; 8004e20 <main+0x113c>
 8004ada:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004ade:	662b      	str	r3, [r5, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004ae0:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8004ae2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004ae6:	9207      	str	r2, [sp, #28]
  (void)tmpreg;
 8004ae8:	9a07      	ldr	r2, [sp, #28]
 8004aea:	a92b      	add	r1, sp, #172	; 0xac
  TIM_InitStruct.Autoreload = ISO_DCDC_PERIOD;
 8004aec:	f44f 7297 	mov.w	r2, #302	; 0x12e
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 8004af0:	4648      	mov	r0, r9
  TIM_InitStruct.Autoreload = ISO_DCDC_PERIOD;
 8004af2:	922d      	str	r2, [sp, #180]	; 0xb4
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 8004af4:	f004 fe2c 	bl	8009750 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004af8:	f8d9 2000 	ldr.w	r2, [r9]
 8004afc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b00:	f8c9 2000 	str.w	r2, [r9]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8004b04:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8004b08:	ea02 020b 	and.w	r2, r2, fp
 8004b0c:	f8c9 2008 	str.w	r2, [r9, #8]
  TIM_OC_InitStruct.CompareValue = ISO_DCDC_PERIOD*ISO_DCDC_DUTY;
 8004b10:	9639      	str	r6, [sp, #228]	; 0xe4
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004b12:	4ebc      	ldr	r6, [pc, #752]	; (8004e04 <main+0x1120>)
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004b14:	6871      	ldr	r1, [r6, #4]
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8004b16:	2060      	movs	r0, #96	; 0x60
 8004b18:	f041 0108 	orr.w	r1, r1, #8
 8004b1c:	6071      	str	r1, [r6, #4]
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8004b1e:	aa36      	add	r2, sp, #216	; 0xd8
 8004b20:	f44f 7180 	mov.w	r1, #256	; 0x100
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8004b24:	9036      	str	r0, [sp, #216]	; 0xd8
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8004b26:	4648      	mov	r0, r9
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004b28:	e9cd 4437 	strd	r4, r4, [sp, #220]	; 0xdc
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004b2c:	e9cd 443a 	strd	r4, r4, [sp, #232]	; 0xe8
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8004b30:	e9cd 443c 	strd	r4, r4, [sp, #240]	; 0xf0
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8004b34:	f004 fe72 	bl	800981c <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8004b38:	6872      	ldr	r2, [r6, #4]
 8004b3a:	f022 0204 	bic.w	r2, r2, #4
 8004b3e:	6072      	str	r2, [r6, #4]
  *         @arg @ref LL_TIM_TRGO_ENCODERCLK
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004b40:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004b44:	4ab0      	ldr	r2, [pc, #704]	; (8004e08 <main+0x1124>)
  LL_TIM_Init(TIM20, &TIM_InitStruct);
 8004b46:	4eb1      	ldr	r6, [pc, #708]	; (8004e0c <main+0x1128>)
 8004b48:	4011      	ands	r1, r2
 8004b4a:	f8c9 1004 	str.w	r1, [r9, #4]
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8004b4e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004b52:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8004b56:	f8c9 1004 	str.w	r1, [r9, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8004b5a:	f8d9 1008 	ldr.w	r1, [r9, #8]
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8004b5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b62:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004b66:	f8c9 1008 	str.w	r1, [r9, #8]
 8004b6a:	9342      	str	r3, [sp, #264]	; 0x108
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8004b6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  LL_TIM_BDTR_Init(TIM8, &TIM_BDTRInitStruct);
 8004b70:	a93e      	add	r1, sp, #248	; 0xf8
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8004b72:	9346      	str	r3, [sp, #280]	; 0x118
  LL_TIM_BDTR_Init(TIM8, &TIM_BDTRInitStruct);
 8004b74:	4648      	mov	r0, r9
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_ENABLE;
 8004b76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b7a:	9349      	str	r3, [sp, #292]	; 0x124
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8004b7c:	e9cd 443e 	strd	r4, r4, [sp, #248]	; 0xf8
  TIM_BDTRInitStruct.BreakAFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8004b80:	e9cd 4443 	strd	r4, r4, [sp, #268]	; 0x10c
  TIM_BDTRInitStruct.Break2AFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8004b84:	e9cd 4447 	strd	r4, r4, [sp, #284]	; 0x11c
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8004b88:	9440      	str	r4, [sp, #256]	; 0x100
  TIM_BDTRInitStruct.DeadTime = 0;
 8004b8a:	f88d 4104 	strb.w	r4, [sp, #260]	; 0x104
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8004b8e:	f8ad 4106 	strh.w	r4, [sp, #262]	; 0x106
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8004b92:	9445      	str	r4, [sp, #276]	; 0x114
  LL_TIM_BDTR_Init(TIM8, &TIM_BDTRInitStruct);
 8004b94:	f005 f806 	bl	8009ba4 <LL_TIM_BDTR_Init>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004b98:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  LL_GPIO_Init(PWM_isoDCDC_GPIO_Port, &GPIO_InitStruct);
 8004b9a:	489d      	ldr	r0, [pc, #628]	; (8004e10 <main+0x112c>)
 8004b9c:	f043 0302 	orr.w	r3, r3, #2
 8004ba0:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004ba2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  GPIO_InitStruct.Pin = PWM_isoDCDC_Pin;
 8004ba4:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	9308      	str	r3, [sp, #32]
  (void)tmpreg;
 8004bae:	9b08      	ldr	r3, [sp, #32]
  LL_GPIO_Init(PWM_isoDCDC_GPIO_Port, &GPIO_InitStruct);
 8004bb0:	a930      	add	r1, sp, #192	; 0xc0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 8004bb2:	230a      	movs	r3, #10
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004bb4:	e9cd a431 	strd	sl, r4, [sp, #196]	; 0xc4
  GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 8004bb8:	9335      	str	r3, [sp, #212]	; 0xd4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004bba:	e9cd 4433 	strd	r4, r4, [sp, #204]	; 0xcc
  LL_GPIO_Init(PWM_isoDCDC_GPIO_Port, &GPIO_InitStruct);
 8004bbe:	f004 fcbd 	bl	800953c <LL_GPIO_Init>
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004bc2:	e9cd 443e 	strd	r4, r4, [sp, #248]	; 0xf8
 8004bc6:	e9cd 4441 	strd	r4, r4, [sp, #260]	; 0x104
 8004bca:	9440      	str	r4, [sp, #256]	; 0x100
  SET_BIT(RCC->APB2ENR, Periphs);
 8004bcc:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8004bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bd2:	662b      	str	r3, [r5, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004bd4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8004bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bda:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
 8004bdc:	9b06      	ldr	r3, [sp, #24]
  LL_TIM_Init(TIM20, &TIM_InitStruct);
 8004bde:	a93e      	add	r1, sp, #248	; 0xf8
  TIM_InitStruct.Autoreload = (uint16_t)(TIM20_PERIOD);
 8004be0:	f645 03ef 	movw	r3, #22767	; 0x58ef
  LL_TIM_Init(TIM20, &TIM_InitStruct);
 8004be4:	4630      	mov	r0, r6
  TIM_InitStruct.Autoreload = (uint16_t)(TIM20_PERIOD);
 8004be6:	9340      	str	r3, [sp, #256]	; 0x100
  LL_TIM_Init(TIM20, &TIM_InitStruct);
 8004be8:	f004 fdb2 	bl	8009750 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004bec:	6833      	ldr	r3, [r6, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004bee:	4a86      	ldr	r2, [pc, #536]	; (8004e08 <main+0x1124>)
  LL_DAC_Init(DAC2, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8004bf0:	4988      	ldr	r1, [pc, #544]	; (8004e14 <main+0x1130>)
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004bf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bf6:	6033      	str	r3, [r6, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8004bf8:	68b3      	ldr	r3, [r6, #8]
 8004bfa:	ea03 030b 	and.w	r3, r3, fp
 8004bfe:	60b3      	str	r3, [r6, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004c00:	6873      	ldr	r3, [r6, #4]
  MODIFY_REG(DACx->MCR,
 8004c02:	f8df b220 	ldr.w	fp, [pc, #544]	; 8004e24 <main+0x1140>
 8004c06:	4013      	ands	r3, r2
 8004c08:	f043 0310 	orr.w	r3, r3, #16
 8004c0c:	6073      	str	r3, [r6, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8004c0e:	6873      	ldr	r3, [r6, #4]
 8004c10:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c14:	6073      	str	r3, [r6, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8004c16:	68b3      	ldr	r3, [r6, #8]
 8004c18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c1c:	60b3      	str	r3, [r6, #8]
  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 8004c1e:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
 8004c22:	e9cd 443e 	strd	r4, r4, [sp, #248]	; 0xf8
 8004c26:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 8004c2a:	9444      	str	r4, [sp, #272]	; 0x110
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004c2c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8004c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c32:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004c34:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8004c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3a:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8004c3c:	9b05      	ldr	r3, [sp, #20]
 8004c3e:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8004c42:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c46:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
  LL_DAC_Init(DAC2, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8004c4a:	4658      	mov	r0, fp
 8004c4c:	aa3e      	add	r2, sp, #248	; 0xf8
  DAC_InitStruct.OutputConnection = LL_DAC_OUTPUT_CONNECT_INTERNAL;
 8004c4e:	e9cd a742 	strd	sl, r7, [sp, #264]	; 0x108
  LL_DAC_Init(DAC2, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8004c52:	f004 fc19 	bl	8009488 <LL_DAC_Init>
  CLEAR_BIT(DACx->CR,
 8004c56:	f8db 3000 	ldr.w	r3, [fp]
  LL_DAC_Init(DAC3, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8004c5a:	496e      	ldr	r1, [pc, #440]	; (8004e14 <main+0x1130>)
 8004c5c:	f023 0302 	bic.w	r3, r3, #2
 8004c60:	f8cb 3000 	str.w	r3, [fp]
  CLEAR_BIT(DACx->MCR,
 8004c64:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8004c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c6c:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 8004c70:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
 8004c74:	e9cd 443e 	strd	r4, r4, [sp, #248]	; 0xf8
 8004c78:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 8004c7c:	9444      	str	r4, [sp, #272]	; 0x110
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004c7e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8004c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c84:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004c86:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  MODIFY_REG(DACx->MCR,
 8004c88:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8004c8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c90:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8004c92:	9b04      	ldr	r3, [sp, #16]
 8004c94:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8004c98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c9c:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
  LL_DAC_Init(DAC3, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8004ca0:	4658      	mov	r0, fp
 8004ca2:	aa3e      	add	r2, sp, #248	; 0xf8
  DAC_InitStruct.OutputConnection = LL_DAC_OUTPUT_CONNECT_INTERNAL;
 8004ca4:	e9cd a742 	strd	sl, r7, [sp, #264]	; 0x108
  LL_DAC_Init(DAC3, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8004ca8:	f004 fbee 	bl	8009488 <LL_DAC_Init>
  CLEAR_BIT(DACx->CR,
 8004cac:	f8db 3000 	ldr.w	r3, [fp]
  LL_DAC_Init(DAC3, LL_DAC_CHANNEL_2, &DAC_InitStruct);
 8004cb0:	4959      	ldr	r1, [pc, #356]	; (8004e18 <main+0x1134>)
 8004cb2:	f023 0302 	bic.w	r3, r3, #2
 8004cb6:	f8cb 3000 	str.w	r3, [fp]
  CLEAR_BIT(DACx->MCR,
 8004cba:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8004cbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cc2:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
  MODIFY_REG(DACx->MCR,
 8004cc6:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8004cca:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004cce:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 8004cd2:	4658      	mov	r0, fp
 8004cd4:	aa3e      	add	r2, sp, #248	; 0xf8
 8004cd6:	f004 fbd7 	bl	8009488 <LL_DAC_Init>
  CLEAR_BIT(DACx->CR,
 8004cda:	f8db 3000 	ldr.w	r3, [fp]
  LL_DAC_Init(DAC4, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8004cde:	494d      	ldr	r1, [pc, #308]	; (8004e14 <main+0x1130>)
 8004ce0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ce4:	f8cb 3000 	str.w	r3, [fp]
  CLEAR_BIT(DACx->MCR,
 8004ce8:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8004cec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cf0:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 8004cf4:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
 8004cf8:	e9cd 443e 	strd	r4, r4, [sp, #248]	; 0xf8
 8004cfc:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 8004d00:	9444      	str	r4, [sp, #272]	; 0x110
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004d02:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8004d04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d08:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004d0a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8004d0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d10:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8004d12:	9b03      	ldr	r3, [sp, #12]
  MODIFY_REG(DACx->MCR,
 8004d14:	f8db 343c 	ldr.w	r3, [fp, #1084]	; 0x43c
 8004d18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d1c:	f8cb 343c 	str.w	r3, [fp, #1084]	; 0x43c
 8004d20:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
  LL_DAC_Init(DAC4, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8004d24:	aa3e      	add	r2, sp, #248	; 0xf8
 8004d26:	4658      	mov	r0, fp
  DAC_InitStruct.OutputConnection = LL_DAC_OUTPUT_CONNECT_INTERNAL;
 8004d28:	e9cd a742 	strd	sl, r7, [sp, #264]	; 0x108
  LL_DAC_Init(DAC4, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8004d2c:	f004 fbac 	bl	8009488 <LL_DAC_Init>
  CLEAR_BIT(DACx->CR,
 8004d30:	f8db 3000 	ldr.w	r3, [fp]
  LL_DAC_Init(DAC4, LL_DAC_CHANNEL_2, &DAC_InitStruct);
 8004d34:	4938      	ldr	r1, [pc, #224]	; (8004e18 <main+0x1134>)
 8004d36:	f023 0302 	bic.w	r3, r3, #2
 8004d3a:	f8cb 3000 	str.w	r3, [fp]
  CLEAR_BIT(DACx->MCR,
 8004d3e:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8004d42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d46:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
  MODIFY_REG(DACx->MCR,
 8004d4a:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8004d4e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004d52:	aa3e      	add	r2, sp, #248	; 0xf8
 8004d54:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 8004d58:	4658      	mov	r0, fp
 8004d5a:	f004 fb95 	bl	8009488 <LL_DAC_Init>
  CLEAR_BIT(DACx->CR,
 8004d5e:	f8db 3000 	ldr.w	r3, [fp]
 8004d62:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d66:	f8cb 3000 	str.w	r3, [fp]
  CLEAR_BIT(DACx->MCR,
 8004d6a:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8004d6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d72:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8004d76:	e9cd 442b 	strd	r4, r4, [sp, #172]	; 0xac
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8004d7a:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
 8004d7e:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
 8004d82:	e9cd 443a 	strd	r4, r4, [sp, #232]	; 0xe8
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8004d86:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
 8004d8a:	e9cd 4432 	strd	r4, r4, [sp, #200]	; 0xc8
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d8e:	e9cd 4440 	strd	r4, r4, [sp, #256]	; 0x100
 8004d92:	e9cd 4442 	strd	r4, r4, [sp, #264]	; 0x108
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8004d96:	942d      	str	r4, [sp, #180]	; 0xb4
 8004d98:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8004d9c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da4:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004da8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8004daa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004dae:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004db0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8004db2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004db6:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8004db8:	9b00      	ldr	r3, [sp, #0]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004dba:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8004dbc:	f043 0301 	orr.w	r3, r3, #1
 8004dc0:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004dc2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8004dca:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004dcc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8004dce:	f043 0302 	orr.w	r3, r3, #2
 8004dd2:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004dd4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  GPIO_InitStruct.Pin = I_PV_ADC1_IN1_Pin;
 8004dd6:	973e      	str	r7, [sp, #248]	; 0xf8
 8004dd8:	f003 0302 	and.w	r3, r3, #2
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004ddc:	f04f 0b03 	mov.w	fp, #3
 8004de0:	9302      	str	r3, [sp, #8]
  LL_GPIO_Init(I_PV_ADC1_IN1_GPIO_Port, &GPIO_InitStruct);
 8004de2:	a93e      	add	r1, sp, #248	; 0xf8
 8004de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  (void)tmpreg;
 8004de8:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004dea:	f8cd b0fc 	str.w	fp, [sp, #252]	; 0xfc
  GPIO_InitStruct.Pin = VPV_ADC1_IN14_Pin;
 8004dee:	f44f 6a00 	mov.w	sl, #2048	; 0x800
  LL_GPIO_Init(I_PV_ADC1_IN1_GPIO_Port, &GPIO_InitStruct);
 8004df2:	f004 fba3 	bl	800953c <LL_GPIO_Init>
  LL_GPIO_Init(VPV_ADC1_IN14_GPIO_Port, &GPIO_InitStruct);
 8004df6:	a93e      	add	r1, sp, #248	; 0xf8
 8004df8:	4805      	ldr	r0, [pc, #20]	; (8004e10 <main+0x112c>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8004dfa:	f8cd b0fc 	str.w	fp, [sp, #252]	; 0xfc
 8004dfe:	e013      	b.n	8004e28 <main+0x1144>
 8004e00:	40021000 	.word	0x40021000
 8004e04:	40013418 	.word	0x40013418
 8004e08:	fdffff8f 	.word	0xfdffff8f
 8004e0c:	40015000 	.word	0x40015000
 8004e10:	48000400 	.word	0x48000400
 8004e14:	02110001 	.word	0x02110001
 8004e18:	354200f2 	.word	0x354200f2
 8004e1c:	40013400 	.word	0x40013400
 8004e20:	fffebff8 	.word	0xfffebff8
 8004e24:	50000c00 	.word	0x50000c00
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004e28:	9442      	str	r4, [sp, #264]	; 0x108
  GPIO_InitStruct.Pin = VPV_ADC1_IN14_Pin;
 8004e2a:	f8cd a0f8 	str.w	sl, [sp, #248]	; 0xf8
  LL_GPIO_Init(VPV_ADC1_IN14_GPIO_Port, &GPIO_InitStruct);
 8004e2e:	f004 fb85 	bl	800953c <LL_GPIO_Init>
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8004e32:	4b96      	ldr	r3, [pc, #600]	; (800508c <main+0x13a8>)
 8004e34:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8004e38:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e3c:	f042 0205 	orr.w	r2, r2, #5
 8004e40:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8004e44:	689a      	ldr	r2, [r3, #8]
 8004e46:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e4a:	f022 0210 	bic.w	r2, r2, #16
 8004e4e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8004e50:	689a      	ldr	r2, [r3, #8]
 8004e52:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004e56:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e5a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	f042 0220 	orr.w	r2, r2, #32
 8004e62:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8004e64:	689a      	ldr	r2, [r3, #8]
 8004e66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e6a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e72:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e7e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8004e86:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
 8004e8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e8e:	609a      	str	r2, [r3, #8]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8004e90:	a92b      	add	r1, sp, #172	; 0xac
 8004e92:	4628      	mov	r0, r5
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8004e94:	e9cd 442b 	strd	r4, r4, [sp, #172]	; 0xac
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8004e98:	942d      	str	r4, [sp, #180]	; 0xb4
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8004e9a:	f004 fa91 	bl	80093c0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_HRTIM_TRG1;
 8004e9e:	f44f 63d4 	mov.w	r3, #1696	; 0x6a0
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8004ea2:	a936      	add	r1, sp, #216	; 0xd8
 8004ea4:	4628      	mov	r0, r5
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_HRTIM_TRG1;
 8004ea6:	9336      	str	r3, [sp, #216]	; 0xd8
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8004ea8:	e9cd 4438 	strd	r4, r4, [sp, #224]	; 0xe0
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8004eac:	9737      	str	r7, [sp, #220]	; 0xdc
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8004eae:	f8cd b0e8 	str.w	fp, [sp, #232]	; 0xe8
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8004eb2:	943b      	str	r4, [sp, #236]	; 0xec
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8004eb4:	f004 fa9e 	bl	80093f4 <LL_ADC_REG_Init>
 8004eb8:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8004ebc:	4874      	ldr	r0, [pc, #464]	; (8005090 <main+0x13ac>)
 8004ebe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004ec2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ec6:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 8004eca:	692b      	ldr	r3, [r5, #16]
 8004ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ed0:	612b      	str	r3, [r5, #16]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8004ed2:	692b      	ldr	r3, [r5, #16]
 8004ed4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ed8:	f023 0303 	bic.w	r3, r3, #3
 8004edc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ee0:	f043 0301 	orr.w	r3, r3, #1
 8004ee4:	612b      	str	r3, [r5, #16]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | Ratio));
 8004ee6:	692b      	ldr	r3, [r5, #16]
 8004ee8:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8004eec:	f043 0320 	orr.w	r3, r3, #32
 8004ef0:	612b      	str	r3, [r5, #16]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TROVS, OverSamplingDiscont);
 8004ef2:	692b      	ldr	r3, [r5, #16]
 8004ef4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ef8:	612b      	str	r3, [r5, #16]
 8004efa:	a930      	add	r1, sp, #192	; 0xc0
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8004efc:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8004f00:	f004 fa1c 	bl	800933c <LL_ADC_CommonInit>
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
 8004f04:	68eb      	ldr	r3, [r5, #12]
  hspi1.Instance = SPI1;
 8004f06:	4863      	ldr	r0, [pc, #396]	; (8005094 <main+0x13b0>)
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004f08:	4a63      	ldr	r2, [pc, #396]	; (8005098 <main+0x13b4>)
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
 8004f0a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f12:	60eb      	str	r3, [r5, #12]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004f14:	68ab      	ldr	r3, [r5, #8]
 8004f16:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004f1a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f1e:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(ADCx->CR,
 8004f20:	68ab      	ldr	r3, [r5, #8]
 8004f22:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004f26:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f2e:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(*preg,
 8004f30:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004f32:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 8004f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f3a:	632b      	str	r3, [r5, #48]	; 0x30
  MODIFY_REG(*preg,
 8004f3c:	696b      	ldr	r3, [r5, #20]
 8004f3e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004f42:	f043 0310 	orr.w	r3, r3, #16
 8004f46:	616b      	str	r3, [r5, #20]
    CLEAR_BIT(ADCx->DIFSEL,
 8004f48:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8004f4c:	f023 0302 	bic.w	r3, r3, #2
 8004f50:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
  MODIFY_REG(*preg,
 8004f54:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004f56:	f423 33f8 	bic.w	r3, r3, #126976	; 0x1f000
 8004f5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f5e:	632b      	str	r3, [r5, #48]	; 0x30
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004f60:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f64:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004f68:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
  hspi1.Init.CRCPolynomial = 7;
 8004f6c:	2307      	movs	r3, #7
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004f6e:	f8c0 8018 	str.w	r8, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8004f72:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004f74:	6084      	str	r4, [r0, #8]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f76:	6284      	str	r4, [r0, #40]	; 0x28
  MODIFY_REG(*preg,
 8004f78:	6853      	ldr	r3, [r2, #4]
 8004f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004f82:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(ADCx->DIFSEL,
 8004f84:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004f88:	4a44      	ldr	r2, [pc, #272]	; (800509c <main+0x13b8>)
 8004f8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f8e:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
 8004f92:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004f96:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004f9a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004f9e:	2338      	movs	r3, #56	; 0x38
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004fa0:	60c2      	str	r2, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004fa2:	61c3      	str	r3, [r0, #28]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004fa4:	f002 fe70 	bl	8007c88 <HAL_SPI_Init>
 8004fa8:	b108      	cbz	r0, 8004fae <main+0x12ca>
 8004faa:	b672      	cpsid	i
  while (1)
 8004fac:	e7fe      	b.n	8004fac <main+0x12c8>
  if (MX_FATFS_Init() != APP_OK) {
 8004fae:	f004 fe41 	bl	8009c34 <MX_FATFS_Init>
 8004fb2:	b108      	cbz	r0, 8004fb8 <main+0x12d4>
 8004fb4:	b672      	cpsid	i
  while (1)
 8004fb6:	e7fe      	b.n	8004fb6 <main+0x12d2>
  TIM20->CCER |= TIM_CCER_CC2E; ////ENABLE CHANNEL 2
 8004fb8:	6a33      	ldr	r3, [r6, #32]
   OPAMP1->CSR |=OPAMP_CSR_OPAMPxEN; //OPAMP1 ENABLE   - PV CURRENT OPAMP
 8004fba:	4a39      	ldr	r2, [pc, #228]	; (80050a0 <main+0x13bc>)
  TIM20->CCER |= TIM_CCER_CC2E; ////ENABLE CHANNEL 2
 8004fbc:	f043 0310 	orr.w	r3, r3, #16
 8004fc0:	6233      	str	r3, [r6, #32]
  TIM20->CCER |= TIM_CCER_CC2NE; ////ENABLE CHANNEL 2N
 8004fc2:	6a33      	ldr	r3, [r6, #32]
 8004fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fc8:	6233      	str	r3, [r6, #32]
  TIM20->CR1  |= (TIM_CR1_ARPE | TIM_CR1_CEN); // ENABLE AUTORELOAD PRELOAD AND TIMER COUNTER
 8004fca:	6833      	ldr	r3, [r6, #0]
 8004fcc:	f043 0381 	orr.w	r3, r3, #129	; 0x81
 8004fd0:	6033      	str	r3, [r6, #0]
  TIM20->BDTR |= TIM_BDTR_MOE; //ENABLE ALL OUTPUTS
 8004fd2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8004fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fd8:	6473      	str	r3, [r6, #68]	; 0x44
   OPAMP1->CSR |=OPAMP_CSR_OPAMPxEN; //OPAMP1 ENABLE   - PV CURRENT OPAMP
 8004fda:	6811      	ldr	r1, [r2, #0]
   DAC1 ->DHR12R1 = (uint32_t)0X800; //DAC1 CHANNEL 1 SET VALUE //1.25V
 8004fdc:	4b31      	ldr	r3, [pc, #196]	; (80050a4 <main+0x13c0>)
   OPAMP1->CSR |=OPAMP_CSR_OPAMPxEN; //OPAMP1 ENABLE   - PV CURRENT OPAMP
 8004fde:	f041 0101 	orr.w	r1, r1, #1
 8004fe2:	6011      	str	r1, [r2, #0]
   OPAMP4->CSR |=OPAMP_CSR_OPAMPxEN; //OPAMP4 ENABLE   - PV VOLTAGE OPAMP
 8004fe4:	68d1      	ldr	r1, [r2, #12]
 8004fe6:	f041 0101 	orr.w	r1, r1, #1
 8004fea:	60d1      	str	r1, [r2, #12]
   DAC1 ->DHR12R1 = (uint32_t)0X800; //DAC1 CHANNEL 1 SET VALUE //1.25V
 8004fec:	f8c3 a008 	str.w	sl, [r3, #8]
   DAC1->CR |= DAC_CR_EN1; //ENABLE DAC1 CHANNEL 1
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	f042 0201 	orr.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]
   while(!(DAC1->SR & DAC_SR_DAC1RDY)); //WAIT UNTIL DAC1 CHANNEL 1 IS READY
 8004ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ffa:	0516      	lsls	r6, r2, #20
 8004ffc:	d5fc      	bpl.n	8004ff8 <main+0x1314>
   DAC1 ->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 8004ffe:	685a      	ldr	r2, [r3, #4]
   DAC1 ->DHR12R2 = (uint32_t)0XEFF; //DAC1 CHANNEL 2 SET VALUE // 11.3A
 8005000:	f640 61ff 	movw	r1, #3839	; 0xeff
   DAC1 ->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 8005004:	f042 0201 	orr.w	r2, r2, #1
 8005008:	605a      	str	r2, [r3, #4]
   DAC1 ->DHR12R2 = (uint32_t)0XEFF; //DAC1 CHANNEL 2 SET VALUE // 11.3A
 800500a:	6159      	str	r1, [r3, #20]
   DAC1->CR |= DAC_CR_EN2; //ENABLE DAC1 CHANNEL 2
 800500c:	6819      	ldr	r1, [r3, #0]
   while(!(DAC1->SR & DAC_SR_DAC2RDY)); //WAIT UNTIL DAC1 CHANNEL 2 IS READY
 800500e:	4a25      	ldr	r2, [pc, #148]	; (80050a4 <main+0x13c0>)
   DAC1->CR |= DAC_CR_EN2; //ENABLE DAC1 CHANNEL 2
 8005010:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8005014:	6019      	str	r1, [r3, #0]
   while(!(DAC1->SR & DAC_SR_DAC2RDY)); //WAIT UNTIL DAC1 CHANNEL 2 IS READY
 8005016:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005018:	011d      	lsls	r5, r3, #4
 800501a:	d5fc      	bpl.n	8005016 <main+0x1332>
   DAC1 ->SWTRIGR |= DAC_SWTRIGR_SWTRIG2;
 800501c:	6853      	ldr	r3, [r2, #4]
   DAC3 ->DHR12R1 = (uint32_t)(OVERCURRENT_MID - OVERCURRENT_THS); //DAC3 CHANNEL 2 SET VALUE
 800501e:	4822      	ldr	r0, [pc, #136]	; (80050a8 <main+0x13c4>)
 8005020:	4922      	ldr	r1, [pc, #136]	; (80050ac <main+0x13c8>)
   DAC1 ->SWTRIGR |= DAC_SWTRIGR_SWTRIG2;
 8005022:	f043 0302 	orr.w	r3, r3, #2
 8005026:	6053      	str	r3, [r2, #4]
   DAC3 ->DHR12R1 = (uint32_t)(OVERCURRENT_MID - OVERCURRENT_THS); //DAC3 CHANNEL 2 SET VALUE
 8005028:	8802      	ldrh	r2, [r0, #0]
 800502a:	8808      	ldrh	r0, [r1, #0]
 800502c:	4b20      	ldr	r3, [pc, #128]	; (80050b0 <main+0x13cc>)
 800502e:	1a11      	subs	r1, r2, r0
 8005030:	6099      	str	r1, [r3, #8]
   DAC3->CR |= DAC_CR_EN1; //ENABLE DAC1 CHANNEL 1
 8005032:	6819      	ldr	r1, [r3, #0]
 8005034:	f041 0101 	orr.w	r1, r1, #1
 8005038:	6019      	str	r1, [r3, #0]
   while(!(DAC3->SR & DAC_SR_DAC1RDY)); //WAIT UNTIL DAC3 IS READY
 800503a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800503c:	050c      	lsls	r4, r1, #20
 800503e:	d5fc      	bpl.n	800503a <main+0x1356>
   DAC3 ->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 8005040:	6859      	ldr	r1, [r3, #4]
   DAC3 ->DHR12R2 = (uint32_t)(OVERCURRENT_MID + OVERCURRENT_THS); //DAC3 CHANNEL 2 SET VALUE // 70% max val
 8005042:	4402      	add	r2, r0
   DAC3 ->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 8005044:	f041 0101 	orr.w	r1, r1, #1
 8005048:	6059      	str	r1, [r3, #4]
   DAC3 ->DHR12R2 = (uint32_t)(OVERCURRENT_MID + OVERCURRENT_THS); //DAC3 CHANNEL 2 SET VALUE // 70% max val
 800504a:	615a      	str	r2, [r3, #20]
   DAC3->CR |= DAC_CR_EN2; //ENABLE DAC3 CHANNEL 2
 800504c:	6819      	ldr	r1, [r3, #0]
   while(!(DAC3->SR & DAC_SR_DAC2RDY)); //WAIT UNTIL DAC3 CHANNEL 2 IS READY
 800504e:	4a18      	ldr	r2, [pc, #96]	; (80050b0 <main+0x13cc>)
   DAC3->CR |= DAC_CR_EN2; //ENABLE DAC3 CHANNEL 2
 8005050:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8005054:	6019      	str	r1, [r3, #0]
   while(!(DAC3->SR & DAC_SR_DAC2RDY)); //WAIT UNTIL DAC3 CHANNEL 2 IS READY
 8005056:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005058:	0119      	lsls	r1, r3, #4
 800505a:	d5fc      	bpl.n	8005056 <main+0x1372>
   DAC3 ->SWTRIGR |= DAC_SWTRIGR_SWTRIG2;
 800505c:	6851      	ldr	r1, [r2, #4]
   DAC2 ->DHR12R1 = (uint32_t)0XFF0; //0XF20 DAC2 CHANNEL 1 SET VALUE //1.73V
 800505e:	4b15      	ldr	r3, [pc, #84]	; (80050b4 <main+0x13d0>)
   DAC3 ->SWTRIGR |= DAC_SWTRIGR_SWTRIG2;
 8005060:	f041 0102 	orr.w	r1, r1, #2
   DAC2 ->DHR12R1 = (uint32_t)0XFF0; //0XF20 DAC2 CHANNEL 1 SET VALUE //1.73V
 8005064:	f44f 607f 	mov.w	r0, #4080	; 0xff0
   DAC3 ->SWTRIGR |= DAC_SWTRIGR_SWTRIG2;
 8005068:	6051      	str	r1, [r2, #4]
   DAC2 ->DHR12R1 = (uint32_t)0XFF0; //0XF20 DAC2 CHANNEL 1 SET VALUE //1.73V
 800506a:	6098      	str	r0, [r3, #8]
   DAC2->CR |= DAC_CR_EN1; //ENABLE DAC2 CHANNEL 1
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	f042 0201 	orr.w	r2, r2, #1
 8005072:	601a      	str	r2, [r3, #0]
   while(!(DAC2->SR & DAC_SR_DAC1RDY)); //WAIT UNTIL DAC2 CHANNEL 1 IS READY
 8005074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005076:	0512      	lsls	r2, r2, #20
 8005078:	d5fc      	bpl.n	8005074 <main+0x1390>
   DAC2 ->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	f042 0201 	orr.w	r2, r2, #1
   InitControl(ClosedLoop);
 8005080:	2002      	movs	r0, #2
   DAC2 ->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 8005082:	605a      	str	r2, [r3, #4]
   InitControl(ClosedLoop);
 8005084:	f7fc f8a0 	bl	80011c8 <InitControl>
  while (1)
 8005088:	e7fe      	b.n	8005088 <main+0x13a4>
 800508a:	bf00      	nop
 800508c:	40020000 	.word	0x40020000
 8005090:	50000300 	.word	0x50000300
 8005094:	20009214 	.word	0x20009214
 8005098:	50000014 	.word	0x50000014
 800509c:	40013000 	.word	0x40013000
 80050a0:	40010300 	.word	0x40010300
 80050a4:	50000800 	.word	0x50000800
 80050a8:	20000016 	.word	0x20000016
 80050ac:	20000018 	.word	0x20000018
 80050b0:	50001000 	.word	0x50001000
 80050b4:	50000c00 	.word	0x50000c00

080050b8 <delay_us>:
{
 80050b8:	b082      	sub	sp, #8
  for (num = 0; num < delay_us; num++)
 80050ba:	2300      	movs	r3, #0
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	9b00      	ldr	r3, [sp, #0]
 80050c0:	4298      	cmp	r0, r3
 80050c2:	d90f      	bls.n	80050e4 <delay_us+0x2c>
    t = 11;
 80050c4:	220b      	movs	r2, #11
 80050c6:	9201      	str	r2, [sp, #4]
    while (t != 0)
 80050c8:	9b01      	ldr	r3, [sp, #4]
 80050ca:	b12b      	cbz	r3, 80050d8 <delay_us+0x20>
      t--;
 80050cc:	9b01      	ldr	r3, [sp, #4]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	9301      	str	r3, [sp, #4]
    while (t != 0)
 80050d2:	9b01      	ldr	r3, [sp, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1f9      	bne.n	80050cc <delay_us+0x14>
  for (num = 0; num < delay_us; num++)
 80050d8:	9b00      	ldr	r3, [sp, #0]
 80050da:	3301      	adds	r3, #1
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	9b00      	ldr	r3, [sp, #0]
 80050e0:	4283      	cmp	r3, r0
 80050e2:	d3f0      	bcc.n	80050c6 <delay_us+0xe>
}
 80050e4:	b002      	add	sp, #8
 80050e6:	4770      	bx	lr

080050e8 <Error_Handler>:
 80050e8:	b672      	cpsid	i
  while (1)
 80050ea:	e7fe      	b.n	80050ea <Error_Handler+0x2>

080050ec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050ec:	4b0b      	ldr	r3, [pc, #44]	; (800511c <HAL_MspInit+0x30>)
 80050ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80050f0:	f042 0201 	orr.w	r2, r2, #1
 80050f4:	661a      	str	r2, [r3, #96]	; 0x60
 80050f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80050f8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050fa:	f002 0201 	and.w	r2, r2, #1
 80050fe:	9200      	str	r2, [sp, #0]
 8005100:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005102:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005104:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005108:	659a      	str	r2, [r3, #88]	; 0x58
 800510a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005110:	9301      	str	r3, [sp, #4]
 8005112:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005114:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 8005116:	f002 bc67 	b.w	80079e8 <HAL_PWREx_DisableUCPDDeadBattery>
 800511a:	bf00      	nop
 800511c:	40021000 	.word	0x40021000

08005120 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8005120:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hfdcan->Instance==FDCAN1)
 8005122:	4a1b      	ldr	r2, [pc, #108]	; (8005190 <HAL_FDCAN_MspInit+0x70>)
 8005124:	6801      	ldr	r1, [r0, #0]
{
 8005126:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005128:	2300      	movs	r3, #0
  if(hfdcan->Instance==FDCAN1)
 800512a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800512c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8005130:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005134:	9307      	str	r3, [sp, #28]
  if(hfdcan->Instance==FDCAN1)
 8005136:	d001      	beq.n	800513c <HAL_FDCAN_MspInit+0x1c>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8005138:	b008      	add	sp, #32
 800513a:	bd10      	pop	{r4, pc}
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_FDCANSEL, FDCANxSource);
 800513c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005140:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005144:	2003      	movs	r0, #3
 8005146:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800514a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800514e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8005156:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005158:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800515c:	659a      	str	r2, [r3, #88]	; 0x58
 800515e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005160:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8005164:	9201      	str	r2, [sp, #4]
 8005166:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005168:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800516a:	f042 0208 	orr.w	r2, r2, #8
 800516e:	64da      	str	r2, [r3, #76]	; 0x4c
 8005170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005172:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005174:	f003 0308 	and.w	r3, r3, #8
 8005178:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800517a:	4806      	ldr	r0, [pc, #24]	; (8005194 <HAL_FDCAN_MspInit+0x74>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800517c:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800517e:	2309      	movs	r3, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005180:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005182:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005184:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8005186:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005188:	f000 fdfe 	bl	8005d88 <HAL_GPIO_Init>
}
 800518c:	b008      	add	sp, #32
 800518e:	bd10      	pop	{r4, pc}
 8005190:	40006400 	.word	0x40006400
 8005194:	48000c00 	.word	0x48000c00

08005198 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8005198:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hhrtim->Instance==HRTIM1)
 800519a:	4b39      	ldr	r3, [pc, #228]	; (8005280 <HAL_HRTIM_MspInit+0xe8>)
 800519c:	6802      	ldr	r2, [r0, #0]
{
 800519e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051a0:	2400      	movs	r4, #0
  if(hhrtim->Instance==HRTIM1)
 80051a2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051a4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80051a8:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80051ac:	9407      	str	r4, [sp, #28]
  if(hhrtim->Instance==HRTIM1)
 80051ae:	d001      	beq.n	80051b4 <HAL_HRTIM_MspInit+0x1c>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 80051b0:	b008      	add	sp, #32
 80051b2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80051b4:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
 80051b8:	4605      	mov	r5, r0
 80051ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    hdma_hrtim1_d.Instance = DMA1_Channel7;
 80051bc:	4e31      	ldr	r6, [pc, #196]	; (8005284 <HAL_HRTIM_MspInit+0xec>)
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80051be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80051c2:	661a      	str	r2, [r3, #96]	; 0x60
 80051c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80051c6:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80051ca:	9201      	str	r2, [sp, #4]
 80051cc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051d0:	f042 0201 	orr.w	r2, r2, #1
 80051d4:	64da      	str	r2, [r3, #76]	; 0x4c
 80051d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80051de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051e2:	9303      	str	r3, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051e4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051e6:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ec:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051ee:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80051f0:	230d      	movs	r3, #13
 80051f2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051f4:	f000 fdc8 	bl	8005d88 <HAL_GPIO_Init>
    hdma_hrtim1_d.Init.Request = DMA_REQUEST_HRTIM1_D;
 80051f8:	4a23      	ldr	r2, [pc, #140]	; (8005288 <HAL_HRTIM_MspInit+0xf0>)
 80051fa:	2363      	movs	r3, #99	; 0x63
 80051fc:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_hrtim1_d.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005200:	2210      	movs	r2, #16
    hdma_hrtim1_d.Init.MemInc = DMA_MINC_ENABLE;
 8005202:	2380      	movs	r3, #128	; 0x80
    hdma_hrtim1_d.Init.PeriphInc = DMA_PINC_DISABLE;
 8005204:	e9c6 2402 	strd	r2, r4, [r6, #8]
    hdma_hrtim1_d.Init.MemInc = DMA_MINC_ENABLE;
 8005208:	6133      	str	r3, [r6, #16]
    hdma_hrtim1_d.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800520a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800520e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005212:	e9c6 2305 	strd	r2, r3, [r6, #20]
    if (HAL_DMA_Init(&hdma_hrtim1_d) != HAL_OK)
 8005216:	4630      	mov	r0, r6
    hdma_hrtim1_d.Init.Mode = DMA_CIRCULAR;
 8005218:	2320      	movs	r3, #32
    hdma_hrtim1_d.Init.Priority = DMA_PRIORITY_LOW;
 800521a:	e9c6 3407 	strd	r3, r4, [r6, #28]
    if (HAL_DMA_Init(&hdma_hrtim1_d) != HAL_OK)
 800521e:	f000 fb4d 	bl	80058bc <HAL_DMA_Init>
 8005222:	bb38      	cbnz	r0, 8005274 <HAL_HRTIM_MspInit+0xdc>
    hdma_hrtim1_f.Instance = DMA1_Channel8;
 8005224:	4c19      	ldr	r4, [pc, #100]	; (800528c <HAL_HRTIM_MspInit+0xf4>)
 8005226:	491a      	ldr	r1, [pc, #104]	; (8005290 <HAL_HRTIM_MspInit+0xf8>)
    __HAL_LINKDMA(hhrtim,hdmaTimerD,hdma_hrtim1_d);
 8005228:	f8c5 60f0 	str.w	r6, [r5, #240]	; 0xf0
    hdma_hrtim1_f.Init.Request = DMA_REQUEST_HRTIM1_F;
 800522c:	2265      	movs	r2, #101	; 0x65
 800522e:	e9c4 1200 	strd	r1, r2, [r4]
    hdma_hrtim1_f.Init.PeriphInc = DMA_PINC_DISABLE;
 8005232:	2300      	movs	r3, #0
    hdma_hrtim1_f.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005234:	2110      	movs	r1, #16
    hdma_hrtim1_f.Init.MemInc = DMA_MINC_ENABLE;
 8005236:	2280      	movs	r2, #128	; 0x80
    hdma_hrtim1_f.Init.PeriphInc = DMA_PINC_DISABLE;
 8005238:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_hrtim1_f.Init.MemInc = DMA_MINC_ENABLE;
 800523c:	6122      	str	r2, [r4, #16]
    hdma_hrtim1_f.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800523e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005242:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005246:	e9c4 1205 	strd	r1, r2, [r4, #20]
    if (HAL_DMA_Init(&hdma_hrtim1_f) != HAL_OK)
 800524a:	4620      	mov	r0, r4
    hdma_hrtim1_f.Init.Mode = DMA_CIRCULAR;
 800524c:	2220      	movs	r2, #32
    hdma_hrtim1_f.Init.Priority = DMA_PRIORITY_LOW;
 800524e:	e9c4 2307 	strd	r2, r3, [r4, #28]
    __HAL_LINKDMA(hhrtim,hdmaTimerD,hdma_hrtim1_d);
 8005252:	62b5      	str	r5, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_hrtim1_f) != HAL_OK)
 8005254:	f000 fb32 	bl	80058bc <HAL_DMA_Init>
 8005258:	b978      	cbnz	r0, 800527a <HAL_HRTIM_MspInit+0xe2>
    HAL_NVIC_SetPriority(HRTIM1_TIMF_IRQn, 0, 0);
 800525a:	2200      	movs	r2, #0
 800525c:	4611      	mov	r1, r2
 800525e:	204a      	movs	r0, #74	; 0x4a
    __HAL_LINKDMA(hhrtim,hdmaTimerF,hdma_hrtim1_f);
 8005260:	f8c5 40f8 	str.w	r4, [r5, #248]	; 0xf8
 8005264:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(HRTIM1_TIMF_IRQn, 0, 0);
 8005266:	f000 fac3 	bl	80057f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMF_IRQn);
 800526a:	204a      	movs	r0, #74	; 0x4a
 800526c:	f000 fafe 	bl	800586c <HAL_NVIC_EnableIRQ>
}
 8005270:	b008      	add	sp, #32
 8005272:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8005274:	f7ff ff38 	bl	80050e8 <Error_Handler>
 8005278:	e7d4      	b.n	8005224 <HAL_HRTIM_MspInit+0x8c>
      Error_Handler();
 800527a:	f7ff ff35 	bl	80050e8 <Error_Handler>
 800527e:	e7ec      	b.n	800525a <HAL_HRTIM_MspInit+0xc2>
 8005280:	40016800 	.word	0x40016800
 8005284:	20008e74 	.word	0x20008e74
 8005288:	40020080 	.word	0x40020080
 800528c:	20008ed4 	.word	0x20008ed4
 8005290:	40020094 	.word	0x40020094

08005294 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8005294:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hhrtim->Instance==HRTIM1)
 8005296:	4b2d      	ldr	r3, [pc, #180]	; (800534c <HAL_HRTIM_MspPostInit+0xb8>)
 8005298:	6802      	ldr	r2, [r0, #0]
{
 800529a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800529c:	2400      	movs	r4, #0
  if(hhrtim->Instance==HRTIM1)
 800529e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052a0:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80052a4:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80052a8:	9407      	str	r4, [sp, #28]
  if(hhrtim->Instance==HRTIM1)
 80052aa:	d001      	beq.n	80052b0 <HAL_HRTIM_MspPostInit+0x1c>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 80052ac:	b009      	add	sp, #36	; 0x24
 80052ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052b0:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052b4:	2503      	movs	r5, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052b8:	4825      	ldr	r0, [pc, #148]	; (8005350 <HAL_HRTIM_MspPostInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052ba:	f042 0202 	orr.w	r2, r2, #2
 80052be:	64da      	str	r2, [r3, #76]	; 0x4c
 80052c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052c2:	f002 0202 	and.w	r2, r2, #2
 80052c6:	9200      	str	r2, [sp, #0]
 80052c8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052cc:	f042 0204 	orr.w	r2, r2, #4
 80052d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80052d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052d4:	f002 0204 	and.w	r2, r2, #4
 80052d8:	9201      	str	r2, [sp, #4]
 80052da:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052de:	f042 0201 	orr.w	r2, r2, #1
 80052e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80052e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052e6:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052e8:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ec:	2602      	movs	r6, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052ee:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80052f0:	270d      	movs	r7, #13
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052f2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80052f4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80052f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052fa:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052fc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80052fe:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005300:	f000 fd42 	bl	8005d88 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005304:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005306:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005308:	4812      	ldr	r0, [pc, #72]	; (8005354 <HAL_HRTIM_MspPostInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800530a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800530c:	e9cd 6404 	strd	r6, r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8005310:	e9cd 5706 	strd	r5, r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005314:	f000 fd38 	bl	8005d88 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005318:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800531a:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800531e:	480d      	ldr	r0, [pc, #52]	; (8005354 <HAL_HRTIM_MspPostInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005320:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005322:	e9cd 6404 	strd	r6, r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_HRTIM1;
 8005326:	e9cd 5506 	strd	r5, r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800532a:	f000 fd2d 	bl	8005d88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800532e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005332:	a903      	add	r1, sp, #12
 8005334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005338:	e9cd 4505 	strd	r4, r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800533c:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 800533e:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8005340:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005342:	f000 fd21 	bl	8005d88 <HAL_GPIO_Init>
}
 8005346:	b009      	add	sp, #36	; 0x24
 8005348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800534a:	bf00      	nop
 800534c:	40016800 	.word	0x40016800
 8005350:	48000400 	.word	0x48000400
 8005354:	48000800 	.word	0x48000800

08005358 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 800535c:	6803      	ldr	r3, [r0, #0]
 800535e:	4a76      	ldr	r2, [pc, #472]	; (8005538 <HAL_SPI_MspInit+0x1e0>)
{
 8005360:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005362:	2400      	movs	r4, #0
  if(hspi->Instance==SPI1)
 8005364:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005366:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800536a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800536e:	940b      	str	r4, [sp, #44]	; 0x2c
  if(hspi->Instance==SPI1)
 8005370:	d00a      	beq.n	8005388 <HAL_SPI_MspInit+0x30>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 8005372:	4a72      	ldr	r2, [pc, #456]	; (800553c <HAL_SPI_MspInit+0x1e4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	4605      	mov	r5, r0
 8005378:	d02a      	beq.n	80053d0 <HAL_SPI_MspInit+0x78>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
  else if(hspi->Instance==SPI4)
 800537a:	4a71      	ldr	r2, [pc, #452]	; (8005540 <HAL_SPI_MspInit+0x1e8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	f000 8097 	beq.w	80054b0 <HAL_SPI_MspInit+0x158>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8005382:	b00c      	add	sp, #48	; 0x30
 8005384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005388:	4b6e      	ldr	r3, [pc, #440]	; (8005544 <HAL_SPI_MspInit+0x1ec>)
 800538a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800538c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005390:	661a      	str	r2, [r3, #96]	; 0x60
 8005392:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005394:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005398:	9200      	str	r2, [sp, #0]
 800539a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800539c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800539e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80053a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80053a6:	201c      	movs	r0, #28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80053a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ac:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ae:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80053b0:	eb0d 0100 	add.w	r1, sp, r0
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80053b4:	9007      	str	r0, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80053b6:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80053b8:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80053ba:	4863      	ldr	r0, [pc, #396]	; (8005548 <HAL_SPI_MspInit+0x1f0>)
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80053bc:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80053be:	e9cd 4208 	strd	r4, r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80053c2:	e9cd 430a 	strd	r4, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80053c6:	f000 fcdf 	bl	8005d88 <HAL_GPIO_Init>
}
 80053ca:	b00c      	add	sp, #48	; 0x30
 80053cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 80053d0:	4b5c      	ldr	r3, [pc, #368]	; (8005544 <HAL_SPI_MspInit+0x1ec>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053d2:	485e      	ldr	r0, [pc, #376]	; (800554c <HAL_SPI_MspInit+0x1f4>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80053d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_spi3_rx.Instance = DMA1_Channel4;
 80053d6:	4e5e      	ldr	r6, [pc, #376]	; (8005550 <HAL_SPI_MspInit+0x1f8>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80053d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053dc:	659a      	str	r2, [r3, #88]	; 0x58
 80053de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80053e0:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80053e4:	9202      	str	r2, [sp, #8]
 80053e6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053ea:	f042 0204 	orr.w	r2, r2, #4
 80053ee:	64da      	str	r2, [r3, #76]	; 0x4c
 80053f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053f2:	f002 0204 	and.w	r2, r2, #4
 80053f6:	9203      	str	r2, [sp, #12]
 80053f8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80053fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005400:	64da      	str	r2, [r3, #76]	; 0x4c
 8005402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005404:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005408:	2702      	movs	r7, #2
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800540a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800540c:	f04f 0806 	mov.w	r8, #6
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005410:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005414:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005416:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005418:	e9cd 780a 	strd	r7, r8, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800541c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800541e:	9708      	str	r7, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005420:	f000 fcb2 	bl	8005d88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005424:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005428:	4847      	ldr	r0, [pc, #284]	; (8005548 <HAL_SPI_MspInit+0x1f0>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800542a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800542c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800542e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005432:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005434:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005436:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005438:	f000 fca6 	bl	8005d88 <HAL_GPIO_Init>
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 800543c:	4a45      	ldr	r2, [pc, #276]	; (8005554 <HAL_SPI_MspInit+0x1fc>)
 800543e:	230e      	movs	r3, #14
 8005440:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005444:	2380      	movs	r3, #128	; 0x80
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005446:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800544a:	6133      	str	r3, [r6, #16]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800544c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005450:	e9c6 1305 	strd	r1, r3, [r6, #20]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8005454:	2220      	movs	r2, #32
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005456:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800545a:	4630      	mov	r0, r6
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800545c:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005460:	e9c6 2307 	strd	r2, r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8005464:	f000 fa2a 	bl	80058bc <HAL_DMA_Init>
 8005468:	2800      	cmp	r0, #0
 800546a:	d15f      	bne.n	800552c <HAL_SPI_MspInit+0x1d4>
    hdma_spi3_tx.Instance = DMA1_Channel6;
 800546c:	4c3a      	ldr	r4, [pc, #232]	; (8005558 <HAL_SPI_MspInit+0x200>)
 800546e:	4b3b      	ldr	r3, [pc, #236]	; (800555c <HAL_SPI_MspInit+0x204>)
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8005470:	65ae      	str	r6, [r5, #88]	; 0x58
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8005472:	210f      	movs	r1, #15
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8005474:	62b5      	str	r5, [r6, #40]	; 0x28
    hdma_spi4_tx.Instance = DMA1_Channel3;
 8005476:	6023      	str	r3, [r4, #0]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005478:	2310      	movs	r3, #16
 800547a:	e9c4 1301 	strd	r1, r3, [r4, #4]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800547e:	2200      	movs	r2, #0
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005480:	2380      	movs	r3, #128	; 0x80
 8005482:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005486:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800548a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800548e:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hdma_spi4_tx.Init.Mode = DMA_CIRCULAR;
 8005492:	2220      	movs	r2, #32
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005494:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005498:	e9c4 2307 	strd	r2, r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800549c:	4620      	mov	r0, r4
 800549e:	f000 fa0d 	bl	80058bc <HAL_DMA_Init>
 80054a2:	2800      	cmp	r0, #0
 80054a4:	d13f      	bne.n	8005526 <HAL_SPI_MspInit+0x1ce>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 80054a6:	656c      	str	r4, [r5, #84]	; 0x54
 80054a8:	62a5      	str	r5, [r4, #40]	; 0x28
}
 80054aa:	b00c      	add	sp, #48	; 0x30
 80054ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 80054b0:	4b24      	ldr	r3, [pc, #144]	; (8005544 <HAL_SPI_MspInit+0x1ec>)
    hdma_spi4_rx.Instance = DMA1_Channel2;
 80054b2:	4e2b      	ldr	r6, [pc, #172]	; (8005560 <HAL_SPI_MspInit+0x208>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 80054b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80054b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054ba:	661a      	str	r2, [r3, #96]	; 0x60
 80054bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80054be:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80054c2:	9205      	str	r2, [sp, #20]
 80054c4:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80054c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054c8:	f042 0210 	orr.w	r2, r2, #16
 80054cc:	64da      	str	r2, [r3, #76]	; 0x4c
 80054ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d0:	f003 0310 	and.w	r3, r3, #16
 80054d4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80054d6:	2264      	movs	r2, #100	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054d8:	2302      	movs	r3, #2
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80054da:	9806      	ldr	r0, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80054dc:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80054de:	4821      	ldr	r0, [pc, #132]	; (8005564 <HAL_SPI_MspInit+0x20c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054e0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80054e2:	2205      	movs	r2, #5
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80054e4:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80054e6:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80054ea:	f000 fc4d 	bl	8005d88 <HAL_GPIO_Init>
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 80054ee:	4a1e      	ldr	r2, [pc, #120]	; (8005568 <HAL_SPI_MspInit+0x210>)
 80054f0:	236a      	movs	r3, #106	; 0x6a
 80054f2:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80054f6:	2380      	movs	r3, #128	; 0x80
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80054f8:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80054fc:	6133      	str	r3, [r6, #16]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80054fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005502:	e9c6 1305 	strd	r1, r3, [r6, #20]
    hdma_spi4_rx.Init.Mode = DMA_CIRCULAR;
 8005506:	2220      	movs	r2, #32
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005508:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800550c:	4630      	mov	r0, r6
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800550e:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005512:	e9c6 2307 	strd	r2, r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8005516:	f000 f9d1 	bl	80058bc <HAL_DMA_Init>
 800551a:	b950      	cbnz	r0, 8005532 <HAL_SPI_MspInit+0x1da>
    hdma_spi4_tx.Instance = DMA1_Channel3;
 800551c:	4c13      	ldr	r4, [pc, #76]	; (800556c <HAL_SPI_MspInit+0x214>)
 800551e:	4b14      	ldr	r3, [pc, #80]	; (8005570 <HAL_SPI_MspInit+0x218>)
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8005520:	65ae      	str	r6, [r5, #88]	; 0x58
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8005522:	216b      	movs	r1, #107	; 0x6b
 8005524:	e7a6      	b.n	8005474 <HAL_SPI_MspInit+0x11c>
      Error_Handler();
 8005526:	f7ff fddf 	bl	80050e8 <Error_Handler>
 800552a:	e7bc      	b.n	80054a6 <HAL_SPI_MspInit+0x14e>
      Error_Handler();
 800552c:	f7ff fddc 	bl	80050e8 <Error_Handler>
 8005530:	e79c      	b.n	800546c <HAL_SPI_MspInit+0x114>
      Error_Handler();
 8005532:	f7ff fdd9 	bl	80050e8 <Error_Handler>
 8005536:	e7f1      	b.n	800551c <HAL_SPI_MspInit+0x1c4>
 8005538:	40013000 	.word	0x40013000
 800553c:	40003c00 	.word	0x40003c00
 8005540:	40013c00 	.word	0x40013c00
 8005544:	40021000 	.word	0x40021000
 8005548:	48001800 	.word	0x48001800
 800554c:	48000800 	.word	0x48000800
 8005550:	20008f34 	.word	0x20008f34
 8005554:	40020044 	.word	0x40020044
 8005558:	20008f94 	.word	0x20008f94
 800555c:	4002006c 	.word	0x4002006c
 8005560:	20008ff4 	.word	0x20008ff4
 8005564:	48001000 	.word	0x48001000
 8005568:	4002001c 	.word	0x4002001c
 800556c:	20009054 	.word	0x20009054
 8005570:	40020030 	.word	0x40020030

08005574 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005574:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8005576:	4a18      	ldr	r2, [pc, #96]	; (80055d8 <HAL_TIM_Base_MspInit+0x64>)
 8005578:	6801      	ldr	r1, [r0, #0]
{
 800557a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800557c:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 800557e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005580:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8005584:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005588:	9307      	str	r3, [sp, #28]
  if(htim_base->Instance==TIM1)
 800558a:	d001      	beq.n	8005590 <HAL_TIM_Base_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800558c:	b008      	add	sp, #32
 800558e:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005590:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005594:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005598:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    __HAL_RCC_TIM1_CLK_ENABLE();
 800559c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800559e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055a2:	661a      	str	r2, [r3, #96]	; 0x60
 80055a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80055a6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80055aa:	9201      	str	r2, [sp, #4]
 80055ac:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80055ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055b0:	f042 0210 	orr.w	r2, r2, #16
 80055b4:	64da      	str	r2, [r3, #76]	; 0x4c
 80055b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80055b8:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80055ba:	f003 0310 	and.w	r3, r3, #16
 80055be:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80055c0:	4806      	ldr	r0, [pc, #24]	; (80055dc <HAL_TIM_Base_MspInit+0x68>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80055c2:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80055c4:	2302      	movs	r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80055c6:	2412      	movs	r4, #18
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80055c8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80055ca:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80055cc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80055ce:	f000 fbdb 	bl	8005d88 <HAL_GPIO_Init>
}
 80055d2:	b008      	add	sp, #32
 80055d4:	bd10      	pop	{r4, pc}
 80055d6:	bf00      	nop
 80055d8:	40012c00 	.word	0x40012c00
 80055dc:	48001000 	.word	0x48001000

080055e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80055e0:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 80055e2:	4a13      	ldr	r2, [pc, #76]	; (8005630 <HAL_TIM_MspPostInit+0x50>)
 80055e4:	6801      	ldr	r1, [r0, #0]
{
 80055e6:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055e8:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80055ea:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055ec:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80055f0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80055f4:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 80055f6:	d001      	beq.n	80055fc <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80055f8:	b007      	add	sp, #28
 80055fa:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80055fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005600:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005604:	2402      	movs	r4, #2
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005606:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005608:	480a      	ldr	r0, [pc, #40]	; (8005634 <HAL_TIM_MspPostInit+0x54>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800560a:	f042 0210 	orr.w	r2, r2, #16
 800560e:	64da      	str	r2, [r3, #76]	; 0x4c
 8005610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005612:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005614:	f003 0310 	and.w	r3, r3, #16
 8005618:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800561a:	f44f 5540 	mov.w	r5, #12288	; 0x3000
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800561e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005620:	e9cd 5401 	strd	r5, r4, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005624:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005626:	f000 fbaf 	bl	8005d88 <HAL_GPIO_Init>
}
 800562a:	b007      	add	sp, #28
 800562c:	bd30      	pop	{r4, r5, pc}
 800562e:	bf00      	nop
 8005630:	40012c00 	.word	0x40012c00
 8005634:	48001000 	.word	0x48001000

08005638 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005638:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART3)
 800563a:	4a1b      	ldr	r2, [pc, #108]	; (80056a8 <HAL_UART_MspInit+0x70>)
 800563c:	6801      	ldr	r1, [r0, #0]
{
 800563e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005640:	2300      	movs	r3, #0
  if(huart->Instance==USART3)
 8005642:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005644:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8005648:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800564c:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART3)
 800564e:	d001      	beq.n	8005654 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005650:	b008      	add	sp, #32
 8005652:	bd10      	pop	{r4, pc}
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8005654:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005658:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800565c:	f44f 7040 	mov.w	r0, #768	; 0x300
 8005660:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005664:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8005668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    __HAL_RCC_USART3_CLK_ENABLE();
 800566c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800566e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005672:	659a      	str	r2, [r3, #88]	; 0x58
 8005674:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005676:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800567a:	9201      	str	r2, [sp, #4]
 800567c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800567e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005680:	f042 0208 	orr.w	r2, r2, #8
 8005684:	64da      	str	r2, [r3, #76]	; 0x4c
 8005686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005688:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800568a:	f003 0308 	and.w	r3, r3, #8
 800568e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005690:	4806      	ldr	r0, [pc, #24]	; (80056ac <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005692:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005694:	2307      	movs	r3, #7
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005696:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005698:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800569a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800569c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800569e:	f000 fb73 	bl	8005d88 <HAL_GPIO_Init>
}
 80056a2:	b008      	add	sp, #32
 80056a4:	bd10      	pop	{r4, pc}
 80056a6:	bf00      	nop
 80056a8:	40004800 	.word	0x40004800
 80056ac:	48000c00 	.word	0x48000c00

080056b0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80056b0:	e7fe      	b.n	80056b0 <NMI_Handler>
 80056b2:	bf00      	nop

080056b4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80056b4:	e7fe      	b.n	80056b4 <HardFault_Handler>
 80056b6:	bf00      	nop

080056b8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80056b8:	e7fe      	b.n	80056b8 <MemManage_Handler>
 80056ba:	bf00      	nop

080056bc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80056bc:	e7fe      	b.n	80056bc <BusFault_Handler>
 80056be:	bf00      	nop

080056c0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80056c0:	e7fe      	b.n	80056c0 <UsageFault_Handler>
 80056c2:	bf00      	nop

080056c4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop

080056c8 <DebugMon_Handler>:
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop

080056cc <PendSV_Handler>:
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop

080056d0 <SysTick_Handler>:
//	  {
//	    FatFsCnt = 0;
//	    SDTimer_Handler();
//	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80056d0:	f000 b86a 	b.w	80057a8 <HAL_IncTick>

080056d4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80056d4:	4a03      	ldr	r2, [pc, #12]	; (80056e4 <SystemInit+0x10>)
 80056d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80056da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80056e2:	4770      	bx	lr
 80056e4:	e000ed00 	.word	0xe000ed00

080056e8 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 80056e8:	480d      	ldr	r0, [pc, #52]	; (8005720 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80056ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80056ec:	480d      	ldr	r0, [pc, #52]	; (8005724 <LoopForever+0x6>)
  ldr r1, =_edata
 80056ee:	490e      	ldr	r1, [pc, #56]	; (8005728 <LoopForever+0xa>)
  ldr r2, =_sidata
 80056f0:	4a0e      	ldr	r2, [pc, #56]	; (800572c <LoopForever+0xe>)
  movs r3, #0
 80056f2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80056f4:	e002      	b.n	80056fc <LoopCopyDataInit>

080056f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80056f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80056f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80056fa:	3304      	adds	r3, #4

080056fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80056fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80056fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005700:	d3f9      	bcc.n	80056f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005702:	4a0b      	ldr	r2, [pc, #44]	; (8005730 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005704:	4c0b      	ldr	r4, [pc, #44]	; (8005734 <LoopForever+0x16>)
  movs r3, #0
 8005706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005708:	e001      	b.n	800570e <LoopFillZerobss>

0800570a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800570a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800570c:	3204      	adds	r2, #4

0800570e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800570e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005710:	d3fb      	bcc.n	800570a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005712:	f7ff ffdf 	bl	80056d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005716:	f005 f8a5 	bl	800a864 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800571a:	f7fe fae3 	bl	8003ce4 <main>

0800571e <LoopForever>:

LoopForever:
    b LoopForever
 800571e:	e7fe      	b.n	800571e <LoopForever>
  ldr   r0, =_estack
 8005720:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005728:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 800572c:	0800ae48 	.word	0x0800ae48
  ldr r2, =_sbss
 8005730:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8005734:	20009440 	.word	0x20009440

08005738 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005738:	e7fe      	b.n	8005738 <ADC1_2_IRQHandler>
	...

0800573c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800573c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800573e:	4b0f      	ldr	r3, [pc, #60]	; (800577c <HAL_InitTick+0x40>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	b90b      	cbnz	r3, 8005748 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8005744:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8005746:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005748:	490d      	ldr	r1, [pc, #52]	; (8005780 <HAL_InitTick+0x44>)
 800574a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800574e:	4605      	mov	r5, r0
 8005750:	fbb2 f3f3 	udiv	r3, r2, r3
 8005754:	6808      	ldr	r0, [r1, #0]
 8005756:	fbb0 f0f3 	udiv	r0, r0, r3
 800575a:	f000 f895 	bl	8005888 <HAL_SYSTICK_Config>
 800575e:	4604      	mov	r4, r0
 8005760:	2800      	cmp	r0, #0
 8005762:	d1ef      	bne.n	8005744 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005764:	2d0f      	cmp	r5, #15
 8005766:	d8ed      	bhi.n	8005744 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005768:	4602      	mov	r2, r0
 800576a:	4629      	mov	r1, r5
 800576c:	f04f 30ff 	mov.w	r0, #4294967295
 8005770:	f000 f83e 	bl	80057f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005774:	4b03      	ldr	r3, [pc, #12]	; (8005784 <HAL_InitTick+0x48>)
 8005776:	4620      	mov	r0, r4
 8005778:	601d      	str	r5, [r3, #0]
}
 800577a:	bd38      	pop	{r3, r4, r5, pc}
 800577c:	20000020 	.word	0x20000020
 8005780:	2000001c 	.word	0x2000001c
 8005784:	20000024 	.word	0x20000024

08005788 <HAL_Init>:
{
 8005788:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800578a:	2003      	movs	r0, #3
 800578c:	f000 f81e 	bl	80057cc <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005790:	200f      	movs	r0, #15
 8005792:	f7ff ffd3 	bl	800573c <HAL_InitTick>
 8005796:	b110      	cbz	r0, 800579e <HAL_Init+0x16>
    status = HAL_ERROR;
 8005798:	2401      	movs	r4, #1
}
 800579a:	4620      	mov	r0, r4
 800579c:	bd10      	pop	{r4, pc}
 800579e:	4604      	mov	r4, r0
    HAL_MspInit();
 80057a0:	f7ff fca4 	bl	80050ec <HAL_MspInit>
}
 80057a4:	4620      	mov	r0, r4
 80057a6:	bd10      	pop	{r4, pc}

080057a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80057a8:	4a03      	ldr	r2, [pc, #12]	; (80057b8 <HAL_IncTick+0x10>)
 80057aa:	4904      	ldr	r1, [pc, #16]	; (80057bc <HAL_IncTick+0x14>)
 80057ac:	6813      	ldr	r3, [r2, #0]
 80057ae:	6809      	ldr	r1, [r1, #0]
 80057b0:	440b      	add	r3, r1
 80057b2:	6013      	str	r3, [r2, #0]
}
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	2000941c 	.word	0x2000941c
 80057bc:	20000020 	.word	0x20000020

080057c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80057c0:	4b01      	ldr	r3, [pc, #4]	; (80057c8 <HAL_GetTick+0x8>)
 80057c2:	6818      	ldr	r0, [r3, #0]
}
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	2000941c 	.word	0x2000941c

080057cc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057cc:	4907      	ldr	r1, [pc, #28]	; (80057ec <HAL_NVIC_SetPriorityGrouping+0x20>)
 80057ce:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057d0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057d2:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057da:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057dc:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057de:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80057e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80057e6:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	e000ed00 	.word	0xe000ed00

080057f0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057f0:	4b1c      	ldr	r3, [pc, #112]	; (8005864 <HAL_NVIC_SetPriority+0x74>)
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057f8:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057fa:	f1c3 0e07 	rsb	lr, r3, #7
 80057fe:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005802:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005806:	bf28      	it	cs
 8005808:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800580c:	f1bc 0f06 	cmp.w	ip, #6
 8005810:	d91b      	bls.n	800584a <HAL_NVIC_SetPriority+0x5a>
 8005812:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005814:	f04f 3cff 	mov.w	ip, #4294967295
 8005818:	fa0c fc03 	lsl.w	ip, ip, r3
 800581c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005820:	f04f 3cff 	mov.w	ip, #4294967295
 8005824:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005828:	ea21 010c 	bic.w	r1, r1, ip
 800582c:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800582e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005830:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8005834:	db0c      	blt.n	8005850 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005836:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800583a:	0109      	lsls	r1, r1, #4
 800583c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005840:	b2c9      	uxtb	r1, r1
 8005842:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005846:	f85d fb04 	ldr.w	pc, [sp], #4
 800584a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800584c:	4613      	mov	r3, r2
 800584e:	e7e7      	b.n	8005820 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005850:	4b05      	ldr	r3, [pc, #20]	; (8005868 <HAL_NVIC_SetPriority+0x78>)
 8005852:	f000 000f 	and.w	r0, r0, #15
 8005856:	0109      	lsls	r1, r1, #4
 8005858:	4403      	add	r3, r0
 800585a:	b2c9      	uxtb	r1, r1
 800585c:	7619      	strb	r1, [r3, #24]
 800585e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005862:	bf00      	nop
 8005864:	e000ed00 	.word	0xe000ed00
 8005868:	e000ecfc 	.word	0xe000ecfc

0800586c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800586c:	2800      	cmp	r0, #0
 800586e:	db08      	blt.n	8005882 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005870:	4a04      	ldr	r2, [pc, #16]	; (8005884 <HAL_NVIC_EnableIRQ+0x18>)
 8005872:	0941      	lsrs	r1, r0, #5
 8005874:	2301      	movs	r3, #1
 8005876:	f000 001f 	and.w	r0, r0, #31
 800587a:	fa03 f000 	lsl.w	r0, r3, r0
 800587e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005882:	4770      	bx	lr
 8005884:	e000e100 	.word	0xe000e100

08005888 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005888:	3801      	subs	r0, #1
 800588a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800588e:	d210      	bcs.n	80058b2 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005890:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005892:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005896:	4c08      	ldr	r4, [pc, #32]	; (80058b8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005898:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800589a:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800589e:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058a2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058a4:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058a6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058a8:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80058aa:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058ae:	6119      	str	r1, [r3, #16]
 80058b0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80058b2:	2001      	movs	r0, #1
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	e000ed00 	.word	0xe000ed00

080058bc <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80058bc:	2800      	cmp	r0, #0
 80058be:	d07a      	beq.n	80059b6 <HAL_DMA_Init+0xfa>
{
 80058c0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80058c2:	4b3e      	ldr	r3, [pc, #248]	; (80059bc <HAL_DMA_Init+0x100>)
 80058c4:	6804      	ldr	r4, [r0, #0]
 80058c6:	429c      	cmp	r4, r3
 80058c8:	d95f      	bls.n	800598a <HAL_DMA_Init+0xce>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80058ca:	4a3d      	ldr	r2, [pc, #244]	; (80059c0 <HAL_DMA_Init+0x104>)
 80058cc:	4b3d      	ldr	r3, [pc, #244]	; (80059c4 <HAL_DMA_Init+0x108>)
 80058ce:	4422      	add	r2, r4
 80058d0:	fba3 3202 	umull	r3, r2, r3, r2
 80058d4:	0912      	lsrs	r2, r2, #4
    hdma->DmaBaseAddress = DMA2;
 80058d6:	4b3c      	ldr	r3, [pc, #240]	; (80059c8 <HAL_DMA_Init+0x10c>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80058d8:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA2;
 80058da:	e9c0 3210 	strd	r3, r2, [r0, #64]	; 0x40
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80058de:	e9d0 5302 	ldrd	r5, r3, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 80058e2:	2102      	movs	r1, #2
 80058e4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058e8:	6901      	ldr	r1, [r0, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058ea:	69c6      	ldr	r6, [r0, #28]
  tmp |=  hdma->Init.Direction        |
 80058ec:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058ee:	430b      	orrs	r3, r1
 80058f0:	6941      	ldr	r1, [r0, #20]
 80058f2:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058f4:	6981      	ldr	r1, [r0, #24]
 80058f6:	430b      	orrs	r3, r1
 80058f8:	4333      	orrs	r3, r6
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80058fa:	fa5f fc84 	uxtb.w	ip, r4
 80058fe:	4e31      	ldr	r6, [pc, #196]	; (80059c4 <HAL_DMA_Init+0x108>)
  tmp = hdma->Instance->CCR;
 8005900:	6821      	ldr	r1, [r4, #0]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005902:	f1ac 0c08 	sub.w	ip, ip, #8
 8005906:	fba6 6c0c 	umull	r6, ip, r6, ip
          hdma->Init.Mode                | hdma->Init.Priority;
 800590a:	6a06      	ldr	r6, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800590c:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8005910:	f021 0170 	bic.w	r1, r1, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8005914:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 8005916:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 8005918:	6023      	str	r3, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800591a:	4e2c      	ldr	r6, [pc, #176]	; (80059cc <HAL_DMA_Init+0x110>)
 800591c:	4b27      	ldr	r3, [pc, #156]	; (80059bc <HAL_DMA_Init+0x100>)
 800591e:	492c      	ldr	r1, [pc, #176]	; (80059d0 <HAL_DMA_Init+0x114>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005920:	f3cc 1c04 	ubfx	ip, ip, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005924:	429c      	cmp	r4, r3
 8005926:	bf98      	it	ls
 8005928:	4631      	movls	r1, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800592a:	f04f 0e01 	mov.w	lr, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800592e:	4c29      	ldr	r4, [pc, #164]	; (80059d4 <HAL_DMA_Init+0x118>)
 8005930:	64c4      	str	r4, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005932:	fa0e f30c 	lsl.w	r3, lr, ip
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005936:	1854      	adds	r4, r2, r1
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005938:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800593c:	6503      	str	r3, [r0, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800593e:	6484      	str	r4, [r0, #72]	; 0x48
 8005940:	ea4f 0292 	mov.w	r2, r2, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005944:	d02c      	beq.n	80059a0 <HAL_DMA_Init+0xe4>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005946:	6845      	ldr	r5, [r0, #4]
 8005948:	b2ec      	uxtb	r4, r5
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800594a:	3d01      	subs	r5, #1
 800594c:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800594e:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005952:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005956:	d829      	bhi.n	80059ac <HAL_DMA_Init+0xf0>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005958:	4b1f      	ldr	r3, [pc, #124]	; (80059d8 <HAL_DMA_Init+0x11c>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800595a:	4920      	ldr	r1, [pc, #128]	; (80059dc <HAL_DMA_Init+0x120>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800595c:	4423      	add	r3, r4

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800595e:	3c01      	subs	r4, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005960:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005962:	f004 041f 	and.w	r4, r4, #31
 8005966:	fa0e f404 	lsl.w	r4, lr, r4
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800596a:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800596c:	e9c0 3115 	strd	r3, r1, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005970:	65c4      	str	r4, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005972:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005974:	4b1a      	ldr	r3, [pc, #104]	; (80059e0 <HAL_DMA_Init+0x124>)
 8005976:	645c      	str	r4, [r3, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005978:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 800597a:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800597c:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 800597e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8005982:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  return HAL_OK;
 8005986:	4618      	mov	r0, r3
}
 8005988:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800598a:	4a16      	ldr	r2, [pc, #88]	; (80059e4 <HAL_DMA_Init+0x128>)
 800598c:	4b0d      	ldr	r3, [pc, #52]	; (80059c4 <HAL_DMA_Init+0x108>)
 800598e:	4422      	add	r2, r4
 8005990:	fba3 3202 	umull	r3, r2, r3, r2
 8005994:	0912      	lsrs	r2, r2, #4
    hdma->DmaBaseAddress = DMA1;
 8005996:	4b14      	ldr	r3, [pc, #80]	; (80059e8 <HAL_DMA_Init+0x12c>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005998:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 800599a:	e9c0 3210 	strd	r3, r2, [r0, #64]	; 0x40
 800599e:	e79e      	b.n	80058de <HAL_DMA_Init+0x22>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80059a0:	2400      	movs	r4, #0
 80059a2:	6044      	str	r4, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80059a4:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059a8:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    hdma->DMAmuxRequestGen = 0U;
 80059ac:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 80059ae:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80059b2:	65c3      	str	r3, [r0, #92]	; 0x5c
 80059b4:	e7e0      	b.n	8005978 <HAL_DMA_Init+0xbc>
    return HAL_ERROR;
 80059b6:	2001      	movs	r0, #1
}
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	40020407 	.word	0x40020407
 80059c0:	bffdfbf8 	.word	0xbffdfbf8
 80059c4:	cccccccd 	.word	0xcccccccd
 80059c8:	40020400 	.word	0x40020400
 80059cc:	40020800 	.word	0x40020800
 80059d0:	40020820 	.word	0x40020820
 80059d4:	40020880 	.word	0x40020880
 80059d8:	1000823f 	.word	0x1000823f
 80059dc:	40020940 	.word	0x40020940
 80059e0:	40020900 	.word	0x40020900
 80059e4:	bffdfff8 	.word	0xbffdfff8
 80059e8:	40020000 	.word	0x40020000

080059ec <HAL_DMA_Start_IT>:
{
 80059ec:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 80059ee:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 80059f2:	2c01      	cmp	r4, #1
 80059f4:	d051      	beq.n	8005a9a <HAL_DMA_Start_IT+0xae>
 80059f6:	2401      	movs	r4, #1
 80059f8:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 80059fc:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8005a00:	2c01      	cmp	r4, #1
 8005a02:	d005      	beq.n	8005a10 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8005a04:	2300      	movs	r3, #0
 8005a06:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8005a0a:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8005a0c:	2002      	movs	r0, #2
}
 8005a0e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a10:	2402      	movs	r4, #2
 8005a12:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a16:	2400      	movs	r4, #0
 8005a18:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8005a1a:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a1c:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    __HAL_DMA_DISABLE(hdma);
 8005a1e:	6825      	ldr	r5, [r4, #0]
 8005a20:	f025 0501 	bic.w	r5, r5, #1
 8005a24:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a26:	e9d0 7514 	ldrd	r7, r5, [r0, #80]	; 0x50
 8005a2a:	6077      	str	r7, [r6, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 8005a2c:	b115      	cbz	r5, 8005a34 <HAL_DMA_Start_IT+0x48>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a2e:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	; 0x58
 8005a32:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a34:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8005a36:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8005a38:	f006 0c1f 	and.w	ip, r6, #31
 8005a3c:	2601      	movs	r6, #1
 8005a3e:	fa06 f60c 	lsl.w	r6, r6, ip
 8005a42:	607e      	str	r6, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8005a44:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a46:	6883      	ldr	r3, [r0, #8]
 8005a48:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 8005a4a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->Instance->CPAR = DstAddress;
 8005a4c:	bf0b      	itete	eq
 8005a4e:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8005a50:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8005a52:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8005a54:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8005a56:	b1bb      	cbz	r3, 8005a88 <HAL_DMA_Start_IT+0x9c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a58:	6823      	ldr	r3, [r4, #0]
 8005a5a:	f043 030e 	orr.w	r3, r3, #14
 8005a5e:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005a60:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	03d2      	lsls	r2, r2, #15
 8005a66:	d503      	bpl.n	8005a70 <HAL_DMA_Start_IT+0x84>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a6e:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8005a70:	b11d      	cbz	r5, 8005a7a <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005a72:	682b      	ldr	r3, [r5, #0]
 8005a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a78:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8005a80:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8005a82:	6023      	str	r3, [r4, #0]
}
 8005a84:	bcf0      	pop	{r4, r5, r6, r7}
 8005a86:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a88:	6823      	ldr	r3, [r4, #0]
 8005a8a:	f023 0304 	bic.w	r3, r3, #4
 8005a8e:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005a90:	6823      	ldr	r3, [r4, #0]
 8005a92:	f043 030a 	orr.w	r3, r3, #10
 8005a96:	6023      	str	r3, [r4, #0]
 8005a98:	e7e2      	b.n	8005a60 <HAL_DMA_Start_IT+0x74>
  __HAL_LOCK(hdma);
 8005a9a:	2002      	movs	r0, #2
}
 8005a9c:	bcf0      	pop	{r4, r5, r6, r7}
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005aa0:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8005aa4:	2a02      	cmp	r2, #2
{
 8005aa6:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005aa8:	d009      	beq.n	8005abe <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005aaa:	2204      	movs	r2, #4
 8005aac:	63c2      	str	r2, [r0, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8005aae:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8005ab0:	2200      	movs	r2, #0
    status = HAL_ERROR;
 8005ab2:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 8005ab4:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8005ab8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8005abc:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005abe:	6802      	ldr	r2, [r0, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ac0:	6c59      	ldr	r1, [r3, #68]	; 0x44
{
 8005ac2:	b430      	push	{r4, r5}
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ac4:	6c84      	ldr	r4, [r0, #72]	; 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ac6:	6810      	ldr	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ac8:	6c1d      	ldr	r5, [r3, #64]	; 0x40
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005aca:	f020 000e 	bic.w	r0, r0, #14
 8005ace:	6010      	str	r0, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ad0:	6820      	ldr	r0, [r4, #0]
 8005ad2:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8005ad6:	6020      	str	r0, [r4, #0]
     __HAL_DMA_DISABLE(hdma);
 8005ad8:	6810      	ldr	r0, [r2, #0]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ada:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
     __HAL_DMA_DISABLE(hdma);
 8005adc:	f020 0001 	bic.w	r0, r0, #1
 8005ae0:	6010      	str	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ae2:	f001 011f 	and.w	r1, r1, #31
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	408a      	lsls	r2, r1
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005aea:	e9d3 1014 	ldrd	r1, r0, [r3, #80]	; 0x50
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005aee:	606a      	str	r2, [r5, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005af0:	6061      	str	r1, [r4, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 8005af2:	b138      	cbz	r0, 8005b04 <HAL_DMA_Abort+0x64>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005af4:	6802      	ldr	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005af6:	e9d3 1416 	ldrd	r1, r4, [r3, #88]	; 0x58
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005afa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005afe:	6002      	str	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b00:	604c      	str	r4, [r1, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b02:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8005b04:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8005b06:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 8005b08:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8005b0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8005b10:	bc30      	pop	{r4, r5}
 8005b12:	4770      	bx	lr

08005b14 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005b14:	2800      	cmp	r0, #0
 8005b16:	f000 8109 	beq.w	8005d2c <HAL_FDCAN_Init+0x218>
{
 8005b1a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005b1e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8005b22:	4604      	mov	r4, r0
 8005b24:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d073      	beq.n	8005c14 <HAL_FDCAN_Init+0x100>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005b2c:	6822      	ldr	r2, [r4, #0]
 8005b2e:	6993      	ldr	r3, [r2, #24]
 8005b30:	f023 0310 	bic.w	r3, r3, #16
 8005b34:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b36:	f7ff fe43 	bl	80057c0 <HAL_GetTick>
 8005b3a:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005b3c:	e004      	b.n	8005b48 <HAL_FDCAN_Init+0x34>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005b3e:	f7ff fe3f 	bl	80057c0 <HAL_GetTick>
 8005b42:	1b43      	subs	r3, r0, r5
 8005b44:	2b0a      	cmp	r3, #10
 8005b46:	d85b      	bhi.n	8005c00 <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	699a      	ldr	r2, [r3, #24]
 8005b4c:	0712      	lsls	r2, r2, #28
 8005b4e:	d4f6      	bmi.n	8005b3e <HAL_FDCAN_Init+0x2a>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005b50:	699a      	ldr	r2, [r3, #24]
 8005b52:	f042 0201 	orr.w	r2, r2, #1
 8005b56:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b58:	f7ff fe32 	bl	80057c0 <HAL_GetTick>
 8005b5c:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005b5e:	e004      	b.n	8005b6a <HAL_FDCAN_Init+0x56>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005b60:	f7ff fe2e 	bl	80057c0 <HAL_GetTick>
 8005b64:	1b40      	subs	r0, r0, r5
 8005b66:	280a      	cmp	r0, #10
 8005b68:	d84a      	bhi.n	8005c00 <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005b6a:	6822      	ldr	r2, [r4, #0]
 8005b6c:	6993      	ldr	r3, [r2, #24]
 8005b6e:	07db      	lsls	r3, r3, #31
 8005b70:	d5f6      	bpl.n	8005b60 <HAL_FDCAN_Init+0x4c>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005b72:	6993      	ldr	r3, [r2, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005b74:	4976      	ldr	r1, [pc, #472]	; (8005d50 <HAL_FDCAN_Init+0x23c>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005b76:	f043 0302 	orr.w	r3, r3, #2
  if (hfdcan->Instance == FDCAN1)
 8005b7a:	428a      	cmp	r2, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005b7c:	6193      	str	r3, [r2, #24]
  if (hfdcan->Instance == FDCAN1)
 8005b7e:	f000 80d0 	beq.w	8005d22 <HAL_FDCAN_Init+0x20e>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005b82:	7c23      	ldrb	r3, [r4, #16]
 8005b84:	2b01      	cmp	r3, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005b86:	6993      	ldr	r3, [r2, #24]
 8005b88:	bf0c      	ite	eq
 8005b8a:	f023 0340 	biceq.w	r3, r3, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005b8e:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8005b92:	6193      	str	r3, [r2, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005b94:	7c63      	ldrb	r3, [r4, #17]
 8005b96:	2b01      	cmp	r3, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005b98:	6993      	ldr	r3, [r2, #24]
 8005b9a:	bf0c      	ite	eq
 8005b9c:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005ba0:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
 8005ba4:	6193      	str	r3, [r2, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005ba6:	7ca3      	ldrb	r3, [r4, #18]
 8005ba8:	2b01      	cmp	r3, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005baa:	6993      	ldr	r3, [r2, #24]
 8005bac:	bf0c      	ite	eq
 8005bae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005bb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005bb6:	6193      	str	r3, [r2, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005bb8:	6993      	ldr	r3, [r2, #24]
 8005bba:	68a0      	ldr	r0, [r4, #8]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005bbc:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bc2:	4303      	orrs	r3, r0
 8005bc4:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005bc6:	6993      	ldr	r3, [r2, #24]
 8005bc8:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 8005bcc:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005bce:	6913      	ldr	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005bd0:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005bd2:	f023 0310 	bic.w	r3, r3, #16
 8005bd6:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005bd8:	d021      	beq.n	8005c1e <HAL_FDCAN_Init+0x10a>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005bda:	b321      	cbz	r1, 8005c26 <HAL_FDCAN_Init+0x112>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005bdc:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005bde:	6993      	ldr	r3, [r2, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005be0:	f000 80b1 	beq.w	8005d46 <HAL_FDCAN_Init+0x232>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005be8:	6193      	str	r3, [r2, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005bea:	6913      	ldr	r3, [r2, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005bec:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005bee:	f043 0310 	orr.w	r3, r3, #16
 8005bf2:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005bf4:	d117      	bne.n	8005c26 <HAL_FDCAN_Init+0x112>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005bf6:	6993      	ldr	r3, [r2, #24]
 8005bf8:	f043 0320 	orr.w	r3, r3, #32
 8005bfc:	6193      	str	r3, [r2, #24]
 8005bfe:	e012      	b.n	8005c26 <HAL_FDCAN_Init+0x112>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005c00:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005c02:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005c04:	f043 0301 	orr.w	r3, r3, #1
 8005c08:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005c0a:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8005c0e:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8005c10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8005c14:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8005c18:	f7ff fa82 	bl	8005120 <HAL_FDCAN_MspInit>
 8005c1c:	e786      	b.n	8005b2c <HAL_FDCAN_Init+0x18>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005c1e:	6993      	ldr	r3, [r2, #24]
 8005c20:	f043 0304 	orr.w	r3, r3, #4
 8005c24:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c26:	e9d4 1306 	ldrd	r1, r3, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005c2a:	3b01      	subs	r3, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c2c:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005c2e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c30:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005c34:	6a21      	ldr	r1, [r4, #32]
 8005c36:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005c38:	430b      	orrs	r3, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005c3a:	6961      	ldr	r1, [r4, #20]
 8005c3c:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005c3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005c42:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c46:	61d3      	str	r3, [r2, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005c48:	d10e      	bne.n	8005c68 <HAL_FDCAN_Init+0x154>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005c4a:	e9d4 030b 	ldrd	r0, r3, [r4, #44]	; 0x2c
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005c4e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005c50:	3b01      	subs	r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005c52:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005c54:	011b      	lsls	r3, r3, #4
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005c56:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005c58:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005c5c:	430b      	orrs	r3, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005c5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005c60:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005c62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005c66:	60d3      	str	r3, [r2, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005c68:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8005c6c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
{
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005c6e:	4939      	ldr	r1, [pc, #228]	; (8005d54 <HAL_FDCAN_Init+0x240>)
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005c70:	4303      	orrs	r3, r0
  if (hfdcan->Instance == FDCAN2)
 8005c72:	428a      	cmp	r2, r1
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005c74:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  if (hfdcan->Instance == FDCAN2)
 8005c78:	d05a      	beq.n	8005d30 <HAL_FDCAN_Init+0x21c>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8005c7a:	4b37      	ldr	r3, [pc, #220]	; (8005d58 <HAL_FDCAN_Init+0x244>)
 8005c7c:	4e37      	ldr	r6, [pc, #220]	; (8005d5c <HAL_FDCAN_Init+0x248>)
 8005c7e:	4f38      	ldr	r7, [pc, #224]	; (8005d60 <HAL_FDCAN_Init+0x24c>)
 8005c80:	4d38      	ldr	r5, [pc, #224]	; (8005d64 <HAL_FDCAN_Init+0x250>)
 8005c82:	4839      	ldr	r0, [pc, #228]	; (8005d68 <HAL_FDCAN_Init+0x254>)
 8005c84:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c88:	428a      	cmp	r2, r1
 8005c8a:	bf18      	it	ne
 8005c8c:	4699      	movne	r9, r3
 8005c8e:	f1a3 0318 	sub.w	r3, r3, #24
 8005c92:	bf18      	it	ne
 8005c94:	461e      	movne	r6, r3
 8005c96:	f1a3 03d8 	sub.w	r3, r3, #216	; 0xd8
 8005c9a:	bf18      	it	ne
 8005c9c:	461f      	movne	r7, r3
 8005c9e:	f501 517d 	add.w	r1, r1, #16192	; 0x3f40
 8005ca2:	f1a3 03d8 	sub.w	r3, r3, #216	; 0xd8
 8005ca6:	f101 0110 	add.w	r1, r1, #16
 8005caa:	bf18      	it	ne
 8005cac:	469c      	movne	ip, r3
 8005cae:	f1a3 0340 	sub.w	r3, r3, #64	; 0x40
 8005cb2:	bf0c      	ite	eq
 8005cb4:	468c      	moveq	ip, r1
 8005cb6:	4698      	movne	r8, r3
 8005cb8:	f1a1 0140 	sub.w	r1, r1, #64	; 0x40
 8005cbc:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8005cc0:	bf04      	itt	eq
 8005cc2:	4688      	moveq	r8, r1
 8005cc4:	46a9      	moveq	r9, r5
 8005cc6:	f501 7138 	add.w	r1, r1, #736	; 0x2e0
 8005cca:	bf18      	it	ne
 8005ccc:	4619      	movne	r1, r3
 8005cce:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8005cd2:	bf08      	it	eq
 8005cd4:	4603      	moveq	r3, r0

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005cd6:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005cda:	6423      	str	r3, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005cdc:	f420 1ef8 	bic.w	lr, r0, #2031616	; 0x1f0000
 8005ce0:	6b60      	ldr	r0, [r4, #52]	; 0x34

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005ce2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005ce4:	ea4e 4000 	orr.w	r0, lr, r0, lsl #16
 8005ce8:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005cec:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005cf0:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005cf4:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8005cf8:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 8005cfc:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005d00:	e9c4 c712 	strd	ip, r7, [r4, #72]	; 0x48

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005d04:	e9c4 6914 	strd	r6, r9, [r4, #80]	; 0x50

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f843 2b04 	str.w	r2, [r3], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005d0e:	428b      	cmp	r3, r1
 8005d10:	d3fb      	bcc.n	8005d0a <HAL_FDCAN_Init+0x1f6>
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005d12:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005d14:	6622      	str	r2, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005d16:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 8005d1a:	65a2      	str	r2, [r4, #88]	; 0x58
  return HAL_OK;
 8005d1c:	2000      	movs	r0, #0
}
 8005d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005d22:	4b12      	ldr	r3, [pc, #72]	; (8005d6c <HAL_FDCAN_Init+0x258>)
 8005d24:	6861      	ldr	r1, [r4, #4]
 8005d26:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
 8005d2a:	e72a      	b.n	8005b82 <HAL_FDCAN_Init+0x6e>
    return HAL_ERROR;
 8005d2c:	2001      	movs	r0, #1
}
 8005d2e:	4770      	bx	lr
 8005d30:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8005d7c <HAL_FDCAN_Init+0x268>
 8005d34:	4e0e      	ldr	r6, [pc, #56]	; (8005d70 <HAL_FDCAN_Init+0x25c>)
 8005d36:	4f0f      	ldr	r7, [pc, #60]	; (8005d74 <HAL_FDCAN_Init+0x260>)
 8005d38:	f8df c044 	ldr.w	ip, [pc, #68]	; 8005d80 <HAL_FDCAN_Init+0x26c>
 8005d3c:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8005d84 <HAL_FDCAN_Init+0x270>
 8005d40:	4909      	ldr	r1, [pc, #36]	; (8005d68 <HAL_FDCAN_Init+0x254>)
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005d42:	4b0d      	ldr	r3, [pc, #52]	; (8005d78 <HAL_FDCAN_Init+0x264>)
 8005d44:	e7c7      	b.n	8005cd6 <HAL_FDCAN_Init+0x1c2>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005d46:	f043 0320 	orr.w	r3, r3, #32
 8005d4a:	6193      	str	r3, [r2, #24]
 8005d4c:	e76b      	b.n	8005c26 <HAL_FDCAN_Init+0x112>
 8005d4e:	bf00      	nop
 8005d50:	40006400 	.word	0x40006400
 8005d54:	40006800 	.word	0x40006800
 8005d58:	4000a678 	.word	0x4000a678
 8005d5c:	4000ad00 	.word	0x4000ad00
 8005d60:	4000ac28 	.word	0x4000ac28
 8005d64:	4000ad18 	.word	0x4000ad18
 8005d68:	4000aaa0 	.word	0x4000aaa0
 8005d6c:	40006000 	.word	0x40006000
 8005d70:	4000a9b0 	.word	0x4000a9b0
 8005d74:	4000a8d8 	.word	0x4000a8d8
 8005d78:	4000a750 	.word	0x4000a750
 8005d7c:	4000a9c8 	.word	0x4000a9c8
 8005d80:	4000a800 	.word	0x4000a800
 8005d84:	4000a7c0 	.word	0x4000a7c0

08005d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d8c:	680c      	ldr	r4, [r1, #0]
{
 8005d8e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d90:	2c00      	cmp	r4, #0
 8005d92:	f000 8083 	beq.w	8005e9c <HAL_GPIO_Init+0x114>
 8005d96:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d9a:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 8005f74 <HAL_GPIO_Init+0x1ec>
  uint32_t position = 0x00U;
 8005d9e:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005da0:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005da4:	4689      	mov	r9, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005da6:	fa0b f503 	lsl.w	r5, fp, r3
    if (iocurrent != 0x00u)
 8005daa:	ea15 0804 	ands.w	r8, r5, r4
 8005dae:	d06f      	beq.n	8005e90 <HAL_GPIO_Init+0x108>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005db0:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8005db4:	f007 0203 	and.w	r2, r7, #3
 8005db8:	1e51      	subs	r1, r2, #1
 8005dba:	2901      	cmp	r1, #1
 8005dbc:	d971      	bls.n	8005ea2 <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005dbe:	2a03      	cmp	r2, #3
 8005dc0:	f040 80b0 	bne.w	8005f24 <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005dc4:	fa02 f20c 	lsl.w	r2, r2, ip
 8005dc8:	43d1      	mvns	r1, r2
      temp = GPIOx->MODER;
 8005dca:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005dcc:	4029      	ands	r1, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005dce:	430a      	orrs	r2, r1
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005dd0:	f417 3f40 	tst.w	r7, #196608	; 0x30000
      GPIOx->MODER = temp;
 8005dd4:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005dd6:	d05b      	beq.n	8005e90 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dd8:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 8005ddc:	f042 0201 	orr.w	r2, r2, #1
 8005de0:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
 8005de4:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 8005de8:	f002 0201 	and.w	r2, r2, #1
 8005dec:	9203      	str	r2, [sp, #12]
 8005dee:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005df0:	f023 0203 	bic.w	r2, r3, #3
 8005df4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005df8:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005dfc:	f003 0503 	and.w	r5, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8005e00:	6891      	ldr	r1, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e02:	00ad      	lsls	r5, r5, #2
 8005e04:	260f      	movs	r6, #15
 8005e06:	fa06 fe05 	lsl.w	lr, r6, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e0a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e0e:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e12:	d019      	beq.n	8005e48 <HAL_GPIO_Init+0xc0>
 8005e14:	4e51      	ldr	r6, [pc, #324]	; (8005f5c <HAL_GPIO_Init+0x1d4>)
 8005e16:	42b0      	cmp	r0, r6
 8005e18:	f000 808f 	beq.w	8005f3a <HAL_GPIO_Init+0x1b2>
 8005e1c:	4e50      	ldr	r6, [pc, #320]	; (8005f60 <HAL_GPIO_Init+0x1d8>)
 8005e1e:	42b0      	cmp	r0, r6
 8005e20:	f000 808f 	beq.w	8005f42 <HAL_GPIO_Init+0x1ba>
 8005e24:	4e4f      	ldr	r6, [pc, #316]	; (8005f64 <HAL_GPIO_Init+0x1dc>)
 8005e26:	42b0      	cmp	r0, r6
 8005e28:	f000 8081 	beq.w	8005f2e <HAL_GPIO_Init+0x1a6>
 8005e2c:	4e4e      	ldr	r6, [pc, #312]	; (8005f68 <HAL_GPIO_Init+0x1e0>)
 8005e2e:	42b0      	cmp	r0, r6
 8005e30:	f000 808d 	beq.w	8005f4e <HAL_GPIO_Init+0x1c6>
 8005e34:	4e4d      	ldr	r6, [pc, #308]	; (8005f6c <HAL_GPIO_Init+0x1e4>)
 8005e36:	42b0      	cmp	r0, r6
 8005e38:	bf0c      	ite	eq
 8005e3a:	f04f 0e05 	moveq.w	lr, #5
 8005e3e:	f04f 0e06 	movne.w	lr, #6
 8005e42:	fa0e f505 	lsl.w	r5, lr, r5
 8005e46:	4329      	orrs	r1, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e48:	6091      	str	r1, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e4a:	4a49      	ldr	r2, [pc, #292]	; (8005f70 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8005e4c:	4948      	ldr	r1, [pc, #288]	; (8005f70 <HAL_GPIO_Init+0x1e8>)
        temp = EXTI->RTSR1;
 8005e4e:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
 8005e50:	ea6f 0508 	mvn.w	r5, r8
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e54:	02fe      	lsls	r6, r7, #11
        temp &= ~(iocurrent);
 8005e56:	bf54      	ite	pl
 8005e58:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8005e5a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR1 = temp;
 8005e5e:	608a      	str	r2, [r1, #8]

        temp = EXTI->FTSR1;
 8005e60:	68ca      	ldr	r2, [r1, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e62:	02b9      	lsls	r1, r7, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8005e64:	4942      	ldr	r1, [pc, #264]	; (8005f70 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 8005e66:	bf54      	ite	pl
 8005e68:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8005e6a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 8005e6e:	60ca      	str	r2, [r1, #12]

        temp = EXTI->EMR1;
 8005e70:	6849      	ldr	r1, [r1, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8005e72:	4a3f      	ldr	r2, [pc, #252]	; (8005f70 <HAL_GPIO_Init+0x1e8>)
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e74:	03be      	lsls	r6, r7, #14
        temp &= ~(iocurrent);
 8005e76:	bf54      	ite	pl
 8005e78:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8005e7a:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->EMR1 = temp;
 8005e7e:	6051      	str	r1, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005e80:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e82:	03f9      	lsls	r1, r7, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8005e84:	493a      	ldr	r1, [pc, #232]	; (8005f70 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 8005e86:	bf54      	ite	pl
 8005e88:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8005e8a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR1 = temp;
 8005e8e:	600a      	str	r2, [r1, #0]
      }
    }

    position++;
 8005e90:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005e92:	fa34 f203 	lsrs.w	r2, r4, r3
 8005e96:	f10c 0c02 	add.w	ip, ip, #2
 8005e9a:	d184      	bne.n	8005da6 <HAL_GPIO_Init+0x1e>
  }
}
 8005e9c:	b005      	add	sp, #20
 8005e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8005ea2:	6881      	ldr	r1, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ea4:	f8d9 600c 	ldr.w	r6, [r9, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ea8:	f04f 0e03 	mov.w	lr, #3
 8005eac:	fa0e fe0c 	lsl.w	lr, lr, ip
 8005eb0:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005eb4:	fa06 f60c 	lsl.w	r6, r6, ip
 8005eb8:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 8005eba:	6081      	str	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ebc:	ea6f 010e 	mvn.w	r1, lr
        temp = GPIOx->OTYPER;
 8005ec0:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ec4:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ec8:	f3c7 1500 	ubfx	r5, r7, #4, #1
 8005ecc:	409d      	lsls	r5, r3
 8005ece:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = temp;
 8005ed2:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8005ed4:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ed6:	ea05 0e01 	and.w	lr, r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005eda:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8005ede:	fa05 f50c 	lsl.w	r5, r5, ip
 8005ee2:	ea45 050e 	orr.w	r5, r5, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ee6:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8005ee8:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005eea:	fa02 f20c 	lsl.w	r2, r2, ip
 8005eee:	f47f af6c 	bne.w	8005dca <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 8005ef2:	08dd      	lsrs	r5, r3, #3
 8005ef4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8005ef8:	9501      	str	r5, [sp, #4]
 8005efa:	6a2e      	ldr	r6, [r5, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005efc:	f8d9 5010 	ldr.w	r5, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8005f00:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005f02:	f003 0e07 	and.w	lr, r3, #7
 8005f06:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005f0a:	260f      	movs	r6, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f0c:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005f10:	fa06 fe0e 	lsl.w	lr, r6, lr
 8005f14:	9e00      	ldr	r6, [sp, #0]
 8005f16:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 8005f1a:	9e01      	ldr	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f1c:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8005f20:	6235      	str	r5, [r6, #32]
 8005f22:	e752      	b.n	8005dca <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005f24:	2103      	movs	r1, #3
 8005f26:	fa01 f10c 	lsl.w	r1, r1, ip
 8005f2a:	43c9      	mvns	r1, r1
 8005f2c:	e7d2      	b.n	8005ed4 <HAL_GPIO_Init+0x14c>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f2e:	f04f 0e03 	mov.w	lr, #3
 8005f32:	fa0e f505 	lsl.w	r5, lr, r5
 8005f36:	4329      	orrs	r1, r5
 8005f38:	e786      	b.n	8005e48 <HAL_GPIO_Init+0xc0>
 8005f3a:	fa0b f505 	lsl.w	r5, fp, r5
 8005f3e:	4329      	orrs	r1, r5
 8005f40:	e782      	b.n	8005e48 <HAL_GPIO_Init+0xc0>
 8005f42:	f04f 0e02 	mov.w	lr, #2
 8005f46:	fa0e f505 	lsl.w	r5, lr, r5
 8005f4a:	4329      	orrs	r1, r5
 8005f4c:	e77c      	b.n	8005e48 <HAL_GPIO_Init+0xc0>
 8005f4e:	f04f 0e04 	mov.w	lr, #4
 8005f52:	fa0e f505 	lsl.w	r5, lr, r5
 8005f56:	4329      	orrs	r1, r5
 8005f58:	e776      	b.n	8005e48 <HAL_GPIO_Init+0xc0>
 8005f5a:	bf00      	nop
 8005f5c:	48000400 	.word	0x48000400
 8005f60:	48000800 	.word	0x48000800
 8005f64:	48000c00 	.word	0x48000c00
 8005f68:	48001000 	.word	0x48001000
 8005f6c:	48001400 	.word	0x48001400
 8005f70:	40010400 	.word	0x40010400
 8005f74:	40021000 	.word	0x40021000

08005f78 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f78:	b10a      	cbz	r2, 8005f7e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f7a:	6181      	str	r1, [r0, #24]
 8005f7c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f7e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop

08005f84 <HRTIM_OutputConfig>:
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8005f84:	6800      	ldr	r0, [r0, #0]
 8005f86:	ea4f 1cc1 	mov.w	ip, r1, lsl #7
 8005f8a:	eb00 11c1 	add.w	r1, r0, r1, lsl #7
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;

  switch (Output)
 8005f8e:	2a40      	cmp	r2, #64	; 0x40
{
 8005f90:	b5f0      	push	{r4, r5, r6, r7, lr}
  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8005f92:	f8d1 50e4 	ldr.w	r5, [r1, #228]	; 0xe4
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8005f96:	f8d1 40b8 	ldr.w	r4, [r1, #184]	; 0xb8
  switch (Output)
 8005f9a:	d04e      	beq.n	800603a <HRTIM_OutputConfig+0xb6>
 8005f9c:	d832      	bhi.n	8006004 <HRTIM_OutputConfig+0x80>
 8005f9e:	3a01      	subs	r2, #1
 8005fa0:	2a1f      	cmp	r2, #31
 8005fa2:	d813      	bhi.n	8005fcc <HRTIM_OutputConfig+0x48>
 8005fa4:	2a1f      	cmp	r2, #31
 8005fa6:	d811      	bhi.n	8005fcc <HRTIM_OutputConfig+0x48>
 8005fa8:	e8df f002 	tbb	[pc, r2]
 8005fac:	47103647 	.word	0x47103647
 8005fb0:	36101010 	.word	0x36101010
 8005fb4:	10101010 	.word	0x10101010
 8005fb8:	47101010 	.word	0x47101010
 8005fbc:	10101010 	.word	0x10101010
 8005fc0:	10101010 	.word	0x10101010
 8005fc4:	10101010 	.word	0x10101010
 8005fc8:	36101010 	.word	0x36101010
 8005fcc:	f06f 02fe 	mvn.w	r2, #254	; 0xfe
 8005fd0:	2100      	movs	r1, #0
  default:
    break;
  }

  /* Clear output config */
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8005fd2:	4015      	ands	r5, r2
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8005fd4:	681a      	ldr	r2, [r3, #0]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8005fd6:	699f      	ldr	r7, [r3, #24]
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8005fd8:	408a      	lsls	r2, r1
 8005fda:	432a      	orrs	r2, r5
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8005fdc:	68dd      	ldr	r5, [r3, #12]
 8005fde:	408d      	lsls	r5, r1
 8005fe0:	432a      	orrs	r2, r5
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8005fe2:	e9d3 6504 	ldrd	r6, r5, [r3, #16]
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8005fe6:	fa07 fe01 	lsl.w	lr, r7, r1
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8005fea:	fa06 f701 	lsl.w	r7, r6, r1
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8005fee:	408d      	lsls	r5, r1
 8005ff0:	433a      	orrs	r2, r7
 8005ff2:	432a      	orrs	r2, r5
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8005ff4:	2e08      	cmp	r6, #8
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8005ff6:	ea4e 0202 	orr.w	r2, lr, r2
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8005ffa:	d02a      	beq.n	8006052 <HRTIM_OutputConfig+0xce>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8005ffc:	4460      	add	r0, ip
 8005ffe:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
}
 8006002:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (Output)
 8006004:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8006008:	d006      	beq.n	8006018 <HRTIM_OutputConfig+0x94>
 800600a:	d911      	bls.n	8006030 <HRTIM_OutputConfig+0xac>
 800600c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006010:	d013      	beq.n	800603a <HRTIM_OutputConfig+0xb6>
 8006012:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006016:	d1d9      	bne.n	8005fcc <HRTIM_OutputConfig+0x48>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8006018:	eb00 020c 	add.w	r2, r0, ip
 800601c:	6859      	ldr	r1, [r3, #4]
 800601e:	f8c2 10c4 	str.w	r1, [r2, #196]	; 0xc4
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8006022:	6899      	ldr	r1, [r3, #8]
 8006024:	f8c2 10c8 	str.w	r1, [r2, #200]	; 0xc8
      break;
 8006028:	f46f 027e 	mvn.w	r2, #16646144	; 0xfe0000
      shift = 16U;
 800602c:	2110      	movs	r1, #16
      break;
 800602e:	e7d0      	b.n	8005fd2 <HRTIM_OutputConfig+0x4e>
  switch (Output)
 8006030:	2a80      	cmp	r2, #128	; 0x80
 8006032:	d0f1      	beq.n	8006018 <HRTIM_OutputConfig+0x94>
 8006034:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8006038:	d1c8      	bne.n	8005fcc <HRTIM_OutputConfig+0x48>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 800603a:	eb00 020c 	add.w	r2, r0, ip
 800603e:	6859      	ldr	r1, [r3, #4]
 8006040:	f8c2 10bc 	str.w	r1, [r2, #188]	; 0xbc
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8006044:	6899      	ldr	r1, [r3, #8]
 8006046:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
      break;
 800604a:	f06f 02fe 	mvn.w	r2, #254	; 0xfe
  uint32_t shift = 0U;
 800604e:	2100      	movs	r1, #0
      break;
 8006050:	e7bf      	b.n	8005fd2 <HRTIM_OutputConfig+0x4e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8006052:	f014 2f02 	tst.w	r4, #33554944	; 0x2000200
 8006056:	d1d1      	bne.n	8005ffc <HRTIM_OutputConfig+0x78>
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8006058:	69db      	ldr	r3, [r3, #28]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 800605a:	4460      	add	r0, ip
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 800605c:	fa03 f101 	lsl.w	r1, r3, r1
 8006060:	430a      	orrs	r2, r1
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8006062:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
}
 8006066:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006068 <HRTIM_EventConfig>:
  * @retval None
  */
static void HRTIM_EventConfig(HRTIM_HandleTypeDef * hhrtim,
                              uint32_t Event,
                              HRTIM_EventCfgTypeDef *pEventCfg)
{
 8006068:	b430      	push	{r4, r5}
  uint32_t hrtim_eecr1;
  uint32_t hrtim_eecr2;
  uint32_t hrtim_eecr3;

  /* Configure external event channel */
  hrtim_eecr1 = hhrtim->Instance->sCommonRegs.EECR1;
 800606a:	6805      	ldr	r5, [r0, #0]
 800606c:	f8d5 43b0 	ldr.w	r4, [r5, #944]	; 0x3b0
  hrtim_eecr2 = hhrtim->Instance->sCommonRegs.EECR2;
 8006070:	f8d5 03b4 	ldr.w	r0, [r5, #948]	; 0x3b4
  hrtim_eecr3 = hhrtim->Instance->sCommonRegs.EECR3;
 8006074:	f8d5 33b8 	ldr.w	r3, [r5, #952]	; 0x3b8

  switch (Event)
 8006078:	290a      	cmp	r1, #10
 800607a:	d829      	bhi.n	80060d0 <HRTIM_EventConfig+0x68>
 800607c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006080:	0032002a 	.word	0x0032002a
 8006084:	00630049 	.word	0x00630049
 8006088:	0099007e 	.word	0x0099007e
 800608c:	00ce00b4 	.word	0x00ce00b4
 8006090:	010800eb 	.word	0x010800eb
 8006094:	000b      	.short	0x000b
    }

  case HRTIM_EVENT_10:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE10SRC | HRTIM_EECR2_EE10POL | HRTIM_EECR2_EE10SNS);
      hrtim_eecr2 |= ((pEventCfg->Source << 24U) & HRTIM_EECR2_EE10SRC);
 8006096:	6811      	ldr	r1, [r2, #0]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR2_EE10POL);
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE10F);
 8006098:	f023 6c70 	bic.w	ip, r3, #251658240	; 0xf000000
      hrtim_eecr2 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR2_EE10POL);
 800609c:	6853      	ldr	r3, [r2, #4]
      hrtim_eecr2 |= ((pEventCfg->Source << 24U) & HRTIM_EECR2_EE10SRC);
 800609e:	0609      	lsls	r1, r1, #24
      hrtim_eecr2 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR2_EE10POL);
 80060a0:	061b      	lsls	r3, r3, #24
 80060a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      hrtim_eecr2 |= ((pEventCfg->Source << 24U) & HRTIM_EECR2_EE10SRC);
 80060a6:	f001 7140 	and.w	r1, r1, #50331648	; 0x3000000
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
 80060aa:	4319      	orrs	r1, r3
      hrtim_eecr3 |= ((pEventCfg->Filter << 24U) & HRTIM_EECR3_EE10F);
 80060ac:	e9d2 4302 	ldrd	r4, r3, [r2, #8]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
 80060b0:	0622      	lsls	r2, r4, #24
 80060b2:	f002 52c0 	and.w	r2, r2, #402653184	; 0x18000000
      hrtim_eecr3 |= ((pEventCfg->Filter << 24U) & HRTIM_EECR3_EE10F);
 80060b6:	061b      	lsls	r3, r3, #24
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE10SRC | HRTIM_EECR2_EE10POL | HRTIM_EECR2_EE10SNS);
 80060b8:	f020 50f8 	bic.w	r0, r0, #520093696	; 0x1f000000
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
 80060bc:	430a      	orrs	r2, r1
      hrtim_eecr3 |= ((pEventCfg->Filter << 24U) & HRTIM_EECR3_EE10F);
 80060be:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
 80060c2:	4310      	orrs	r0, r2
      hrtim_eecr3 |= ((pEventCfg->Filter << 24U) & HRTIM_EECR3_EE10F);
 80060c4:	ea43 030c 	orr.w	r3, r3, ip
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 80060c8:	f8c5 03b4 	str.w	r0, [r5, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 80060cc:	f8c5 33b8 	str.w	r3, [r5, #952]	; 0x3b8
    }

  default:
    break;
  }
}
 80060d0:	bc30      	pop	{r4, r5}
 80060d2:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.EECR1 = 0U;
 80060d4:	2300      	movs	r3, #0
 80060d6:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
      hhrtim->Instance->sCommonRegs.EECR2 = 0U;
 80060da:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = 0U;
 80060de:	f8c5 33b8 	str.w	r3, [r5, #952]	; 0x3b8
      break;
 80060e2:	e7f5      	b.n	80060d0 <HRTIM_EventConfig+0x68>
      hrtim_eecr1 |= (pEventCfg->Polarity & HRTIM_EECR1_EE1POL);
 80060e4:	e9d2 3100 	ldrd	r3, r1, [r2]
 80060e8:	f001 0104 	and.w	r1, r1, #4
      hrtim_eecr1 |= (pEventCfg->Source & HRTIM_EECR1_EE1SRC);
 80060ec:	f003 0303 	and.w	r3, r3, #3
      hrtim_eecr1 |= (pEventCfg->Sensitivity & HRTIM_EECR1_EE1SNS);
 80060f0:	430b      	orrs	r3, r1
 80060f2:	6891      	ldr	r1, [r2, #8]
      hrtim_eecr1 |= (pEventCfg->FastMode  & HRTIM_EECR1_EE1FAST);
 80060f4:	6912      	ldr	r2, [r2, #16]
      hrtim_eecr1 |= (pEventCfg->Sensitivity & HRTIM_EECR1_EE1SNS);
 80060f6:	f001 0118 	and.w	r1, r1, #24
 80060fa:	430b      	orrs	r3, r1
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE1SRC | HRTIM_EECR1_EE1POL | HRTIM_EECR1_EE1SNS | HRTIM_EECR1_EE1FAST);
 80060fc:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
      hrtim_eecr1 |= (pEventCfg->Sensitivity & HRTIM_EECR1_EE1SNS);
 8006100:	431c      	orrs	r4, r3
      hrtim_eecr1 |= (pEventCfg->FastMode  & HRTIM_EECR1_EE1FAST);
 8006102:	f002 0320 	and.w	r3, r2, #32
 8006106:	4323      	orrs	r3, r4
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8006108:	f8c5 43b0 	str.w	r4, [r5, #944]	; 0x3b0
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800610c:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
      break;
 8006110:	e7de      	b.n	80060d0 <HRTIM_EventConfig+0x68>
      hrtim_eecr1 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR1_EE2POL);
 8006112:	e9d2 3100 	ldrd	r3, r1, [r2]
      hrtim_eecr1 |= ((pEventCfg->Source << 6U) & HRTIM_EECR1_EE2SRC);
 8006116:	019b      	lsls	r3, r3, #6
      hrtim_eecr1 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR1_EE2POL);
 8006118:	0189      	lsls	r1, r1, #6
 800611a:	f401 7180 	and.w	r1, r1, #256	; 0x100
      hrtim_eecr1 |= ((pEventCfg->Source << 6U) & HRTIM_EECR1_EE2SRC);
 800611e:	b2db      	uxtb	r3, r3
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR1_EE2SNS);
 8006120:	430b      	orrs	r3, r1
 8006122:	6891      	ldr	r1, [r2, #8]
      hrtim_eecr1 |= ((pEventCfg->FastMode << 6U) & HRTIM_EECR1_EE2FAST);
 8006124:	6912      	ldr	r2, [r2, #16]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR1_EE2SNS);
 8006126:	0189      	lsls	r1, r1, #6
 8006128:	f401 61c0 	and.w	r1, r1, #1536	; 0x600
 800612c:	430b      	orrs	r3, r1
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE2SRC | HRTIM_EECR1_EE2POL | HRTIM_EECR1_EE2SNS | HRTIM_EECR1_EE2FAST);
 800612e:	f424 647c 	bic.w	r4, r4, #4032	; 0xfc0
      hrtim_eecr1 |= ((pEventCfg->FastMode << 6U) & HRTIM_EECR1_EE2FAST);
 8006132:	0192      	lsls	r2, r2, #6
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR1_EE2SNS);
 8006134:	431c      	orrs	r4, r3
      hrtim_eecr1 |= ((pEventCfg->FastMode << 6U) & HRTIM_EECR1_EE2FAST);
 8006136:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800613a:	4323      	orrs	r3, r4
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800613c:	f8c5 43b0 	str.w	r4, [r5, #944]	; 0x3b0
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8006140:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
      break;
 8006144:	e7c4      	b.n	80060d0 <HRTIM_EventConfig+0x68>
      hrtim_eecr1 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR1_EE3POL);
 8006146:	e9d2 3100 	ldrd	r3, r1, [r2]
      hrtim_eecr1 |= ((pEventCfg->Source << 12U) & HRTIM_EECR1_EE3SRC);
 800614a:	031b      	lsls	r3, r3, #12
      hrtim_eecr1 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR1_EE3POL);
 800614c:	0309      	lsls	r1, r1, #12
 800614e:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
      hrtim_eecr1 |= ((pEventCfg->Source << 12U) & HRTIM_EECR1_EE3SRC);
 8006152:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR1_EE3SNS);
 8006156:	430b      	orrs	r3, r1
 8006158:	6891      	ldr	r1, [r2, #8]
      hrtim_eecr1 |= ((pEventCfg->FastMode << 12U) & HRTIM_EECR1_EE3FAST);
 800615a:	6912      	ldr	r2, [r2, #16]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR1_EE3SNS);
 800615c:	0309      	lsls	r1, r1, #12
 800615e:	f401 31c0 	and.w	r1, r1, #98304	; 0x18000
 8006162:	430b      	orrs	r3, r1
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE3SRC | HRTIM_EECR1_EE3POL | HRTIM_EECR1_EE3SNS | HRTIM_EECR1_EE3FAST);
 8006164:	f424 347c 	bic.w	r4, r4, #258048	; 0x3f000
      hrtim_eecr1 |= ((pEventCfg->FastMode << 12U) & HRTIM_EECR1_EE3FAST);
 8006168:	0312      	lsls	r2, r2, #12
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR1_EE3SNS);
 800616a:	431c      	orrs	r4, r3
      hrtim_eecr1 |= ((pEventCfg->FastMode << 12U) & HRTIM_EECR1_EE3FAST);
 800616c:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006170:	4323      	orrs	r3, r4
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8006172:	f8c5 43b0 	str.w	r4, [r5, #944]	; 0x3b0
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8006176:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
      break;
 800617a:	e7a9      	b.n	80060d0 <HRTIM_EventConfig+0x68>
      hrtim_eecr1 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR1_EE4POL);
 800617c:	e9d2 3100 	ldrd	r3, r1, [r2]
      hrtim_eecr1 |= ((pEventCfg->Source << 18U) & HRTIM_EECR1_EE4SRC);
 8006180:	049b      	lsls	r3, r3, #18
      hrtim_eecr1 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR1_EE4POL);
 8006182:	0489      	lsls	r1, r1, #18
 8006184:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
      hrtim_eecr1 |= ((pEventCfg->Source << 18U) & HRTIM_EECR1_EE4SRC);
 8006188:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR1_EE4SNS);
 800618c:	430b      	orrs	r3, r1
 800618e:	6891      	ldr	r1, [r2, #8]
      hrtim_eecr1 |= ((pEventCfg->FastMode << 18U) & HRTIM_EECR1_EE4FAST);
 8006190:	6912      	ldr	r2, [r2, #16]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR1_EE4SNS);
 8006192:	0489      	lsls	r1, r1, #18
 8006194:	f401 01c0 	and.w	r1, r1, #6291456	; 0x600000
 8006198:	430b      	orrs	r3, r1
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE4SRC | HRTIM_EECR1_EE4POL | HRTIM_EECR1_EE4SNS | HRTIM_EECR1_EE4FAST);
 800619a:	f424 047c 	bic.w	r4, r4, #16515072	; 0xfc0000
      hrtim_eecr1 |= ((pEventCfg->FastMode << 18U) & HRTIM_EECR1_EE4FAST);
 800619e:	0492      	lsls	r2, r2, #18
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR1_EE4SNS);
 80061a0:	431c      	orrs	r4, r3
      hrtim_eecr1 |= ((pEventCfg->FastMode << 18U) & HRTIM_EECR1_EE4FAST);
 80061a2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80061a6:	4323      	orrs	r3, r4
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80061a8:	f8c5 43b0 	str.w	r4, [r5, #944]	; 0x3b0
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80061ac:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
      break;
 80061b0:	e78e      	b.n	80060d0 <HRTIM_EventConfig+0x68>
      hrtim_eecr1 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR1_EE5POL);
 80061b2:	e9d2 3100 	ldrd	r3, r1, [r2]
      hrtim_eecr1 |= ((pEventCfg->Source << 24U) & HRTIM_EECR1_EE5SRC);
 80061b6:	061b      	lsls	r3, r3, #24
      hrtim_eecr1 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR1_EE5POL);
 80061b8:	0609      	lsls	r1, r1, #24
 80061ba:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
      hrtim_eecr1 |= ((pEventCfg->Source << 24U) & HRTIM_EECR1_EE5SRC);
 80061be:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR1_EE5SNS);
 80061c2:	430b      	orrs	r3, r1
 80061c4:	6891      	ldr	r1, [r2, #8]
      hrtim_eecr1 |= ((pEventCfg->FastMode << 24U) & HRTIM_EECR1_EE5FAST);
 80061c6:	6912      	ldr	r2, [r2, #16]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR1_EE5SNS);
 80061c8:	0609      	lsls	r1, r1, #24
 80061ca:	f001 51c0 	and.w	r1, r1, #402653184	; 0x18000000
 80061ce:	430b      	orrs	r3, r1
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE5SRC | HRTIM_EECR1_EE5POL | HRTIM_EECR1_EE5SNS | HRTIM_EECR1_EE5FAST);
 80061d0:	f024 547c 	bic.w	r4, r4, #1056964608	; 0x3f000000
      hrtim_eecr1 |= ((pEventCfg->FastMode << 24U) & HRTIM_EECR1_EE5FAST);
 80061d4:	0612      	lsls	r2, r2, #24
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR1_EE5SNS);
 80061d6:	431c      	orrs	r4, r3
      hrtim_eecr1 |= ((pEventCfg->FastMode << 24U) & HRTIM_EECR1_EE5FAST);
 80061d8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80061dc:	4323      	orrs	r3, r4
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80061de:	f8c5 43b0 	str.w	r4, [r5, #944]	; 0x3b0
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80061e2:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
      break;
 80061e6:	e773      	b.n	80060d0 <HRTIM_EventConfig+0x68>
      hrtim_eecr2 |= (pEventCfg->Source & HRTIM_EECR2_EE6SRC);
 80061e8:	6811      	ldr	r1, [r2, #0]
      hrtim_eecr2 |= (pEventCfg->Polarity & HRTIM_EECR2_EE6POL);
 80061ea:	6854      	ldr	r4, [r2, #4]
      hrtim_eecr2 |= (pEventCfg->Source & HRTIM_EECR2_EE6SRC);
 80061ec:	f001 0103 	and.w	r1, r1, #3
      hrtim_eecr2 |= (pEventCfg->Polarity & HRTIM_EECR2_EE6POL);
 80061f0:	f004 0404 	and.w	r4, r4, #4
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE6F);
 80061f4:	f023 0c0f 	bic.w	ip, r3, #15
      hrtim_eecr2 |= (pEventCfg->Sensitivity & HRTIM_EECR2_EE6SNS);
 80061f8:	4321      	orrs	r1, r4
      hrtim_eecr3 |= (pEventCfg->Filter & HRTIM_EECR3_EE6F);
 80061fa:	e9d2 4302 	ldrd	r4, r3, [r2, #8]
      hrtim_eecr2 |= (pEventCfg->Sensitivity & HRTIM_EECR2_EE6SNS);
 80061fe:	f004 0218 	and.w	r2, r4, #24
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE6SRC | HRTIM_EECR2_EE6POL | HRTIM_EECR2_EE6SNS);
 8006202:	f020 001f 	bic.w	r0, r0, #31
      hrtim_eecr2 |= (pEventCfg->Sensitivity & HRTIM_EECR2_EE6SNS);
 8006206:	4311      	orrs	r1, r2
      hrtim_eecr3 |= (pEventCfg->Filter & HRTIM_EECR3_EE6F);
 8006208:	f003 030f 	and.w	r3, r3, #15
      hrtim_eecr2 |= (pEventCfg->Sensitivity & HRTIM_EECR2_EE6SNS);
 800620c:	4308      	orrs	r0, r1
      hrtim_eecr3 |= (pEventCfg->Filter & HRTIM_EECR3_EE6F);
 800620e:	ea43 030c 	orr.w	r3, r3, ip
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8006212:	f8c5 03b4 	str.w	r0, [r5, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8006216:	f8c5 33b8 	str.w	r3, [r5, #952]	; 0x3b8
      break;
 800621a:	e759      	b.n	80060d0 <HRTIM_EventConfig+0x68>
      hrtim_eecr2 |= ((pEventCfg->Source << 6U) & HRTIM_EECR2_EE7SRC);
 800621c:	6811      	ldr	r1, [r2, #0]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE7F);
 800621e:	f423 7c70 	bic.w	ip, r3, #960	; 0x3c0
      hrtim_eecr2 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR2_EE7POL);
 8006222:	6853      	ldr	r3, [r2, #4]
      hrtim_eecr2 |= ((pEventCfg->Source << 6U) & HRTIM_EECR2_EE7SRC);
 8006224:	0189      	lsls	r1, r1, #6
      hrtim_eecr2 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR2_EE7POL);
 8006226:	019b      	lsls	r3, r3, #6
 8006228:	f403 7380 	and.w	r3, r3, #256	; 0x100
      hrtim_eecr2 |= ((pEventCfg->Source << 6U) & HRTIM_EECR2_EE7SRC);
 800622c:	b2c9      	uxtb	r1, r1
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR2_EE7SNS);
 800622e:	4319      	orrs	r1, r3
      hrtim_eecr3 |= ((pEventCfg->Filter << 6U) & HRTIM_EECR3_EE7F);
 8006230:	e9d2 4302 	ldrd	r4, r3, [r2, #8]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR2_EE7SNS);
 8006234:	01a2      	lsls	r2, r4, #6
 8006236:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
      hrtim_eecr3 |= ((pEventCfg->Filter << 6U) & HRTIM_EECR3_EE7F);
 800623a:	019b      	lsls	r3, r3, #6
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE7SRC | HRTIM_EECR2_EE7POL | HRTIM_EECR2_EE7SNS);
 800623c:	f420 60f8 	bic.w	r0, r0, #1984	; 0x7c0
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR2_EE7SNS);
 8006240:	430a      	orrs	r2, r1
      hrtim_eecr3 |= ((pEventCfg->Filter << 6U) & HRTIM_EECR3_EE7F);
 8006242:	f403 7370 	and.w	r3, r3, #960	; 0x3c0
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR2_EE7SNS);
 8006246:	4310      	orrs	r0, r2
      hrtim_eecr3 |= ((pEventCfg->Filter << 6U) & HRTIM_EECR3_EE7F);
 8006248:	ea43 030c 	orr.w	r3, r3, ip
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 800624c:	f8c5 03b4 	str.w	r0, [r5, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8006250:	f8c5 33b8 	str.w	r3, [r5, #952]	; 0x3b8
      break;
 8006254:	e73c      	b.n	80060d0 <HRTIM_EventConfig+0x68>
      hrtim_eecr2 |= ((pEventCfg->Source << 12U) & HRTIM_EECR2_EE8SRC);
 8006256:	6811      	ldr	r1, [r2, #0]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE8F);
 8006258:	f423 4c70 	bic.w	ip, r3, #61440	; 0xf000
      hrtim_eecr2 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR2_EE8POL);
 800625c:	6853      	ldr	r3, [r2, #4]
      hrtim_eecr2 |= ((pEventCfg->Source << 12U) & HRTIM_EECR2_EE8SRC);
 800625e:	0309      	lsls	r1, r1, #12
      hrtim_eecr2 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR2_EE8POL);
 8006260:	031b      	lsls	r3, r3, #12
 8006262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
      hrtim_eecr2 |= ((pEventCfg->Source << 12U) & HRTIM_EECR2_EE8SRC);
 8006266:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR2_EE8SNS);
 800626a:	4319      	orrs	r1, r3
      hrtim_eecr3 |= ((pEventCfg->Filter << 12U) & HRTIM_EECR3_EE8F );
 800626c:	e9d2 4302 	ldrd	r4, r3, [r2, #8]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR2_EE8SNS);
 8006270:	0322      	lsls	r2, r4, #12
 8006272:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
      hrtim_eecr3 |= ((pEventCfg->Filter << 12U) & HRTIM_EECR3_EE8F );
 8006276:	031b      	lsls	r3, r3, #12
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE8SRC | HRTIM_EECR2_EE8POL | HRTIM_EECR2_EE8SNS);
 8006278:	f420 30f8 	bic.w	r0, r0, #126976	; 0x1f000
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR2_EE8SNS);
 800627c:	430a      	orrs	r2, r1
      hrtim_eecr3 |= ((pEventCfg->Filter << 12U) & HRTIM_EECR3_EE8F );
 800627e:	b29b      	uxth	r3, r3
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR2_EE8SNS);
 8006280:	4310      	orrs	r0, r2
      hrtim_eecr3 |= ((pEventCfg->Filter << 12U) & HRTIM_EECR3_EE8F );
 8006282:	ea43 030c 	orr.w	r3, r3, ip
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8006286:	f8c5 03b4 	str.w	r0, [r5, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 800628a:	f8c5 33b8 	str.w	r3, [r5, #952]	; 0x3b8
      break;
 800628e:	e71f      	b.n	80060d0 <HRTIM_EventConfig+0x68>
      hrtim_eecr2 |= ((pEventCfg->Source << 18U) & HRTIM_EECR2_EE9SRC);
 8006290:	6811      	ldr	r1, [r2, #0]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE9F);
 8006292:	f423 1c70 	bic.w	ip, r3, #3932160	; 0x3c0000
      hrtim_eecr2 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR2_EE9POL);
 8006296:	6853      	ldr	r3, [r2, #4]
      hrtim_eecr2 |= ((pEventCfg->Source << 18U) & HRTIM_EECR2_EE9SRC);
 8006298:	0489      	lsls	r1, r1, #18
      hrtim_eecr2 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR2_EE9POL);
 800629a:	049b      	lsls	r3, r3, #18
 800629c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
      hrtim_eecr2 |= ((pEventCfg->Source << 18U) & HRTIM_EECR2_EE9SRC);
 80062a0:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR2_EE9SNS);
 80062a4:	4319      	orrs	r1, r3
      hrtim_eecr3 |= ((pEventCfg->Filter << 18U) & HRTIM_EECR3_EE9F);
 80062a6:	e9d2 4302 	ldrd	r4, r3, [r2, #8]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR2_EE9SNS);
 80062aa:	04a2      	lsls	r2, r4, #18
 80062ac:	f402 02c0 	and.w	r2, r2, #6291456	; 0x600000
      hrtim_eecr3 |= ((pEventCfg->Filter << 18U) & HRTIM_EECR3_EE9F);
 80062b0:	049b      	lsls	r3, r3, #18
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE9SRC | HRTIM_EECR2_EE9POL | HRTIM_EECR2_EE9SNS);
 80062b2:	f420 00f8 	bic.w	r0, r0, #8126464	; 0x7c0000
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR2_EE9SNS);
 80062b6:	430a      	orrs	r2, r1
      hrtim_eecr3 |= ((pEventCfg->Filter << 18U) & HRTIM_EECR3_EE9F);
 80062b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR2_EE9SNS);
 80062bc:	4310      	orrs	r0, r2
      hrtim_eecr3 |= ((pEventCfg->Filter << 18U) & HRTIM_EECR3_EE9F);
 80062be:	ea43 030c 	orr.w	r3, r3, ip
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 80062c2:	f8c5 03b4 	str.w	r0, [r5, #948]	; 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 80062c6:	f8c5 33b8 	str.w	r3, [r5, #952]	; 0x3b8
      break;
 80062ca:	e701      	b.n	80060d0 <HRTIM_EventConfig+0x68>

080062cc <HRTIM_GetDMAHandleFromTimerIdx>:
static DMA_HandleTypeDef * HRTIM_GetDMAHandleFromTimerIdx(HRTIM_HandleTypeDef * hhrtim,
                                                          uint32_t TimerIdx)
{
  DMA_HandleTypeDef * hdma = (DMA_HandleTypeDef *)NULL;

  switch (TimerIdx)
 80062cc:	2906      	cmp	r1, #6
 80062ce:	d81a      	bhi.n	8006306 <HRTIM_GetDMAHandleFromTimerIdx+0x3a>
 80062d0:	e8df f001 	tbb	[pc, r1]
 80062d4:	100d0a07 	.word	0x100d0a07
 80062d8:	1613      	.short	0x1613
 80062da:	04          	.byte	0x04
 80062db:	00          	.byte	0x00
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hdma = hhrtim->hdmaMaster;
 80062dc:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
      break;
 80062e0:	4770      	bx	lr
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hdma = hhrtim->hdmaTimerA;
 80062e2:	f8d0 00e4 	ldr.w	r0, [r0, #228]	; 0xe4
      break;
 80062e6:	4770      	bx	lr
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hdma = hhrtim->hdmaTimerB;
 80062e8:	f8d0 00e8 	ldr.w	r0, [r0, #232]	; 0xe8
      break;
 80062ec:	4770      	bx	lr
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hdma = hhrtim->hdmaTimerC;
 80062ee:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
      break;
 80062f2:	4770      	bx	lr
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hdma = hhrtim->hdmaTimerD;
 80062f4:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
      break;
 80062f8:	4770      	bx	lr
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hdma = hhrtim->hdmaTimerE;
 80062fa:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
      break;
 80062fe:	4770      	bx	lr
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hdma = hhrtim->hdmaTimerF;
 8006300:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
      break;
 8006304:	4770      	bx	lr
  switch (TimerIdx)
 8006306:	2000      	movs	r0, #0
  default:
    break;
  }

  return hdma;
}
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop

0800630c <HRTIM_ForceRegistersUpdate>:
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
  switch (TimerIdx)
 800630c:	2906      	cmp	r1, #6
 800630e:	d80c      	bhi.n	800632a <HRTIM_ForceRegistersUpdate+0x1e>
 8006310:	e8df f001 	tbb	[pc, r1]
 8006314:	2c241c14 	.word	0x2c241c14
 8006318:	0434      	.short	0x0434
 800631a:	0c          	.byte	0x0c
 800631b:	00          	.byte	0x00
      break;
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 800631c:	6802      	ldr	r2, [r0, #0]
 800631e:	f8d2 3384 	ldr.w	r3, [r2, #900]	; 0x384
 8006322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006326:	f8c2 3384 	str.w	r3, [r2, #900]	; 0x384
    }

  default:
    break;
  }
}
 800632a:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 800632c:	6802      	ldr	r2, [r0, #0]
 800632e:	f8d2 3384 	ldr.w	r3, [r2, #900]	; 0x384
 8006332:	f043 0301 	orr.w	r3, r3, #1
 8006336:	f8c2 3384 	str.w	r3, [r2, #900]	; 0x384
      break;
 800633a:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 800633c:	6802      	ldr	r2, [r0, #0]
 800633e:	f8d2 3384 	ldr.w	r3, [r2, #900]	; 0x384
 8006342:	f043 0302 	orr.w	r3, r3, #2
 8006346:	f8c2 3384 	str.w	r3, [r2, #900]	; 0x384
      break;
 800634a:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 800634c:	6802      	ldr	r2, [r0, #0]
 800634e:	f8d2 3384 	ldr.w	r3, [r2, #900]	; 0x384
 8006352:	f043 0304 	orr.w	r3, r3, #4
 8006356:	f8c2 3384 	str.w	r3, [r2, #900]	; 0x384
      break;
 800635a:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 800635c:	6802      	ldr	r2, [r0, #0]
 800635e:	f8d2 3384 	ldr.w	r3, [r2, #900]	; 0x384
 8006362:	f043 0308 	orr.w	r3, r3, #8
 8006366:	f8c2 3384 	str.w	r3, [r2, #900]	; 0x384
      break;
 800636a:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 800636c:	6802      	ldr	r2, [r0, #0]
 800636e:	f8d2 3384 	ldr.w	r3, [r2, #900]	; 0x384
 8006372:	f043 0310 	orr.w	r3, r3, #16
 8006376:	f8c2 3384 	str.w	r3, [r2, #900]	; 0x384
      break;
 800637a:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 800637c:	6802      	ldr	r2, [r0, #0]
 800637e:	f8d2 3384 	ldr.w	r3, [r2, #900]	; 0x384
 8006382:	f043 0320 	orr.w	r3, r3, #32
 8006386:	f8c2 3384 	str.w	r3, [r2, #900]	; 0x384
      break;
 800638a:	4770      	bx	lr

0800638c <HAL_HRTIM_Init>:
  if(hhrtim == NULL)
 800638c:	2800      	cmp	r0, #0
 800638e:	d046      	beq.n	800641e <HAL_HRTIM_Init+0x92>
{
 8006390:	b510      	push	{r4, lr}
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8006392:	6882      	ldr	r2, [r0, #8]
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8006394:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006396:	2102      	movs	r1, #2
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8006398:	07d2      	lsls	r2, r2, #31
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 800639a:	e9c0 3338 	strd	r3, r3, [r0, #224]	; 0xe0
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 800639e:	e9c0 333a 	strd	r3, r3, [r0, #232]	; 0xe8
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 80063a2:	e9c0 333c 	strd	r3, r3, [r0, #240]	; 0xf0
{
 80063a6:	b082      	sub	sp, #8
 80063a8:	4604      	mov	r4, r0
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80063aa:	f880 10dd 	strb.w	r1, [r0, #221]	; 0xdd
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 80063ae:	f8c0 30f8 	str.w	r3, [r0, #248]	; 0xf8
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 80063b2:	d50f      	bpl.n	80063d4 <HAL_HRTIM_Init+0x48>
    if (hhrtim->Instance == HRTIM1)
 80063b4:	6801      	ldr	r1, [r0, #0]
 80063b6:	4b21      	ldr	r3, [pc, #132]	; (800643c <HAL_HRTIM_Init+0xb0>)
 80063b8:	4299      	cmp	r1, r3
 80063ba:	d032      	beq.n	8006422 <HAL_HRTIM_Init+0x96>
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80063bc:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80063c0:	680a      	ldr	r2, [r1, #0]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80063c2:	f400 4040 	and.w	r0, r0, #49152	; 0xc000
 80063c6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80063ca:	4302      	orrs	r2, r0
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80063cc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80063d0:	4313      	orrs	r3, r2
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80063d2:	600b      	str	r3, [r1, #0]
  HAL_HRTIM_MspInit(hhrtim);
 80063d4:	4620      	mov	r0, r4
 80063d6:	f7fe fedf 	bl	8005198 <HAL_HRTIM_MspInit>
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 80063da:	68a3      	ldr	r3, [r4, #8]
 80063dc:	079b      	lsls	r3, r3, #30
 80063de:	d414      	bmi.n	800640a <HAL_HRTIM_Init+0x7e>
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80063e0:	2101      	movs	r1, #1
  __HAL_UNLOCK(hhrtim);
 80063e2:	2200      	movs	r2, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80063e4:	f884 10dd 	strb.w	r1, [r4, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 80063e8:	4623      	mov	r3, r4
 80063ea:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 80063ee:	f104 01c4 	add.w	r1, r4, #196	; 0xc4
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80063f2:	629a      	str	r2, [r3, #40]	; 0x28
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80063f4:	631a      	str	r2, [r3, #48]	; 0x30
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80063f6:	e9c3 2206 	strd	r2, r2, [r3, #24]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80063fa:	e9c3 2208 	strd	r2, r2, [r3, #32]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80063fe:	331c      	adds	r3, #28
 8006400:	428b      	cmp	r3, r1
 8006402:	d1f6      	bne.n	80063f2 <HAL_HRTIM_Init+0x66>
  return HAL_OK;
 8006404:	2000      	movs	r0, #0
}
 8006406:	b002      	add	sp, #8
 8006408:	bd10      	pop	{r4, pc}
    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800640a:	6821      	ldr	r1, [r4, #0]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 800640c:	68e3      	ldr	r3, [r4, #12]
    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800640e:	680a      	ldr	r2, [r1, #0]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8006410:	f403 7340 	and.w	r3, r3, #768	; 0x300
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8006414:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8006418:	4313      	orrs	r3, r2
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800641a:	600b      	str	r3, [r1, #0]
 800641c:	e7e0      	b.n	80063e0 <HAL_HRTIM_Init+0x54>
    return HAL_ERROR;
 800641e:	2001      	movs	r0, #1
}
 8006420:	4770      	bx	lr
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8006422:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
 8006426:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006428:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800642c:	661a      	str	r2, [r3, #96]	; 0x60
 800642e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006430:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006434:	9301      	str	r3, [sp, #4]
 8006436:	9b01      	ldr	r3, [sp, #4]
 8006438:	e7c0      	b.n	80063bc <HAL_HRTIM_Init+0x30>
 800643a:	bf00      	nop
 800643c:	40016800 	.word	0x40016800

08006440 <HAL_HRTIM_DLLCalibrationStart>:
  __HAL_LOCK(hhrtim);
 8006440:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 8006444:	2b01      	cmp	r3, #1
 8006446:	d030      	beq.n	80064aa <HAL_HRTIM_DLLCalibrationStart+0x6a>
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006448:	2302      	movs	r3, #2
  __HAL_LOCK(hhrtim);
 800644a:	2201      	movs	r2, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800644c:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8006450:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hhrtim);
 8006452:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8006456:	f1b1 3fff 	cmp.w	r1, #4294967295
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 800645a:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 800645e:	d015      	beq.n	800648c <HAL_HRTIM_DLLCalibrationStart+0x4c>
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8006460:	f042 0202 	orr.w	r2, r2, #2
 8006464:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8006468:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 800646c:	f022 020c 	bic.w	r2, r2, #12
 8006470:	4311      	orrs	r1, r2
 8006472:	f8c3 13cc 	str.w	r1, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8006476:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 800647a:	f042 0201 	orr.w	r2, r2, #1
 800647e:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006482:	2301      	movs	r3, #1
 8006484:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  return HAL_OK;
 8006488:	2000      	movs	r0, #0
 800648a:	4770      	bx	lr
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 800648c:	f022 0202 	bic.w	r2, r2, #2
 8006490:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8006494:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8006498:	f042 0201 	orr.w	r2, r2, #1
 800649c:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80064a0:	2301      	movs	r3, #1
 80064a2:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  return HAL_OK;
 80064a6:	2000      	movs	r0, #0
 80064a8:	4770      	bx	lr
  __HAL_LOCK(hhrtim);
 80064aa:	2002      	movs	r0, #2
}
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop

080064b0 <HAL_HRTIM_PollForDLLCalibration>:
{
 80064b0:	b570      	push	{r4, r5, r6, lr}
 80064b2:	4605      	mov	r5, r0
 80064b4:	460c      	mov	r4, r1
  tickstart = HAL_GetTick();
 80064b6:	f7ff f983 	bl	80057c0 <HAL_GetTick>
 80064ba:	4606      	mov	r6, r0
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80064bc:	682a      	ldr	r2, [r5, #0]
 80064be:	e001      	b.n	80064c4 <HAL_HRTIM_PollForDLLCalibration+0x14>
    if (Timeout != HAL_MAX_DELAY)
 80064c0:	1c61      	adds	r1, r4, #1
 80064c2:	d10a      	bne.n	80064da <HAL_HRTIM_PollForDLLCalibration+0x2a>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80064c4:	f8d2 3388 	ldr.w	r3, [r2, #904]	; 0x388
 80064c8:	03db      	lsls	r3, r3, #15
 80064ca:	d5f9      	bpl.n	80064c0 <HAL_HRTIM_PollForDLLCalibration+0x10>
  __HAL_UNLOCK(hhrtim);
 80064cc:	2000      	movs	r0, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80064ce:	2301      	movs	r3, #1
 80064d0:	f885 30dd 	strb.w	r3, [r5, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 80064d4:	f885 00dc 	strb.w	r0, [r5, #220]	; 0xdc
}
 80064d8:	bd70      	pop	{r4, r5, r6, pc}
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 80064da:	f7ff f971 	bl	80057c0 <HAL_GetTick>
 80064de:	1b80      	subs	r0, r0, r6
 80064e0:	42a0      	cmp	r0, r4
 80064e2:	d801      	bhi.n	80064e8 <HAL_HRTIM_PollForDLLCalibration+0x38>
 80064e4:	2c00      	cmp	r4, #0
 80064e6:	d1e9      	bne.n	80064bc <HAL_HRTIM_PollForDLLCalibration+0xc>
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80064e8:	2307      	movs	r3, #7
 80064ea:	f885 30dd 	strb.w	r3, [r5, #221]	; 0xdd
        return HAL_TIMEOUT;
 80064ee:	2003      	movs	r0, #3
}
 80064f0:	bd70      	pop	{r4, r5, r6, pc}
 80064f2:	bf00      	nop

080064f4 <HAL_HRTIM_TimeBaseConfig>:
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80064f4:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d033      	beq.n	8006564 <HAL_HRTIM_TimeBaseConfig+0x70>
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80064fc:	2302      	movs	r3, #2
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80064fe:	2906      	cmp	r1, #6
{
 8006500:	b410      	push	{r4}
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006502:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8006506:	d01d      	beq.n	8006544 <HAL_HRTIM_TimeBaseConfig+0x50>
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8006508:	6803      	ldr	r3, [r0, #0]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800650a:	6894      	ldr	r4, [r2, #8]
 800650c:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8006510:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8006514:	f023 0307 	bic.w	r3, r3, #7
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8006518:	4323      	orrs	r3, r4
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 800651a:	68d4      	ldr	r4, [r2, #12]
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 800651c:	f023 0318 	bic.w	r3, r3, #24
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8006520:	4323      	orrs	r3, r4
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8006522:	e9d2 4200 	ldrd	r4, r2, [r2]
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8006526:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 800652a:	f8c1 4094 	str.w	r4, [r1, #148]	; 0x94
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 800652e:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006532:	2301      	movs	r3, #1
 8006534:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  return HAL_OK;
 8006538:	f04f 0c00 	mov.w	ip, #0
}
 800653c:	4660      	mov	r0, ip
 800653e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006542:	4770      	bx	lr
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006544:	6801      	ldr	r1, [r0, #0]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8006546:	6894      	ldr	r4, [r2, #8]
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006548:	680b      	ldr	r3, [r1, #0]
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 800654a:	f023 0307 	bic.w	r3, r3, #7
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800654e:	4323      	orrs	r3, r4
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8006550:	68d4      	ldr	r4, [r2, #12]
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8006552:	f023 0318 	bic.w	r3, r3, #24
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8006556:	4323      	orrs	r3, r4
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8006558:	e9d2 4200 	ldrd	r4, r2, [r2]
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800655c:	600b      	str	r3, [r1, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 800655e:	614c      	str	r4, [r1, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8006560:	618a      	str	r2, [r1, #24]
}
 8006562:	e7e6      	b.n	8006532 <HAL_HRTIM_TimeBaseConfig+0x3e>
 8006564:	fa5f fc83 	uxtb.w	ip, r3
}
 8006568:	4660      	mov	r0, ip
 800656a:	4770      	bx	lr

0800656c <HAL_HRTIM_EventConfig>:
{
 800656c:	b538      	push	{r3, r4, r5, lr}
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800656e:	f890 c0dd 	ldrb.w	ip, [r0, #221]	; 0xdd
 8006572:	f1bc 0f02 	cmp.w	ip, #2
 8006576:	fa5f f38c 	uxtb.w	r3, ip
 800657a:	d011      	beq.n	80065a0 <HAL_HRTIM_EventConfig+0x34>
  __HAL_LOCK(hhrtim);
 800657c:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 8006580:	2b01      	cmp	r3, #1
 8006582:	4604      	mov	r4, r0
 8006584:	d00e      	beq.n	80065a4 <HAL_HRTIM_EventConfig+0x38>
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006586:	2302      	movs	r3, #2
  __HAL_LOCK(hhrtim);
 8006588:	2501      	movs	r5, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800658a:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  __HAL_LOCK(hhrtim);
 800658e:	f880 50dc 	strb.w	r5, [r0, #220]	; 0xdc
  HRTIM_EventConfig(hhrtim, Event, pEventCfg);
 8006592:	f7ff fd69 	bl	8006068 <HRTIM_EventConfig>
  __HAL_UNLOCK(hhrtim);
 8006596:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006598:	f884 50dd 	strb.w	r5, [r4, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 800659c:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_BUSY;
 80065a4:	2302      	movs	r3, #2
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	bd38      	pop	{r3, r4, r5, pc}
 80065aa:	bf00      	nop

080065ac <HAL_HRTIM_EventPrescalerConfig>:
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80065ac:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	b2da      	uxtb	r2, r3
 80065b4:	d018      	beq.n	80065e8 <HAL_HRTIM_EventPrescalerConfig+0x3c>
  __HAL_LOCK(hhrtim);
 80065b6:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d016      	beq.n	80065ec <HAL_HRTIM_EventPrescalerConfig+0x40>
  MODIFY_REG(hhrtim->Instance->sCommonRegs.EECR3, HRTIM_EECR3_EEVSD, (Prescaler & HRTIM_EECR3_EEVSD));
 80065be:	6802      	ldr	r2, [r0, #0]
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80065c0:	2302      	movs	r3, #2
 80065c2:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  MODIFY_REG(hhrtim->Instance->sCommonRegs.EECR3, HRTIM_EECR3_EEVSD, (Prescaler & HRTIM_EECR3_EEVSD));
 80065c6:	f8d2 33b8 	ldr.w	r3, [r2, #952]	; 0x3b8
 80065ca:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 80065ce:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
  __HAL_UNLOCK(hhrtim);
 80065d2:	f04f 0c00 	mov.w	ip, #0
  MODIFY_REG(hhrtim->Instance->sCommonRegs.EECR3, HRTIM_EECR3_EEVSD, (Prescaler & HRTIM_EECR3_EEVSD));
 80065d6:	4319      	orrs	r1, r3
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80065d8:	2301      	movs	r3, #1
  MODIFY_REG(hhrtim->Instance->sCommonRegs.EECR3, HRTIM_EECR3_EEVSD, (Prescaler & HRTIM_EECR3_EEVSD));
 80065da:	f8c2 13b8 	str.w	r1, [r2, #952]	; 0x3b8
  return HAL_OK;
 80065de:	4662      	mov	r2, ip
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80065e0:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 80065e4:	f880 c0dc 	strb.w	ip, [r0, #220]	; 0xdc
}
 80065e8:	4610      	mov	r0, r2
 80065ea:	4770      	bx	lr
     return HAL_BUSY;
 80065ec:	2202      	movs	r2, #2
}
 80065ee:	4610      	mov	r0, r2
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop

080065f4 <HAL_HRTIM_FaultConfig>:
{
 80065f4:	b570      	push	{r4, r5, r6, lr}
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80065f6:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	b2dc      	uxtb	r4, r3
 80065fe:	d055      	beq.n	80066ac <HAL_HRTIM_FaultConfig+0xb8>
  __HAL_LOCK(hhrtim);
 8006600:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 8006604:	2b01      	cmp	r3, #1
 8006606:	f000 80e9 	beq.w	80067dc <HAL_HRTIM_FaultConfig+0x1e8>
 800660a:	2401      	movs	r4, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800660c:	2302      	movs	r3, #2
  __HAL_LOCK(hhrtim);
 800660e:	f880 40dc 	strb.w	r4, [r0, #220]	; 0xdc
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006612:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  hrtim_fltinr1 = hhrtim->Instance->sCommonRegs.FLTINR1;
 8006616:	6804      	ldr	r4, [r0, #0]
  source0 =  (pFaultCfg->Source & 1U);
 8006618:	6815      	ldr	r5, [r2, #0]
  switch (Fault)
 800661a:	f101 3cff 	add.w	ip, r1, #4294967295
  source0 =  (pFaultCfg->Source & 1U);
 800661e:	f005 0e01 	and.w	lr, r5, #1
  hrtim_fltinr1 = hhrtim->Instance->sCommonRegs.FLTINR1;
 8006622:	f8d4 13d0 	ldr.w	r1, [r4, #976]	; 0x3d0
  hrtim_fltinr2 = hhrtim->Instance->sCommonRegs.FLTINR2;
 8006626:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
  source1 = ((pFaultCfg->Source & 2U) >> 1);
 800662a:	f3c5 0540 	ubfx	r5, r5, #1, #1
  switch (Fault)
 800662e:	f1bc 0f1f 	cmp.w	ip, #31
 8006632:	d811      	bhi.n	8006658 <HAL_HRTIM_FaultConfig+0x64>
 8006634:	e8df f00c 	tbb	[pc, ip]
 8006638:	6f10563c 	.word	0x6f10563c
 800663c:	88101010 	.word	0x88101010
 8006640:	10101010 	.word	0x10101010
 8006644:	a1101010 	.word	0xa1101010
 8006648:	10101010 	.word	0x10101010
 800664c:	10101010 	.word	0x10101010
 8006650:	10101010 	.word	0x10101010
 8006654:	b8101010 	.word	0xb8101010
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006658:	2207      	movs	r2, #7
 800665a:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
      __HAL_UNLOCK(hhrtim);
 800665e:	2200      	movs	r2, #0
 8006660:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006664:	f890 20dd 	ldrb.w	r2, [r0, #221]	; 0xdd
 8006668:	2a07      	cmp	r2, #7
 800666a:	d038      	beq.n	80066de <HAL_HRTIM_FaultConfig+0xea>
  hhrtim->Instance->sCommonRegs.FLTINR1 = (hrtim_fltinr1 & (~(HRTIM_FLTINR1_FLTxLCK)));
 800666c:	f001 327f 	and.w	r2, r1, #2139062143	; 0x7f7f7f7f
 8006670:	f8c4 23d0 	str.w	r2, [r4, #976]	; 0x3d0
  hhrtim->Instance->sCommonRegs.FLTINR2 = (hrtim_fltinr2 & (~(HRTIM_FLTINR2_FLTxLCK)));
 8006674:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006678:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800667c:	f8c4 23d4 	str.w	r2, [r4, #980]	; 0x3d4
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR1,(hrtim_fltinr1 & HRTIM_FLTINR1_FLTxLCK));
 8006680:	f8d4 23d0 	ldr.w	r2, [r4, #976]	; 0x3d0
 8006684:	f001 3180 	and.w	r1, r1, #2155905152	; 0x80808080
 8006688:	4311      	orrs	r1, r2
 800668a:	f8c4 13d0 	str.w	r1, [r4, #976]	; 0x3d0
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR2,(hrtim_fltinr2 & HRTIM_FLTINR2_FLTxLCK));
 800668e:	f8d4 13d4 	ldr.w	r1, [r4, #980]	; 0x3d4
 8006692:	f248 0280 	movw	r2, #32896	; 0x8080
 8006696:	4013      	ands	r3, r2
 8006698:	430b      	orrs	r3, r1
  __HAL_UNLOCK(hhrtim);
 800669a:	2200      	movs	r2, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800669c:	2101      	movs	r1, #1
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR2,(hrtim_fltinr2 & HRTIM_FLTINR2_FLTxLCK));
 800669e:	f8c4 33d4 	str.w	r3, [r4, #980]	; 0x3d4
  return HAL_OK;
 80066a2:	4614      	mov	r4, r2
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80066a4:	f880 10dd 	strb.w	r1, [r0, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 80066a8:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
}
 80066ac:	4620      	mov	r0, r4
 80066ae:	bd70      	pop	{r4, r5, r6, pc}
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT1SRC_1_Pos);
 80066b0:	f365 4310 	bfi	r3, r5, #16, #1
      hrtim_fltinr1 |= (pFaultCfg->Polarity & HRTIM_FLTINR1_FLT1P);
 80066b4:	6855      	ldr	r5, [r2, #4]
      hrtim_fltinr1 |= (pFaultCfg->Lock & HRTIM_FLTINR1_FLT1LCK);
 80066b6:	e9d2 6202 	ldrd	r6, r2, [r2, #8]
      hrtim_fltinr1 |= (pFaultCfg->Polarity & HRTIM_FLTINR1_FLT1P);
 80066ba:	f005 0502 	and.w	r5, r5, #2
      hrtim_fltinr1 |= (pFaultCfg->Filter & HRTIM_FLTINR1_FLT1F);
 80066be:	f006 0678 	and.w	r6, r6, #120	; 0x78
      hrtim_fltinr1 |= (pFaultCfg->Lock & HRTIM_FLTINR1_FLT1LCK);
 80066c2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80066c6:	4335      	orrs	r5, r6
 80066c8:	4315      	orrs	r5, r2
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80066ca:	f890 20dd 	ldrb.w	r2, [r0, #221]	; 0xdd
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT1P | HRTIM_FLTINR1_FLT1SRC_0 | HRTIM_FLTINR1_FLT1F | HRTIM_FLTINR1_FLT1LCK);
 80066ce:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
      hrtim_fltinr1 |= (pFaultCfg->Lock & HRTIM_FLTINR1_FLT1LCK);
 80066d2:	ea45 0e8e 	orr.w	lr, r5, lr, lsl #2
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80066d6:	2a07      	cmp	r2, #7
      hrtim_fltinr1 |= (pFaultCfg->Lock & HRTIM_FLTINR1_FLT1LCK);
 80066d8:	ea4e 0101 	orr.w	r1, lr, r1
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80066dc:	d1c6      	bne.n	800666c <HAL_HRTIM_FaultConfig+0x78>
     return HAL_ERROR;
 80066de:	2401      	movs	r4, #1
}
 80066e0:	4620      	mov	r0, r4
 80066e2:	bd70      	pop	{r4, r5, r6, pc}
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT2SRC_1_Pos);
 80066e4:	f365 4351 	bfi	r3, r5, #17, #1
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR1_FLT2P);
 80066e8:	6855      	ldr	r5, [r2, #4]
 80066ea:	022d      	lsls	r5, r5, #8
 80066ec:	f405 7500 	and.w	r5, r5, #512	; 0x200
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR1_FLT2LCK);
 80066f0:	ea45 2e8e 	orr.w	lr, r5, lr, lsl #10
 80066f4:	e9d2 5202 	ldrd	r5, r2, [r2, #8]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR1_FLT2F);
 80066f8:	022d      	lsls	r5, r5, #8
 80066fa:	f405 45f0 	and.w	r5, r5, #30720	; 0x7800
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR1_FLT2LCK);
 80066fe:	0212      	lsls	r2, r2, #8
 8006700:	ea4e 0e05 	orr.w	lr, lr, r5
 8006704:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT2P | HRTIM_FLTINR1_FLT2SRC_0 | HRTIM_FLTINR1_FLT2F | HRTIM_FLTINR1_FLT2LCK);
 8006708:	f421 417e 	bic.w	r1, r1, #65024	; 0xfe00
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR1_FLT2LCK);
 800670c:	ea4e 0e02 	orr.w	lr, lr, r2
 8006710:	ea4e 0101 	orr.w	r1, lr, r1
      break;
 8006714:	e7a6      	b.n	8006664 <HAL_HRTIM_FaultConfig+0x70>
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT3SRC_1_Pos);
 8006716:	f365 4392 	bfi	r3, r5, #18, #1
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 16U) & HRTIM_FLTINR1_FLT3P);
 800671a:	6855      	ldr	r5, [r2, #4]
 800671c:	042d      	lsls	r5, r5, #16
 800671e:	f405 3500 	and.w	r5, r5, #131072	; 0x20000
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 16U) & HRTIM_FLTINR1_FLT3LCK);
 8006722:	ea45 4e8e 	orr.w	lr, r5, lr, lsl #18
 8006726:	e9d2 5202 	ldrd	r5, r2, [r2, #8]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 16U) & HRTIM_FLTINR1_FLT3F);
 800672a:	042d      	lsls	r5, r5, #16
 800672c:	f405 05f0 	and.w	r5, r5, #7864320	; 0x780000
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 16U) & HRTIM_FLTINR1_FLT3LCK);
 8006730:	0412      	lsls	r2, r2, #16
 8006732:	ea4e 0e05 	orr.w	lr, lr, r5
 8006736:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT3P | HRTIM_FLTINR1_FLT3SRC_0 | HRTIM_FLTINR1_FLT3F | HRTIM_FLTINR1_FLT3LCK);
 800673a:	f421 017e 	bic.w	r1, r1, #16646144	; 0xfe0000
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 16U) & HRTIM_FLTINR1_FLT3LCK);
 800673e:	ea4e 0e02 	orr.w	lr, lr, r2
 8006742:	ea4e 0101 	orr.w	r1, lr, r1
      break;
 8006746:	e78d      	b.n	8006664 <HAL_HRTIM_FaultConfig+0x70>
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT4SRC_1_Pos);
 8006748:	f365 43d3 	bfi	r3, r5, #19, #1
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 24U) & HRTIM_FLTINR1_FLT4P);
 800674c:	6855      	ldr	r5, [r2, #4]
 800674e:	062d      	lsls	r5, r5, #24
 8006750:	f005 7500 	and.w	r5, r5, #33554432	; 0x2000000
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 24U) & HRTIM_FLTINR1_FLT4LCK);
 8006754:	ea45 6e8e 	orr.w	lr, r5, lr, lsl #26
 8006758:	e9d2 5202 	ldrd	r5, r2, [r2, #8]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 24U) & HRTIM_FLTINR1_FLT4F);
 800675c:	062d      	lsls	r5, r5, #24
 800675e:	f005 45f0 	and.w	r5, r5, #2013265920	; 0x78000000
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 24U) & HRTIM_FLTINR1_FLT4LCK);
 8006762:	0612      	lsls	r2, r2, #24
 8006764:	ea4e 0e05 	orr.w	lr, lr, r5
 8006768:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT4P | HRTIM_FLTINR1_FLT4SRC_0 | HRTIM_FLTINR1_FLT4F | HRTIM_FLTINR1_FLT4LCK);
 800676c:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 24U) & HRTIM_FLTINR1_FLT4LCK);
 8006770:	ea4e 0e02 	orr.w	lr, lr, r2
 8006774:	ea4e 0101 	orr.w	r1, lr, r1
      break;
 8006778:	e774      	b.n	8006664 <HAL_HRTIM_FaultConfig+0x70>
      hrtim_fltinr2 |= (pFaultCfg->Polarity & HRTIM_FLTINR2_FLT5P);
 800677a:	6856      	ldr	r6, [r2, #4]
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT5SRC_0_Pos);
 800677c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
      hrtim_fltinr2 |= (pFaultCfg->Polarity & HRTIM_FLTINR2_FLT5P);
 8006780:	f006 0602 	and.w	r6, r6, #2
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT5SRC_0_Pos);
 8006784:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006788:	ea46 0e8e 	orr.w	lr, r6, lr, lsl #2
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT5SRC_1);
 800678c:	ea43 0e0e 	orr.w	lr, r3, lr
      hrtim_fltinr2 |= (pFaultCfg->Lock & HRTIM_FLTINR2_FLT5LCK);
 8006790:	e9d2 6302 	ldrd	r6, r3, [r2, #8]
      hrtim_fltinr2 |= (pFaultCfg->Filter & HRTIM_FLTINR2_FLT5F);
 8006794:	f006 0278 	and.w	r2, r6, #120	; 0x78
      hrtim_fltinr2 |= (pFaultCfg->Lock & HRTIM_FLTINR2_FLT5LCK);
 8006798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800679c:	4313      	orrs	r3, r2
 800679e:	ea43 5505 	orr.w	r5, r3, r5, lsl #20
 80067a2:	ea45 030e 	orr.w	r3, r5, lr
      break;
 80067a6:	e75d      	b.n	8006664 <HAL_HRTIM_FaultConfig+0x70>
      hrtim_fltinr2 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR2_FLT6P);
 80067a8:	6856      	ldr	r6, [r2, #4]
 80067aa:	0236      	lsls	r6, r6, #8
 80067ac:	f406 7600 	and.w	r6, r6, #512	; 0x200
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT6SRC_0_Pos);
 80067b0:	f423 1303 	bic.w	r3, r3, #2146304	; 0x20c000
 80067b4:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 80067b8:	ea46 2e8e 	orr.w	lr, r6, lr, lsl #10
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT6SRC_1);
 80067bc:	ea43 0e0e 	orr.w	lr, r3, lr
      hrtim_fltinr2 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR2_FLT6LCK);
 80067c0:	e9d2 6302 	ldrd	r6, r3, [r2, #8]
      hrtim_fltinr2 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR2_FLT6F);
 80067c4:	0232      	lsls	r2, r6, #8
      hrtim_fltinr2 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR2_FLT6LCK);
 80067c6:	021b      	lsls	r3, r3, #8
      hrtim_fltinr2 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR2_FLT6F);
 80067c8:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
      hrtim_fltinr2 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR2_FLT6LCK);
 80067cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067d0:	4313      	orrs	r3, r2
 80067d2:	ea43 5545 	orr.w	r5, r3, r5, lsl #21
 80067d6:	ea45 030e 	orr.w	r3, r5, lr
      break;
 80067da:	e743      	b.n	8006664 <HAL_HRTIM_FaultConfig+0x70>
     return HAL_BUSY;
 80067dc:	2402      	movs	r4, #2
}
 80067de:	4620      	mov	r0, r4
 80067e0:	bd70      	pop	{r4, r5, r6, pc}
 80067e2:	bf00      	nop

080067e4 <HAL_HRTIM_FaultPrescalerConfig>:
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80067e4:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	d018      	beq.n	8006820 <HAL_HRTIM_FaultPrescalerConfig+0x3c>
  __HAL_LOCK(hhrtim);
 80067ee:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d016      	beq.n	8006824 <HAL_HRTIM_FaultPrescalerConfig+0x40>
  MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLTSD, (Prescaler & HRTIM_FLTINR2_FLTSD));
 80067f6:	6802      	ldr	r2, [r0, #0]
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80067f8:	2302      	movs	r3, #2
 80067fa:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLTSD, (Prescaler & HRTIM_FLTINR2_FLTSD));
 80067fe:	f8d2 33d4 	ldr.w	r3, [r2, #980]	; 0x3d4
 8006802:	f001 7140 	and.w	r1, r1, #50331648	; 0x3000000
 8006806:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
  __HAL_UNLOCK(hhrtim);
 800680a:	f04f 0c00 	mov.w	ip, #0
  MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLTSD, (Prescaler & HRTIM_FLTINR2_FLTSD));
 800680e:	4319      	orrs	r1, r3
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006810:	2301      	movs	r3, #1
  MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLTSD, (Prescaler & HRTIM_FLTINR2_FLTSD));
 8006812:	f8c2 13d4 	str.w	r1, [r2, #980]	; 0x3d4
  return HAL_OK;
 8006816:	4662      	mov	r2, ip
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006818:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 800681c:	f880 c0dc 	strb.w	ip, [r0, #220]	; 0xdc
}
 8006820:	4610      	mov	r0, r2
 8006822:	4770      	bx	lr
     return HAL_BUSY;
 8006824:	2202      	movs	r2, #2
}
 8006826:	4610      	mov	r0, r2
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop

0800682c <HAL_HRTIM_FaultBlankingConfigAndEnable>:
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800682c:	f890 c0dd 	ldrb.w	ip, [r0, #221]	; 0xdd
 8006830:	f1bc 0f02 	cmp.w	ip, #2
 8006834:	fa5f f38c 	uxtb.w	r3, ip
 8006838:	d030      	beq.n	800689c <HAL_HRTIM_FaultBlankingConfigAndEnable+0x70>
  __HAL_LOCK(hhrtim);
 800683a:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 800683e:	2b01      	cmp	r3, #1
 8006840:	f000 8082 	beq.w	8006948 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x11c>
 8006844:	f04f 0c01 	mov.w	ip, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006848:	2302      	movs	r3, #2
  switch (Fault)
 800684a:	3901      	subs	r1, #1
  __HAL_LOCK(hhrtim);
 800684c:	f880 c0dc 	strb.w	ip, [r0, #220]	; 0xdc
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006850:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  switch (Fault)
 8006854:	291f      	cmp	r1, #31
 8006856:	d811      	bhi.n	800687c <HAL_HRTIM_FaultBlankingConfigAndEnable+0x50>
 8006858:	e8df f001 	tbb	[pc, r1]
 800685c:	42103522 	.word	0x42103522
 8006860:	4f101010 	.word	0x4f101010
 8006864:	10101010 	.word	0x10101010
 8006868:	5c101010 	.word	0x5c101010
 800686c:	10101010 	.word	0x10101010
 8006870:	10101010 	.word	0x10101010
 8006874:	10101010 	.word	0x10101010
 8006878:	69101010 	.word	0x69101010
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800687c:	2207      	movs	r2, #7
      __HAL_UNLOCK(hhrtim);
 800687e:	2300      	movs	r3, #0
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006880:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
      __HAL_UNLOCK(hhrtim);
 8006884:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006888:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 800688c:	2b07      	cmp	r3, #7
 800688e:	d017      	beq.n	80068c0 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x94>
  __HAL_UNLOCK(hhrtim);
 8006890:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006892:	2201      	movs	r2, #1
 8006894:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 8006898:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
}
 800689c:	4618      	mov	r0, r3
 800689e:	4770      	bx	lr
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 80068a0:	6801      	ldr	r1, [r0, #0]
 80068a2:	6892      	ldr	r2, [r2, #8]
 80068a4:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
 80068a8:	f023 0303 	bic.w	r3, r3, #3
 80068ac:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80068b0:	f043 0301 	orr.w	r3, r3, #1
 80068b4:	f8c1 3408 	str.w	r3, [r1, #1032]	; 0x408
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80068b8:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 80068bc:	2b07      	cmp	r3, #7
 80068be:	d1e7      	bne.n	8006890 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x64>
     return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	4770      	bx	lr
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 80068c6:	6801      	ldr	r1, [r0, #0]
 80068c8:	6892      	ldr	r2, [r2, #8]
 80068ca:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
 80068ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068d2:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 80068d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068da:	f8c1 3408 	str.w	r3, [r1, #1032]	; 0x408
       break;
 80068de:	e7d3      	b.n	8006888 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x5c>
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 80068e0:	6801      	ldr	r1, [r0, #0]
 80068e2:	6892      	ldr	r2, [r2, #8]
 80068e4:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
 80068e8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80068ec:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80068f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068f4:	f8c1 3408 	str.w	r3, [r1, #1032]	; 0x408
       break;
 80068f8:	e7c6      	b.n	8006888 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x5c>
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 80068fa:	6801      	ldr	r1, [r0, #0]
 80068fc:	6892      	ldr	r2, [r2, #8]
 80068fe:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
 8006902:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8006906:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800690a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800690e:	f8c1 3408 	str.w	r3, [r1, #1032]	; 0x408
       break;
 8006912:	e7b9      	b.n	8006888 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x5c>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8006914:	6801      	ldr	r1, [r0, #0]
 8006916:	6892      	ldr	r2, [r2, #8]
 8006918:	f8d1 340c 	ldr.w	r3, [r1, #1036]	; 0x40c
 800691c:	f023 0303 	bic.w	r3, r3, #3
 8006920:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8006924:	f043 0301 	orr.w	r3, r3, #1
 8006928:	f8c1 340c 	str.w	r3, [r1, #1036]	; 0x40c
      break;
 800692c:	e7ac      	b.n	8006888 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x5c>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 800692e:	6801      	ldr	r1, [r0, #0]
 8006930:	6892      	ldr	r2, [r2, #8]
 8006932:	f8d1 340c 	ldr.w	r3, [r1, #1036]	; 0x40c
 8006936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800693a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 800693e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006942:	f8c1 340c 	str.w	r3, [r1, #1036]	; 0x40c
      break;
 8006946:	e79f      	b.n	8006888 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x5c>
     return HAL_BUSY;
 8006948:	2302      	movs	r3, #2
}
 800694a:	4618      	mov	r0, r3
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop

08006950 <HAL_HRTIM_FaultCounterConfig>:
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006950:	f890 c0dd 	ldrb.w	ip, [r0, #221]	; 0xdd
 8006954:	f1bc 0f02 	cmp.w	ip, #2
 8006958:	fa5f f38c 	uxtb.w	r3, ip
 800695c:	f000 8093 	beq.w	8006a86 <HAL_HRTIM_FaultCounterConfig+0x136>
  __HAL_LOCK(hhrtim);
 8006960:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 8006964:	2b01      	cmp	r3, #1
 8006966:	f000 808d 	beq.w	8006a84 <HAL_HRTIM_FaultCounterConfig+0x134>
 800696a:	f04f 0c01 	mov.w	ip, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800696e:	2302      	movs	r3, #2
  switch (Fault)
 8006970:	3901      	subs	r1, #1
{
 8006972:	b410      	push	{r4}
  __HAL_LOCK(hhrtim);
 8006974:	f880 c0dc 	strb.w	ip, [r0, #220]	; 0xdc
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006978:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  switch (Fault)
 800697c:	291f      	cmp	r1, #31
 800697e:	d811      	bhi.n	80069a4 <HAL_HRTIM_FaultCounterConfig+0x54>
 8006980:	e8df f001 	tbb	[pc, r1]
 8006984:	3a107224 	.word	0x3a107224
 8006988:	48101010 	.word	0x48101010
 800698c:	10101010 	.word	0x10101010
 8006990:	56101010 	.word	0x56101010
 8006994:	10101010 	.word	0x10101010
 8006998:	10101010 	.word	0x10101010
 800699c:	10101010 	.word	0x10101010
 80069a0:	64101010 	.word	0x64101010
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80069a4:	2207      	movs	r2, #7
      __HAL_UNLOCK(hhrtim);
 80069a6:	2300      	movs	r3, #0
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80069a8:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
      __HAL_UNLOCK(hhrtim);
 80069ac:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80069b0:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 80069b4:	2b07      	cmp	r3, #7
 80069b6:	d01a      	beq.n	80069ee <HAL_HRTIM_FaultCounterConfig+0x9e>
  __HAL_UNLOCK(hhrtim);
 80069b8:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80069ba:	2201      	movs	r2, #1
 80069bc:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 80069c0:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
}
 80069c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069c8:	4618      	mov	r0, r3
 80069ca:	4770      	bx	lr
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 80069cc:	e9d2 4300 	ldrd	r4, r3, [r2]
 80069d0:	6801      	ldr	r1, [r0, #0]
 80069d2:	f8d1 2408 	ldr.w	r2, [r1, #1032]	; 0x408
 80069d6:	01db      	lsls	r3, r3, #7
 80069d8:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 80069dc:	f022 02bc 	bic.w	r2, r2, #188	; 0xbc
 80069e0:	4313      	orrs	r3, r2
 80069e2:	f8c1 3408 	str.w	r3, [r1, #1032]	; 0x408
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80069e6:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 80069ea:	2b07      	cmp	r3, #7
 80069ec:	d1e4      	bne.n	80069b8 <HAL_HRTIM_FaultCounterConfig+0x68>
     return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069f6:	4770      	bx	lr
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 80069f8:	e9d2 4300 	ldrd	r4, r3, [r2]
 80069fc:	6801      	ldr	r1, [r0, #0]
 80069fe:	f8d1 2408 	ldr.w	r2, [r1, #1032]	; 0x408
 8006a02:	05db      	lsls	r3, r3, #23
 8006a04:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8006a08:	f422 023c 	bic.w	r2, r2, #12320768	; 0xbc0000
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	f8c1 3408 	str.w	r3, [r1, #1032]	; 0x408
       break;
 8006a12:	e7cd      	b.n	80069b0 <HAL_HRTIM_FaultCounterConfig+0x60>
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8006a14:	e9d2 4300 	ldrd	r4, r3, [r2]
 8006a18:	6801      	ldr	r1, [r0, #0]
 8006a1a:	f8d1 2408 	ldr.w	r2, [r1, #1032]	; 0x408
 8006a1e:	07db      	lsls	r3, r3, #31
 8006a20:	ea43 6384 	orr.w	r3, r3, r4, lsl #26
 8006a24:	f022 423c 	bic.w	r2, r2, #3154116608	; 0xbc000000
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	f8c1 3408 	str.w	r3, [r1, #1032]	; 0x408
       break;
 8006a2e:	e7bf      	b.n	80069b0 <HAL_HRTIM_FaultCounterConfig+0x60>
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8006a30:	e9d2 4300 	ldrd	r4, r3, [r2]
 8006a34:	6801      	ldr	r1, [r0, #0]
 8006a36:	f8d1 240c 	ldr.w	r2, [r1, #1036]	; 0x40c
 8006a3a:	01db      	lsls	r3, r3, #7
 8006a3c:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 8006a40:	f022 02bc 	bic.w	r2, r2, #188	; 0xbc
 8006a44:	4313      	orrs	r3, r2
 8006a46:	f8c1 340c 	str.w	r3, [r1, #1036]	; 0x40c
       break;
 8006a4a:	e7b1      	b.n	80069b0 <HAL_HRTIM_FaultCounterConfig+0x60>
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8006a4c:	e9d2 4300 	ldrd	r4, r3, [r2]
 8006a50:	6801      	ldr	r1, [r0, #0]
 8006a52:	f8d1 240c 	ldr.w	r2, [r1, #1036]	; 0x40c
 8006a56:	03db      	lsls	r3, r3, #15
 8006a58:	ea43 2384 	orr.w	r3, r3, r4, lsl #10
 8006a5c:	f422 423c 	bic.w	r2, r2, #48128	; 0xbc00
 8006a60:	4313      	orrs	r3, r2
 8006a62:	f8c1 340c 	str.w	r3, [r1, #1036]	; 0x40c
       break;
 8006a66:	e7a3      	b.n	80069b0 <HAL_HRTIM_FaultCounterConfig+0x60>
       MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8006a68:	e9d2 4300 	ldrd	r4, r3, [r2]
 8006a6c:	6801      	ldr	r1, [r0, #0]
 8006a6e:	f8d1 2408 	ldr.w	r2, [r1, #1032]	; 0x408
 8006a72:	03db      	lsls	r3, r3, #15
 8006a74:	ea43 2384 	orr.w	r3, r3, r4, lsl #10
 8006a78:	f422 423c 	bic.w	r2, r2, #48128	; 0xbc00
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	f8c1 3408 	str.w	r3, [r1, #1032]	; 0x408
       break;
 8006a82:	e795      	b.n	80069b0 <HAL_HRTIM_FaultCounterConfig+0x60>
     return HAL_BUSY;
 8006a84:	2302      	movs	r3, #2
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop

08006a8c <HAL_HRTIM_FaultModeCtl>:
{
 8006a8c:	b410      	push	{r4}
  if ((Faults & HRTIM_FAULT_1) != (uint32_t)RESET)
 8006a8e:	07cc      	lsls	r4, r1, #31
 8006a90:	d50a      	bpl.n	8006aa8 <HAL_HRTIM_FaultModeCtl+0x1c>
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT1E, (Enable & HRTIM_FLTINR1_FLT1E));
 8006a92:	6804      	ldr	r4, [r0, #0]
 8006a94:	f8d4 33d0 	ldr.w	r3, [r4, #976]	; 0x3d0
 8006a98:	f002 0c01 	and.w	ip, r2, #1
 8006a9c:	f023 0301 	bic.w	r3, r3, #1
 8006aa0:	ea43 030c 	orr.w	r3, r3, ip
 8006aa4:	f8c4 33d0 	str.w	r3, [r4, #976]	; 0x3d0
  if ((Faults & HRTIM_FAULT_2) != (uint32_t)RESET)
 8006aa8:	078b      	lsls	r3, r1, #30
 8006aaa:	d50b      	bpl.n	8006ac4 <HAL_HRTIM_FaultModeCtl+0x38>
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT2E, ((Enable << 8U) & HRTIM_FLTINR1_FLT2E));
 8006aac:	6804      	ldr	r4, [r0, #0]
 8006aae:	f8d4 33d0 	ldr.w	r3, [r4, #976]	; 0x3d0
 8006ab2:	f423 7c80 	bic.w	ip, r3, #256	; 0x100
 8006ab6:	0213      	lsls	r3, r2, #8
 8006ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006abc:	ea43 030c 	orr.w	r3, r3, ip
 8006ac0:	f8c4 33d0 	str.w	r3, [r4, #976]	; 0x3d0
  if ((Faults & HRTIM_FAULT_3) != (uint32_t)RESET)
 8006ac4:	074c      	lsls	r4, r1, #29
 8006ac6:	d50b      	bpl.n	8006ae0 <HAL_HRTIM_FaultModeCtl+0x54>
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT3E, ((Enable << 16U) & HRTIM_FLTINR1_FLT3E));
 8006ac8:	6804      	ldr	r4, [r0, #0]
 8006aca:	f8d4 33d0 	ldr.w	r3, [r4, #976]	; 0x3d0
 8006ace:	f423 3c80 	bic.w	ip, r3, #65536	; 0x10000
 8006ad2:	0413      	lsls	r3, r2, #16
 8006ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ad8:	ea43 030c 	orr.w	r3, r3, ip
 8006adc:	f8c4 33d0 	str.w	r3, [r4, #976]	; 0x3d0
  if ((Faults & HRTIM_FAULT_4) != (uint32_t)RESET)
 8006ae0:	070b      	lsls	r3, r1, #28
 8006ae2:	d50b      	bpl.n	8006afc <HAL_HRTIM_FaultModeCtl+0x70>
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT4E, ((Enable << 24U) & HRTIM_FLTINR1_FLT4E));
 8006ae4:	6804      	ldr	r4, [r0, #0]
 8006ae6:	f8d4 33d0 	ldr.w	r3, [r4, #976]	; 0x3d0
 8006aea:	f023 7c80 	bic.w	ip, r3, #16777216	; 0x1000000
 8006aee:	0613      	lsls	r3, r2, #24
 8006af0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006af4:	ea43 030c 	orr.w	r3, r3, ip
 8006af8:	f8c4 33d0 	str.w	r3, [r4, #976]	; 0x3d0
  if ((Faults & HRTIM_FAULT_5) != (uint32_t)RESET)
 8006afc:	06cc      	lsls	r4, r1, #27
 8006afe:	d50a      	bpl.n	8006b16 <HAL_HRTIM_FaultModeCtl+0x8a>
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLT5E, ((Enable) & HRTIM_FLTINR2_FLT5E));
 8006b00:	6804      	ldr	r4, [r0, #0]
 8006b02:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8006b06:	f002 0c01 	and.w	ip, r2, #1
 8006b0a:	f023 0301 	bic.w	r3, r3, #1
 8006b0e:	ea43 030c 	orr.w	r3, r3, ip
 8006b12:	f8c4 33d4 	str.w	r3, [r4, #980]	; 0x3d4
  if ((Faults & HRTIM_FAULT_6) != (uint32_t)RESET)
 8006b16:	068b      	lsls	r3, r1, #26
 8006b18:	d50a      	bpl.n	8006b30 <HAL_HRTIM_FaultModeCtl+0xa4>
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLT6E, ((Enable << 8U) & HRTIM_FLTINR2_FLT6E));
 8006b1a:	6801      	ldr	r1, [r0, #0]
 8006b1c:	f8d1 33d4 	ldr.w	r3, [r1, #980]	; 0x3d4
 8006b20:	0212      	lsls	r2, r2, #8
 8006b22:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8006b26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b2a:	431a      	orrs	r2, r3
 8006b2c:	f8c1 23d4 	str.w	r2, [r1, #980]	; 0x3d4
}
 8006b30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop

08006b38 <HAL_HRTIM_ADCTriggerConfig>:
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006b38:	f890 c0dd 	ldrb.w	ip, [r0, #221]	; 0xdd
 8006b3c:	f1bc 0f02 	cmp.w	ip, #2
 8006b40:	fa5f f38c 	uxtb.w	r3, ip
 8006b44:	f000 80f8 	beq.w	8006d38 <HAL_HRTIM_ADCTriggerConfig+0x200>
  __HAL_LOCK(hhrtim);
 8006b48:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	f000 80f2 	beq.w	8006d36 <HAL_HRTIM_ADCTriggerConfig+0x1fe>
 8006b52:	2301      	movs	r3, #1
{
 8006b54:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hhrtim);
 8006b56:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 8006b5a:	6804      	ldr	r4, [r0, #0]
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  switch (ADCTrigger)
 8006b62:	2920      	cmp	r1, #32
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 8006b64:	f8d4 6380 	ldr.w	r6, [r4, #896]	; 0x380
  hrtim_adcur = hhrtim->Instance->sCommonRegs.ADCUR;
 8006b68:	f8d4 53fc 	ldr.w	r5, [r4, #1020]	; 0x3fc
  switch (ADCTrigger)
 8006b6c:	d818      	bhi.n	8006ba0 <HAL_HRTIM_ADCTriggerConfig+0x68>
 8006b6e:	2900      	cmp	r1, #0
 8006b70:	f000 80fa 	beq.w	8006d68 <HAL_HRTIM_ADCTriggerConfig+0x230>
 8006b74:	1e4b      	subs	r3, r1, #1
 8006b76:	2b1f      	cmp	r3, #31
 8006b78:	f200 80f6 	bhi.w	8006d68 <HAL_HRTIM_ADCTriggerConfig+0x230>
 8006b7c:	e8df f003 	tbb	[pc, r3]
 8006b80:	b6f4ab9b 	.word	0xb6f4ab9b
 8006b84:	c1f4f4f4 	.word	0xc1f4f4f4
 8006b88:	f4f4f4f4 	.word	0xf4f4f4f4
 8006b8c:	72f4f4f4 	.word	0x72f4f4f4
 8006b90:	f4f4f4f4 	.word	0xf4f4f4f4
 8006b94:	f4f4f4f4 	.word	0xf4f4f4f4
 8006b98:	f4f4f4f4 	.word	0xf4f4f4f4
 8006b9c:	84f4f4f4 	.word	0x84f4f4f4
 8006ba0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006ba4:	f000 80ca 	beq.w	8006d3c <HAL_HRTIM_ADCTriggerConfig+0x204>
 8006ba8:	d929      	bls.n	8006bfe <HAL_HRTIM_ADCTriggerConfig+0xc6>
 8006baa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006bae:	f040 80b3 	bne.w	8006d18 <HAL_HRTIM_ADCTriggerConfig+0x1e0>
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 8006bb2:	e9d2 1300 	ldrd	r1, r3, [r2]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource << 4U) & HRTIM_ADCUR_AD10USRC);
 8006bb6:	010a      	lsls	r2, r1, #4
 8006bb8:	f402 02e0 	and.w	r2, r2, #7340032	; 0x700000
      hrtim_adcur &= ~(HRTIM_ADCUR_AD10USRC);
 8006bbc:	f425 05e0 	bic.w	r5, r5, #7340032	; 0x700000
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource << 4U) & HRTIM_ADCUR_AD10USRC);
 8006bc0:	4315      	orrs	r5, r2
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD10TRG);
 8006bc2:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	; 0x3f8
 8006bc6:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 8006bca:	f8c4 23f8 	str.w	r2, [r4, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 8006bce:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	; 0x3f8
 8006bd2:	069b      	lsls	r3, r3, #26
 8006bd4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006bde:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 8006be2:	2b07      	cmp	r3, #7
 8006be4:	f000 80a3 	beq.w	8006d2e <HAL_HRTIM_ADCTriggerConfig+0x1f6>
   hhrtim->Instance->sCommonRegs.ADCUR = hrtim_adcur;
 8006be8:	f8c4 53fc 	str.w	r5, [r4, #1020]	; 0x3fc
  __HAL_UNLOCK(hhrtim);
 8006bec:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 8006bf4:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
}
 8006bf8:	bc70      	pop	{r4, r5, r6}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	4770      	bx	lr
  switch (ADCTrigger)
 8006bfe:	2940      	cmp	r1, #64	; 0x40
 8006c00:	d019      	beq.n	8006c36 <HAL_HRTIM_ADCTriggerConfig+0xfe>
 8006c02:	2980      	cmp	r1, #128	; 0x80
 8006c04:	f040 8088 	bne.w	8006d18 <HAL_HRTIM_ADCTriggerConfig+0x1e0>
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 8006c08:	e9d2 1300 	ldrd	r1, r3, [r2]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 4U) & HRTIM_ADCUR_AD8USRC);
 8006c0c:	090a      	lsrs	r2, r1, #4
 8006c0e:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
      hrtim_adcur &= ~(HRTIM_ADCUR_AD8USRC);
 8006c12:	f425 45e0 	bic.w	r5, r5, #28672	; 0x7000
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 4U) & HRTIM_ADCUR_AD8USRC);
 8006c16:	4315      	orrs	r5, r2
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD8TRG);
 8006c18:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	; 0x3f8
 8006c1c:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8006c20:	f8c4 23f8 	str.w	r2, [r4, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 8006c24:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	; 0x3f8
 8006c28:	041b      	lsls	r3, r3, #16
 8006c2a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
      break;
 8006c34:	e7d3      	b.n	8006bde <HAL_HRTIM_ADCTriggerConfig+0xa6>
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 8006c36:	e9d2 1300 	ldrd	r1, r3, [r2]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 8U) & HRTIM_ADCUR_AD7USRC);
 8006c3a:	0a0a      	lsrs	r2, r1, #8
 8006c3c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
      hrtim_adcur &= ~(HRTIM_ADCUR_AD7USRC);
 8006c40:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 8U) & HRTIM_ADCUR_AD7USRC);
 8006c44:	4315      	orrs	r5, r2
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD7TRG);
 8006c46:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	; 0x3f8
 8006c4a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006c4e:	f8c4 23f8 	str.w	r2, [r4, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 8006c52:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	; 0x3f8
 8006c56:	029b      	lsls	r3, r3, #10
 8006c58:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
      break;
 8006c62:	e7bc      	b.n	8006bde <HAL_HRTIM_ADCTriggerConfig+0xa6>
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 16U) & HRTIM_ADCUR_AD5USRC);
 8006c64:	8851      	ldrh	r1, [r2, #2]
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 8006c66:	6853      	ldr	r3, [r2, #4]
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD5TRG);
 8006c68:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	; 0x3f8
 8006c6c:	f022 021f 	bic.w	r2, r2, #31
 8006c70:	f8c4 23f8 	str.w	r2, [r4, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 8006c74:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	; 0x3f8
 8006c78:	f003 031f 	and.w	r3, r3, #31
 8006c7c:	4313      	orrs	r3, r2
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 16U) & HRTIM_ADCUR_AD5USRC);
 8006c7e:	f361 0502 	bfi	r5, r1, #0, #3
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 8006c82:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
      break;
 8006c86:	e7aa      	b.n	8006bde <HAL_HRTIM_ADCTriggerConfig+0xa6>
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 8006c88:	e9d2 1300 	ldrd	r1, r3, [r2]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 12U) & HRTIM_ADCUR_AD6USRC);
 8006c8c:	0b0a      	lsrs	r2, r1, #12
 8006c8e:	f002 0270 	and.w	r2, r2, #112	; 0x70
      hrtim_adcur &= ~(HRTIM_ADCUR_AD6USRC);
 8006c92:	f025 0570 	bic.w	r5, r5, #112	; 0x70
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 12U) & HRTIM_ADCUR_AD6USRC);
 8006c96:	4315      	orrs	r5, r2
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD6TRG);
 8006c98:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	; 0x3f8
 8006c9c:	f422 7278 	bic.w	r2, r2, #992	; 0x3e0
 8006ca0:	f8c4 23f8 	str.w	r2, [r4, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 8006ca4:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	; 0x3f8
 8006ca8:	015b      	lsls	r3, r3, #5
 8006caa:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
      break;
 8006cb4:	e793      	b.n	8006bde <HAL_HRTIM_ADCTriggerConfig+0xa6>
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 8006cb6:	e9d2 3200 	ldrd	r3, r2, [r2]
      hrtim_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 8006cba:	f426 26e0 	bic.w	r6, r6, #458752	; 0x70000
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 8006cbe:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006cc2:	431e      	orrs	r6, r3
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 8006cc4:	f8c4 23bc 	str.w	r2, [r4, #956]	; 0x3bc
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006cc8:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 8006ccc:	2b07      	cmp	r3, #7
 8006cce:	d02e      	beq.n	8006d2e <HAL_HRTIM_ADCTriggerConfig+0x1f6>
   hhrtim->Instance->sCommonRegs.CR1 = hrtim_cr1;
 8006cd0:	f8c4 6380 	str.w	r6, [r4, #896]	; 0x380
 8006cd4:	e78a      	b.n	8006bec <HAL_HRTIM_ADCTriggerConfig+0xb4>
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 8006cd6:	e9d2 3200 	ldrd	r3, r2, [r2]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 8006cda:	00db      	lsls	r3, r3, #3
      hrtim_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 8006cdc:	f426 1660 	bic.w	r6, r6, #3670016	; 0x380000
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 8006ce0:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8006ce4:	431e      	orrs	r6, r3
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 8006ce6:	f8c4 23c0 	str.w	r2, [r4, #960]	; 0x3c0
      break;
 8006cea:	e7ed      	b.n	8006cc8 <HAL_HRTIM_ADCTriggerConfig+0x190>
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 8006cec:	e9d2 3200 	ldrd	r3, r2, [r2]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 8006cf0:	019b      	lsls	r3, r3, #6
      hrtim_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 8006cf2:	f026 76e0 	bic.w	r6, r6, #29360128	; 0x1c00000
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 8006cf6:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
 8006cfa:	431e      	orrs	r6, r3
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 8006cfc:	f8c4 23c4 	str.w	r2, [r4, #964]	; 0x3c4
      break;
 8006d00:	e7e2      	b.n	8006cc8 <HAL_HRTIM_ADCTriggerConfig+0x190>
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 8006d02:	e9d2 3200 	ldrd	r3, r2, [r2]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 8006d06:	025b      	lsls	r3, r3, #9
      hrtim_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 8006d08:	f026 6660 	bic.w	r6, r6, #234881024	; 0xe000000
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 8006d0c:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
 8006d10:	431e      	orrs	r6, r3
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 8006d12:	f8c4 23c8 	str.w	r2, [r4, #968]	; 0x3c8
      break;
 8006d16:	e7d7      	b.n	8006cc8 <HAL_HRTIM_ADCTriggerConfig+0x190>
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006d18:	2307      	movs	r3, #7
 8006d1a:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006d1e:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
      __HAL_UNLOCK(hhrtim);
 8006d22:	2200      	movs	r2, #0
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006d24:	2b07      	cmp	r3, #7
      __HAL_UNLOCK(hhrtim);
 8006d26:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006d2a:	f47f af5d 	bne.w	8006be8 <HAL_HRTIM_ADCTriggerConfig+0xb0>
     return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	bc70      	pop	{r4, r5, r6}
 8006d34:	4770      	bx	lr
     return HAL_BUSY;
 8006d36:	2302      	movs	r3, #2
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD9TRG_Pos) & HRTIM_ADCER_AD9TRG);
 8006d3c:	e9d2 1300 	ldrd	r1, r3, [r2]
      hrtim_adcur &= ~(HRTIM_ADCUR_AD9USRC);
 8006d40:	f425 25e0 	bic.w	r5, r5, #458752	; 0x70000
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource) & HRTIM_ADCUR_AD9USRC);
 8006d44:	f401 22e0 	and.w	r2, r1, #458752	; 0x70000
 8006d48:	4315      	orrs	r5, r2
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD9TRG);
 8006d4a:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	; 0x3f8
 8006d4e:	f022 7278 	bic.w	r2, r2, #65011712	; 0x3e00000
 8006d52:	f8c4 23f8 	str.w	r2, [r4, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD9TRG_Pos) & HRTIM_ADCER_AD9TRG);
 8006d56:	f8d4 23f8 	ldr.w	r2, [r4, #1016]	; 0x3f8
 8006d5a:	055b      	lsls	r3, r3, #21
 8006d5c:	f003 7378 	and.w	r3, r3, #65011712	; 0x3e00000
 8006d60:	4313      	orrs	r3, r2
 8006d62:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
      break;
 8006d66:	e73a      	b.n	8006bde <HAL_HRTIM_ADCTriggerConfig+0xa6>
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006d68:	2307      	movs	r3, #7
 8006d6a:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006d6e:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
      __HAL_UNLOCK(hhrtim);
 8006d72:	2200      	movs	r2, #0
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006d74:	2b07      	cmp	r3, #7
      __HAL_UNLOCK(hhrtim);
 8006d76:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006d7a:	d0d8      	beq.n	8006d2e <HAL_HRTIM_ADCTriggerConfig+0x1f6>
  if (ADCTrigger < HRTIM_ADCTRIGGER_5)
 8006d7c:	290f      	cmp	r1, #15
 8006d7e:	d9a7      	bls.n	8006cd0 <HAL_HRTIM_ADCTriggerConfig+0x198>
 8006d80:	e732      	b.n	8006be8 <HAL_HRTIM_ADCTriggerConfig+0xb0>
 8006d82:	bf00      	nop

08006d84 <HAL_HRTIM_ADCPostScalerConfig>:
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006d84:	f890 c0dd 	ldrb.w	ip, [r0, #221]	; 0xdd
 8006d88:	f1bc 0f02 	cmp.w	ip, #2
 8006d8c:	fa5f f38c 	uxtb.w	r3, ip
 8006d90:	f000 80b6 	beq.w	8006f00 <HAL_HRTIM_ADCPostScalerConfig+0x17c>
  __HAL_LOCK(hhrtim);
 8006d94:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	f000 80b0 	beq.w	8006efe <HAL_HRTIM_ADCPostScalerConfig+0x17a>
 8006d9e:	f04f 0c01 	mov.w	ip, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006da2:	2302      	movs	r3, #2
  switch (ADCTrigger)
 8006da4:	2920      	cmp	r1, #32
{
 8006da6:	b410      	push	{r4}
  __HAL_LOCK(hhrtim);
 8006da8:	f880 c0dc 	strb.w	ip, [r0, #220]	; 0xdc
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006dac:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  switch (ADCTrigger)
 8006db0:	d816      	bhi.n	8006de0 <HAL_HRTIM_ADCPostScalerConfig+0x5c>
 8006db2:	2900      	cmp	r1, #0
 8006db4:	d045      	beq.n	8006e42 <HAL_HRTIM_ADCPostScalerConfig+0xbe>
 8006db6:	3901      	subs	r1, #1
 8006db8:	291f      	cmp	r1, #31
 8006dba:	d842      	bhi.n	8006e42 <HAL_HRTIM_ADCPostScalerConfig+0xbe>
 8006dbc:	e8df f001 	tbb	[pc, r1]
 8006dc0:	8e418277 	.word	0x8e418277
 8006dc4:	5f414141 	.word	0x5f414141
 8006dc8:	41414141 	.word	0x41414141
 8006dcc:	6b414141 	.word	0x6b414141
 8006dd0:	41414141 	.word	0x41414141
 8006dd4:	41414141 	.word	0x41414141
 8006dd8:	41414141 	.word	0x41414141
 8006ddc:	54414141 	.word	0x54414141
 8006de0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006de4:	f000 808e 	beq.w	8006f04 <HAL_HRTIM_ADCPostScalerConfig+0x180>
 8006de8:	d91b      	bls.n	8006e22 <HAL_HRTIM_ADCPostScalerConfig+0x9e>
 8006dea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006dee:	d128      	bne.n	8006e42 <HAL_HRTIM_ADCPostScalerConfig+0xbe>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD10PSC, ((Postscaler << HRTIM_ADCPS2_AD10PSC_Pos) & HRTIM_ADCPS2_AD10PSC));
 8006df0:	6801      	ldr	r1, [r0, #0]
 8006df2:	0613      	lsls	r3, r2, #24
 8006df4:	f8d1 2404 	ldr.w	r2, [r1, #1028]	; 0x404
 8006df8:	f003 53f8 	and.w	r3, r3, #520093696	; 0x1f000000
 8006dfc:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
 8006e00:	4313      	orrs	r3, r2
 8006e02:	f8c1 3404 	str.w	r3, [r1, #1028]	; 0x404
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006e06:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 8006e0a:	2b07      	cmp	r3, #7
 8006e0c:	d072      	beq.n	8006ef4 <HAL_HRTIM_ADCPostScalerConfig+0x170>
  __HAL_UNLOCK(hhrtim);
 8006e0e:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006e10:	2201      	movs	r2, #1
 8006e12:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 8006e16:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
}
 8006e1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e1e:	4618      	mov	r0, r3
 8006e20:	4770      	bx	lr
  switch (ADCTrigger)
 8006e22:	2940      	cmp	r1, #64	; 0x40
 8006e24:	d014      	beq.n	8006e50 <HAL_HRTIM_ADCPostScalerConfig+0xcc>
 8006e26:	2980      	cmp	r1, #128	; 0x80
 8006e28:	d10b      	bne.n	8006e42 <HAL_HRTIM_ADCPostScalerConfig+0xbe>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD8PSC, ((Postscaler << HRTIM_ADCPS2_AD8PSC_Pos) & HRTIM_ADCPS2_AD8PSC));
 8006e2a:	6801      	ldr	r1, [r0, #0]
 8006e2c:	f8d1 3404 	ldr.w	r3, [r1, #1028]	; 0x404
 8006e30:	0312      	lsls	r2, r2, #12
 8006e32:	f402 32f8 	and.w	r2, r2, #126976	; 0x1f000
 8006e36:	f423 33f8 	bic.w	r3, r3, #126976	; 0x1f000
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	f8c1 2404 	str.w	r2, [r1, #1028]	; 0x404
      break;
 8006e40:	e7e1      	b.n	8006e06 <HAL_HRTIM_ADCPostScalerConfig+0x82>
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006e42:	2207      	movs	r2, #7
      __HAL_UNLOCK(hhrtim);
 8006e44:	2300      	movs	r3, #0
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006e46:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
      __HAL_UNLOCK(hhrtim);
 8006e4a:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
      break;
 8006e4e:	e7da      	b.n	8006e06 <HAL_HRTIM_ADCPostScalerConfig+0x82>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD7PSC, ((Postscaler << HRTIM_ADCPS2_AD7PSC_Pos) & HRTIM_ADCPS2_AD7PSC));
 8006e50:	6801      	ldr	r1, [r0, #0]
 8006e52:	f8d1 3404 	ldr.w	r3, [r1, #1028]	; 0x404
 8006e56:	0192      	lsls	r2, r2, #6
 8006e58:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 8006e5c:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 8006e60:	431a      	orrs	r2, r3
 8006e62:	f8c1 2404 	str.w	r2, [r1, #1028]	; 0x404
      break;
 8006e66:	e7ce      	b.n	8006e06 <HAL_HRTIM_ADCPostScalerConfig+0x82>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD6PSC, ((Postscaler << HRTIM_ADCPS2_AD6PSC_Pos) & HRTIM_ADCPS2_AD6PSC));
 8006e68:	6804      	ldr	r4, [r0, #0]
 8006e6a:	f8d4 1404 	ldr.w	r1, [r4, #1028]	; 0x404
 8006e6e:	f002 021f 	and.w	r2, r2, #31
 8006e72:	f021 011f 	bic.w	r1, r1, #31
 8006e76:	430a      	orrs	r2, r1
 8006e78:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
      break;
 8006e7c:	e7c3      	b.n	8006e06 <HAL_HRTIM_ADCPostScalerConfig+0x82>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD4PSC, ((Postscaler << HRTIM_ADCPS1_AD4PSC_Pos) & HRTIM_ADCPS1_AD4PSC));
 8006e7e:	6801      	ldr	r1, [r0, #0]
 8006e80:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
 8006e84:	0492      	lsls	r2, r2, #18
 8006e86:	f402 02f8 	and.w	r2, r2, #8126464	; 0x7c0000
 8006e8a:	f423 03f8 	bic.w	r3, r3, #8126464	; 0x7c0000
 8006e8e:	431a      	orrs	r2, r3
 8006e90:	f8c1 2400 	str.w	r2, [r1, #1024]	; 0x400
      break;
 8006e94:	e7b7      	b.n	8006e06 <HAL_HRTIM_ADCPostScalerConfig+0x82>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD5PSC, ((Postscaler << HRTIM_ADCPS1_AD5PSC_Pos) & HRTIM_ADCPS1_AD5PSC));
 8006e96:	6801      	ldr	r1, [r0, #0]
 8006e98:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
 8006e9c:	0612      	lsls	r2, r2, #24
 8006e9e:	f002 52f8 	and.w	r2, r2, #520093696	; 0x1f000000
 8006ea2:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8006ea6:	431a      	orrs	r2, r3
 8006ea8:	f8c1 2400 	str.w	r2, [r1, #1024]	; 0x400
      break;
 8006eac:	e7ab      	b.n	8006e06 <HAL_HRTIM_ADCPostScalerConfig+0x82>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD1PSC, (Postscaler & HRTIM_ADCPS1_AD1PSC));
 8006eae:	6804      	ldr	r4, [r0, #0]
 8006eb0:	f8d4 1400 	ldr.w	r1, [r4, #1024]	; 0x400
 8006eb4:	f002 021f 	and.w	r2, r2, #31
 8006eb8:	f021 011f 	bic.w	r1, r1, #31
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
      break;
 8006ec2:	e7a0      	b.n	8006e06 <HAL_HRTIM_ADCPostScalerConfig+0x82>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD2PSC, ((Postscaler << HRTIM_ADCPS1_AD2PSC_Pos) & HRTIM_ADCPS1_AD2PSC));
 8006ec4:	6801      	ldr	r1, [r0, #0]
 8006ec6:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
 8006eca:	0192      	lsls	r2, r2, #6
 8006ecc:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 8006ed0:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	f8c1 2400 	str.w	r2, [r1, #1024]	; 0x400
      break;
 8006eda:	e794      	b.n	8006e06 <HAL_HRTIM_ADCPostScalerConfig+0x82>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD3PSC, ((Postscaler << HRTIM_ADCPS1_AD3PSC_Pos) & HRTIM_ADCPS1_AD3PSC));
 8006edc:	6801      	ldr	r1, [r0, #0]
 8006ede:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
 8006ee2:	0312      	lsls	r2, r2, #12
 8006ee4:	f402 32f8 	and.w	r2, r2, #126976	; 0x1f000
 8006ee8:	f423 33f8 	bic.w	r3, r3, #126976	; 0x1f000
 8006eec:	431a      	orrs	r2, r3
 8006eee:	f8c1 2400 	str.w	r2, [r1, #1024]	; 0x400
      break;
 8006ef2:	e788      	b.n	8006e06 <HAL_HRTIM_ADCPostScalerConfig+0x82>
     return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006efc:	4770      	bx	lr
     return HAL_BUSY;
 8006efe:	2302      	movs	r3, #2
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	4770      	bx	lr
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD9PSC, ((Postscaler << HRTIM_ADCPS2_AD9PSC_Pos) & HRTIM_ADCPS2_AD9PSC));
 8006f04:	6801      	ldr	r1, [r0, #0]
 8006f06:	f8d1 3404 	ldr.w	r3, [r1, #1028]	; 0x404
 8006f0a:	0492      	lsls	r2, r2, #18
 8006f0c:	f402 02f8 	and.w	r2, r2, #8126464	; 0x7c0000
 8006f10:	f423 03f8 	bic.w	r3, r3, #8126464	; 0x7c0000
 8006f14:	431a      	orrs	r2, r3
 8006f16:	f8c1 2404 	str.w	r2, [r1, #1028]	; 0x404
      break;
 8006f1a:	e774      	b.n	8006e06 <HAL_HRTIM_ADCPostScalerConfig+0x82>

08006f1c <HAL_HRTIM_RollOverModeConfig>:
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006f1c:	f890 c0dd 	ldrb.w	ip, [r0, #221]	; 0xdd
 8006f20:	f1bc 0f02 	cmp.w	ip, #2
 8006f24:	fa5f f38c 	uxtb.w	r3, ip
 8006f28:	d015      	beq.n	8006f56 <HAL_HRTIM_RollOverModeConfig+0x3a>
  __HAL_LOCK(hhrtim);
 8006f2a:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d01f      	beq.n	8006f72 <HAL_HRTIM_RollOverModeConfig+0x56>
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8006f32:	6803      	ldr	r3, [r0, #0]
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006f34:	f04f 0c02 	mov.w	ip, #2
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8006f38:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006f3c:	f880 c0dd 	strb.w	ip, [r0, #221]	; 0xdd
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8006f40:	f8d1 30ec 	ldr.w	r3, [r1, #236]	; 0xec
  if ((hrtim_timcr2 & HRTIM_TIMCR2_UDM) != 0U)
 8006f44:	f013 0f10 	tst.w	r3, #16
 8006f48:	d107      	bne.n	8006f5a <HAL_HRTIM_RollOverModeConfig+0x3e>
  __HAL_UNLOCK(hhrtim);
 8006f4a:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 8006f52:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	4770      	bx	lr
       hrtim_timcr2 &= ~(HRTIM_TIMCR2_ROM | HRTIM_TIMCR2_OUTROM |
 8006f5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
       hrtim_timcr2 |= pRollOverMode & (HRTIM_TIMCR2_ROM | HRTIM_TIMCR2_OUTROM |
 8006f5e:	f64f 7cc0 	movw	ip, #65472	; 0xffc0
       hrtim_timcr2 &= ~(HRTIM_TIMCR2_ROM | HRTIM_TIMCR2_OUTROM |
 8006f62:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
       hrtim_timcr2 |= pRollOverMode & (HRTIM_TIMCR2_ROM | HRTIM_TIMCR2_OUTROM |
 8006f66:	ea02 020c 	and.w	r2, r2, ip
 8006f6a:	431a      	orrs	r2, r3
       hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2 = hrtim_timcr2;
 8006f6c:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
 8006f70:	e7eb      	b.n	8006f4a <HAL_HRTIM_RollOverModeConfig+0x2e>
     return HAL_BUSY;
 8006f72:	2302      	movs	r3, #2
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	4770      	bx	lr

08006f78 <HAL_HRTIM_WaveformTimerConfig>:
{
 8006f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006f7c:	f890 50dd 	ldrb.w	r5, [r0, #221]	; 0xdd
 8006f80:	2d02      	cmp	r5, #2
 8006f82:	b2eb      	uxtb	r3, r5
 8006f84:	d071      	beq.n	800706a <HAL_HRTIM_WaveformTimerConfig+0xf2>
  __HAL_LOCK(hhrtim);
 8006f86:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	f000 814b 	beq.w	8007226 <HAL_HRTIM_WaveformTimerConfig+0x2ae>
 8006f90:	4614      	mov	r4, r2
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006f92:	2302      	movs	r3, #2
  __HAL_LOCK(hhrtim);
 8006f94:	2201      	movs	r2, #1
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8006f96:	2906      	cmp	r1, #6
  __HAL_LOCK(hhrtim);
 8006f98:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006f9c:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8006fa0:	f000 80d4 	beq.w	800714c <HAL_HRTIM_WaveformTimerConfig+0x1d4>
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8006fa4:	6805      	ldr	r5, [r0, #0]
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8006fa6:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8006faa:	eb05 1cc1 	add.w	ip, r5, r1, lsl #7
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8006fae:	f1b8 0f20 	cmp.w	r8, #32
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8006fb2:	f8dc 3080 	ldr.w	r3, [ip, #128]	; 0x80
 8006fb6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006fba:	f8cc 3080 	str.w	r3, [ip, #128]	; 0x80
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8006fbe:	f8dc 3080 	ldr.w	r3, [ip, #128]	; 0x80
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8006fc2:	f8dc 90e8 	ldr.w	r9, [ip, #232]	; 0xe8
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8006fc6:	f8dc 70e4 	ldr.w	r7, [ip, #228]	; 0xe4
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8006fca:	f8d5 23a0 	ldr.w	r2, [r5, #928]	; 0x3a0
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8006fce:	f023 0e20 	bic.w	lr, r3, #32
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8006fd2:	ea4f 16c1 	mov.w	r6, r1, lsl #7
 8006fd6:	ea4e 0e08 	orr.w	lr, lr, r8
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8006fda:	d049      	beq.n	8007070 <HAL_HRTIM_WaveformTimerConfig+0xf8>
 8006fdc:	f8d4 8018 	ldr.w	r8, [r4, #24]
 8006fe0:	f1b8 0f02 	cmp.w	r8, #2
 8006fe4:	d044      	beq.n	8007070 <HAL_HRTIM_WaveformTimerConfig+0xf8>
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8006fe6:	f1b8 0f03 	cmp.w	r8, #3
 8006fea:	f000 8117 	beq.w	800721c <HAL_HRTIM_WaveformTimerConfig+0x2a4>
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8006fee:	f1b8 0f04 	cmp.w	r8, #4
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8006ff2:	bf06      	itte	eq
 8006ff4:	f02e 0e80 	biceq.w	lr, lr, #128	; 0x80
 8006ff8:	f44e 7e80 	orreq.w	lr, lr, #256	; 0x100
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8006ffc:	f42e 7ed0 	bicne.w	lr, lr, #416	; 0x1a0
 8007000:	e03a      	b.n	8007078 <HAL_HRTIM_WaveformTimerConfig+0x100>
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 8007002:	6b23      	ldr	r3, [r4, #48]	; 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8007004:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 8007008:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800700c:	f8cc 8080 	str.w	r8, [ip, #128]	; 0x80
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8007010:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8007014:	eb05 0c06 	add.w	ip, r5, r6
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8007018:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 800701c:	f8cc a0e8 	str.w	sl, [ip, #232]	; 0xe8
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8007020:	f8cc 70e4 	str.w	r7, [ip, #228]	; 0xe4
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8007024:	f8cc e0d4 	str.w	lr, [ip, #212]	; 0xd4
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8007028:	f8c5 23a0 	str.w	r2, [r5, #928]	; 0x3a0
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 800702c:	6822      	ldr	r2, [r4, #0]
 800702e:	621a      	str	r2, [r3, #32]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8007030:	6862      	ldr	r2, [r4, #4]
 8007032:	625a      	str	r2, [r3, #36]	; 0x24
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8007034:	68a2      	ldr	r2, [r4, #8]
 8007036:	629a      	str	r2, [r3, #40]	; 0x28
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8007038:	68e2      	ldr	r2, [r4, #12]
 800703a:	62da      	str	r2, [r3, #44]	; 0x2c
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 800703c:	6922      	ldr	r2, [r4, #16]
 800703e:	631a      	str	r2, [r3, #48]	; 0x30
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8007040:	f7ff f964 	bl	800630c <HRTIM_ForceRegistersUpdate>
   && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 8007044:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007046:	b953      	cbnz	r3, 800705e <HAL_HRTIM_WaveformTimerConfig+0xe6>
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 8007048:	6802      	ldr	r2, [r0, #0]
 800704a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800704c:	4416      	add	r6, r2
 800704e:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8007052:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007056:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800705a:	f8c6 3080 	str.w	r3, [r6, #128]	; 0x80
  __HAL_UNLOCK(hhrtim);
 800705e:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007060:	2201      	movs	r2, #1
 8007062:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 8007066:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
}
 800706a:	4618      	mov	r0, r3
 800706c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8007070:	f42e 7ec0 	bic.w	lr, lr, #384	; 0x180
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8007074:	f04e 0e20 	orr.w	lr, lr, #32
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8007078:	69e3      	ldr	r3, [r4, #28]
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 800707a:	f42e 6e00 	bic.w	lr, lr, #2048	; 0x800
  hrtim_timcr |= pTimerCfg->StartOnSync;
 800707e:	ea4e 0e03 	orr.w	lr, lr, r3
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8007082:	6a23      	ldr	r3, [r4, #32]
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8007084:	f42e 6e80 	bic.w	lr, lr, #1024	; 0x400
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8007088:	ea4e 0e03 	orr.w	lr, lr, r3
  hrtim_timcr |= pTimerCfg->DACSynchro;
 800708c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 800708e:	f02e 6ec0 	bic.w	lr, lr, #100663296	; 0x6000000
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8007092:	ea4e 0e03 	orr.w	lr, lr, r3
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8007096:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8007098:	f02e 6e00 	bic.w	lr, lr, #134217728	; 0x8000000
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 800709c:	ea4e 0e03 	orr.w	lr, lr, r3
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80070a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 80070a2:	f02e 4e70 	bic.w	lr, lr, #4026531840	; 0xf0000000
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80070a6:	ea4e 0e03 	orr.w	lr, lr, r3
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80070aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 80070ac:	f42e 3e00 	bic.w	lr, lr, #131072	; 0x20000
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80070b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 80070b4:	bf08      	it	eq
 80070b6:	f44e 3e00 	orreq.w	lr, lr, #131072	; 0x20000
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80070ba:	f02e 0840 	bic.w	r8, lr, #64	; 0x40
  hrtim_timcr |= pTimerCfg->PushPull;
 80070be:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 80070c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
  hrtim_timcr |= pTimerCfg->PushPull;
 80070c4:	ea48 080e 	orr.w	r8, r8, lr
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 80070c8:	f428 2880 	bic.w	r8, r8, #262144	; 0x40000
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 80070cc:	ea48 0803 	orr.w	r8, r8, r3
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80070d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80070d2:	f029 4a00 	bic.w	sl, r9, #2147483648	; 0x80000000
 80070d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070da:	f02a 0a3f 	bic.w	sl, sl, #63	; 0x3f
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 80070de:	ea4a 0a03 	orr.w	sl, sl, r3
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 80070e2:	f028 78fc 	bic.w	r8, r8, #33030144	; 0x1f80000
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 80070e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 80070e8:	f8d4 9048 	ldr.w	r9, [r4, #72]	; 0x48
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 80070ec:	f428 3880 	bic.w	r8, r8, #65536	; 0x10000
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 80070f0:	ea48 0803 	orr.w	r8, r8, r3
  hrtim_timfltr |= pTimerCfg->FaultLock;
 80070f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070f6:	ea4a 0a03 	orr.w	sl, sl, r3
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 80070fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 80070fc:	f427 7780 	bic.w	r7, r7, #256	; 0x100
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8007100:	431f      	orrs	r7, r3
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8007102:	f429 5380 	bic.w	r3, r9, #4096	; 0x1000
 8007106:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800710a:	d01b      	beq.n	8007144 <HAL_HRTIM_WaveformTimerConfig+0x1cc>
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 800710c:	f427 57f0 	bic.w	r7, r7, #7680	; 0x1e00
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8007110:	ea49 0707 	orr.w	r7, r9, r7
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8007114:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8007116:	f8d4 e054 	ldr.w	lr, [r4, #84]	; 0x54
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 800711a:	f427 4780 	bic.w	r7, r7, #16384	; 0x4000
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 800711e:	431f      	orrs	r7, r3
  switch (TimerIdx)
 8007120:	2905      	cmp	r1, #5
 8007122:	f63f af73 	bhi.w	800700c <HAL_HRTIM_WaveformTimerConfig+0x94>
 8007126:	a301      	add	r3, pc, #4	; (adr r3, 800712c <HAL_HRTIM_WaveformTimerConfig+0x1b4>)
 8007128:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800712c:	080071e1 	.word	0x080071e1
 8007130:	08007211 	.word	0x08007211
 8007134:	08007205 	.word	0x08007205
 8007138:	080071f9 	.word	0x080071f9
 800713c:	080071ed 	.word	0x080071ed
 8007140:	08007003 	.word	0x08007003
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8007144:	f1be 0f40 	cmp.w	lr, #64	; 0x40
 8007148:	d1e4      	bne.n	8007114 <HAL_HRTIM_WaveformTimerConfig+0x19c>
 800714a:	e7df      	b.n	800710c <HAL_HRTIM_WaveformTimerConfig+0x194>
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800714c:	6801      	ldr	r1, [r0, #0]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 800714e:	6966      	ldr	r6, [r4, #20]
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007150:	680b      	ldr	r3, [r1, #0]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8007152:	f8d1 23a0 	ldr.w	r2, [r1, #928]	; 0x3a0
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8007156:	f023 0320 	bic.w	r3, r3, #32
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 800715a:	ea43 0506 	orr.w	r5, r3, r6
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 800715e:	2e20      	cmp	r6, #32
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8007160:	f025 03c0 	bic.w	r3, r5, #192	; 0xc0
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8007164:	d039      	beq.n	80071da <HAL_HRTIM_WaveformTimerConfig+0x262>
 8007166:	69a6      	ldr	r6, [r4, #24]
 8007168:	2e02      	cmp	r6, #2
 800716a:	d036      	beq.n	80071da <HAL_HRTIM_WaveformTimerConfig+0x262>
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 800716c:	2e03      	cmp	r6, #3
 800716e:	d05e      	beq.n	800722e <HAL_HRTIM_WaveformTimerConfig+0x2b6>
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8007170:	2e04      	cmp	r6, #4
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8007172:	bf0c      	ite	eq
 8007174:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8007178:	f025 03e0 	bicne.w	r3, r5, #224	; 0xe0
  hrtim_mcr |= pTimerCfg->StartOnSync;
 800717c:	69e5      	ldr	r5, [r4, #28]
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 800717e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8007182:	432b      	orrs	r3, r5
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8007184:	6a25      	ldr	r5, [r4, #32]
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8007186:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 800718a:	432b      	orrs	r3, r5
  hrtim_mcr |= pTimerCfg->DACSynchro;
 800718c:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 800718e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8007192:	432b      	orrs	r3, r5
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8007194:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8007196:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 800719a:	432b      	orrs	r3, r5
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 800719c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 800719e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 80071a2:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80071a6:	6b65      	ldr	r5, [r4, #52]	; 0x34
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 80071a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80071ac:	432b      	orrs	r3, r5
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80071ae:	6b25      	ldr	r5, [r4, #48]	; 0x30
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80071b0:	600b      	str	r3, [r1, #0]
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 80071b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80071b6:	432a      	orrs	r2, r5
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80071b8:	6825      	ldr	r5, [r4, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80071ba:	f8c1 23a0 	str.w	r2, [r1, #928]	; 0x3a0
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80071be:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80071c2:	e9c0 5332 	strd	r5, r3, [r0, #200]	; 0xc8
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80071c6:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80071ca:	e9c0 1234 	strd	r1, r2, [r0, #208]	; 0xd0
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80071ce:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80071d2:	2106      	movs	r1, #6
 80071d4:	f7ff f89a 	bl	800630c <HRTIM_ForceRegistersUpdate>
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 80071d8:	e741      	b.n	800705e <HAL_HRTIM_WaveformTimerConfig+0xe6>
    hrtim_mcr |= (HRTIM_MCR_HALF);
 80071da:	f043 0320 	orr.w	r3, r3, #32
 80071de:	e7cd      	b.n	800717c <HAL_HRTIM_WaveformTimerConfig+0x204>
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 80071e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 80071e2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 80071e6:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
      break;
 80071ea:	e70f      	b.n	800700c <HAL_HRTIM_WaveformTimerConfig+0x94>
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80071ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 80071ee:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80071f2:	ea42 1243 	orr.w	r2, r2, r3, lsl #5
      break;
 80071f6:	e709      	b.n	800700c <HAL_HRTIM_WaveformTimerConfig+0x94>
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 80071f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 80071fa:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 80071fe:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
      break;
 8007202:	e703      	b.n	800700c <HAL_HRTIM_WaveformTimerConfig+0x94>
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8007204:	6b23      	ldr	r3, [r4, #48]	; 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8007206:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 800720a:	ea42 02c3 	orr.w	r2, r2, r3, lsl #3
      break;
 800720e:	e6fd      	b.n	800700c <HAL_HRTIM_WaveformTimerConfig+0x94>
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8007210:	6b23      	ldr	r3, [r4, #48]	; 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8007212:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8007216:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
      break;
 800721a:	e6f7      	b.n	800700c <HAL_HRTIM_WaveformTimerConfig+0x94>
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 800721c:	f42e 7e80 	bic.w	lr, lr, #256	; 0x100
 8007220:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
 8007224:	e728      	b.n	8007078 <HAL_HRTIM_WaveformTimerConfig+0x100>
     return HAL_BUSY;
 8007226:	2302      	movs	r3, #2
}
 8007228:	4618      	mov	r0, r3
 800722a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 800722e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8007232:	e7a3      	b.n	800717c <HAL_HRTIM_WaveformTimerConfig+0x204>

08007234 <HAL_HRTIM_WaveformTimerControl>:
{
 8007234:	b538      	push	{r3, r4, r5, lr}
    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007236:	f890 40dd 	ldrb.w	r4, [r0, #221]	; 0xdd
 800723a:	2c02      	cmp	r4, #2
 800723c:	b2e3      	uxtb	r3, r4
 800723e:	d02f      	beq.n	80072a0 <HAL_HRTIM_WaveformTimerControl+0x6c>
    __HAL_LOCK(hhrtim);
 8007240:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 8007244:	2b01      	cmp	r3, #1
 8007246:	d038      	beq.n	80072ba <HAL_HRTIM_WaveformTimerControl+0x86>
 8007248:	2301      	movs	r3, #1
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 800724a:	6804      	ldr	r4, [r0, #0]
    __HAL_LOCK(hhrtim);
 800724c:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007250:	2302      	movs	r3, #2
 8007252:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8007256:	eb04 13c1 	add.w	r3, r4, r1, lsl #7
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 800725a:	6815      	ldr	r5, [r2, #0]
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 800725c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8007260:	f023 0310 	bic.w	r3, r3, #16
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8007264:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8007268:	6855      	ldr	r5, [r2, #4]
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 800726a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 800726e:	432b      	orrs	r3, r5
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 8007270:	68d5      	ldr	r5, [r2, #12]
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 8007272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 8007276:	432b      	orrs	r3, r5
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 8007278:	6895      	ldr	r5, [r2, #8]
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 800727a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 800727e:	432b      	orrs	r3, r5
   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8007280:	6995      	ldr	r5, [r2, #24]
 8007282:	2d01      	cmp	r5, #1
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8007284:	ea4f 1cc1 	mov.w	ip, r1, lsl #7
   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8007288:	d00c      	beq.n	80072a4 <HAL_HRTIM_WaveformTimerControl+0x70>
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 800728a:	4464      	add	r4, ip
 800728c:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8007290:	f7ff f83c 	bl	800630c <HRTIM_ForceRegistersUpdate>
    __HAL_UNLOCK(hhrtim);
 8007294:	2300      	movs	r3, #0
    hhrtim->State = HAL_HRTIM_STATE_READY;
 8007296:	2201      	movs	r2, #1
 8007298:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
    __HAL_UNLOCK(hhrtim);
 800729c:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	bd38      	pop	{r3, r4, r5, pc}
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 80072a4:	6915      	ldr	r5, [r2, #16]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 80072a6:	6952      	ldr	r2, [r2, #20]
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 80072a8:	f023 0304 	bic.w	r3, r3, #4
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 80072ac:	432b      	orrs	r3, r5
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 80072ae:	f023 0302 	bic.w	r3, r3, #2
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 80072b2:	4313      	orrs	r3, r2
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 80072b4:	f043 0301 	orr.w	r3, r3, #1
 80072b8:	e7e7      	b.n	800728a <HAL_HRTIM_WaveformTimerControl+0x56>
       return HAL_BUSY;
 80072ba:	2302      	movs	r3, #2
}
 80072bc:	4618      	mov	r0, r3
 80072be:	bd38      	pop	{r3, r4, r5, pc}

080072c0 <HAL_HRTIM_TimerEventFilteringConfig>:
{
 80072c0:	b510      	push	{r4, lr}
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80072c2:	f890 e0dd 	ldrb.w	lr, [r0, #221]	; 0xdd
 80072c6:	f1be 0f02 	cmp.w	lr, #2
 80072ca:	fa5f fc8e 	uxtb.w	ip, lr
 80072ce:	d032      	beq.n	8007336 <HAL_HRTIM_TimerEventFilteringConfig+0x76>
  __HAL_LOCK(hhrtim);
 80072d0:	f890 c0dc 	ldrb.w	ip, [r0, #220]	; 0xdc
 80072d4:	f1bc 0f01 	cmp.w	ip, #1
 80072d8:	f000 80c1 	beq.w	800745e <HAL_HRTIM_TimerEventFilteringConfig+0x19e>
 80072dc:	f04f 0c01 	mov.w	ip, #1
 80072e0:	f880 c0dc 	strb.w	ip, [r0, #220]	; 0xdc
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80072e4:	f04f 0c02 	mov.w	ip, #2
 80072e8:	f880 c0dd 	strb.w	ip, [r0, #221]	; 0xdd
  switch (Event)
 80072ec:	2a0a      	cmp	r2, #10
 80072ee:	f200 80ba 	bhi.w	8007466 <HAL_HRTIM_TimerEventFilteringConfig+0x1a6>
 80072f2:	e8df f002 	tbb	[pc, r2]
 80072f6:	2b22      	.short	0x2b22
 80072f8:	66574839 	.word	0x66574839
 80072fc:	a1928375 	.word	0xa1928375
 8007300:	06          	.byte	0x06
 8007301:	00          	.byte	0x00
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR2, (HRTIM_EEFR2_EE10FLTR | HRTIM_EEFR2_EE10LTCH), ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 24U) );
 8007302:	6802      	ldr	r2, [r0, #0]
 8007304:	681c      	ldr	r4, [r3, #0]
 8007306:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	f8d1 30d0 	ldr.w	r3, [r1, #208]	; 0xd0
 8007310:	4322      	orrs	r2, r4
 8007312:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8007316:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800731a:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800731e:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 8007322:	2b07      	cmp	r3, #7
 8007324:	f000 8097 	beq.w	8007456 <HAL_HRTIM_TimerEventFilteringConfig+0x196>
  __HAL_UNLOCK(hhrtim);
 8007328:	f04f 0c00 	mov.w	ip, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800732c:	2301      	movs	r3, #1
 800732e:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 8007332:	f880 c0dc 	strb.w	ip, [r0, #220]	; 0xdc
}
 8007336:	4660      	mov	r0, ip
 8007338:	bd10      	pop	{r4, pc}
      CLEAR_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR1);
 800733a:	6803      	ldr	r3, [r0, #0]
 800733c:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
 8007340:	2200      	movs	r2, #0
 8007342:	f8c1 20cc 	str.w	r2, [r1, #204]	; 0xcc
      CLEAR_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR2);
 8007346:	f8c1 20d0 	str.w	r2, [r1, #208]	; 0xd0
      break;
 800734a:	e7e8      	b.n	800731e <HAL_HRTIM_TimerEventFilteringConfig+0x5e>
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR1, (HRTIM_EEFR1_EE1FLTR | HRTIM_EEFR1_EE1LTCH), (pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch));
 800734c:	6804      	ldr	r4, [r0, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	eb04 11c1 	add.w	r1, r4, r1, lsl #7
 8007356:	4313      	orrs	r3, r2
 8007358:	f8d1 20cc 	ldr.w	r2, [r1, #204]	; 0xcc
 800735c:	f022 021f 	bic.w	r2, r2, #31
 8007360:	4313      	orrs	r3, r2
 8007362:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
      break;
 8007366:	e7da      	b.n	800731e <HAL_HRTIM_TimerEventFilteringConfig+0x5e>
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR1, (HRTIM_EEFR1_EE2FLTR | HRTIM_EEFR1_EE2LTCH), ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 6U) );
 8007368:	6802      	ldr	r2, [r0, #0]
 800736a:	681c      	ldr	r4, [r3, #0]
 800736c:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 8007370:	685a      	ldr	r2, [r3, #4]
 8007372:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
 8007376:	4322      	orrs	r2, r4
 8007378:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 800737c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8007380:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
      break;
 8007384:	e7cb      	b.n	800731e <HAL_HRTIM_TimerEventFilteringConfig+0x5e>
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR1, (HRTIM_EEFR1_EE3FLTR | HRTIM_EEFR1_EE3LTCH), ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 12U) );
 8007386:	6802      	ldr	r2, [r0, #0]
 8007388:	681c      	ldr	r4, [r3, #0]
 800738a:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 800738e:	685a      	ldr	r2, [r3, #4]
 8007390:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
 8007394:	4322      	orrs	r2, r4
 8007396:	f423 33f8 	bic.w	r3, r3, #126976	; 0x1f000
 800739a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800739e:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
      break;
 80073a2:	e7bc      	b.n	800731e <HAL_HRTIM_TimerEventFilteringConfig+0x5e>
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR1, (HRTIM_EEFR1_EE4FLTR | HRTIM_EEFR1_EE4LTCH), ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 18U) );
 80073a4:	6802      	ldr	r2, [r0, #0]
 80073a6:	681c      	ldr	r4, [r3, #0]
 80073a8:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
 80073b2:	4322      	orrs	r2, r4
 80073b4:	f423 03f8 	bic.w	r3, r3, #8126464	; 0x7c0000
 80073b8:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 80073bc:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
      break;
 80073c0:	e7ad      	b.n	800731e <HAL_HRTIM_TimerEventFilteringConfig+0x5e>
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR1, (HRTIM_EEFR1_EE5FLTR | HRTIM_EEFR1_EE5LTCH), ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 24U) );
 80073c2:	6802      	ldr	r2, [r0, #0]
 80073c4:	681c      	ldr	r4, [r3, #0]
 80073c6:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
 80073d0:	4322      	orrs	r2, r4
 80073d2:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80073d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80073da:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
      break;
 80073de:	e79e      	b.n	800731e <HAL_HRTIM_TimerEventFilteringConfig+0x5e>
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR2, (HRTIM_EEFR2_EE6FLTR | HRTIM_EEFR2_EE6LTCH), (pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) );
 80073e0:	6804      	ldr	r4, [r0, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	eb04 11c1 	add.w	r1, r4, r1, lsl #7
 80073ea:	4313      	orrs	r3, r2
 80073ec:	f8d1 20d0 	ldr.w	r2, [r1, #208]	; 0xd0
 80073f0:	f022 021f 	bic.w	r2, r2, #31
 80073f4:	4313      	orrs	r3, r2
 80073f6:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
      break;
 80073fa:	e790      	b.n	800731e <HAL_HRTIM_TimerEventFilteringConfig+0x5e>
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR2, (HRTIM_EEFR2_EE7FLTR | HRTIM_EEFR2_EE7LTCH), ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 6U) );
 80073fc:	6802      	ldr	r2, [r0, #0]
 80073fe:	681c      	ldr	r4, [r3, #0]
 8007400:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 8007404:	685a      	ldr	r2, [r3, #4]
 8007406:	f8d1 30d0 	ldr.w	r3, [r1, #208]	; 0xd0
 800740a:	4322      	orrs	r2, r4
 800740c:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 8007410:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8007414:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
      break;
 8007418:	e781      	b.n	800731e <HAL_HRTIM_TimerEventFilteringConfig+0x5e>
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR2, (HRTIM_EEFR2_EE8FLTR | HRTIM_EEFR2_EE8LTCH), ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 12U) );
 800741a:	6802      	ldr	r2, [r0, #0]
 800741c:	681c      	ldr	r4, [r3, #0]
 800741e:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	f8d1 30d0 	ldr.w	r3, [r1, #208]	; 0xd0
 8007428:	4322      	orrs	r2, r4
 800742a:	f423 33f8 	bic.w	r3, r3, #126976	; 0x1f000
 800742e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8007432:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
      break;
 8007436:	e772      	b.n	800731e <HAL_HRTIM_TimerEventFilteringConfig+0x5e>
      MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].EEFxR2, (HRTIM_EEFR2_EE9FLTR | HRTIM_EEFR2_EE9LTCH), ((pTimerEventFilteringCfg->Filter | pTimerEventFilteringCfg->Latch) << 18U) );
 8007438:	6802      	ldr	r2, [r0, #0]
 800743a:	681c      	ldr	r4, [r3, #0]
 800743c:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	f8d1 30d0 	ldr.w	r3, [r1, #208]	; 0xd0
 8007446:	4322      	orrs	r2, r4
 8007448:	f423 03f8 	bic.w	r3, r3, #8126464	; 0x7c0000
 800744c:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8007450:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
      break;
 8007454:	e763      	b.n	800731e <HAL_HRTIM_TimerEventFilteringConfig+0x5e>
     return HAL_ERROR;
 8007456:	f04f 0c01 	mov.w	ip, #1
}
 800745a:	4660      	mov	r0, ip
 800745c:	bd10      	pop	{r4, pc}
     return HAL_BUSY;
 800745e:	f04f 0c02 	mov.w	ip, #2
}
 8007462:	4660      	mov	r0, ip
 8007464:	bd10      	pop	{r4, pc}
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007466:	2207      	movs	r2, #7
      __HAL_UNLOCK(hhrtim);
 8007468:	2300      	movs	r3, #0
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800746a:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
      __HAL_UNLOCK(hhrtim);
 800746e:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
      break;
 8007472:	e754      	b.n	800731e <HAL_HRTIM_TimerEventFilteringConfig+0x5e>

08007474 <HAL_HRTIM_DeadTimeConfig>:
{
 8007474:	b430      	push	{r4, r5}
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007476:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 800747a:	2b02      	cmp	r3, #2
 800747c:	b2dc      	uxtb	r4, r3
 800747e:	d041      	beq.n	8007504 <HAL_HRTIM_DeadTimeConfig+0x90>
  __HAL_LOCK(hhrtim);
 8007480:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 8007484:	2b01      	cmp	r3, #1
 8007486:	d040      	beq.n	800750a <HAL_HRTIM_DeadTimeConfig+0x96>
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007488:	2302      	movs	r3, #2
 800748a:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 800748e:	6854      	ldr	r4, [r2, #4]
  hrtim_dtr  = (pDeadTimeCfg->Prescaler & HRTIM_DTR_DTPRSC);
 8007490:	6813      	ldr	r3, [r2, #0]
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 8007492:	6955      	ldr	r5, [r2, #20]
  hrtim_dtr  = (pDeadTimeCfg->Prescaler & HRTIM_DTR_DTPRSC);
 8007494:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 8007498:	f3c4 0c08 	ubfx	ip, r4, #0, #9
 800749c:	ea4c 0c03 	orr.w	ip, ip, r3
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 80074a0:	6893      	ldr	r3, [r2, #8]
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 80074a2:	6994      	ldr	r4, [r2, #24]
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 80074a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074a8:	ea43 0c0c 	orr.w	ip, r3, ip
  hrtim_dtr |= (pDeadTimeCfg->RisingSignLock & HRTIM_DTR_DTRSLK);
 80074ac:	6913      	ldr	r3, [r2, #16]
 80074ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074b2:	ea43 0c0c 	orr.w	ip, r3, ip
  hrtim_dtr |= (pDeadTimeCfg->RisingLock & HRTIM_DTR_DTRLK);
 80074b6:	68d3      	ldr	r3, [r2, #12]
 80074b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074bc:	ea43 030c 	orr.w	r3, r3, ip
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 80074c0:	f004 7400 	and.w	r4, r4, #33554432	; 0x2000000
 80074c4:	4323      	orrs	r3, r4
  hrtim_dtr |= (pDeadTimeCfg->FallingSignLock & HRTIM_DTR_DTFSLK);
 80074c6:	6a14      	ldr	r4, [r2, #32]
 80074c8:	f004 4480 	and.w	r4, r4, #1073741824	; 0x40000000
 80074cc:	4323      	orrs	r3, r4
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 80074ce:	69d4      	ldr	r4, [r2, #28]
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 80074d0:	6802      	ldr	r2, [r0, #0]
 80074d2:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 80074d6:	4a0f      	ldr	r2, [pc, #60]	; (8007514 <HAL_HRTIM_DeadTimeConfig+0xa0>)
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 80074d8:	f004 4c00 	and.w	ip, r4, #2147483648	; 0x80000000
 80074dc:	ea43 030c 	orr.w	r3, r3, ip
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 80074e0:	ea02 4205 	and.w	r2, r2, r5, lsl #16
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 80074e4:	f8d1 40b8 	ldr.w	r4, [r1, #184]	; 0xb8
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 80074e8:	4313      	orrs	r3, r2
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 80074ea:	4a0b      	ldr	r2, [pc, #44]	; (8007518 <HAL_HRTIM_DeadTimeConfig+0xa4>)
 80074ec:	4022      	ands	r2, r4
  __HAL_UNLOCK(hhrtim);
 80074ee:	f04f 0c00 	mov.w	ip, #0
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 80074f2:	4313      	orrs	r3, r2
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80074f4:	2201      	movs	r2, #1
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 80074f6:	f8c1 30b8 	str.w	r3, [r1, #184]	; 0xb8
  return HAL_OK;
 80074fa:	4664      	mov	r4, ip
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80074fc:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 8007500:	f880 c0dc 	strb.w	ip, [r0, #220]	; 0xdc
}
 8007504:	4620      	mov	r0, r4
 8007506:	bc30      	pop	{r4, r5}
 8007508:	4770      	bx	lr
     return HAL_BUSY;
 800750a:	2402      	movs	r4, #2
}
 800750c:	4620      	mov	r0, r4
 800750e:	bc30      	pop	{r4, r5}
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	01ff0000 	.word	0x01ff0000
 8007518:	3c002000 	.word	0x3c002000

0800751c <HAL_HRTIM_WaveformCompareConfig>:
{
 800751c:	b510      	push	{r4, lr}
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800751e:	f890 e0dd 	ldrb.w	lr, [r0, #221]	; 0xdd
 8007522:	f1be 0f02 	cmp.w	lr, #2
 8007526:	fa5f fc8e 	uxtb.w	ip, lr
 800752a:	d02a      	beq.n	8007582 <HAL_HRTIM_WaveformCompareConfig+0x66>
  __HAL_LOCK(hhrtim);
 800752c:	f890 c0dc 	ldrb.w	ip, [r0, #220]	; 0xdc
 8007530:	f1bc 0f01 	cmp.w	ip, #1
 8007534:	f000 809b 	beq.w	800766e <HAL_HRTIM_WaveformCompareConfig+0x152>
 8007538:	f04f 0c01 	mov.w	ip, #1
 800753c:	f880 c0dc 	strb.w	ip, [r0, #220]	; 0xdc
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007540:	2906      	cmp	r1, #6
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007542:	f04f 0c02 	mov.w	ip, #2
 8007546:	f880 c0dd 	strb.w	ip, [r0, #221]	; 0xdd
    switch (CompareUnit)
 800754a:	f102 32ff 	add.w	r2, r2, #4294967295
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800754e:	d01a      	beq.n	8007586 <HAL_HRTIM_WaveformCompareConfig+0x6a>
    switch (CompareUnit)
 8007550:	2a07      	cmp	r2, #7
 8007552:	d805      	bhi.n	8007560 <HAL_HRTIM_WaveformCompareConfig+0x44>
 8007554:	e8df f002 	tbb	[pc, r2]
 8007558:	3a04602c 	.word	0x3a04602c
 800755c:	41040404 	.word	0x41040404
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007560:	2207      	movs	r2, #7
        __HAL_UNLOCK(hhrtim);
 8007562:	2300      	movs	r3, #0
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007564:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
        __HAL_UNLOCK(hhrtim);
 8007568:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800756c:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 8007570:	2b07      	cmp	r3, #7
 8007572:	d027      	beq.n	80075c4 <HAL_HRTIM_WaveformCompareConfig+0xa8>
  __HAL_UNLOCK(hhrtim);
 8007574:	f04f 0c00 	mov.w	ip, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007578:	2301      	movs	r3, #1
 800757a:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 800757e:	f880 c0dc 	strb.w	ip, [r0, #220]	; 0xdc
}
 8007582:	4660      	mov	r0, ip
 8007584:	bd10      	pop	{r4, pc}
    switch (CompareUnit)
 8007586:	2a07      	cmp	r2, #7
 8007588:	d8ea      	bhi.n	8007560 <HAL_HRTIM_WaveformCompareConfig+0x44>
 800758a:	a101      	add	r1, pc, #4	; (adr r1, 8007590 <HAL_HRTIM_WaveformCompareConfig+0x74>)
 800758c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007590:	0800765f 	.word	0x0800765f
 8007594:	08007657 	.word	0x08007657
 8007598:	08007561 	.word	0x08007561
 800759c:	08007667 	.word	0x08007667
 80075a0:	08007561 	.word	0x08007561
 80075a4:	08007561 	.word	0x08007561
 80075a8:	08007561 	.word	0x08007561
 80075ac:	0800764f 	.word	0x0800764f
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 80075b0:	6802      	ldr	r2, [r0, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 80075b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80075bc:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 80075c0:	2b07      	cmp	r3, #7
 80075c2:	d1d7      	bne.n	8007574 <HAL_HRTIM_WaveformCompareConfig+0x58>
     return HAL_ERROR;
 80075c4:	f04f 0c01 	mov.w	ip, #1
}
 80075c8:	4660      	mov	r0, ip
 80075ca:	bd10      	pop	{r4, pc}
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 80075cc:	6802      	ldr	r2, [r0, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 80075d4:	f8c1 30a8 	str.w	r3, [r1, #168]	; 0xa8
        break;
 80075d8:	e7c8      	b.n	800756c <HAL_HRTIM_WaveformCompareConfig+0x50>
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80075da:	6802      	ldr	r2, [r0, #0]
 80075dc:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 80075e0:	e9d3 4200 	ldrd	r4, r2, [r3]
 80075e4:	f8c1 40ac 	str.w	r4, [r1, #172]	; 0xac
        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80075e8:	2a00      	cmp	r2, #0
 80075ea:	d04b      	beq.n	8007684 <HAL_HRTIM_WaveformCompareConfig+0x168>
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 80075ec:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
 80075f0:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
 80075f4:	f8c1 4080 	str.w	r4, [r1, #128]	; 0x80
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80075f8:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80075fc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8007600:	ea44 0482 	orr.w	r4, r4, r2, lsl #2
 8007604:	f8c1 4080 	str.w	r4, [r1, #128]	; 0x80
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8007608:	d01d      	beq.n	8007646 <HAL_HRTIM_WaveformCompareConfig+0x12a>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800760a:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800760e:	d1ad      	bne.n	800756c <HAL_HRTIM_WaveformCompareConfig+0x50>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f8c1 30a8 	str.w	r3, [r1, #168]	; 0xa8
 8007616:	e7a9      	b.n	800756c <HAL_HRTIM_WaveformCompareConfig+0x50>
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8007618:	6802      	ldr	r2, [r0, #0]
 800761a:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
 800761e:	e9d3 4200 	ldrd	r4, r2, [r3]
 8007622:	f8c1 40a4 	str.w	r4, [r1, #164]	; 0xa4
        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8007626:	b332      	cbz	r2, 8007676 <HAL_HRTIM_WaveformCompareConfig+0x15a>
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8007628:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
 800762c:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
 8007630:	f8c1 4080 	str.w	r4, [r1, #128]	; 0x80
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8007634:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8007638:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 800763c:	ea44 0402 	orr.w	r4, r4, r2
 8007640:	f8c1 4080 	str.w	r4, [r1, #128]	; 0x80
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8007644:	d1e1      	bne.n	800760a <HAL_HRTIM_WaveformCompareConfig+0xee>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800764c:	e78e      	b.n	800756c <HAL_HRTIM_WaveformCompareConfig+0x50>
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 800764e:	6802      	ldr	r2, [r0, #0]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8007654:	e78a      	b.n	800756c <HAL_HRTIM_WaveformCompareConfig+0x50>
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8007656:	6802      	ldr	r2, [r0, #0]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	6253      	str	r3, [r2, #36]	; 0x24
        break;
 800765c:	e786      	b.n	800756c <HAL_HRTIM_WaveformCompareConfig+0x50>
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 800765e:	6802      	ldr	r2, [r0, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	61d3      	str	r3, [r2, #28]
        break;
 8007664:	e782      	b.n	800756c <HAL_HRTIM_WaveformCompareConfig+0x50>
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8007666:	6802      	ldr	r2, [r0, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800766c:	e77e      	b.n	800756c <HAL_HRTIM_WaveformCompareConfig+0x50>
     return HAL_BUSY;
 800766e:	f04f 0c02 	mov.w	ip, #2
}
 8007672:	4660      	mov	r0, ip
 8007674:	bd10      	pop	{r4, pc}
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8007676:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800767a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800767e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 8007682:	e773      	b.n	800756c <HAL_HRTIM_WaveformCompareConfig+0x50>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8007684:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8007688:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800768c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 8007690:	e76c      	b.n	800756c <HAL_HRTIM_WaveformCompareConfig+0x50>
 8007692:	bf00      	nop

08007694 <HAL_HRTIM_WaveformOutputConfig>:
{
 8007694:	b538      	push	{r3, r4, r5, lr}
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007696:	f890 e0dd 	ldrb.w	lr, [r0, #221]	; 0xdd
 800769a:	f1be 0f02 	cmp.w	lr, #2
 800769e:	fa5f fc8e 	uxtb.w	ip, lr
 80076a2:	d013      	beq.n	80076cc <HAL_HRTIM_WaveformOutputConfig+0x38>
  __HAL_LOCK(hhrtim);
 80076a4:	f890 50dc 	ldrb.w	r5, [r0, #220]	; 0xdc
 80076a8:	2d01      	cmp	r5, #1
 80076aa:	4604      	mov	r4, r0
 80076ac:	d010      	beq.n	80076d0 <HAL_HRTIM_WaveformOutputConfig+0x3c>
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80076ae:	f04f 0c02 	mov.w	ip, #2
  __HAL_LOCK(hhrtim);
 80076b2:	2501      	movs	r5, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80076b4:	f880 c0dd 	strb.w	ip, [r0, #221]	; 0xdd
  __HAL_LOCK(hhrtim);
 80076b8:	f880 50dc 	strb.w	r5, [r0, #220]	; 0xdc
  HRTIM_OutputConfig(hhrtim,
 80076bc:	f7fe fc62 	bl	8005f84 <HRTIM_OutputConfig>
  __HAL_UNLOCK(hhrtim);
 80076c0:	f04f 0c00 	mov.w	ip, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80076c4:	f884 50dd 	strb.w	r5, [r4, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 80076c8:	f884 c0dc 	strb.w	ip, [r4, #220]	; 0xdc
}
 80076cc:	4660      	mov	r0, ip
 80076ce:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_BUSY;
 80076d0:	f04f 0c02 	mov.w	ip, #2
}
 80076d4:	4660      	mov	r0, ip
 80076d6:	bd38      	pop	{r3, r4, r5, pc}

080076d8 <HAL_HRTIM_WaveformCountStart_DMA>:
{
 80076d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80076dc:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d05f      	beq.n	80077a4 <HAL_HRTIM_WaveformCountStart_DMA+0xcc>
  __HAL_LOCK(hhrtim);
 80076e4:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80076e8:	2202      	movs	r2, #2
  __HAL_LOCK(hhrtim);
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	4605      	mov	r5, r0
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80076ee:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
  __HAL_LOCK(hhrtim);
 80076f2:	d057      	beq.n	80077a4 <HAL_HRTIM_WaveformCountStart_DMA+0xcc>
 80076f4:	2401      	movs	r4, #1
  if (((Timers & HRTIM_TIMERID_MASTER) != (uint32_t)RESET) &&
 80076f6:	03cb      	lsls	r3, r1, #15
 80076f8:	460f      	mov	r7, r1
  __HAL_LOCK(hhrtim);
 80076fa:	f880 40dc 	strb.w	r4, [r0, #220]	; 0xdc
  if (((Timers & HRTIM_TIMERID_MASTER) != (uint32_t)RESET) &&
 80076fe:	d439      	bmi.n	8007774 <HAL_HRTIM_WaveformCountStart_DMA+0x9c>
 8007700:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 80077e0 <HAL_HRTIM_WaveformCountStart_DMA+0x108>
      hdma->XferErrorCallback = HRTIM_DMAError ;
 8007704:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 80077d8 <HAL_HRTIM_WaveformCountStart_DMA+0x100>
      hdma->XferCpltCallback = HRTIM_DMATimerxCplt;
 8007708:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80077e4 <HAL_HRTIM_WaveformCountStart_DMA+0x10c>
 800770c:	462c      	mov	r4, r5
 800770e:	f105 09a8 	add.w	r9, r5, #168	; 0xa8
{
 8007712:	2600      	movs	r6, #0
 8007714:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007718:	e001      	b.n	800771e <HAL_HRTIM_WaveformCountStart_DMA+0x46>
    if (((Timers & TimerIdxToTimerId[timer_idx]) != (uint32_t)RESET) &&
 800771a:	f858 3f04 	ldr.w	r3, [r8, #4]!
 800771e:	421f      	tst	r7, r3
 8007720:	d01b      	beq.n	800775a <HAL_HRTIM_WaveformCountStart_DMA+0x82>
 8007722:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hdma = HRTIM_GetDMAHandleFromTimerIdx(hhrtim, timer_idx);
 8007724:	4631      	mov	r1, r6
    if (((Timers & TimerIdxToTimerId[timer_idx]) != (uint32_t)RESET) &&
 8007726:	b1c3      	cbz	r3, 800775a <HAL_HRTIM_WaveformCountStart_DMA+0x82>
      hdma = HRTIM_GetDMAHandleFromTimerIdx(hhrtim, timer_idx);
 8007728:	4628      	mov	r0, r5
 800772a:	f7fe fdcf 	bl	80062cc <HRTIM_GetDMAHandleFromTimerIdx>
      if (hdma == NULL)
 800772e:	2800      	cmp	r0, #0
 8007730:	d043      	beq.n	80077ba <HAL_HRTIM_WaveformCountStart_DMA+0xe2>
      if (HAL_DMA_Start_IT(hdma,
 8007732:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
 8007736:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      hdma->XferErrorCallback = HRTIM_DMAError ;
 8007738:	f8c0 b034 	str.w	fp, [r0, #52]	; 0x34
      hdma->XferCpltCallback = HRTIM_DMATimerxCplt;
 800773c:	f8c0 a02c 	str.w	sl, [r0, #44]	; 0x2c
      if (HAL_DMA_Start_IT(hdma,
 8007740:	f7fe f954 	bl	80059ec <HAL_DMA_Start_IT>
 8007744:	2800      	cmp	r0, #0
 8007746:	d13f      	bne.n	80077c8 <HAL_HRTIM_WaveformCountStart_DMA+0xf0>
      __HAL_HRTIM_TIMER_ENABLE_DMA(hhrtim,
 8007748:	682b      	ldr	r3, [r5, #0]
 800774a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800774c:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
 8007750:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007754:	430a      	orrs	r2, r1
 8007756:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800775a:	341c      	adds	r4, #28
 800775c:	454c      	cmp	r4, r9
 800775e:	f106 0601 	add.w	r6, r6, #1
 8007762:	d1da      	bne.n	800771a <HAL_HRTIM_WaveformCountStart_DMA+0x42>
  __HAL_UNLOCK(hhrtim);
 8007764:	2000      	movs	r0, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007766:	2301      	movs	r3, #1
 8007768:	f885 30dd 	strb.w	r3, [r5, #221]	; 0xdd
  __HAL_UNLOCK(hhrtim);
 800776c:	f885 00dc 	strb.w	r0, [r5, #220]	; 0xdc
}
 8007770:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (((Timers & HRTIM_TIMERID_MASTER) != (uint32_t)RESET) &&
 8007774:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
 8007778:	2b00      	cmp	r3, #0
 800777a:	d0c1      	beq.n	8007700 <HAL_HRTIM_WaveformCountStart_DMA+0x28>
      hhrtim->hdmaMaster->XferErrorCallback = HRTIM_DMAError ;
 800777c:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
 8007780:	4b15      	ldr	r3, [pc, #84]	; (80077d8 <HAL_HRTIM_WaveformCountStart_DMA+0x100>)
 8007782:	6343      	str	r3, [r0, #52]	; 0x34
      hhrtim->hdmaMaster->XferCpltCallback = HRTIM_DMAMasterCplt;
 8007784:	4b15      	ldr	r3, [pc, #84]	; (80077dc <HAL_HRTIM_WaveformCountStart_DMA+0x104>)
 8007786:	62c3      	str	r3, [r0, #44]	; 0x2c
      if (HAL_DMA_Start_IT(hhrtim->hdmaMaster,
 8007788:	f8d5 10d0 	ldr.w	r1, [r5, #208]	; 0xd0
 800778c:	e9d5 2335 	ldrd	r2, r3, [r5, #212]	; 0xd4
 8007790:	f7fe f92c 	bl	80059ec <HAL_DMA_Start_IT>
 8007794:	b948      	cbnz	r0, 80077aa <HAL_HRTIM_WaveformCountStart_DMA+0xd2>
      __HAL_HRTIM_MASTER_ENABLE_DMA(hhrtim,
 8007796:	682a      	ldr	r2, [r5, #0]
 8007798:	f8d5 10cc 	ldr.w	r1, [r5, #204]	; 0xcc
 800779c:	68d3      	ldr	r3, [r2, #12]
 800779e:	430b      	orrs	r3, r1
 80077a0:	60d3      	str	r3, [r2, #12]
 80077a2:	e7ad      	b.n	8007700 <HAL_HRTIM_WaveformCountStart_DMA+0x28>
     return HAL_BUSY;
 80077a4:	2002      	movs	r0, #2
}
 80077a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80077aa:	2207      	movs	r2, #7
            __HAL_UNLOCK(hhrtim);
 80077ac:	2300      	movs	r3, #0
            hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80077ae:	f885 20dd 	strb.w	r2, [r5, #221]	; 0xdd
            __HAL_UNLOCK(hhrtim);
 80077b2:	f885 30dc 	strb.w	r3, [r5, #220]	; 0xdc
            return HAL_ERROR;
 80077b6:	4620      	mov	r0, r4
 80077b8:	e7da      	b.n	8007770 <HAL_HRTIM_WaveformCountStart_DMA+0x98>
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80077ba:	2207      	movs	r2, #7
        __HAL_UNLOCK(hhrtim);
 80077bc:	f885 00dc 	strb.w	r0, [r5, #220]	; 0xdc
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80077c0:	f885 20dd 	strb.w	r2, [r5, #221]	; 0xdd
        return HAL_ERROR;
 80077c4:	2001      	movs	r0, #1
 80077c6:	e7d3      	b.n	8007770 <HAL_HRTIM_WaveformCountStart_DMA+0x98>
              hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80077c8:	2207      	movs	r2, #7
              __HAL_UNLOCK(hhrtim);
 80077ca:	2300      	movs	r3, #0
              hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80077cc:	f885 20dd 	strb.w	r2, [r5, #221]	; 0xdd
              __HAL_UNLOCK(hhrtim);
 80077d0:	f885 30dc 	strb.w	r3, [r5, #220]	; 0xdc
              return HAL_ERROR;
 80077d4:	2001      	movs	r0, #1
 80077d6:	e7cb      	b.n	8007770 <HAL_HRTIM_WaveformCountStart_DMA+0x98>
 80077d8:	080079dd 	.word	0x080079dd
 80077dc:	08007805 	.word	0x08007805
 80077e0:	0800ade0 	.word	0x0800ade0
 80077e4:	0800788d 	.word	0x0800788d

080077e8 <HAL_HRTIM_SynchronizationEventCallback>:
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop

080077ec <HAL_HRTIM_RegistersUpdateCallback>:
}
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop

080077f0 <HAL_HRTIM_RepetitionEventCallback>:
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop

080077f4 <HAL_HRTIM_Compare1EventCallback>:
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop

080077f8 <HAL_HRTIM_Compare2EventCallback>:
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop

080077fc <HAL_HRTIM_Compare3EventCallback>:
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop

08007800 <HAL_HRTIM_Compare4EventCallback>:
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop

08007804 <HRTIM_DMAMasterCplt>:
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void HRTIM_DMAMasterCplt(DMA_HandleTypeDef *hdma)
{
  HRTIM_HandleTypeDef * hrtim = (HRTIM_HandleTypeDef *)((DMA_HandleTypeDef* )hdma)->Parent;
 8007804:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8007806:	b508      	push	{r3, lr}

  if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP1) != (uint32_t)RESET)
 8007808:	6803      	ldr	r3, [r0, #0]
 800780a:	68da      	ldr	r2, [r3, #12]
 800780c:	03d1      	lsls	r1, r2, #15
 800780e:	d416      	bmi.n	800783e <HRTIM_DMAMasterCplt+0x3a>
    hrtim->Compare1EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
#else
    HAL_HRTIM_Compare1EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP2) != (uint32_t)RESET)
 8007810:	68da      	ldr	r2, [r3, #12]
 8007812:	0392      	lsls	r2, r2, #14
 8007814:	d40f      	bmi.n	8007836 <HRTIM_DMAMasterCplt+0x32>
    hrtim->Compare2EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
#else
    HAL_HRTIM_Compare2EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP3) != (uint32_t)RESET)
 8007816:	68da      	ldr	r2, [r3, #12]
 8007818:	0351      	lsls	r1, r2, #13
 800781a:	d417      	bmi.n	800784c <HRTIM_DMAMasterCplt+0x48>
    hrtim->Compare3EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
#else
    HAL_HRTIM_Compare3EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MCMP4) != (uint32_t)RESET)
 800781c:	68da      	ldr	r2, [r3, #12]
 800781e:	0312      	lsls	r2, r2, #12
 8007820:	d418      	bmi.n	8007854 <HRTIM_DMAMasterCplt+0x50>
    hrtim->Compare4EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
#else
    HAL_HRTIM_Compare4EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_SYNC) != (uint32_t)RESET)
 8007822:	68da      	ldr	r2, [r3, #12]
 8007824:	0291      	lsls	r1, r2, #10
 8007826:	d40e      	bmi.n	8007846 <HRTIM_DMAMasterCplt+0x42>
    hrtim->SynchronizationEventCallback(hrtim);
#else
    HAL_HRTIM_SynchronizationEventCallback(hrtim);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MUPD) != (uint32_t)RESET)
 8007828:	68da      	ldr	r2, [r3, #12]
 800782a:	0252      	lsls	r2, r2, #9
 800782c:	d41a      	bmi.n	8007864 <HRTIM_DMAMasterCplt+0x60>
    hrtim->RegistersUpdateCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
#else
    HAL_HRTIM_RegistersUpdateCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sMasterRegs.MDIER & HRTIM_MASTER_DMA_MREP) != (uint32_t)RESET)
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	02db      	lsls	r3, r3, #11
 8007832:	d413      	bmi.n	800785c <HRTIM_DMAMasterCplt+0x58>
  }
  else
  {
    /* nothing to do */
  }
}
 8007834:	bd08      	pop	{r3, pc}
    HAL_HRTIM_Compare2EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 8007836:	2106      	movs	r1, #6
 8007838:	f7ff ffde 	bl	80077f8 <HAL_HRTIM_Compare2EventCallback>
}
 800783c:	bd08      	pop	{r3, pc}
    HAL_HRTIM_Compare1EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 800783e:	2106      	movs	r1, #6
 8007840:	f7ff ffd8 	bl	80077f4 <HAL_HRTIM_Compare1EventCallback>
}
 8007844:	bd08      	pop	{r3, pc}
    HAL_HRTIM_SynchronizationEventCallback(hrtim);
 8007846:	f7ff ffcf 	bl	80077e8 <HAL_HRTIM_SynchronizationEventCallback>
}
 800784a:	bd08      	pop	{r3, pc}
    HAL_HRTIM_Compare3EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 800784c:	2106      	movs	r1, #6
 800784e:	f7ff ffd5 	bl	80077fc <HAL_HRTIM_Compare3EventCallback>
}
 8007852:	bd08      	pop	{r3, pc}
    HAL_HRTIM_Compare4EventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 8007854:	2106      	movs	r1, #6
 8007856:	f7ff ffd3 	bl	8007800 <HAL_HRTIM_Compare4EventCallback>
}
 800785a:	bd08      	pop	{r3, pc}
    HAL_HRTIM_RepetitionEventCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 800785c:	2106      	movs	r1, #6
 800785e:	f7ff ffc7 	bl	80077f0 <HAL_HRTIM_RepetitionEventCallback>
}
 8007862:	bd08      	pop	{r3, pc}
    HAL_HRTIM_RegistersUpdateCallback(hrtim, HRTIM_TIMERINDEX_MASTER);
 8007864:	2106      	movs	r1, #6
 8007866:	f7ff ffc1 	bl	80077ec <HAL_HRTIM_RegistersUpdateCallback>
}
 800786a:	bd08      	pop	{r3, pc}

0800786c <HAL_HRTIM_Capture1EventCallback>:
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop

08007870 <HAL_HRTIM_Capture2EventCallback>:
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop

08007874 <HAL_HRTIM_DelayedProtectionCallback>:
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop

08007878 <HAL_HRTIM_CounterResetCallback>:
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop

0800787c <HAL_HRTIM_Output1SetCallback>:
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop

08007880 <HAL_HRTIM_Output1ResetCallback>:
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop

08007884 <HAL_HRTIM_Output2SetCallback>:
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop

08007888 <HAL_HRTIM_Output2ResetCallback>:
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop

0800788c <HRTIM_DMATimerxCplt>:
  */
static void HRTIM_DMATimerxCplt(DMA_HandleTypeDef *hdma)
{
  uint8_t timer_idx;

  HRTIM_HandleTypeDef * hrtim = (HRTIM_HandleTypeDef *)((DMA_HandleTypeDef* )hdma)->Parent;
 800788c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if (hdma == hhrtim->hdmaMaster)
 800788e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007892:	4290      	cmp	r0, r2
 8007894:	d017      	beq.n	80078c6 <HRTIM_DMATimerxCplt+0x3a>
  else if (hdma == hhrtim->hdmaTimerA)
 8007896:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 800789a:	4290      	cmp	r0, r2
 800789c:	d014      	beq.n	80078c8 <HRTIM_DMATimerxCplt+0x3c>
  else if (hdma == hhrtim->hdmaTimerB)
 800789e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80078a2:	4290      	cmp	r0, r2
 80078a4:	d059      	beq.n	800795a <HRTIM_DMATimerxCplt+0xce>
  else if (hdma == hhrtim->hdmaTimerC)
 80078a6:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 80078aa:	4290      	cmp	r0, r2
 80078ac:	d063      	beq.n	8007976 <HRTIM_DMATimerxCplt+0xea>
  else if (hdma == hhrtim->hdmaTimerD)
 80078ae:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80078b2:	4290      	cmp	r0, r2
 80078b4:	d066      	beq.n	8007984 <HRTIM_DMATimerxCplt+0xf8>
  else if (hdma == hhrtim->hdmaTimerE)
 80078b6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80078ba:	4290      	cmp	r0, r2
 80078bc:	d069      	beq.n	8007992 <HRTIM_DMATimerxCplt+0x106>
  else if (hdma == hhrtim->hdmaTimerF)
 80078be:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80078c2:	4290      	cmp	r0, r2
 80078c4:	d050      	beq.n	8007968 <HRTIM_DMATimerxCplt+0xdc>
 80078c6:	4770      	bx	lr
 80078c8:	2200      	movs	r2, #0
    timed_idx = HRTIM_TIMERINDEX_TIMER_A;
 80078ca:	4611      	mov	r1, r2

  timer_idx = (uint8_t)GetTimerIdxFromDMAHandle(hrtim, hdma);

  if ( !IS_HRTIM_TIMING_UNIT(timer_idx) ) {return;}

  if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP1) != (uint32_t)RESET)
 80078cc:	6818      	ldr	r0, [r3, #0]
 80078ce:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 80078d2:	eb00 12c2 	add.w	r2, r0, r2, lsl #7
{
 80078d6:	b510      	push	{r4, lr}
  if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP1) != (uint32_t)RESET)
 80078d8:	f8d2 408c 	ldr.w	r4, [r2, #140]	; 0x8c
 80078dc:	03e4      	lsls	r4, r4, #15
 80078de:	d438      	bmi.n	8007952 <HRTIM_DMATimerxCplt+0xc6>
    hrtim->Compare1EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare1EventCallback(hrtim, timer_idx);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP2) != (uint32_t)RESET)
 80078e0:	f8d2 408c 	ldr.w	r4, [r2, #140]	; 0x8c
 80078e4:	03a4      	lsls	r4, r4, #14
 80078e6:	d442      	bmi.n	800796e <HRTIM_DMATimerxCplt+0xe2>
    hrtim->Compare2EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare2EventCallback(hrtim, timer_idx);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP3) != (uint32_t)RESET)
 80078e8:	f8d2 408c 	ldr.w	r4, [r2, #140]	; 0x8c
 80078ec:	0364      	lsls	r4, r4, #13
 80078ee:	d437      	bmi.n	8007960 <HRTIM_DMATimerxCplt+0xd4>
    hrtim->Compare3EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare3EventCallback(hrtim, timer_idx);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CMP4) != (uint32_t)RESET)
 80078f0:	f8d2 408c 	ldr.w	r4, [r2, #140]	; 0x8c
 80078f4:	0324      	lsls	r4, r4, #12
 80078f6:	d441      	bmi.n	800797c <HRTIM_DMATimerxCplt+0xf0>
    hrtim->Compare4EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Compare4EventCallback(hrtim, timer_idx);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_UPD) != (uint32_t)RESET)
 80078f8:	f8d2 408c 	ldr.w	r4, [r2, #140]	; 0x8c
 80078fc:	0264      	lsls	r4, r4, #9
 80078fe:	d44b      	bmi.n	8007998 <HRTIM_DMATimerxCplt+0x10c>
    hrtim->RegistersUpdateCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_RegistersUpdateCallback(hrtim, timer_idx);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CPT1) != (uint32_t)RESET)
 8007900:	f8d2 408c 	ldr.w	r4, [r2, #140]	; 0x8c
 8007904:	0224      	lsls	r4, r4, #8
 8007906:	d44b      	bmi.n	80079a0 <HRTIM_DMATimerxCplt+0x114>
    hrtim->Capture1EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Capture1EventCallback(hrtim, timer_idx);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_CPT2) != (uint32_t)RESET)
 8007908:	f8d2 408c 	ldr.w	r4, [r2, #140]	; 0x8c
 800790c:	01e4      	lsls	r4, r4, #7
 800790e:	d43c      	bmi.n	800798a <HRTIM_DMATimerxCplt+0xfe>
    hrtim->Capture2EventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Capture2EventCallback(hrtim, timer_idx);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_SET1) != (uint32_t)RESET)
 8007910:	f8d2 408c 	ldr.w	r4, [r2, #140]	; 0x8c
 8007914:	01a4      	lsls	r4, r4, #6
 8007916:	d447      	bmi.n	80079a8 <HRTIM_DMATimerxCplt+0x11c>
    hrtim->Output1SetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output1SetCallback(hrtim, timer_idx);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_RST1) != (uint32_t)RESET)
 8007918:	f8d2 408c 	ldr.w	r4, [r2, #140]	; 0x8c
 800791c:	0164      	lsls	r4, r4, #5
 800791e:	d447      	bmi.n	80079b0 <HRTIM_DMATimerxCplt+0x124>
    hrtim->Output1ResetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output1ResetCallback(hrtim, timer_idx);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_SET2) != (uint32_t)RESET)
 8007920:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8007924:	0112      	lsls	r2, r2, #4
 8007926:	d447      	bmi.n	80079b8 <HRTIM_DMATimerxCplt+0x12c>
    hrtim->Output2SetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output2SetCallback(hrtim, timer_idx);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_RST2) != (uint32_t)RESET)
 8007928:	4460      	add	r0, ip
 800792a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800792e:	00d4      	lsls	r4, r2, #3
 8007930:	d446      	bmi.n	80079c0 <HRTIM_DMATimerxCplt+0x134>
    hrtim->Output2ResetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_Output2ResetCallback(hrtim, timer_idx);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_RST) != (uint32_t)RESET)
 8007932:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8007936:	0092      	lsls	r2, r2, #2
 8007938:	d446      	bmi.n	80079c8 <HRTIM_DMATimerxCplt+0x13c>
    hrtim->CounterResetCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_CounterResetCallback(hrtim, timer_idx);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_DLYPRT) != (uint32_t)RESET)
 800793a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800793e:	0054      	lsls	r4, r2, #1
 8007940:	d446      	bmi.n	80079d0 <HRTIM_DMATimerxCplt+0x144>
    hrtim->DelayedProtectionCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_DelayedProtectionCallback(hrtim, timer_idx);
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
  }
  else if ((hrtim->Instance->sTimerxRegs[timer_idx].TIMxDIER & HRTIM_TIM_DMA_REP) != (uint32_t)RESET)
 8007942:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8007946:	02d2      	lsls	r2, r2, #11
 8007948:	d502      	bpl.n	8007950 <HRTIM_DMATimerxCplt+0xc4>
  {
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->RepetitionEventCallback(hrtim, timer_idx);
#else
    HAL_HRTIM_RepetitionEventCallback(hrtim, timer_idx);
 800794a:	4618      	mov	r0, r3
 800794c:	f7ff ff50 	bl	80077f0 <HAL_HRTIM_RepetitionEventCallback>
  }
  else
  {
    /* nothing to do */
  }
}
 8007950:	bd10      	pop	{r4, pc}
    HAL_HRTIM_Compare1EventCallback(hrtim, timer_idx);
 8007952:	4618      	mov	r0, r3
 8007954:	f7ff ff4e 	bl	80077f4 <HAL_HRTIM_Compare1EventCallback>
}
 8007958:	bd10      	pop	{r4, pc}
 800795a:	2201      	movs	r2, #1
    timed_idx = HRTIM_TIMERINDEX_TIMER_B;
 800795c:	4611      	mov	r1, r2
 800795e:	e7b5      	b.n	80078cc <HRTIM_DMATimerxCplt+0x40>
    HAL_HRTIM_Compare3EventCallback(hrtim, timer_idx);
 8007960:	4618      	mov	r0, r3
 8007962:	f7ff ff4b 	bl	80077fc <HAL_HRTIM_Compare3EventCallback>
}
 8007966:	bd10      	pop	{r4, pc}
 8007968:	2205      	movs	r2, #5
    timed_idx = HRTIM_TIMERINDEX_TIMER_F;
 800796a:	4611      	mov	r1, r2
 800796c:	e7ae      	b.n	80078cc <HRTIM_DMATimerxCplt+0x40>
    HAL_HRTIM_Compare2EventCallback(hrtim, timer_idx);
 800796e:	4618      	mov	r0, r3
 8007970:	f7ff ff42 	bl	80077f8 <HAL_HRTIM_Compare2EventCallback>
}
 8007974:	bd10      	pop	{r4, pc}
 8007976:	2202      	movs	r2, #2
    timed_idx = HRTIM_TIMERINDEX_TIMER_C;
 8007978:	4611      	mov	r1, r2
 800797a:	e7a7      	b.n	80078cc <HRTIM_DMATimerxCplt+0x40>
    HAL_HRTIM_Compare4EventCallback(hrtim, timer_idx);
 800797c:	4618      	mov	r0, r3
 800797e:	f7ff ff3f 	bl	8007800 <HAL_HRTIM_Compare4EventCallback>
}
 8007982:	bd10      	pop	{r4, pc}
 8007984:	2203      	movs	r2, #3
    timed_idx = HRTIM_TIMERINDEX_TIMER_D;
 8007986:	4611      	mov	r1, r2
 8007988:	e7a0      	b.n	80078cc <HRTIM_DMATimerxCplt+0x40>
    HAL_HRTIM_Capture2EventCallback(hrtim, timer_idx);
 800798a:	4618      	mov	r0, r3
 800798c:	f7ff ff70 	bl	8007870 <HAL_HRTIM_Capture2EventCallback>
}
 8007990:	bd10      	pop	{r4, pc}
 8007992:	2204      	movs	r2, #4
    timed_idx = HRTIM_TIMERINDEX_TIMER_E;
 8007994:	4611      	mov	r1, r2
 8007996:	e799      	b.n	80078cc <HRTIM_DMATimerxCplt+0x40>
    HAL_HRTIM_RegistersUpdateCallback(hrtim, timer_idx);
 8007998:	4618      	mov	r0, r3
 800799a:	f7ff ff27 	bl	80077ec <HAL_HRTIM_RegistersUpdateCallback>
}
 800799e:	bd10      	pop	{r4, pc}
    HAL_HRTIM_Capture1EventCallback(hrtim, timer_idx);
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7ff ff63 	bl	800786c <HAL_HRTIM_Capture1EventCallback>
}
 80079a6:	bd10      	pop	{r4, pc}
    HAL_HRTIM_Output1SetCallback(hrtim, timer_idx);
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7ff ff67 	bl	800787c <HAL_HRTIM_Output1SetCallback>
}
 80079ae:	bd10      	pop	{r4, pc}
    HAL_HRTIM_Output1ResetCallback(hrtim, timer_idx);
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7ff ff65 	bl	8007880 <HAL_HRTIM_Output1ResetCallback>
}
 80079b6:	bd10      	pop	{r4, pc}
    HAL_HRTIM_Output2SetCallback(hrtim, timer_idx);
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7ff ff63 	bl	8007884 <HAL_HRTIM_Output2SetCallback>
}
 80079be:	bd10      	pop	{r4, pc}
    HAL_HRTIM_Output2ResetCallback(hrtim, timer_idx);
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7ff ff61 	bl	8007888 <HAL_HRTIM_Output2ResetCallback>
}
 80079c6:	bd10      	pop	{r4, pc}
    HAL_HRTIM_CounterResetCallback(hrtim, timer_idx);
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7ff ff55 	bl	8007878 <HAL_HRTIM_CounterResetCallback>
}
 80079ce:	bd10      	pop	{r4, pc}
    HAL_HRTIM_DelayedProtectionCallback(hrtim, timer_idx);
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7ff ff4f 	bl	8007874 <HAL_HRTIM_DelayedProtectionCallback>
}
 80079d6:	bd10      	pop	{r4, pc}

080079d8 <HAL_HRTIM_ErrorCallback>:
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop

080079dc <HRTIM_DMAError>:
* @brief  DMA error callback
* @param  hdma pointer to DMA handle.
* @retval None
*/
static void HRTIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80079dc:	b508      	push	{r3, lr}
  HRTIM_HandleTypeDef * hrtim = (HRTIM_HandleTypeDef *)((DMA_HandleTypeDef* )hdma)->Parent;

#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
    hrtim->ErrorCallback(hrtim);
#else
  HAL_HRTIM_ErrorCallback(hrtim);
 80079de:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80079e0:	f7ff fffa 	bl	80079d8 <HAL_HRTIM_ErrorCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
}
 80079e4:	bd08      	pop	{r3, pc}
 80079e6:	bf00      	nop

080079e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80079e8:	4a02      	ldr	r2, [pc, #8]	; (80079f4 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 80079ea:	6893      	ldr	r3, [r2, #8]
 80079ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079f0:	6093      	str	r3, [r2, #8]
}
 80079f2:	4770      	bx	lr
 80079f4:	40007000 	.word	0x40007000

080079f8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80079f8:	4b18      	ldr	r3, [pc, #96]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x64>)
 80079fa:	689a      	ldr	r2, [r3, #8]
 80079fc:	f002 020c 	and.w	r2, r2, #12
 8007a00:	2a04      	cmp	r2, #4
 8007a02:	d027      	beq.n	8007a54 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007a04:	689a      	ldr	r2, [r3, #8]
 8007a06:	f002 020c 	and.w	r2, r2, #12
 8007a0a:	2a08      	cmp	r2, #8
 8007a0c:	d024      	beq.n	8007a58 <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007a0e:	689a      	ldr	r2, [r3, #8]
 8007a10:	f002 020c 	and.w	r2, r2, #12
 8007a14:	2a0c      	cmp	r2, #12
 8007a16:	d001      	beq.n	8007a1c <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8007a18:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8007a1a:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007a1c:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007a1e:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007a20:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8007a24:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007a26:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8007a2a:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007a2e:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007a30:	bf0c      	ite	eq
 8007a32:	4b0b      	ldreq	r3, [pc, #44]	; (8007a60 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007a34:	4b0b      	ldrne	r3, [pc, #44]	; (8007a64 <HAL_RCC_GetSysClockFreq+0x6c>)
 8007a36:	fbb3 f2f2 	udiv	r2, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a3a:	4b08      	ldr	r3, [pc, #32]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x64>)
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	f3c3 6341 	ubfx	r3, r3, #25, #2
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007a42:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a46:	3301      	adds	r3, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007a48:	fb02 f000 	mul.w	r0, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a4c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8007a4e:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8007a52:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8007a54:	4803      	ldr	r0, [pc, #12]	; (8007a64 <HAL_RCC_GetSysClockFreq+0x6c>)
 8007a56:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8007a58:	4801      	ldr	r0, [pc, #4]	; (8007a60 <HAL_RCC_GetSysClockFreq+0x68>)
 8007a5a:	4770      	bx	lr
 8007a5c:	40021000 	.word	0x40021000
 8007a60:	016e3600 	.word	0x016e3600
 8007a64:	00f42400 	.word	0x00f42400

08007a68 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007a68:	4b05      	ldr	r3, [pc, #20]	; (8007a80 <HAL_RCC_GetPCLK1Freq+0x18>)
 8007a6a:	4a06      	ldr	r2, [pc, #24]	; (8007a84 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007a6c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8007a6e:	4906      	ldr	r1, [pc, #24]	; (8007a88 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007a70:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007a74:	6808      	ldr	r0, [r1, #0]
 8007a76:	5cd3      	ldrb	r3, [r2, r3]
 8007a78:	f003 031f 	and.w	r3, r3, #31
}
 8007a7c:	40d8      	lsrs	r0, r3
 8007a7e:	4770      	bx	lr
 8007a80:	40021000 	.word	0x40021000
 8007a84:	0800add8 	.word	0x0800add8
 8007a88:	2000001c 	.word	0x2000001c

08007a8c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007a8c:	4b05      	ldr	r3, [pc, #20]	; (8007aa4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8007a8e:	4a06      	ldr	r2, [pc, #24]	; (8007aa8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007a90:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8007a92:	4906      	ldr	r1, [pc, #24]	; (8007aac <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007a94:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007a98:	6808      	ldr	r0, [r1, #0]
 8007a9a:	5cd3      	ldrb	r3, [r2, r3]
 8007a9c:	f003 031f 	and.w	r3, r3, #31
}
 8007aa0:	40d8      	lsrs	r0, r3
 8007aa2:	4770      	bx	lr
 8007aa4:	40021000 	.word	0x40021000
 8007aa8:	0800add8 	.word	0x0800add8
 8007aac:	2000001c 	.word	0x2000001c

08007ab0 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ab4:	b083      	sub	sp, #12
 8007ab6:	4698      	mov	r8, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007ab8:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007aba:	4615      	mov	r5, r2
  __IO uint8_t  tmpreg8 = 0;
 8007abc:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007ac0:	4606      	mov	r6, r0
 8007ac2:	460c      	mov	r4, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007ac4:	f7fd fe7c 	bl	80057c0 <HAL_GetTick>
 8007ac8:	44a8      	add	r8, r5
 8007aca:	eba8 0700 	sub.w	r7, r8, r0
  tmp_tickstart = HAL_GetTick();
 8007ace:	f7fd fe77 	bl	80057c0 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007ad2:	4b30      	ldr	r3, [pc, #192]	; (8007b94 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007ad4:	f8d6 9000 	ldr.w	r9, [r6]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007ade:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007ae2:	0d1b      	lsrs	r3, r3, #20
 8007ae4:	fb07 f303 	mul.w	r3, r7, r3
  tmp_tickstart = HAL_GetTick();
 8007ae8:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007aea:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8007aec:	464a      	mov	r2, r9
 8007aee:	e001      	b.n	8007af4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x44>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8007af0:	1c6b      	adds	r3, r5, #1
 8007af2:	d10e      	bne.n	8007b12 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
  while ((hspi->Instance->SR & Fifo) != State)
 8007af4:	6893      	ldr	r3, [r2, #8]
 8007af6:	4023      	ands	r3, r4
 8007af8:	d01d      	beq.n	8007b36 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007afa:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8007afe:	d1f7      	bne.n	8007af0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      tmpreg8 = *ptmpreg8;
 8007b00:	f899 300c 	ldrb.w	r3, [r9, #12]
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8007b0a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if (Timeout != HAL_MAX_DELAY)
 8007b0e:	1c6b      	adds	r3, r5, #1
 8007b10:	d0f0      	beq.n	8007af4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x44>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b12:	f7fd fe55 	bl	80057c0 <HAL_GetTick>
 8007b16:	eba0 0008 	sub.w	r0, r0, r8
 8007b1a:	42b8      	cmp	r0, r7
 8007b1c:	d20f      	bcs.n	8007b3e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b1e:	9b01      	ldr	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8007b20:	6832      	ldr	r2, [r6, #0]
      {
        tmp_timeout = 0U;
 8007b22:	2b00      	cmp	r3, #0
      }
      count--;
 8007b24:	9b01      	ldr	r3, [sp, #4]
 8007b26:	f103 33ff 	add.w	r3, r3, #4294967295
 8007b2a:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8007b2c:	6893      	ldr	r3, [r2, #8]
        tmp_timeout = 0U;
 8007b2e:	bf08      	it	eq
 8007b30:	2700      	moveq	r7, #0
  while ((hspi->Instance->SR & Fifo) != State)
 8007b32:	4023      	ands	r3, r4
 8007b34:	d1e1      	bne.n	8007afa <SPI_WaitFifoStateUntilTimeout.constprop.0+0x4a>
    }
  }

  return HAL_OK;
 8007b36:	4618      	mov	r0, r3
}
 8007b38:	b003      	add	sp, #12
 8007b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b3e:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b42:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b44:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b4c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b4e:	d014      	beq.n	8007b7a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xca>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b50:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8007b52:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8007b56:	d007      	beq.n	8007b68 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb8>
        hspi->State = HAL_SPI_STATE_READY;
 8007b58:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8007b5a:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8007b5c:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8007b60:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8007b64:	2003      	movs	r0, #3
 8007b66:	e7e7      	b.n	8007b38 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x88>
          SPI_RESET_CRC(hspi);
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b6e:	601a      	str	r2, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b76:	601a      	str	r2, [r3, #0]
 8007b78:	e7ee      	b.n	8007b58 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b7a:	68b2      	ldr	r2, [r6, #8]
 8007b7c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007b80:	d002      	beq.n	8007b88 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b82:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007b86:	d1e3      	bne.n	8007b50 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa0>
          __HAL_SPI_DISABLE(hspi);
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b8e:	601a      	str	r2, [r3, #0]
 8007b90:	e7de      	b.n	8007b50 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa0>
 8007b92:	bf00      	nop
 8007b94:	2000001c 	.word	0x2000001c

08007b98 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8007b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	460c      	mov	r4, r1
 8007b9e:	4615      	mov	r5, r2
 8007ba0:	4606      	mov	r6, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ba2:	f7fd fe0d 	bl	80057c0 <HAL_GetTick>
 8007ba6:	4425      	add	r5, r4
 8007ba8:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8007baa:	f7fd fe09 	bl	80057c0 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007bae:	4b25      	ldr	r3, [pc, #148]	; (8007c44 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8007bb6:	fb05 f303 	mul.w	r3, r5, r3
  tmp_tickstart = HAL_GetTick();
 8007bba:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007bbc:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bbe:	6832      	ldr	r2, [r6, #0]
 8007bc0:	e001      	b.n	8007bc6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
    if (Timeout != HAL_MAX_DELAY)
 8007bc2:	1c63      	adds	r3, r4, #1
 8007bc4:	d106      	bne.n	8007bd4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bc6:	6893      	ldr	r3, [r2, #8]
 8007bc8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8007bcc:	d1f9      	bne.n	8007bc2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
  return HAL_OK;
 8007bce:	4618      	mov	r0, r3
}
 8007bd0:	b003      	add	sp, #12
 8007bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007bd4:	f7fd fdf4 	bl	80057c0 <HAL_GetTick>
 8007bd8:	1bc0      	subs	r0, r0, r7
 8007bda:	42a8      	cmp	r0, r5
 8007bdc:	d208      	bcs.n	8007bf0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x58>
      if (count == 0U)
 8007bde:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8007be0:	2b00      	cmp	r3, #0
      count--;
 8007be2:	9b01      	ldr	r3, [sp, #4]
 8007be4:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8007be8:	bf08      	it	eq
 8007bea:	2500      	moveq	r5, #0
      count--;
 8007bec:	9301      	str	r3, [sp, #4]
 8007bee:	e7e6      	b.n	8007bbe <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bf0:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007bf4:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bf6:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007bfa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007bfe:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c00:	d014      	beq.n	8007c2c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c02:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8007c04:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8007c08:	d007      	beq.n	8007c1a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
        hspi->State = HAL_SPI_STATE_READY;
 8007c0a:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8007c0c:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8007c0e:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8007c12:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8007c16:	2003      	movs	r0, #3
 8007c18:	e7da      	b.n	8007bd0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
          SPI_RESET_CRC(hspi);
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c20:	601a      	str	r2, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c28:	601a      	str	r2, [r3, #0]
 8007c2a:	e7ee      	b.n	8007c0a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c2c:	68b2      	ldr	r2, [r6, #8]
 8007c2e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007c32:	d002      	beq.n	8007c3a <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c34:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007c38:	d1e3      	bne.n	8007c02 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c40:	601a      	str	r2, [r3, #0]
 8007c42:	e7de      	b.n	8007c02 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 8007c44:	2000001c 	.word	0x2000001c

08007c48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c48:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c4a:	4613      	mov	r3, r2
{
 8007c4c:	460d      	mov	r5, r1
 8007c4e:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c50:	460a      	mov	r2, r1
 8007c52:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8007c56:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c58:	f7ff ff2a 	bl	8007ab0 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8007c5c:	b970      	cbnz	r0, 8007c7c <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c5e:	4632      	mov	r2, r6
 8007c60:	4629      	mov	r1, r5
 8007c62:	4620      	mov	r0, r4
 8007c64:	f7ff ff98 	bl	8007b98 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8007c68:	b940      	cbnz	r0, 8007c7c <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c6a:	4633      	mov	r3, r6
 8007c6c:	462a      	mov	r2, r5
 8007c6e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007c72:	4620      	mov	r0, r4
 8007c74:	f7ff ff1c 	bl	8007ab0 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8007c78:	b900      	cbnz	r0, 8007c7c <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8007c7a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c7c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007c7e:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 8007c82:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c84:	6623      	str	r3, [r4, #96]	; 0x60
}
 8007c86:	bd70      	pop	{r4, r5, r6, pc}

08007c88 <HAL_SPI_Init>:
  if (hspi == NULL)
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	d077      	beq.n	8007d7c <HAL_SPI_Init+0xf4>
{
 8007c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007c90:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c92:	4604      	mov	r4, r0
 8007c94:	2e00      	cmp	r6, #0
 8007c96:	d058      	beq.n	8007d4a <HAL_SPI_Init+0xc2>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c98:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c9e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ca6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d059      	beq.n	8007d62 <HAL_SPI_Init+0xda>
  __HAL_SPI_DISABLE(hspi);
 8007cae:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cb0:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8007cb8:	6808      	ldr	r0, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cba:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8007cbe:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8007cc2:	6008      	str	r0, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cc4:	d947      	bls.n	8007d56 <HAL_SPI_Init+0xce>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007cc6:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8007cca:	d159      	bne.n	8007d80 <HAL_SPI_Init+0xf8>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ccc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007cce:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007cd0:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 8007cd4:	68a3      	ldr	r3, [r4, #8]
 8007cd6:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007cd8:	f402 6e70 	and.w	lr, r2, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007cdc:	6862      	ldr	r2, [r4, #4]
 8007cde:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007ce2:	f402 7282 	and.w	r2, r2, #260	; 0x104
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	6923      	ldr	r3, [r4, #16]
 8007cea:	f003 0302 	and.w	r3, r3, #2
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	6963      	ldr	r3, [r4, #20]
 8007cf2:	f003 0301 	and.w	r3, r3, #1
 8007cf6:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007cf8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007cfa:	f003 0308 	and.w	r3, r3, #8
 8007cfe:	f006 0c10 	and.w	ip, r6, #16
 8007d02:	ea43 0e0e 	orr.w	lr, r3, lr
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007d06:	69a6      	ldr	r6, [r4, #24]
 8007d08:	69e3      	ldr	r3, [r4, #28]
 8007d0a:	f003 0838 	and.w	r8, r3, #56	; 0x38
 8007d0e:	f406 7300 	and.w	r3, r6, #512	; 0x200
 8007d12:	4313      	orrs	r3, r2
 8007d14:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8007d18:	ea43 0308 	orr.w	r3, r3, r8
 8007d1c:	433b      	orrs	r3, r7
 8007d1e:	432b      	orrs	r3, r5
 8007d20:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007d22:	0c33      	lsrs	r3, r6, #16
 8007d24:	f003 0304 	and.w	r3, r3, #4
 8007d28:	ea4e 0303 	orr.w	r3, lr, r3
 8007d2c:	ea43 030c 	orr.w	r3, r3, ip
 8007d30:	4303      	orrs	r3, r0
 8007d32:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d34:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d36:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8007d3c:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d3e:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d40:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007d42:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
}
 8007d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d4a:	6843      	ldr	r3, [r0, #4]
 8007d4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d50:	d0a5      	beq.n	8007c9e <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d52:	61c6      	str	r6, [r0, #28]
 8007d54:	e7a3      	b.n	8007c9e <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007d56:	d00b      	beq.n	8007d70 <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007d58:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d5c:	2500      	movs	r5, #0
 8007d5e:	62a5      	str	r5, [r4, #40]	; 0x28
 8007d60:	e7b8      	b.n	8007cd4 <HAL_SPI_Init+0x4c>
    hspi->Lock = HAL_UNLOCKED;
 8007d62:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8007d66:	4620      	mov	r0, r4
 8007d68:	f7fd faf6 	bl	8005358 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007d6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007d6e:	e79e      	b.n	8007cae <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007d70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007d72:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007d76:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 8007d7a:	e7ab      	b.n	8007cd4 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8007d7c:	2001      	movs	r0, #1
}
 8007d7e:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007d80:	2000      	movs	r0, #0
 8007d82:	e7eb      	b.n	8007d5c <HAL_SPI_Init+0xd4>

08007d84 <HAL_SPI_TransmitReceive>:
{
 8007d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d88:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8007d8a:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
{
 8007d8e:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8007d90:	2801      	cmp	r0, #1
 8007d92:	f000 8097 	beq.w	8007ec4 <HAL_SPI_TransmitReceive+0x140>
 8007d96:	461f      	mov	r7, r3
 8007d98:	2301      	movs	r3, #1
 8007d9a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8007d9e:	4689      	mov	r9, r1
 8007da0:	4690      	mov	r8, r2
 8007da2:	f7fd fd0d 	bl	80057c0 <HAL_GetTick>
 8007da6:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8007da8:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 8007dac:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007dae:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 8007db0:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007db2:	d010      	beq.n	8007dd6 <HAL_SPI_TransmitReceive+0x52>
 8007db4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007db8:	d008      	beq.n	8007dcc <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 8007dba:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8007dbc:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8007dbe:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8007dc0:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007dc4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8007dc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007dcc:	68a2      	ldr	r2, [r4, #8]
 8007dce:	2a00      	cmp	r2, #0
 8007dd0:	d1f3      	bne.n	8007dba <HAL_SPI_TransmitReceive+0x36>
 8007dd2:	2904      	cmp	r1, #4
 8007dd4:	d1f1      	bne.n	8007dba <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007dd6:	f1b9 0f00 	cmp.w	r9, #0
 8007dda:	d076      	beq.n	8007eca <HAL_SPI_TransmitReceive+0x146>
 8007ddc:	f1b8 0f00 	cmp.w	r8, #0
 8007de0:	d073      	beq.n	8007eca <HAL_SPI_TransmitReceive+0x146>
 8007de2:	2f00      	cmp	r7, #0
 8007de4:	d071      	beq.n	8007eca <HAL_SPI_TransmitReceive+0x146>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007de6:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007dea:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007dec:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007df0:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007df2:	bf1c      	itt	ne
 8007df4:	2205      	movne	r2, #5
 8007df6:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 8007dfe:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e02:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 8007e04:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007e08:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  hspi->TxXferCount = Size;
 8007e0c:	87e7      	strh	r7, [r4, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e0e:	6851      	ldr	r1, [r2, #4]
  hspi->RxXferSize  = Size;
 8007e10:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007e14:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007e18:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007e1a:	d858      	bhi.n	8007ece <HAL_SPI_TransmitReceive+0x14a>
 8007e1c:	2f01      	cmp	r7, #1
 8007e1e:	f000 80ee 	beq.w	8007ffe <HAL_SPI_TransmitReceive+0x27a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e22:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8007e26:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e28:	6811      	ldr	r1, [r2, #0]
 8007e2a:	0649      	lsls	r1, r1, #25
 8007e2c:	f100 80a9 	bmi.w	8007f82 <HAL_SPI_TransmitReceive+0x1fe>
    __HAL_SPI_ENABLE(hspi);
 8007e30:	6811      	ldr	r1, [r2, #0]
 8007e32:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8007e36:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f000 80a5 	beq.w	8007f88 <HAL_SPI_TransmitReceive+0x204>
 8007e3e:	2f01      	cmp	r7, #1
 8007e40:	f000 80a2 	beq.w	8007f88 <HAL_SPI_TransmitReceive+0x204>
        txallowed = 1U;
 8007e44:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e46:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	b92b      	cbnz	r3, 8007e58 <HAL_SPI_TransmitReceive+0xd4>
 8007e4c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f000 8086 	beq.w	8007f64 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e58:	6822      	ldr	r2, [r4, #0]
 8007e5a:	6893      	ldr	r3, [r2, #8]
 8007e5c:	0799      	lsls	r1, r3, #30
 8007e5e:	d505      	bpl.n	8007e6c <HAL_SPI_TransmitReceive+0xe8>
 8007e60:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	b113      	cbz	r3, 8007e6c <HAL_SPI_TransmitReceive+0xe8>
 8007e66:	2f00      	cmp	r7, #0
 8007e68:	f040 80ae 	bne.w	8007fc8 <HAL_SPI_TransmitReceive+0x244>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e6c:	6893      	ldr	r3, [r2, #8]
 8007e6e:	f013 0301 	ands.w	r3, r3, #1
 8007e72:	d01e      	beq.n	8007eb2 <HAL_SPI_TransmitReceive+0x12e>
 8007e74:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8007e78:	b289      	uxth	r1, r1
 8007e7a:	b1d1      	cbz	r1, 8007eb2 <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->RxXferCount > 1U)
 8007e7c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8007e80:	b289      	uxth	r1, r1
 8007e82:	2901      	cmp	r1, #1
 8007e84:	f240 8092 	bls.w	8007fac <HAL_SPI_TransmitReceive+0x228>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e88:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007e8a:	68d0      	ldr	r0, [r2, #12]
 8007e8c:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e90:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007e92:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8007e96:	3902      	subs	r1, #2
 8007e98:	b289      	uxth	r1, r1
 8007e9a:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007e9e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8007ea2:	b289      	uxth	r1, r1
 8007ea4:	2901      	cmp	r1, #1
        txallowed = 1U;
 8007ea6:	461f      	mov	r7, r3
          if (hspi->RxXferCount <= 1U)
 8007ea8:	d803      	bhi.n	8007eb2 <HAL_SPI_TransmitReceive+0x12e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007eaa:	6853      	ldr	r3, [r2, #4]
 8007eac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007eb0:	6053      	str	r3, [r2, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007eb2:	f7fd fc85 	bl	80057c0 <HAL_GetTick>
 8007eb6:	1b80      	subs	r0, r0, r6
 8007eb8:	42a8      	cmp	r0, r5
 8007eba:	d373      	bcc.n	8007fa4 <HAL_SPI_TransmitReceive+0x220>
 8007ebc:	1c6b      	adds	r3, r5, #1
 8007ebe:	d0c2      	beq.n	8007e46 <HAL_SPI_TransmitReceive+0xc2>
        errorcode = HAL_TIMEOUT;
 8007ec0:	2003      	movs	r0, #3
 8007ec2:	e77b      	b.n	8007dbc <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 8007ec4:	2002      	movs	r0, #2
}
 8007ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 8007eca:	2001      	movs	r0, #1
 8007ecc:	e776      	b.n	8007dbc <HAL_SPI_TransmitReceive+0x38>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ece:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8007ed2:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ed4:	6811      	ldr	r1, [r2, #0]
 8007ed6:	0648      	lsls	r0, r1, #25
 8007ed8:	d403      	bmi.n	8007ee2 <HAL_SPI_TransmitReceive+0x15e>
    __HAL_SPI_ENABLE(hspi);
 8007eda:	6811      	ldr	r1, [r2, #0]
 8007edc:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8007ee0:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d14a      	bne.n	8007f7c <HAL_SPI_TransmitReceive+0x1f8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ee6:	4649      	mov	r1, r9
 8007ee8:	f831 3b02 	ldrh.w	r3, [r1], #2
 8007eec:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8007eee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ef0:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8007ef8:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007efa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	b91b      	cbnz	r3, 8007f08 <HAL_SPI_TransmitReceive+0x184>
 8007f00:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	b36b      	cbz	r3, 8007f64 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f08:	6822      	ldr	r2, [r4, #0]
 8007f0a:	6893      	ldr	r3, [r2, #8]
 8007f0c:	079b      	lsls	r3, r3, #30
 8007f0e:	d50d      	bpl.n	8007f2c <HAL_SPI_TransmitReceive+0x1a8>
 8007f10:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	b153      	cbz	r3, 8007f2c <HAL_SPI_TransmitReceive+0x1a8>
 8007f16:	b14f      	cbz	r7, 8007f2c <HAL_SPI_TransmitReceive+0x1a8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007f1a:	f833 1b02 	ldrh.w	r1, [r3], #2
 8007f1e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f20:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8007f22:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007f24:	3b01      	subs	r3, #1
 8007f26:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8007f28:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 8007f2a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f2c:	6893      	ldr	r3, [r2, #8]
 8007f2e:	f013 0301 	ands.w	r3, r3, #1
 8007f32:	d00f      	beq.n	8007f54 <HAL_SPI_TransmitReceive+0x1d0>
 8007f34:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8007f38:	b289      	uxth	r1, r1
 8007f3a:	b159      	cbz	r1, 8007f54 <HAL_SPI_TransmitReceive+0x1d0>
        txallowed = 1U;
 8007f3c:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f40:	68d2      	ldr	r2, [r2, #12]
 8007f42:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f46:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8007f48:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007f54:	f7fd fc34 	bl	80057c0 <HAL_GetTick>
 8007f58:	1b80      	subs	r0, r0, r6
 8007f5a:	42a8      	cmp	r0, r5
 8007f5c:	d3cd      	bcc.n	8007efa <HAL_SPI_TransmitReceive+0x176>
 8007f5e:	1c68      	adds	r0, r5, #1
 8007f60:	d0cb      	beq.n	8007efa <HAL_SPI_TransmitReceive+0x176>
 8007f62:	e7ad      	b.n	8007ec0 <HAL_SPI_TransmitReceive+0x13c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f64:	4632      	mov	r2, r6
 8007f66:	4629      	mov	r1, r5
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f7ff fe6d 	bl	8007c48 <SPI_EndRxTxTransaction>
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	f43f af24 	beq.w	8007dbc <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f74:	2320      	movs	r3, #32
 8007f76:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007f78:	2001      	movs	r0, #1
 8007f7a:	e71f      	b.n	8007dbc <HAL_SPI_TransmitReceive+0x38>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f7c:	2f01      	cmp	r7, #1
 8007f7e:	d1bb      	bne.n	8007ef8 <HAL_SPI_TransmitReceive+0x174>
 8007f80:	e7b1      	b.n	8007ee6 <HAL_SPI_TransmitReceive+0x162>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f47f af5e 	bne.w	8007e44 <HAL_SPI_TransmitReceive+0xc0>
      if (hspi->TxXferCount > 1U)
 8007f88:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d93e      	bls.n	800800e <HAL_SPI_TransmitReceive+0x28a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f90:	4649      	mov	r1, r9
 8007f92:	f831 3b02 	ldrh.w	r3, [r1], #2
 8007f96:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 8007f98:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f9a:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007f9c:	3b02      	subs	r3, #2
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007fa2:	e74f      	b.n	8007e44 <HAL_SPI_TransmitReceive+0xc0>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007fa4:	2d00      	cmp	r5, #0
 8007fa6:	f47f af4e 	bne.w	8007e46 <HAL_SPI_TransmitReceive+0xc2>
 8007faa:	e789      	b.n	8007ec0 <HAL_SPI_TransmitReceive+0x13c>
        txallowed = 1U;
 8007fac:	461f      	mov	r7, r3
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007fae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007fb0:	7b12      	ldrb	r2, [r2, #12]
 8007fb2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007fb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8007fba:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8007fc6:	e774      	b.n	8007eb2 <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->TxXferCount > 1U)
 8007fc8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	2b01      	cmp	r3, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 8007fd0:	d909      	bls.n	8007fe6 <HAL_SPI_TransmitReceive+0x262>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fd2:	f833 1b02 	ldrh.w	r1, [r3], #2
 8007fd6:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fd8:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007fda:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007fdc:	3b02      	subs	r3, #2
 8007fde:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8007fe0:	2700      	movs	r7, #0
          hspi->TxXferCount -= 2U;
 8007fe2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007fe4:	e742      	b.n	8007e6c <HAL_SPI_TransmitReceive+0xe8>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8007fea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8007fec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8007fee:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 8007ff0:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8007ff2:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8007ff4:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8007ff6:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ff8:	6822      	ldr	r2, [r4, #0]
        txallowed = 0U;
 8007ffa:	2700      	movs	r7, #0
 8007ffc:	e736      	b.n	8007e6c <HAL_SPI_TransmitReceive+0xe8>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ffe:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8008002:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008004:	6811      	ldr	r1, [r2, #0]
 8008006:	0649      	lsls	r1, r1, #25
 8008008:	f57f af12 	bpl.w	8007e30 <HAL_SPI_TransmitReceive+0xac>
 800800c:	e7bc      	b.n	8007f88 <HAL_SPI_TransmitReceive+0x204>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800800e:	f899 3000 	ldrb.w	r3, [r9]
 8008012:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8008014:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 8008016:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008018:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 800801a:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800801c:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 800801e:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008020:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008022:	e70f      	b.n	8007e44 <HAL_SPI_TransmitReceive+0xc0>

08008024 <HAL_SPI_DMAStop>:
{
 8008024:	b538      	push	{r3, r4, r5, lr}
 8008026:	4604      	mov	r4, r0
  if (hspi->hdmatx != NULL)
 8008028:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800802a:	b110      	cbz	r0, 8008032 <HAL_SPI_DMAStop+0xe>
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800802c:	f7fd fd38 	bl	8005aa0 <HAL_DMA_Abort>
 8008030:	b9a0      	cbnz	r0, 800805c <HAL_SPI_DMAStop+0x38>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008032:	2500      	movs	r5, #0
  if (hspi->hdmarx != NULL)
 8008034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008036:	b138      	cbz	r0, 8008048 <HAL_SPI_DMAStop+0x24>
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8008038:	f7fd fd32 	bl	8005aa0 <HAL_DMA_Abort>
 800803c:	b120      	cbz	r0, 8008048 <HAL_SPI_DMAStop+0x24>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800803e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008040:	f043 0310 	orr.w	r3, r3, #16
      errorcode = HAL_ERROR;
 8008044:	2501      	movs	r5, #1
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008046:	6623      	str	r3, [r4, #96]	; 0x60
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008048:	6822      	ldr	r2, [r4, #0]
 800804a:	6853      	ldr	r3, [r2, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800804c:	2101      	movs	r1, #1
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800804e:	f023 0303 	bic.w	r3, r3, #3
 8008052:	6053      	str	r3, [r2, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8008054:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
}
 8008058:	4628      	mov	r0, r5
 800805a:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800805c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800805e:	f043 0310 	orr.w	r3, r3, #16
      errorcode = HAL_ERROR;
 8008062:	2501      	movs	r5, #1
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008064:	6623      	str	r3, [r4, #96]	; 0x60
      errorcode = HAL_ERROR;
 8008066:	e7e5      	b.n	8008034 <HAL_SPI_DMAStop+0x10>

08008068 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008068:	6a03      	ldr	r3, [r0, #32]
 800806a:	f023 0301 	bic.w	r3, r3, #1
 800806e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008070:	6a03      	ldr	r3, [r0, #32]
{
 8008072:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008074:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008076:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008078:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800807a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800807e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8008082:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008084:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8008086:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800808a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800808c:	4d15      	ldr	r5, [pc, #84]	; (80080e4 <TIM_OC1_SetConfig+0x7c>)
 800808e:	42a8      	cmp	r0, r5
 8008090:	d013      	beq.n	80080ba <TIM_OC1_SetConfig+0x52>
 8008092:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008096:	42a8      	cmp	r0, r5
 8008098:	d00f      	beq.n	80080ba <TIM_OC1_SetConfig+0x52>
 800809a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800809e:	42a8      	cmp	r0, r5
 80080a0:	d00b      	beq.n	80080ba <TIM_OC1_SetConfig+0x52>
 80080a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80080a6:	42a8      	cmp	r0, r5
 80080a8:	d007      	beq.n	80080ba <TIM_OC1_SetConfig+0x52>
 80080aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80080ae:	42a8      	cmp	r0, r5
 80080b0:	d003      	beq.n	80080ba <TIM_OC1_SetConfig+0x52>
 80080b2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80080b6:	42a8      	cmp	r0, r5
 80080b8:	d10d      	bne.n	80080d6 <TIM_OC1_SetConfig+0x6e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080ba:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80080bc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80080c0:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80080c2:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080c6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80080ca:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80080ce:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80080d2:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080d6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80080d8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80080da:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80080dc:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 80080de:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80080e0:	6203      	str	r3, [r0, #32]
}
 80080e2:	4770      	bx	lr
 80080e4:	40012c00 	.word	0x40012c00

080080e8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080e8:	6a03      	ldr	r3, [r0, #32]
 80080ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080ee:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080f0:	6a03      	ldr	r3, [r0, #32]
{
 80080f2:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080f4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080f6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080f8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80080fe:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8008102:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008104:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8008106:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800810a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800810e:	4d1c      	ldr	r5, [pc, #112]	; (8008180 <TIM_OC3_SetConfig+0x98>)
 8008110:	42a8      	cmp	r0, r5
 8008112:	d017      	beq.n	8008144 <TIM_OC3_SetConfig+0x5c>
 8008114:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008118:	42a8      	cmp	r0, r5
 800811a:	d013      	beq.n	8008144 <TIM_OC3_SetConfig+0x5c>
 800811c:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008120:	42a8      	cmp	r0, r5
 8008122:	d025      	beq.n	8008170 <TIM_OC3_SetConfig+0x88>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008124:	4d17      	ldr	r5, [pc, #92]	; (8008184 <TIM_OC3_SetConfig+0x9c>)
 8008126:	42a8      	cmp	r0, r5
 8008128:	d013      	beq.n	8008152 <TIM_OC3_SetConfig+0x6a>
 800812a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800812e:	42a8      	cmp	r0, r5
 8008130:	d00f      	beq.n	8008152 <TIM_OC3_SetConfig+0x6a>
 8008132:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008136:	42a8      	cmp	r0, r5
 8008138:	d00b      	beq.n	8008152 <TIM_OC3_SetConfig+0x6a>
 800813a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800813e:	42a8      	cmp	r0, r5
 8008140:	d10f      	bne.n	8008162 <TIM_OC3_SetConfig+0x7a>
 8008142:	e006      	b.n	8008152 <TIM_OC3_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008144:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8008146:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800814a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800814e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008152:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008156:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800815a:	ea46 0c05 	orr.w	ip, r6, r5
 800815e:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008162:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008164:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8008166:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8008168:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 800816a:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800816c:	6203      	str	r3, [r0, #32]
}
 800816e:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008170:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8008172:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008176:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800817a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800817e:	e7d1      	b.n	8008124 <TIM_OC3_SetConfig+0x3c>
 8008180:	40012c00 	.word	0x40012c00
 8008184:	40014000 	.word	0x40014000

08008188 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008188:	6a03      	ldr	r3, [r0, #32]
 800818a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800818e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008190:	6a03      	ldr	r3, [r0, #32]
{
 8008192:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008194:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008196:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008198:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800819a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800819e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081a2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081a6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80081a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081ac:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80081b0:	4d1c      	ldr	r5, [pc, #112]	; (8008224 <TIM_OC4_SetConfig+0x9c>)
 80081b2:	42a8      	cmp	r0, r5
 80081b4:	d017      	beq.n	80081e6 <TIM_OC4_SetConfig+0x5e>
 80081b6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80081ba:	42a8      	cmp	r0, r5
 80081bc:	d013      	beq.n	80081e6 <TIM_OC4_SetConfig+0x5e>
 80081be:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80081c2:	42a8      	cmp	r0, r5
 80081c4:	d025      	beq.n	8008212 <TIM_OC4_SetConfig+0x8a>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081c6:	4d18      	ldr	r5, [pc, #96]	; (8008228 <TIM_OC4_SetConfig+0xa0>)
 80081c8:	42a8      	cmp	r0, r5
 80081ca:	d013      	beq.n	80081f4 <TIM_OC4_SetConfig+0x6c>
 80081cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80081d0:	42a8      	cmp	r0, r5
 80081d2:	d00f      	beq.n	80081f4 <TIM_OC4_SetConfig+0x6c>
 80081d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80081d8:	42a8      	cmp	r0, r5
 80081da:	d00b      	beq.n	80081f4 <TIM_OC4_SetConfig+0x6c>
 80081dc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80081e0:	42a8      	cmp	r0, r5
 80081e2:	d10f      	bne.n	8008204 <TIM_OC4_SetConfig+0x7c>
 80081e4:	e006      	b.n	80081f4 <TIM_OC4_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80081e6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 80081e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80081ec:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 80081f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80081f4:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80081f8:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80081fc:	ea46 0c05 	orr.w	ip, r6, r5
 8008200:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008204:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008206:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8008208:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800820a:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 800820c:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800820e:	6203      	str	r3, [r0, #32]
}
 8008210:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008212:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8008214:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008218:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 800821c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008220:	e7d1      	b.n	80081c6 <TIM_OC4_SetConfig+0x3e>
 8008222:	bf00      	nop
 8008224:	40012c00 	.word	0x40012c00
 8008228:	40014000 	.word	0x40014000

0800822c <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800822c:	6a03      	ldr	r3, [r0, #32]
 800822e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008232:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008234:	6a03      	ldr	r3, [r0, #32]
{
 8008236:	b430      	push	{r4, r5}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008238:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800823a:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800823c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800823e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008242:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8008246:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008248:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800824a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800824e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008252:	4d11      	ldr	r5, [pc, #68]	; (8008298 <TIM_OC5_SetConfig+0x6c>)
 8008254:	42a8      	cmp	r0, r5
 8008256:	d013      	beq.n	8008280 <TIM_OC5_SetConfig+0x54>
 8008258:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800825c:	42a8      	cmp	r0, r5
 800825e:	d00f      	beq.n	8008280 <TIM_OC5_SetConfig+0x54>
 8008260:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8008264:	42a8      	cmp	r0, r5
 8008266:	d00b      	beq.n	8008280 <TIM_OC5_SetConfig+0x54>
 8008268:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800826c:	42a8      	cmp	r0, r5
 800826e:	d007      	beq.n	8008280 <TIM_OC5_SetConfig+0x54>
 8008270:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008274:	42a8      	cmp	r0, r5
 8008276:	d003      	beq.n	8008280 <TIM_OC5_SetConfig+0x54>
 8008278:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800827c:	42a8      	cmp	r0, r5
 800827e:	d104      	bne.n	800828a <TIM_OC5_SetConfig+0x5e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008280:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008282:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008286:	ea44 2405 	orr.w	r4, r4, r5, lsl #8

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800828a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800828c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800828e:	6502      	str	r2, [r0, #80]	; 0x50

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8008290:	bc30      	pop	{r4, r5}
  TIMx->CCR5 = OC_Config->Pulse;
 8008292:	6481      	str	r1, [r0, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8008294:	6203      	str	r3, [r0, #32]
}
 8008296:	4770      	bx	lr
 8008298:	40012c00 	.word	0x40012c00

0800829c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800829c:	6a03      	ldr	r3, [r0, #32]
 800829e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80082a2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082a4:	6a03      	ldr	r3, [r0, #32]
{
 80082a6:	b430      	push	{r4, r5}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082a8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082aa:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082ac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80082ae:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80082b2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082b6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80082ba:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80082bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80082c0:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082c4:	4d11      	ldr	r5, [pc, #68]	; (800830c <TIM_OC6_SetConfig+0x70>)
 80082c6:	42a8      	cmp	r0, r5
 80082c8:	d013      	beq.n	80082f2 <TIM_OC6_SetConfig+0x56>
 80082ca:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80082ce:	42a8      	cmp	r0, r5
 80082d0:	d00f      	beq.n	80082f2 <TIM_OC6_SetConfig+0x56>
 80082d2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80082d6:	42a8      	cmp	r0, r5
 80082d8:	d00b      	beq.n	80082f2 <TIM_OC6_SetConfig+0x56>
 80082da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80082de:	42a8      	cmp	r0, r5
 80082e0:	d007      	beq.n	80082f2 <TIM_OC6_SetConfig+0x56>
 80082e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80082e6:	42a8      	cmp	r0, r5
 80082e8:	d003      	beq.n	80082f2 <TIM_OC6_SetConfig+0x56>
 80082ea:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80082ee:	42a8      	cmp	r0, r5
 80082f0:	d104      	bne.n	80082fc <TIM_OC6_SetConfig+0x60>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80082f2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80082f4:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80082f8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80082fc:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80082fe:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 8008300:	6502      	str	r2, [r0, #80]	; 0x50

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8008302:	bc30      	pop	{r4, r5}
  TIMx->CCR6 = OC_Config->Pulse;
 8008304:	64c1      	str	r1, [r0, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 8008306:	6203      	str	r3, [r0, #32]
}
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	40012c00 	.word	0x40012c00

08008310 <HAL_TIM_PWM_MspInit>:
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop

08008314 <HAL_TIM_OnePulse_MspInit>:
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop

08008318 <HAL_TIM_OnePulse_Stop>:
{
 8008318:	4602      	mov	r2, r0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800831a:	4825      	ldr	r0, [pc, #148]	; (80083b0 <HAL_TIM_OnePulse_Stop+0x98>)
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800831c:	6813      	ldr	r3, [r2, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800831e:	6a19      	ldr	r1, [r3, #32]
 8008320:	f021 0101 	bic.w	r1, r1, #1
 8008324:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008326:	6a19      	ldr	r1, [r3, #32]
 8008328:	6219      	str	r1, [r3, #32]
  TIMx->CCER &= ~tmp;
 800832a:	6a19      	ldr	r1, [r3, #32]
 800832c:	f021 0110 	bic.w	r1, r1, #16
 8008330:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008332:	6a19      	ldr	r1, [r3, #32]
 8008334:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008336:	4283      	cmp	r3, r0
 8008338:	d02b      	beq.n	8008392 <HAL_TIM_OnePulse_Stop+0x7a>
 800833a:	491e      	ldr	r1, [pc, #120]	; (80083b4 <HAL_TIM_OnePulse_Stop+0x9c>)
 800833c:	428b      	cmp	r3, r1
 800833e:	d028      	beq.n	8008392 <HAL_TIM_OnePulse_Stop+0x7a>
 8008340:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8008344:	428b      	cmp	r3, r1
 8008346:	d024      	beq.n	8008392 <HAL_TIM_OnePulse_Stop+0x7a>
 8008348:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800834c:	428b      	cmp	r3, r1
 800834e:	d020      	beq.n	8008392 <HAL_TIM_OnePulse_Stop+0x7a>
 8008350:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008354:	428b      	cmp	r3, r1
 8008356:	d01c      	beq.n	8008392 <HAL_TIM_OnePulse_Stop+0x7a>
 8008358:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800835c:	428b      	cmp	r3, r1
 800835e:	d018      	beq.n	8008392 <HAL_TIM_OnePulse_Stop+0x7a>
  __HAL_TIM_DISABLE(htim);
 8008360:	6a18      	ldr	r0, [r3, #32]
 8008362:	f241 1111 	movw	r1, #4369	; 0x1111
 8008366:	4208      	tst	r0, r1
 8008368:	d108      	bne.n	800837c <HAL_TIM_OnePulse_Stop+0x64>
 800836a:	6a18      	ldr	r0, [r3, #32]
 800836c:	f244 4144 	movw	r1, #17476	; 0x4444
 8008370:	4208      	tst	r0, r1
 8008372:	d103      	bne.n	800837c <HAL_TIM_OnePulse_Stop+0x64>
 8008374:	6819      	ldr	r1, [r3, #0]
 8008376:	f021 0101 	bic.w	r1, r1, #1
 800837a:	6019      	str	r1, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800837c:	2301      	movs	r3, #1
 800837e:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
}
 8008382:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008384:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008388:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800838c:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 8008390:	4770      	bx	lr
    __HAL_TIM_MOE_DISABLE(htim);
 8008392:	6a18      	ldr	r0, [r3, #32]
 8008394:	f241 1111 	movw	r1, #4369	; 0x1111
 8008398:	4208      	tst	r0, r1
 800839a:	d1e1      	bne.n	8008360 <HAL_TIM_OnePulse_Stop+0x48>
 800839c:	6a18      	ldr	r0, [r3, #32]
 800839e:	f244 4144 	movw	r1, #17476	; 0x4444
 80083a2:	4208      	tst	r0, r1
 80083a4:	d1dc      	bne.n	8008360 <HAL_TIM_OnePulse_Stop+0x48>
 80083a6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80083a8:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80083ac:	6459      	str	r1, [r3, #68]	; 0x44
 80083ae:	e7d7      	b.n	8008360 <HAL_TIM_OnePulse_Stop+0x48>
 80083b0:	40012c00 	.word	0x40012c00
 80083b4:	40013400 	.word	0x40013400

080083b8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80083b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80083bc:	2b01      	cmp	r3, #1
 80083be:	f000 8095 	beq.w	80084ec <HAL_TIM_ConfigClockSource+0x134>
{
 80083c2:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 80083c4:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 80083c6:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80083c8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 80083cc:	2201      	movs	r2, #1
 80083ce:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80083d2:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083d4:	4b65      	ldr	r3, [pc, #404]	; (800856c <HAL_TIM_ConfigClockSource+0x1b4>)
 80083d6:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 80083d8:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 80083da:	680b      	ldr	r3, [r1, #0]
 80083dc:	2b70      	cmp	r3, #112	; 0x70
 80083de:	f000 80b4 	beq.w	800854a <HAL_TIM_ConfigClockSource+0x192>
 80083e2:	d829      	bhi.n	8008438 <HAL_TIM_ConfigClockSource+0x80>
 80083e4:	2b50      	cmp	r3, #80	; 0x50
 80083e6:	f000 8084 	beq.w	80084f2 <HAL_TIM_ConfigClockSource+0x13a>
 80083ea:	d940      	bls.n	800846e <HAL_TIM_ConfigClockSource+0xb6>
 80083ec:	2b60      	cmp	r3, #96	; 0x60
 80083ee:	d11a      	bne.n	8008426 <HAL_TIM_ConfigClockSource+0x6e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80083f0:	68cb      	ldr	r3, [r1, #12]
 80083f2:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083f4:	6a21      	ldr	r1, [r4, #32]
 80083f6:	f021 0110 	bic.w	r1, r1, #16
 80083fa:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083fc:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083fe:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008402:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
  tmpccer = TIMx->CCER;
 8008406:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8008408:	61a2      	str	r2, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800840a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800840e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8008412:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8008414:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008416:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800841a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800841e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8008422:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 8008424:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8008426:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8008428:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800842a:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800842e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8008432:	bc70      	pop	{r4, r5, r6}
 8008434:	4610      	mov	r0, r2
 8008436:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8008438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800843c:	d074      	beq.n	8008528 <HAL_TIM_ConfigClockSource+0x170>
 800843e:	d943      	bls.n	80084c8 <HAL_TIM_ConfigClockSource+0x110>
 8008440:	494b      	ldr	r1, [pc, #300]	; (8008570 <HAL_TIM_ConfigClockSource+0x1b8>)
 8008442:	428b      	cmp	r3, r1
 8008444:	d008      	beq.n	8008458 <HAL_TIM_ConfigClockSource+0xa0>
 8008446:	d92f      	bls.n	80084a8 <HAL_TIM_ConfigClockSource+0xf0>
 8008448:	494a      	ldr	r1, [pc, #296]	; (8008574 <HAL_TIM_ConfigClockSource+0x1bc>)
 800844a:	428b      	cmp	r3, r1
 800844c:	d004      	beq.n	8008458 <HAL_TIM_ConfigClockSource+0xa0>
 800844e:	f023 0c20 	bic.w	ip, r3, #32
 8008452:	3910      	subs	r1, #16
 8008454:	458c      	cmp	ip, r1
 8008456:	d1e6      	bne.n	8008426 <HAL_TIM_ConfigClockSource+0x6e>
  tmpsmcr = TIMx->SMCR;
 8008458:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800845a:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800845e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008462:	430b      	orrs	r3, r1
 8008464:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 8008468:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 800846a:	60a3      	str	r3, [r4, #8]
}
 800846c:	e7db      	b.n	8008426 <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 800846e:	2b40      	cmp	r3, #64	; 0x40
 8008470:	d12f      	bne.n	80084d2 <HAL_TIM_ConfigClockSource+0x11a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008472:	684a      	ldr	r2, [r1, #4]
 8008474:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8008476:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008478:	6a25      	ldr	r5, [r4, #32]
 800847a:	f025 0501 	bic.w	r5, r5, #1
 800847e:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008480:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008482:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008486:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 800848a:	4311      	orrs	r1, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800848c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8008490:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8008492:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8008494:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008496:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800849a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800849e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 80084a2:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 80084a4:	60a3      	str	r3, [r4, #8]
}
 80084a6:	e7be      	b.n	8008426 <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 80084a8:	4a33      	ldr	r2, [pc, #204]	; (8008578 <HAL_TIM_ConfigClockSource+0x1c0>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d0d4      	beq.n	8008458 <HAL_TIM_ConfigClockSource+0xa0>
 80084ae:	d904      	bls.n	80084ba <HAL_TIM_ConfigClockSource+0x102>
 80084b0:	4a32      	ldr	r2, [pc, #200]	; (800857c <HAL_TIM_ConfigClockSource+0x1c4>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d0d0      	beq.n	8008458 <HAL_TIM_ConfigClockSource+0xa0>
 80084b6:	2201      	movs	r2, #1
 80084b8:	e7b5      	b.n	8008426 <HAL_TIM_ConfigClockSource+0x6e>
 80084ba:	f023 0210 	bic.w	r2, r3, #16
 80084be:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80084c2:	d0c9      	beq.n	8008458 <HAL_TIM_ConfigClockSource+0xa0>
 80084c4:	2201      	movs	r2, #1
 80084c6:	e7ae      	b.n	8008426 <HAL_TIM_ConfigClockSource+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 80084c8:	f5b3 5280 	subs.w	r2, r3, #4096	; 0x1000
 80084cc:	bf18      	it	ne
 80084ce:	2201      	movne	r2, #1
 80084d0:	e7a9      	b.n	8008426 <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 80084d2:	d8a8      	bhi.n	8008426 <HAL_TIM_ConfigClockSource+0x6e>
 80084d4:	2b20      	cmp	r3, #32
 80084d6:	d0bf      	beq.n	8008458 <HAL_TIM_ConfigClockSource+0xa0>
 80084d8:	d903      	bls.n	80084e2 <HAL_TIM_ConfigClockSource+0x12a>
 80084da:	2b30      	cmp	r3, #48	; 0x30
 80084dc:	d0bc      	beq.n	8008458 <HAL_TIM_ConfigClockSource+0xa0>
 80084de:	2201      	movs	r2, #1
 80084e0:	e7a1      	b.n	8008426 <HAL_TIM_ConfigClockSource+0x6e>
 80084e2:	f033 0210 	bics.w	r2, r3, #16
 80084e6:	d0b7      	beq.n	8008458 <HAL_TIM_ConfigClockSource+0xa0>
 80084e8:	2201      	movs	r2, #1
 80084ea:	e79c      	b.n	8008426 <HAL_TIM_ConfigClockSource+0x6e>
  __HAL_LOCK(htim);
 80084ec:	2202      	movs	r2, #2
}
 80084ee:	4610      	mov	r0, r2
 80084f0:	4770      	bx	lr
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084f2:	684a      	ldr	r2, [r1, #4]
 80084f4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80084f6:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084f8:	6a25      	ldr	r5, [r4, #32]
 80084fa:	f025 0501 	bic.w	r5, r5, #1
 80084fe:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008500:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008502:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008506:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 800850a:	4311      	orrs	r1, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800850c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8008510:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8008512:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8008514:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008516:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800851a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800851e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8008522:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 8008524:	60a3      	str	r3, [r4, #8]
}
 8008526:	e77e      	b.n	8008426 <HAL_TIM_ConfigClockSource+0x6e>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008528:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800852c:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800852e:	68c9      	ldr	r1, [r1, #12]
 8008530:	432b      	orrs	r3, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008532:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008536:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800853a:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 800853c:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800853e:	68a3      	ldr	r3, [r4, #8]
 8008540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8008544:	2200      	movs	r2, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008546:	60a3      	str	r3, [r4, #8]
      break;
 8008548:	e76d      	b.n	8008426 <HAL_TIM_ConfigClockSource+0x6e>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800854a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800854e:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008550:	68c9      	ldr	r1, [r1, #12]
 8008552:	432b      	orrs	r3, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008554:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008558:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800855c:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 800855e:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8008560:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008562:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8008566:	2200      	movs	r2, #0
      htim->Instance->SMCR = tmpsmcr;
 8008568:	60a3      	str	r3, [r4, #8]
      break;
 800856a:	e75c      	b.n	8008426 <HAL_TIM_ConfigClockSource+0x6e>
 800856c:	ffce0088 	.word	0xffce0088
 8008570:	00100040 	.word	0x00100040
 8008574:	00100060 	.word	0x00100060
 8008578:	00100020 	.word	0x00100020
 800857c:	00100030 	.word	0x00100030

08008580 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008580:	4a3a      	ldr	r2, [pc, #232]	; (800866c <TIM_Base_SetConfig+0xec>)
  tmpcr1 = TIMx->CR1;
 8008582:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008584:	4290      	cmp	r0, r2
{
 8008586:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008588:	d044      	beq.n	8008614 <TIM_Base_SetConfig+0x94>
 800858a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800858e:	d02c      	beq.n	80085ea <TIM_Base_SetConfig+0x6a>
 8008590:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008594:	4290      	cmp	r0, r2
 8008596:	d028      	beq.n	80085ea <TIM_Base_SetConfig+0x6a>
 8008598:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800859c:	4290      	cmp	r0, r2
 800859e:	d024      	beq.n	80085ea <TIM_Base_SetConfig+0x6a>
 80085a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80085a4:	4290      	cmp	r0, r2
 80085a6:	d020      	beq.n	80085ea <TIM_Base_SetConfig+0x6a>
 80085a8:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80085ac:	4290      	cmp	r0, r2
 80085ae:	d04e      	beq.n	800864e <TIM_Base_SetConfig+0xce>
 80085b0:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 80085b4:	4290      	cmp	r0, r2
 80085b6:	d054      	beq.n	8008662 <TIM_Base_SetConfig+0xe2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085b8:	4a2d      	ldr	r2, [pc, #180]	; (8008670 <TIM_Base_SetConfig+0xf0>)
 80085ba:	4290      	cmp	r0, r2
 80085bc:	d041      	beq.n	8008642 <TIM_Base_SetConfig+0xc2>
 80085be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80085c2:	4290      	cmp	r0, r2
 80085c4:	d03d      	beq.n	8008642 <TIM_Base_SetConfig+0xc2>
 80085c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80085ca:	4290      	cmp	r0, r2
 80085cc:	d039      	beq.n	8008642 <TIM_Base_SetConfig+0xc2>
 80085ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085d2:	4290      	cmp	r0, r2
 80085d4:	d035      	beq.n	8008642 <TIM_Base_SetConfig+0xc2>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085d6:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085d8:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 80085da:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085e0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80085e2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085e4:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80085e6:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085e8:	e010      	b.n	800860c <TIM_Base_SetConfig+0x8c>
    tmpcr1 |= Structure->CounterMode;
 80085ea:	684a      	ldr	r2, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085ec:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80085f2:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80085f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085f8:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085fa:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008600:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008602:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8008604:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8008606:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008608:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800860a:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800860c:	2301      	movs	r3, #1
}
 800860e:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8008610:	6143      	str	r3, [r0, #20]
}
 8008612:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8008614:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008616:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800861c:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 800861e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008622:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008624:	694a      	ldr	r2, [r1, #20]
 8008626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800862a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800862c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800862e:	688b      	ldr	r3, [r1, #8]
 8008630:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008632:	680b      	ldr	r3, [r1, #0]
 8008634:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8008636:	690b      	ldr	r3, [r1, #16]
 8008638:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800863a:	2301      	movs	r3, #1
}
 800863c:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 800863e:	6143      	str	r3, [r0, #20]
}
 8008640:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008642:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008644:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800864a:	4323      	orrs	r3, r4
 800864c:	e7eb      	b.n	8008626 <TIM_Base_SetConfig+0xa6>
    tmpcr1 |= Structure->CounterMode;
 800864e:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008650:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008656:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8008658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800865c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800865e:	694a      	ldr	r2, [r1, #20]
 8008660:	e7e1      	b.n	8008626 <TIM_Base_SetConfig+0xa6>
    tmpcr1 |= Structure->CounterMode;
 8008662:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008668:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800866a:	e7a5      	b.n	80085b8 <TIM_Base_SetConfig+0x38>
 800866c:	40012c00 	.word	0x40012c00
 8008670:	40014000 	.word	0x40014000

08008674 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8008674:	b370      	cbz	r0, 80086d4 <HAL_TIM_Base_Init+0x60>
{
 8008676:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8008678:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800867c:	4604      	mov	r4, r0
 800867e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008682:	b313      	cbz	r3, 80086ca <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008684:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8008686:	2302      	movs	r3, #2
 8008688:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800868c:	f851 0b04 	ldr.w	r0, [r1], #4
 8008690:	f7ff ff76 	bl	8008580 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008694:	2301      	movs	r3, #1
 8008696:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800869a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800869e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80086a2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80086a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80086aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086b2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80086b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80086ba:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80086be:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80086c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80086c6:	2000      	movs	r0, #0
}
 80086c8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80086ca:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80086ce:	f7fc ff51 	bl	8005574 <HAL_TIM_Base_MspInit>
 80086d2:	e7d7      	b.n	8008684 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80086d4:	2001      	movs	r0, #1
}
 80086d6:	4770      	bx	lr

080086d8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80086d8:	b370      	cbz	r0, 8008738 <HAL_TIM_PWM_Init+0x60>
{
 80086da:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80086dc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80086e0:	4604      	mov	r4, r0
 80086e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80086e6:	b313      	cbz	r3, 800872e <HAL_TIM_PWM_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086e8:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80086ea:	2302      	movs	r3, #2
 80086ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086f0:	f851 0b04 	ldr.w	r0, [r1], #4
 80086f4:	f7ff ff44 	bl	8008580 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086f8:	2301      	movs	r3, #1
 80086fa:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008702:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008706:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800870a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800870e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008712:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008716:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800871a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800871e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008722:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008726:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800872a:	2000      	movs	r0, #0
}
 800872c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800872e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8008732:	f7ff fded 	bl	8008310 <HAL_TIM_PWM_MspInit>
 8008736:	e7d7      	b.n	80086e8 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8008738:	2001      	movs	r0, #1
}
 800873a:	4770      	bx	lr

0800873c <HAL_TIM_OnePulse_Init>:
  if (htim == NULL)
 800873c:	b358      	cbz	r0, 8008796 <HAL_TIM_OnePulse_Init+0x5a>
{
 800873e:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8008740:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008744:	460d      	mov	r5, r1
 8008746:	4604      	mov	r4, r0
 8008748:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800874c:	b1f3      	cbz	r3, 800878c <HAL_TIM_OnePulse_Init+0x50>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800874e:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8008750:	2302      	movs	r3, #2
 8008752:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008756:	f851 0b04 	ldr.w	r0, [r1], #4
 800875a:	f7ff ff11 	bl	8008580 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800875e:	6822      	ldr	r2, [r4, #0]
 8008760:	6811      	ldr	r1, [r2, #0]
 8008762:	f021 0108 	bic.w	r1, r1, #8
 8008766:	6011      	str	r1, [r2, #0]
  htim->Instance->CR1 |= OnePulseMode;
 8008768:	6811      	ldr	r1, [r2, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800876a:	2301      	movs	r3, #1
  htim->Instance->CR1 |= OnePulseMode;
 800876c:	430d      	orrs	r5, r1
 800876e:	6015      	str	r5, [r2, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008770:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008774:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008778:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800877c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008780:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8008784:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008788:	2000      	movs	r0, #0
}
 800878a:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800878c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 8008790:	f7ff fdc0 	bl	8008314 <HAL_TIM_OnePulse_MspInit>
 8008794:	e7db      	b.n	800874e <HAL_TIM_OnePulse_Init+0x12>
    return HAL_ERROR;
 8008796:	2001      	movs	r0, #1
}
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop

0800879c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800879c:	6a03      	ldr	r3, [r0, #32]
 800879e:	f023 0310 	bic.w	r3, r3, #16
 80087a2:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80087a4:	6a03      	ldr	r3, [r0, #32]
{
 80087a6:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 80087a8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80087aa:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087ac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80087ae:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80087b2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087b6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80087ba:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80087bc:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80087c0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80087c4:	4d1c      	ldr	r5, [pc, #112]	; (8008838 <TIM_OC2_SetConfig+0x9c>)
 80087c6:	42a8      	cmp	r0, r5
 80087c8:	d017      	beq.n	80087fa <TIM_OC2_SetConfig+0x5e>
 80087ca:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80087ce:	42a8      	cmp	r0, r5
 80087d0:	d013      	beq.n	80087fa <TIM_OC2_SetConfig+0x5e>
 80087d2:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80087d6:	42a8      	cmp	r0, r5
 80087d8:	d025      	beq.n	8008826 <TIM_OC2_SetConfig+0x8a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087da:	4d18      	ldr	r5, [pc, #96]	; (800883c <TIM_OC2_SetConfig+0xa0>)
 80087dc:	42a8      	cmp	r0, r5
 80087de:	d013      	beq.n	8008808 <TIM_OC2_SetConfig+0x6c>
 80087e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80087e4:	42a8      	cmp	r0, r5
 80087e6:	d00f      	beq.n	8008808 <TIM_OC2_SetConfig+0x6c>
 80087e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80087ec:	42a8      	cmp	r0, r5
 80087ee:	d00b      	beq.n	8008808 <TIM_OC2_SetConfig+0x6c>
 80087f0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80087f4:	42a8      	cmp	r0, r5
 80087f6:	d10f      	bne.n	8008818 <TIM_OC2_SetConfig+0x7c>
 80087f8:	e006      	b.n	8008808 <TIM_OC2_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80087fa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80087fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008800:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008808:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800880c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008810:	ea46 0c05 	orr.w	ip, r6, r5
 8008814:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8008818:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800881a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800881c:	6182      	str	r2, [r0, #24]
}
 800881e:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8008820:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8008822:	6203      	str	r3, [r0, #32]
}
 8008824:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008826:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008828:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800882c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008834:	e7d1      	b.n	80087da <TIM_OC2_SetConfig+0x3e>
 8008836:	bf00      	nop
 8008838:	40012c00 	.word	0x40012c00
 800883c:	40014000 	.word	0x40014000

08008840 <HAL_TIM_PWM_ConfigChannel>:
{
 8008840:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8008842:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008846:	2b01      	cmp	r3, #1
 8008848:	f000 8088 	beq.w	800895c <HAL_TIM_PWM_ConfigChannel+0x11c>
 800884c:	2301      	movs	r3, #1
 800884e:	4604      	mov	r4, r0
 8008850:	460d      	mov	r5, r1
 8008852:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8008856:	2a14      	cmp	r2, #20
 8008858:	d80c      	bhi.n	8008874 <HAL_TIM_PWM_ConfigChannel+0x34>
 800885a:	e8df f002 	tbb	[pc, r2]
 800885e:	0b23      	.short	0x0b23
 8008860:	0b350b0b 	.word	0x0b350b0b
 8008864:	0b480b0b 	.word	0x0b480b0b
 8008868:	0b5a0b0b 	.word	0x0b5a0b0b
 800886c:	0b6d0b0b 	.word	0x0b6d0b0b
 8008870:	0b0b      	.short	0x0b0b
 8008872:	10          	.byte	0x10
 8008873:	00          	.byte	0x00
 8008874:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8008876:	2300      	movs	r3, #0
 8008878:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800887c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800887e:	6800      	ldr	r0, [r0, #0]
 8008880:	f7ff fd0c 	bl	800829c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008884:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008886:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008888:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800888a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800888e:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008890:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008892:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008896:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008898:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800889a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800889e:	651a      	str	r2, [r3, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 80088a0:	2000      	movs	r0, #0
      break;
 80088a2:	e7e8      	b.n	8008876 <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80088a4:	6800      	ldr	r0, [r0, #0]
 80088a6:	f7ff fbdf 	bl	8008068 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80088aa:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80088ac:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80088ae:	6999      	ldr	r1, [r3, #24]
 80088b0:	f041 0108 	orr.w	r1, r1, #8
 80088b4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80088b6:	6999      	ldr	r1, [r3, #24]
 80088b8:	f021 0104 	bic.w	r1, r1, #4
 80088bc:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80088be:	699a      	ldr	r2, [r3, #24]
 80088c0:	4302      	orrs	r2, r0
 80088c2:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80088c4:	2000      	movs	r0, #0
      break;
 80088c6:	e7d6      	b.n	8008876 <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088c8:	6800      	ldr	r0, [r0, #0]
 80088ca:	f7ff ff67 	bl	800879c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088ce:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088d0:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088d2:	6999      	ldr	r1, [r3, #24]
 80088d4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80088d8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088da:	6999      	ldr	r1, [r3, #24]
 80088dc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80088e0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088e2:	699a      	ldr	r2, [r3, #24]
 80088e4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80088e8:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80088ea:	2000      	movs	r0, #0
      break;
 80088ec:	e7c3      	b.n	8008876 <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088ee:	6800      	ldr	r0, [r0, #0]
 80088f0:	f7ff fbfa 	bl	80080e8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80088f4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80088f6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80088f8:	69d9      	ldr	r1, [r3, #28]
 80088fa:	f041 0108 	orr.w	r1, r1, #8
 80088fe:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008900:	69d9      	ldr	r1, [r3, #28]
 8008902:	f021 0104 	bic.w	r1, r1, #4
 8008906:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008908:	69da      	ldr	r2, [r3, #28]
 800890a:	4302      	orrs	r2, r0
 800890c:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800890e:	2000      	movs	r0, #0
      break;
 8008910:	e7b1      	b.n	8008876 <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008912:	6800      	ldr	r0, [r0, #0]
 8008914:	f7ff fc38 	bl	8008188 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008918:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800891a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800891c:	69d9      	ldr	r1, [r3, #28]
 800891e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8008922:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008924:	69d9      	ldr	r1, [r3, #28]
 8008926:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800892a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800892c:	69da      	ldr	r2, [r3, #28]
 800892e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8008932:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8008934:	2000      	movs	r0, #0
      break;
 8008936:	e79e      	b.n	8008876 <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008938:	6800      	ldr	r0, [r0, #0]
 800893a:	f7ff fc77 	bl	800822c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800893e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008940:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008942:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008944:	f041 0108 	orr.w	r1, r1, #8
 8008948:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800894a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800894c:	f021 0104 	bic.w	r1, r1, #4
 8008950:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008952:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008954:	4302      	orrs	r2, r0
 8008956:	651a      	str	r2, [r3, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8008958:	2000      	movs	r0, #0
      break;
 800895a:	e78c      	b.n	8008876 <HAL_TIM_PWM_ConfigChannel+0x36>
  __HAL_LOCK(htim);
 800895c:	2002      	movs	r0, #2
}
 800895e:	bd38      	pop	{r3, r4, r5, pc}

08008960 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8008960:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008962:	f001 011f 	and.w	r1, r1, #31
 8008966:	f04f 0c01 	mov.w	ip, #1
 800896a:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 800896e:	ea23 030c 	bic.w	r3, r3, ip
 8008972:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008974:	6a03      	ldr	r3, [r0, #32]
 8008976:	408a      	lsls	r2, r1
 8008978:	431a      	orrs	r2, r3
 800897a:	6202      	str	r2, [r0, #32]
}
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop

08008980 <HAL_TIMEx_OnePulseN_Stop>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008980:	b510      	push	{r4, lr}
 8008982:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Disable the complementary One Pulse output channel and the Input Capture channel */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 8008984:	6800      	ldr	r0, [r0, #0]
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 8008986:	2900      	cmp	r1, #0
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008988:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800898a:	f04f 0204 	mov.w	r2, #4
 800898e:	f001 011f 	and.w	r1, r1, #31
 8008992:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &=  ~tmp;
 8008996:	ea23 0101 	bic.w	r1, r3, r1
 800899a:	6201      	str	r1, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800899c:	6a03      	ldr	r3, [r0, #32]
 800899e:	6203      	str	r3, [r0, #32]
  TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_DISABLE);
 80089a0:	f04f 0200 	mov.w	r2, #0
 80089a4:	bf14      	ite	ne
 80089a6:	4611      	movne	r1, r2
 80089a8:	2104      	moveq	r1, #4
 80089aa:	f7ff ffd9 	bl	8008960 <TIM_CCxChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 80089ae:	6823      	ldr	r3, [r4, #0]
 80089b0:	6a19      	ldr	r1, [r3, #32]
 80089b2:	f241 1211 	movw	r2, #4369	; 0x1111
 80089b6:	4211      	tst	r1, r2
 80089b8:	d104      	bne.n	80089c4 <HAL_TIMEx_OnePulseN_Stop+0x44>
 80089ba:	6a19      	ldr	r1, [r3, #32]
 80089bc:	f244 4244 	movw	r2, #17476	; 0x4444
 80089c0:	4211      	tst	r1, r2
 80089c2:	d018      	beq.n	80089f6 <HAL_TIMEx_OnePulseN_Stop+0x76>
  __HAL_TIM_DISABLE(htim);
 80089c4:	6a19      	ldr	r1, [r3, #32]
 80089c6:	f241 1211 	movw	r2, #4369	; 0x1111
 80089ca:	4211      	tst	r1, r2
 80089cc:	d108      	bne.n	80089e0 <HAL_TIMEx_OnePulseN_Stop+0x60>
 80089ce:	6a19      	ldr	r1, [r3, #32]
 80089d0:	f244 4244 	movw	r2, #17476	; 0x4444
 80089d4:	4211      	tst	r1, r2
 80089d6:	d103      	bne.n	80089e0 <HAL_TIMEx_OnePulseN_Stop+0x60>
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	f022 0201 	bic.w	r2, r2, #1
 80089de:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80089e0:	2301      	movs	r3, #1
 80089e2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80089e6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80089ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80089ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80089f2:	2000      	movs	r0, #0
 80089f4:	bd10      	pop	{r4, pc}
  __HAL_TIM_MOE_DISABLE(htim);
 80089f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80089fc:	645a      	str	r2, [r3, #68]	; 0x44
 80089fe:	e7e1      	b.n	80089c4 <HAL_TIMEx_OnePulseN_Stop+0x44>

08008a00 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8008a00:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d051      	beq.n	8008aac <HAL_TIMEx_MasterConfigSynchronization+0xac>
{
 8008a08:	b430      	push	{r4, r5}
  tmpcr2 = htim->Instance->CR2;
 8008a0a:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a0c:	4d28      	ldr	r5, [pc, #160]	; (8008ab0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008a0e:	2302      	movs	r3, #2
 8008a10:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a14:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8008a16:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8008a18:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a1a:	d03b      	beq.n	8008a94 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8008a1c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008a20:	42aa      	cmp	r2, r5
 8008a22:	d032      	beq.n	8008a8a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8008a24:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008a28:	42aa      	cmp	r2, r5
 8008a2a:	d02e      	beq.n	8008a8a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a2c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a2e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a36:	432b      	orrs	r3, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a38:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8008a3c:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a3e:	d016      	beq.n	8008a6e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008a40:	4b1c      	ldr	r3, [pc, #112]	; (8008ab4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d013      	beq.n	8008a6e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008a46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d00f      	beq.n	8008a6e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008a4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d00b      	beq.n	8008a6e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008a56:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d007      	beq.n	8008a6e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008a5e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d003      	beq.n	8008a6e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d104      	bne.n	8008a78 <HAL_TIMEx_MasterConfigSynchronization+0x78>
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a6e:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a70:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a74:	431c      	orrs	r4, r3
    htim->Instance->SMCR = tmpsmcr;
 8008a76:	6094      	str	r4, [r2, #8]
  __HAL_UNLOCK(htim);
 8008a78:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008a80:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8008a84:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8008a86:	4618      	mov	r0, r3
}
 8008a88:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a8a:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a8c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a90:	432b      	orrs	r3, r5
 8008a92:	e7cb      	b.n	8008a2c <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 8008a94:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a9a:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a9c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008aa0:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008aa6:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8008aa8:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008aaa:	e7e0      	b.n	8008a6e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  __HAL_LOCK(htim);
 8008aac:	2002      	movs	r0, #2
}
 8008aae:	4770      	bx	lr
 8008ab0:	40012c00 	.word	0x40012c00
 8008ab4:	40000400 	.word	0x40000400

08008ab8 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8008ab8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d048      	beq.n	8008b52 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
{
 8008ac0:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008ac2:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8008ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008aca:	4602      	mov	r2, r0
 8008acc:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ace:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008ad0:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ad2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ad6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008ad8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008adc:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008ade:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ae0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008ae4:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ae6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008ae8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008aec:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008aee:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008af0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008af4:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008af6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008af8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008afc:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008afe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008b02:	4c15      	ldr	r4, [pc, #84]	; (8008b58 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8008b04:	42a0      	cmp	r0, r4
 8008b06:	d007      	beq.n	8008b18 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 8008b08:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8008b0c:	42a0      	cmp	r0, r4
 8008b0e:	d003      	beq.n	8008b18 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 8008b10:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8008b14:	42a0      	cmp	r0, r4
 8008b16:	d114      	bne.n	8008b42 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008b18:	69cc      	ldr	r4, [r1, #28]
 8008b1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b1e:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008b20:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8008b22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008b26:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008b2a:	6a0c      	ldr	r4, [r1, #32]
 8008b2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b30:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008b32:	6a4c      	ldr	r4, [r1, #36]	; 0x24
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008b34:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008b36:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008b3a:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008b3c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008b40:	430b      	orrs	r3, r1
  __HAL_UNLOCK(htim);
 8008b42:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8008b44:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8008b46:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
  return HAL_OK;
 8008b4a:	4608      	mov	r0, r1
}
 8008b4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b50:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008b52:	2002      	movs	r0, #2
}
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	40012c00 	.word	0x40012c00

08008b5c <HAL_TIMEx_ConfigBreakInput>:
  __HAL_LOCK(htim);
 8008b5c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	f000 8081 	beq.w	8008c68 <HAL_TIMEx_ConfigBreakInput+0x10c>
  switch (sBreakInputConfig->Source)
 8008b66:	6813      	ldr	r3, [r2, #0]
 8008b68:	2b20      	cmp	r3, #32
{
 8008b6a:	b530      	push	{r4, r5, lr}
  switch (sBreakInputConfig->Source)
 8008b6c:	d825      	bhi.n	8008bba <HAL_TIMEx_ConfigBreakInput+0x5e>
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d05f      	beq.n	8008c32 <HAL_TIMEx_ConfigBreakInput+0xd6>
 8008b72:	1e5c      	subs	r4, r3, #1
 8008b74:	2c1f      	cmp	r4, #31
 8008b76:	d811      	bhi.n	8008b9c <HAL_TIMEx_ConfigBreakInput+0x40>
 8008b78:	e8df f004 	tbb	[pc, r4]
 8008b7c:	64107f79 	.word	0x64107f79
 8008b80:	6a101010 	.word	0x6a101010
 8008b84:	10101010 	.word	0x10101010
 8008b88:	70101010 	.word	0x70101010
 8008b8c:	10101010 	.word	0x10101010
 8008b90:	10101010 	.word	0x10101010
 8008b94:	10101010 	.word	0x10101010
 8008b98:	5f101010 	.word	0x5f101010
      bkin_polarity_bitpos = 0U;
 8008b9c:	f04f 0c00 	mov.w	ip, #0
      bkin_enable_bitpos = 0U;
 8008ba0:	4664      	mov	r4, ip
      bkin_polarity_mask = 0U;
 8008ba2:	46e6      	mov	lr, ip
      bkin_enable_mask = 0U;
 8008ba4:	4663      	mov	r3, ip
  switch (BreakInput)
 8008ba6:	2901      	cmp	r1, #1
 8008ba8:	d012      	beq.n	8008bd0 <HAL_TIMEx_ConfigBreakInput+0x74>
 8008baa:	2902      	cmp	r1, #2
 8008bac:	d027      	beq.n	8008bfe <HAL_TIMEx_ConfigBreakInput+0xa2>
  __HAL_UNLOCK(htim);
 8008bae:	2200      	movs	r2, #0
  switch (BreakInput)
 8008bb0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8008bb2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	bd30      	pop	{r4, r5, pc}
  switch (sBreakInputConfig->Source)
 8008bba:	2b40      	cmp	r3, #64	; 0x40
      bkin_polarity_bitpos = 0U;
 8008bbc:	f04f 0c00 	mov.w	ip, #0
  switch (sBreakInputConfig->Source)
 8008bc0:	d034      	beq.n	8008c2c <HAL_TIMEx_ConfigBreakInput+0xd0>
 8008bc2:	2b80      	cmp	r3, #128	; 0x80
 8008bc4:	d15f      	bne.n	8008c86 <HAL_TIMEx_ConfigBreakInput+0x12a>
  switch (BreakInput)
 8008bc6:	2901      	cmp	r1, #1
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 8008bc8:	f04f 0407 	mov.w	r4, #7
      bkin_polarity_mask = 0U;
 8008bcc:	46e6      	mov	lr, ip
  switch (BreakInput)
 8008bce:	d1ec      	bne.n	8008baa <HAL_TIMEx_ConfigBreakInput+0x4e>
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008bd0:	6851      	ldr	r1, [r2, #4]
      tmporx = htim->Instance->AF1;
 8008bd2:	6805      	ldr	r5, [r0, #0]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008bd4:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008bd6:	40a1      	lsls	r1, r4
      tmporx = htim->Instance->AF1;
 8008bd8:	6e2c      	ldr	r4, [r5, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008bda:	4061      	eors	r1, r4
 8008bdc:	400b      	ands	r3, r1
 8008bde:	4063      	eors	r3, r4
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008be0:	fa02 fc0c 	lsl.w	ip, r2, ip
 8008be4:	ea8c 0c03 	eor.w	ip, ip, r3
 8008be8:	ea0c 0e0e 	and.w	lr, ip, lr
 8008bec:	ea8e 0303 	eor.w	r3, lr, r3
  __HAL_UNLOCK(htim);
 8008bf0:	2200      	movs	r2, #0
      htim->Instance->AF1 = tmporx;
 8008bf2:	662b      	str	r3, [r5, #96]	; 0x60
  HAL_StatusTypeDef status = HAL_OK;
 8008bf4:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8008bf6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	bd30      	pop	{r4, r5, pc}
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008bfe:	6851      	ldr	r1, [r2, #4]
      tmporx = htim->Instance->AF2;
 8008c00:	6805      	ldr	r5, [r0, #0]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008c02:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008c04:	40a1      	lsls	r1, r4
      tmporx = htim->Instance->AF2;
 8008c06:	6e6c      	ldr	r4, [r5, #100]	; 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008c08:	4061      	eors	r1, r4
 8008c0a:	400b      	ands	r3, r1
 8008c0c:	4063      	eors	r3, r4
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008c0e:	fa02 fc0c 	lsl.w	ip, r2, ip
 8008c12:	ea8c 0c03 	eor.w	ip, ip, r3
 8008c16:	ea0c 0e0e 	and.w	lr, ip, lr
 8008c1a:	ea8e 0303 	eor.w	r3, lr, r3
  __HAL_UNLOCK(htim);
 8008c1e:	2200      	movs	r2, #0
      htim->Instance->AF2 = tmporx;
 8008c20:	666b      	str	r3, [r5, #100]	; 0x64
  HAL_StatusTypeDef status = HAL_OK;
 8008c22:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8008c24:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	bd30      	pop	{r4, r5, pc}
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 8008c2c:	2406      	movs	r4, #6
      bkin_polarity_mask = 0U;
 8008c2e:	46e6      	mov	lr, ip
 8008c30:	e7b9      	b.n	8008ba6 <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_polarity_bitpos = 0U;
 8008c32:	469c      	mov	ip, r3
      bkin_enable_bitpos = 0U;
 8008c34:	461c      	mov	r4, r3
      bkin_polarity_mask = 0U;
 8008c36:	469e      	mov	lr, r3
 8008c38:	e7b5      	b.n	8008ba6 <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_polarity_bitpos = 0U;
 8008c3a:	f04f 0c00 	mov.w	ip, #0
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 8008c3e:	2405      	movs	r4, #5
      bkin_polarity_mask = 0U;
 8008c40:	46e6      	mov	lr, ip
      break;
 8008c42:	e7b0      	b.n	8008ba6 <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8008c44:	f04f 0c0b 	mov.w	ip, #11
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8008c48:	2402      	movs	r4, #2
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8008c4a:	f44f 6e00 	mov.w	lr, #2048	; 0x800
      break;
 8008c4e:	e7aa      	b.n	8008ba6 <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 8008c50:	f04f 0c0c 	mov.w	ip, #12
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 8008c54:	2403      	movs	r4, #3
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 8008c56:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
      break;
 8008c5a:	e7a4      	b.n	8008ba6 <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 8008c5c:	f04f 0c0d 	mov.w	ip, #13
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 8008c60:	2404      	movs	r4, #4
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 8008c62:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
      break;
 8008c66:	e79e      	b.n	8008ba6 <HAL_TIMEx_ConfigBreakInput+0x4a>
  __HAL_LOCK(htim);
 8008c68:	2302      	movs	r3, #2
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	4770      	bx	lr
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8008c6e:	f04f 0c09 	mov.w	ip, #9
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8008c72:	2400      	movs	r4, #0
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8008c74:	f44f 7e00 	mov.w	lr, #512	; 0x200
 8008c78:	e795      	b.n	8008ba6 <HAL_TIMEx_ConfigBreakInput+0x4a>
  switch (sBreakInputConfig->Source)
 8008c7a:	f04f 0c0a 	mov.w	ip, #10
 8008c7e:	2401      	movs	r4, #1
 8008c80:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 8008c84:	e78f      	b.n	8008ba6 <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_enable_bitpos = 0U;
 8008c86:	4664      	mov	r4, ip
      bkin_polarity_mask = 0U;
 8008c88:	46e6      	mov	lr, ip
      bkin_enable_mask = 0U;
 8008c8a:	4663      	mov	r3, ip
 8008c8c:	e78b      	b.n	8008ba6 <HAL_TIMEx_ConfigBreakInput+0x4a>
 8008c8e:	bf00      	nop

08008c90 <HAL_TIMEx_EnableDeadTimePreload>:
{
 8008c90:	4603      	mov	r3, r0
}
 8008c92:	2000      	movs	r0, #0
  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c9c:	6553      	str	r3, [r2, #84]	; 0x54
}
 8008c9e:	4770      	bx	lr

08008ca0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ca0:	b538      	push	{r3, r4, r5, lr}
 8008ca2:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ca4:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ca6:	6882      	ldr	r2, [r0, #8]
 8008ca8:	6900      	ldr	r0, [r0, #16]
 8008caa:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cac:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008cae:	4302      	orrs	r2, r0
 8008cb0:	430a      	orrs	r2, r1
 8008cb2:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cb4:	49b1      	ldr	r1, [pc, #708]	; (8008f7c <UART_SetConfig+0x2dc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008cb6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cb8:	4029      	ands	r1, r5
 8008cba:	430a      	orrs	r2, r1
 8008cbc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	68e1      	ldr	r1, [r4, #12]
 8008cc2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008cc6:	430a      	orrs	r2, r1
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008cc8:	49ad      	ldr	r1, [pc, #692]	; (8008f80 <UART_SetConfig+0x2e0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cca:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ccc:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008cce:	69a2      	ldr	r2, [r4, #24]
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008cd0:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008cd2:	d07f      	beq.n	8008dd4 <UART_SetConfig+0x134>
    tmpreg |= huart->Init.OneBitSampling;
 8008cd4:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008cd6:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8008cda:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8008cde:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ce0:	430a      	orrs	r2, r1
 8008ce2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008ce8:	f022 020f 	bic.w	r2, r2, #15
 8008cec:	430a      	orrs	r2, r1
 8008cee:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008cf0:	4aa4      	ldr	r2, [pc, #656]	; (8008f84 <UART_SetConfig+0x2e4>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d027      	beq.n	8008d46 <UART_SetConfig+0xa6>
 8008cf6:	4aa4      	ldr	r2, [pc, #656]	; (8008f88 <UART_SetConfig+0x2e8>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d04a      	beq.n	8008d92 <UART_SetConfig+0xf2>
 8008cfc:	4aa3      	ldr	r2, [pc, #652]	; (8008f8c <UART_SetConfig+0x2ec>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	f000 8110 	beq.w	8008f24 <UART_SetConfig+0x284>
 8008d04:	4aa2      	ldr	r2, [pc, #648]	; (8008f90 <UART_SetConfig+0x2f0>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	f000 80b7 	beq.w	8008e7a <UART_SetConfig+0x1da>
 8008d0c:	4aa1      	ldr	r2, [pc, #644]	; (8008f94 <UART_SetConfig+0x2f4>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d111      	bne.n	8008d36 <UART_SetConfig+0x96>
 8008d12:	4ba1      	ldr	r3, [pc, #644]	; (8008f98 <UART_SetConfig+0x2f8>)
 8008d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d20:	f000 8125 	beq.w	8008f6e <UART_SetConfig+0x2ce>
 8008d24:	f200 80d4 	bhi.w	8008ed0 <UART_SetConfig+0x230>
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f000 80d8 	beq.w	8008ede <UART_SetConfig+0x23e>
 8008d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d32:	f000 80ae 	beq.w	8008e92 <UART_SetConfig+0x1f2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 8008d36:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d38:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8008d3a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 8008d3e:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8008d42:	66a2      	str	r2, [r4, #104]	; 0x68

  return ret;
}
 8008d44:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d46:	4b94      	ldr	r3, [pc, #592]	; (8008f98 <UART_SetConfig+0x2f8>)
 8008d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d4c:	f003 0303 	and.w	r3, r3, #3
 8008d50:	3b01      	subs	r3, #1
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	f240 808b 	bls.w	8008e6e <UART_SetConfig+0x1ce>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d58:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008d5c:	f000 8102 	beq.w	8008f64 <UART_SetConfig+0x2c4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d60:	f7fe fe94 	bl	8007a8c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8008d64:	2800      	cmp	r0, #0
 8008d66:	d053      	beq.n	8008e10 <UART_SetConfig+0x170>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d68:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008d6a:	6862      	ldr	r2, [r4, #4]
 8008d6c:	4b8b      	ldr	r3, [pc, #556]	; (8008f9c <UART_SetConfig+0x2fc>)
 8008d6e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8008d72:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d76:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d7a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8008d7e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d82:	f1a3 0210 	sub.w	r2, r3, #16
 8008d86:	428a      	cmp	r2, r1
 8008d88:	d8d5      	bhi.n	8008d36 <UART_SetConfig+0x96>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d8a:	6822      	ldr	r2, [r4, #0]
 8008d8c:	2000      	movs	r0, #0
 8008d8e:	60d3      	str	r3, [r2, #12]
 8008d90:	e7d2      	b.n	8008d38 <UART_SetConfig+0x98>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d92:	4b81      	ldr	r3, [pc, #516]	; (8008f98 <UART_SetConfig+0x2f8>)
 8008d94:	4a82      	ldr	r2, [pc, #520]	; (8008fa0 <UART_SetConfig+0x300>)
 8008d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d9a:	f003 030c 	and.w	r3, r3, #12
 8008d9e:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008da0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008da4:	d07b      	beq.n	8008e9e <UART_SetConfig+0x1fe>
    switch (clocksource)
 8008da6:	2b08      	cmp	r3, #8
 8008da8:	d8c5      	bhi.n	8008d36 <UART_SetConfig+0x96>
 8008daa:	a201      	add	r2, pc, #4	; (adr r2, 8008db0 <UART_SetConfig+0x110>)
 8008dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db0:	08008ed9 	.word	0x08008ed9
 8008db4:	08008d61 	.word	0x08008d61
 8008db8:	08008f5b 	.word	0x08008f5b
 8008dbc:	08008d37 	.word	0x08008d37
 8008dc0:	08008e99 	.word	0x08008e99
 8008dc4:	08008d37 	.word	0x08008d37
 8008dc8:	08008d37 	.word	0x08008d37
 8008dcc:	08008d37 	.word	0x08008d37
 8008dd0:	08008f4b 	.word	0x08008f4b
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008dd4:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8008dd8:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008de2:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008de4:	486c      	ldr	r0, [pc, #432]	; (8008f98 <UART_SetConfig+0x2f8>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008de6:	f022 020f 	bic.w	r2, r2, #15
 8008dea:	430a      	orrs	r2, r1
 8008dec:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008dee:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8008df2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dfa:	f000 80ac 	beq.w	8008f56 <UART_SetConfig+0x2b6>
 8008dfe:	d809      	bhi.n	8008e14 <UART_SetConfig+0x174>
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d037      	beq.n	8008e74 <UART_SetConfig+0x1d4>
 8008e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e08:	d195      	bne.n	8008d36 <UART_SetConfig+0x96>
        pclk = HAL_RCC_GetSysClockFreq();
 8008e0a:	f7fe fdf5 	bl	80079f8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8008e0e:	b930      	cbnz	r0, 8008e1e <UART_SetConfig+0x17e>
 8008e10:	2000      	movs	r0, #0
 8008e12:	e791      	b.n	8008d38 <UART_SetConfig+0x98>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e18:	d18d      	bne.n	8008d36 <UART_SetConfig+0x96>
        pclk = (uint32_t) LSE_VALUE;
 8008e1a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e1e:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e20:	4b5e      	ldr	r3, [pc, #376]	; (8008f9c <UART_SetConfig+0x2fc>)
 8008e22:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e24:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e28:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8008e2c:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e30:	4299      	cmp	r1, r3
 8008e32:	d880      	bhi.n	8008d36 <UART_SetConfig+0x96>
 8008e34:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8008e38:	f63f af7d 	bhi.w	8008d36 <UART_SetConfig+0x96>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	4619      	mov	r1, r3
 8008e40:	f7f7 fda0 	bl	8000984 <__aeabi_uldivmod>
 8008e44:	0209      	lsls	r1, r1, #8
 8008e46:	0203      	lsls	r3, r0, #8
 8008e48:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8008e4c:	0868      	lsrs	r0, r5, #1
 8008e4e:	1818      	adds	r0, r3, r0
 8008e50:	462a      	mov	r2, r5
 8008e52:	f04f 0300 	mov.w	r3, #0
 8008e56:	f141 0100 	adc.w	r1, r1, #0
 8008e5a:	f7f7 fd93 	bl	8000984 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e5e:	4a51      	ldr	r2, [pc, #324]	; (8008fa4 <UART_SetConfig+0x304>)
 8008e60:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8008e64:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e66:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e68:	f63f af65 	bhi.w	8008d36 <UART_SetConfig+0x96>
 8008e6c:	e78d      	b.n	8008d8a <UART_SetConfig+0xea>
 8008e6e:	4a4e      	ldr	r2, [pc, #312]	; (8008fa8 <UART_SetConfig+0x308>)
 8008e70:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e72:	e795      	b.n	8008da0 <UART_SetConfig+0x100>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e74:	f7fe fdf8 	bl	8007a68 <HAL_RCC_GetPCLK1Freq>
        break;
 8008e78:	e7c9      	b.n	8008e0e <UART_SetConfig+0x16e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e7a:	4b47      	ldr	r3, [pc, #284]	; (8008f98 <UART_SetConfig+0x2f8>)
 8008e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e80:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008e84:	2b80      	cmp	r3, #128	; 0x80
 8008e86:	d072      	beq.n	8008f6e <UART_SetConfig+0x2ce>
 8008e88:	d862      	bhi.n	8008f50 <UART_SetConfig+0x2b0>
 8008e8a:	b343      	cbz	r3, 8008ede <UART_SetConfig+0x23e>
 8008e8c:	2b40      	cmp	r3, #64	; 0x40
 8008e8e:	f47f af52 	bne.w	8008d36 <UART_SetConfig+0x96>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e92:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008e96:	d062      	beq.n	8008f5e <UART_SetConfig+0x2be>
        pclk = HAL_RCC_GetSysClockFreq();
 8008e98:	f7fe fdae 	bl	80079f8 <HAL_RCC_GetSysClockFreq>
        break;
 8008e9c:	e762      	b.n	8008d64 <UART_SetConfig+0xc4>
    switch (clocksource)
 8008e9e:	2b08      	cmp	r3, #8
 8008ea0:	f63f af49 	bhi.w	8008d36 <UART_SetConfig+0x96>
 8008ea4:	a201      	add	r2, pc, #4	; (adr r2, 8008eac <UART_SetConfig+0x20c>)
 8008ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eaa:	bf00      	nop
 8008eac:	08008ee5 	.word	0x08008ee5
 8008eb0:	08008f65 	.word	0x08008f65
 8008eb4:	08008f6b 	.word	0x08008f6b
 8008eb8:	08008d37 	.word	0x08008d37
 8008ebc:	08008f5f 	.word	0x08008f5f
 8008ec0:	08008d37 	.word	0x08008d37
 8008ec4:	08008d37 	.word	0x08008d37
 8008ec8:	08008d37 	.word	0x08008d37
 8008ecc:	08008eef 	.word	0x08008eef
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ed0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ed4:	d036      	beq.n	8008f44 <UART_SetConfig+0x2a4>
 8008ed6:	e72e      	b.n	8008d36 <UART_SetConfig+0x96>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ed8:	f7fe fdc6 	bl	8007a68 <HAL_RCC_GetPCLK1Freq>
        break;
 8008edc:	e742      	b.n	8008d64 <UART_SetConfig+0xc4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ede:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008ee2:	d1f9      	bne.n	8008ed8 <UART_SetConfig+0x238>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ee4:	f7fe fdc0 	bl	8007a68 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	d091      	beq.n	8008e10 <UART_SetConfig+0x170>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008eec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008eee:	6862      	ldr	r2, [r4, #4]
 8008ef0:	4b2a      	ldr	r3, [pc, #168]	; (8008f9c <UART_SetConfig+0x2fc>)
 8008ef2:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8008ef6:	fbb0 f0f1 	udiv	r0, r0, r1
 8008efa:	0853      	lsrs	r3, r2, #1
 8008efc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f00:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f04:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f08:	f1a0 0210 	sub.w	r2, r0, #16
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	f63f af12 	bhi.w	8008d36 <UART_SetConfig+0x96>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f12:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8008f16:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f18:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f1a:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8008f1e:	4318      	orrs	r0, r3
 8008f20:	60d0      	str	r0, [r2, #12]
 8008f22:	e775      	b.n	8008e10 <UART_SetConfig+0x170>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f24:	4b1c      	ldr	r3, [pc, #112]	; (8008f98 <UART_SetConfig+0x2f8>)
 8008f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008f2e:	2b20      	cmp	r3, #32
 8008f30:	d01d      	beq.n	8008f6e <UART_SetConfig+0x2ce>
 8008f32:	d804      	bhi.n	8008f3e <UART_SetConfig+0x29e>
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d0d2      	beq.n	8008ede <UART_SetConfig+0x23e>
 8008f38:	2b10      	cmp	r3, #16
 8008f3a:	d0aa      	beq.n	8008e92 <UART_SetConfig+0x1f2>
 8008f3c:	e6fb      	b.n	8008d36 <UART_SetConfig+0x96>
 8008f3e:	2b30      	cmp	r3, #48	; 0x30
 8008f40:	f47f aef9 	bne.w	8008d36 <UART_SetConfig+0x96>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f44:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008f48:	d0d1      	beq.n	8008eee <UART_SetConfig+0x24e>
    switch (clocksource)
 8008f4a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008f4e:	e70c      	b.n	8008d6a <UART_SetConfig+0xca>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f50:	2bc0      	cmp	r3, #192	; 0xc0
 8008f52:	d0f7      	beq.n	8008f44 <UART_SetConfig+0x2a4>
 8008f54:	e6ef      	b.n	8008d36 <UART_SetConfig+0x96>
 8008f56:	4815      	ldr	r0, [pc, #84]	; (8008fac <UART_SetConfig+0x30c>)
 8008f58:	e761      	b.n	8008e1e <UART_SetConfig+0x17e>
        pclk = (uint32_t) HSI_VALUE;
 8008f5a:	4814      	ldr	r0, [pc, #80]	; (8008fac <UART_SetConfig+0x30c>)
 8008f5c:	e705      	b.n	8008d6a <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetSysClockFreq();
 8008f5e:	f7fe fd4b 	bl	80079f8 <HAL_RCC_GetSysClockFreq>
        break;
 8008f62:	e7c1      	b.n	8008ee8 <UART_SetConfig+0x248>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f64:	f7fe fd92 	bl	8007a8c <HAL_RCC_GetPCLK2Freq>
        break;
 8008f68:	e7be      	b.n	8008ee8 <UART_SetConfig+0x248>
        pclk = (uint32_t) HSI_VALUE;
 8008f6a:	4810      	ldr	r0, [pc, #64]	; (8008fac <UART_SetConfig+0x30c>)
 8008f6c:	e7bf      	b.n	8008eee <UART_SetConfig+0x24e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f6e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8008f72:	480e      	ldr	r0, [pc, #56]	; (8008fac <UART_SetConfig+0x30c>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f74:	f47f aef9 	bne.w	8008d6a <UART_SetConfig+0xca>
 8008f78:	e7b9      	b.n	8008eee <UART_SetConfig+0x24e>
 8008f7a:	bf00      	nop
 8008f7c:	cfff69f3 	.word	0xcfff69f3
 8008f80:	40008000 	.word	0x40008000
 8008f84:	40013800 	.word	0x40013800
 8008f88:	40004400 	.word	0x40004400
 8008f8c:	40004800 	.word	0x40004800
 8008f90:	40004c00 	.word	0x40004c00
 8008f94:	40005000 	.word	0x40005000
 8008f98:	40021000 	.word	0x40021000
 8008f9c:	0800ae10 	.word	0x0800ae10
 8008fa0:	0800ae00 	.word	0x0800ae00
 8008fa4:	000ffcff 	.word	0x000ffcff
 8008fa8:	0800adfc 	.word	0x0800adfc
 8008fac:	00f42400 	.word	0x00f42400

08008fb0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008fb0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008fb2:	07da      	lsls	r2, r3, #31
{
 8008fb4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008fb6:	d506      	bpl.n	8008fc6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008fb8:	6801      	ldr	r1, [r0, #0]
 8008fba:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8008fbc:	684a      	ldr	r2, [r1, #4]
 8008fbe:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008fc2:	4322      	orrs	r2, r4
 8008fc4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fc6:	079c      	lsls	r4, r3, #30
 8008fc8:	d506      	bpl.n	8008fd8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fca:	6801      	ldr	r1, [r0, #0]
 8008fcc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8008fce:	684a      	ldr	r2, [r1, #4]
 8008fd0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008fd4:	4322      	orrs	r2, r4
 8008fd6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fd8:	0759      	lsls	r1, r3, #29
 8008fda:	d506      	bpl.n	8008fea <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fdc:	6801      	ldr	r1, [r0, #0]
 8008fde:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008fe0:	684a      	ldr	r2, [r1, #4]
 8008fe2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008fe6:	4322      	orrs	r2, r4
 8008fe8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fea:	071a      	lsls	r2, r3, #28
 8008fec:	d506      	bpl.n	8008ffc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fee:	6801      	ldr	r1, [r0, #0]
 8008ff0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8008ff2:	684a      	ldr	r2, [r1, #4]
 8008ff4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ff8:	4322      	orrs	r2, r4
 8008ffa:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ffc:	06dc      	lsls	r4, r3, #27
 8008ffe:	d506      	bpl.n	800900e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009000:	6801      	ldr	r1, [r0, #0]
 8009002:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8009004:	688a      	ldr	r2, [r1, #8]
 8009006:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800900a:	4322      	orrs	r2, r4
 800900c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800900e:	0699      	lsls	r1, r3, #26
 8009010:	d506      	bpl.n	8009020 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009012:	6801      	ldr	r1, [r0, #0]
 8009014:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8009016:	688a      	ldr	r2, [r1, #8]
 8009018:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800901c:	4322      	orrs	r2, r4
 800901e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009020:	065a      	lsls	r2, r3, #25
 8009022:	d509      	bpl.n	8009038 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009024:	6801      	ldr	r1, [r0, #0]
 8009026:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8009028:	684a      	ldr	r2, [r1, #4]
 800902a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800902e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009030:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009034:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009036:	d00b      	beq.n	8009050 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009038:	061b      	lsls	r3, r3, #24
 800903a:	d506      	bpl.n	800904a <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800903c:	6802      	ldr	r2, [r0, #0]
 800903e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8009040:	6853      	ldr	r3, [r2, #4]
 8009042:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8009046:	430b      	orrs	r3, r1
 8009048:	6053      	str	r3, [r2, #4]
  }
}
 800904a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800904e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009050:	684a      	ldr	r2, [r1, #4]
 8009052:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8009054:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8009058:	4322      	orrs	r2, r4
 800905a:	604a      	str	r2, [r1, #4]
 800905c:	e7ec      	b.n	8009038 <UART_AdvFeatureConfig+0x88>
 800905e:	bf00      	nop

08009060 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009064:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009068:	6805      	ldr	r5, [r0, #0]
{
 800906a:	4681      	mov	r9, r0
 800906c:	460f      	mov	r7, r1
 800906e:	4616      	mov	r6, r2
 8009070:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009072:	e002      	b.n	800907a <UART_WaitOnFlagUntilTimeout+0x1a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009074:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009078:	d10c      	bne.n	8009094 <UART_WaitOnFlagUntilTimeout+0x34>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800907a:	69ec      	ldr	r4, [r5, #28]
 800907c:	ea37 0304 	bics.w	r3, r7, r4
 8009080:	bf0c      	ite	eq
 8009082:	f04f 0c01 	moveq.w	ip, #1
 8009086:	f04f 0c00 	movne.w	ip, #0
 800908a:	45b4      	cmp	ip, r6
 800908c:	d0f2      	beq.n	8009074 <UART_WaitOnFlagUntilTimeout+0x14>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800908e:	2000      	movs	r0, #0
}
 8009090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009094:	f7fc fb94 	bl	80057c0 <HAL_GetTick>
 8009098:	eba0 000a 	sub.w	r0, r0, sl
 800909c:	4540      	cmp	r0, r8
 800909e:	d82d      	bhi.n	80090fc <UART_WaitOnFlagUntilTimeout+0x9c>
 80090a0:	f1b8 0f00 	cmp.w	r8, #0
 80090a4:	d02a      	beq.n	80090fc <UART_WaitOnFlagUntilTimeout+0x9c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80090a6:	f8d9 5000 	ldr.w	r5, [r9]
 80090aa:	682b      	ldr	r3, [r5, #0]
 80090ac:	0759      	lsls	r1, r3, #29
 80090ae:	462a      	mov	r2, r5
 80090b0:	d5e3      	bpl.n	800907a <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80090b2:	69eb      	ldr	r3, [r5, #28]
 80090b4:	051b      	lsls	r3, r3, #20
 80090b6:	d5e0      	bpl.n	800907a <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090bc:	622b      	str	r3, [r5, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090be:	e852 3f00 	ldrex	r3, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80090c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c6:	e842 3100 	strex	r1, r3, [r2]
 80090ca:	2900      	cmp	r1, #0
 80090cc:	d1f7      	bne.n	80090be <UART_WaitOnFlagUntilTimeout+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ce:	f102 0308 	add.w	r3, r2, #8
 80090d2:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090d6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090da:	f102 0008 	add.w	r0, r2, #8
 80090de:	e840 3100 	strex	r1, r3, [r0]
 80090e2:	2900      	cmp	r1, #0
 80090e4:	d1f3      	bne.n	80090ce <UART_WaitOnFlagUntilTimeout+0x6e>
          huart->gState = HAL_UART_STATE_READY;
 80090e6:	2320      	movs	r3, #32
 80090e8:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84
          __HAL_UNLOCK(huart);
 80090ec:	f889 1080 	strb.w	r1, [r9, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80090f0:	f8c9 3088 	str.w	r3, [r9, #136]	; 0x88
          return HAL_TIMEOUT;
 80090f4:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80090f6:	f8c9 308c 	str.w	r3, [r9, #140]	; 0x8c
          return HAL_TIMEOUT;
 80090fa:	e7c9      	b.n	8009090 <UART_WaitOnFlagUntilTimeout+0x30>
 80090fc:	f8d9 2000 	ldr.w	r2, [r9]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009100:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009104:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009108:	e842 3100 	strex	r1, r3, [r2]
 800910c:	2900      	cmp	r1, #0
 800910e:	d1f7      	bne.n	8009100 <UART_WaitOnFlagUntilTimeout+0xa0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009110:	f102 0308 	add.w	r3, r2, #8
 8009114:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009118:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911c:	f102 0008 	add.w	r0, r2, #8
 8009120:	e840 3100 	strex	r1, r3, [r0]
 8009124:	2900      	cmp	r1, #0
 8009126:	d1f3      	bne.n	8009110 <UART_WaitOnFlagUntilTimeout+0xb0>
        huart->gState = HAL_UART_STATE_READY;
 8009128:	2320      	movs	r3, #32
 800912a:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84
        __HAL_UNLOCK(huart);
 800912e:	f889 1080 	strb.w	r1, [r9, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009132:	f8c9 3088 	str.w	r3, [r9, #136]	; 0x88
        return HAL_TIMEOUT;
 8009136:	2003      	movs	r0, #3
 8009138:	e7aa      	b.n	8009090 <UART_WaitOnFlagUntilTimeout+0x30>
 800913a:	bf00      	nop

0800913c <UART_CheckIdleState>:
{
 800913c:	b570      	push	{r4, r5, r6, lr}
 800913e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009140:	2600      	movs	r6, #0
{
 8009142:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009144:	f8c0 608c 	str.w	r6, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8009148:	f7fc fb3a 	bl	80057c0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800914c:	6823      	ldr	r3, [r4, #0]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8009152:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009154:	d40e      	bmi.n	8009174 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	075b      	lsls	r3, r3, #29
 800915a:	d41a      	bmi.n	8009192 <UART_CheckIdleState+0x56>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800915c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800915e:	2220      	movs	r2, #32
  return HAL_OK;
 8009160:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8009162:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8009166:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800916a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800916e:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8009170:	b002      	add	sp, #8
 8009172:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009174:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009178:	9300      	str	r3, [sp, #0]
 800917a:	4632      	mov	r2, r6
 800917c:	4603      	mov	r3, r0
 800917e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009182:	4620      	mov	r0, r4
 8009184:	f7ff ff6c 	bl	8009060 <UART_WaitOnFlagUntilTimeout>
 8009188:	b978      	cbnz	r0, 80091aa <UART_CheckIdleState+0x6e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800918a:	6823      	ldr	r3, [r4, #0]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	075b      	lsls	r3, r3, #29
 8009190:	d5e4      	bpl.n	800915c <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009192:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	2200      	movs	r2, #0
 800919a:	462b      	mov	r3, r5
 800919c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80091a0:	4620      	mov	r0, r4
 80091a2:	f7ff ff5d 	bl	8009060 <UART_WaitOnFlagUntilTimeout>
 80091a6:	2800      	cmp	r0, #0
 80091a8:	d0d8      	beq.n	800915c <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 80091aa:	2003      	movs	r0, #3
}
 80091ac:	b002      	add	sp, #8
 80091ae:	bd70      	pop	{r4, r5, r6, pc}

080091b0 <HAL_UART_Init>:
  if (huart == NULL)
 80091b0:	b380      	cbz	r0, 8009214 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 80091b2:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 80091b6:	b510      	push	{r4, lr}
 80091b8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80091ba:	b333      	cbz	r3, 800920a <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 80091bc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80091be:	2324      	movs	r3, #36	; 0x24
 80091c0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80091c4:	6813      	ldr	r3, [r2, #0]
 80091c6:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 80091ca:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80091cc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80091ce:	f7ff fd67 	bl	8008ca0 <UART_SetConfig>
 80091d2:	2801      	cmp	r0, #1
 80091d4:	d017      	beq.n	8009206 <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80091d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80091d8:	b98b      	cbnz	r3, 80091fe <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	685a      	ldr	r2, [r3, #4]
 80091de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091e4:	689a      	ldr	r2, [r3, #8]
 80091e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091ea:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80091f2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80091f4:	601a      	str	r2, [r3, #0]
}
 80091f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80091fa:	f7ff bf9f 	b.w	800913c <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 80091fe:	4620      	mov	r0, r4
 8009200:	f7ff fed6 	bl	8008fb0 <UART_AdvFeatureConfig>
 8009204:	e7e9      	b.n	80091da <HAL_UART_Init+0x2a>
}
 8009206:	2001      	movs	r0, #1
 8009208:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800920a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800920e:	f7fc fa13 	bl	8005638 <HAL_UART_MspInit>
 8009212:	e7d3      	b.n	80091bc <HAL_UART_Init+0xc>
}
 8009214:	2001      	movs	r0, #1
 8009216:	4770      	bx	lr

08009218 <UARTEx_SetNbDataToProcess.part.0>:
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009218:	6803      	ldr	r3, [r0, #0]
 800921a:	6899      	ldr	r1, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800921c:	689b      	ldr	r3, [r3, #8]
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 800921e:	b430      	push	{r4, r5}
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009220:	ea4f 7c53 	mov.w	ip, r3, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009224:	4d0a      	ldr	r5, [pc, #40]	; (8009250 <UARTEx_SetNbDataToProcess.part.0+0x38>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8009226:	4c0b      	ldr	r4, [pc, #44]	; (8009254 <UARTEx_SetNbDataToProcess.part.0+0x3c>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009228:	f815 200c 	ldrb.w	r2, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800922c:	f3c1 6142 	ubfx	r1, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009230:	00d2      	lsls	r2, r2, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009232:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009234:	f814 500c 	ldrb.w	r5, [r4, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 8009238:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800923a:	fbb2 f2f5 	udiv	r2, r2, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800923e:	00db      	lsls	r3, r3, #3
  }
}
 8009240:	bc30      	pop	{r4, r5}
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009242:	fbb3 f3f1 	udiv	r3, r3, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009246:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800924a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 800924e:	4770      	bx	lr
 8009250:	0800ae30 	.word	0x0800ae30
 8009254:	0800ae28 	.word	0x0800ae28

08009258 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8009258:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800925c:	2b01      	cmp	r3, #1
 800925e:	d017      	beq.n	8009290 <HAL_UARTEx_DisableFifoMode+0x38>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009260:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009262:	2324      	movs	r3, #36	; 0x24
{
 8009264:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 8009266:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800926a:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800926c:	6814      	ldr	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800926e:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 8009270:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009274:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8009278:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800927a:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800927c:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(huart);
 800927e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8009282:	2220      	movs	r2, #32
 8009284:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
}
 8009288:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 800928c:	4618      	mov	r0, r3
}
 800928e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8009290:	2002      	movs	r0, #2
}
 8009292:	4770      	bx	lr

08009294 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8009294:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8009296:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800929a:	2b01      	cmp	r3, #1
 800929c:	d022      	beq.n	80092e4 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 800929e:	2201      	movs	r2, #1
 80092a0:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092a4:	6803      	ldr	r3, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80092a6:	2224      	movs	r2, #36	; 0x24
 80092a8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092ac:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	f022 0201 	bic.w	r2, r2, #1
 80092b4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80092b6:	689a      	ldr	r2, [r3, #8]
 80092b8:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80092bc:	4311      	orrs	r1, r2
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80092be:	6e42      	ldr	r2, [r0, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80092c0:	6099      	str	r1, [r3, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80092c2:	4604      	mov	r4, r0
 80092c4:	b152      	cbz	r2, 80092dc <HAL_UARTEx_SetTxFifoThreshold+0x48>
 80092c6:	f7ff ffa7 	bl	8009218 <UARTEx_SetNbDataToProcess.part.0>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092ca:	6803      	ldr	r3, [r0, #0]
 80092cc:	601d      	str	r5, [r3, #0]
  __HAL_UNLOCK(huart);
 80092ce:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80092d0:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 80092d2:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 80092d6:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
}
 80092da:	bd38      	pop	{r3, r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80092dc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80092e0:	6682      	str	r2, [r0, #104]	; 0x68
 80092e2:	e7f3      	b.n	80092cc <HAL_UARTEx_SetTxFifoThreshold+0x38>
  __HAL_LOCK(huart);
 80092e4:	2002      	movs	r0, #2
}
 80092e6:	bd38      	pop	{r3, r4, r5, pc}

080092e8 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80092e8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80092ea:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d022      	beq.n	8009338 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 80092f2:	2201      	movs	r2, #1
 80092f4:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092f8:	6803      	ldr	r3, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80092fa:	2224      	movs	r2, #36	; 0x24
 80092fc:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009300:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	f022 0201 	bic.w	r2, r2, #1
 8009308:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800930a:	689a      	ldr	r2, [r3, #8]
 800930c:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8009310:	4311      	orrs	r1, r2
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009312:	6e42      	ldr	r2, [r0, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009314:	6099      	str	r1, [r3, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009316:	4604      	mov	r4, r0
 8009318:	b152      	cbz	r2, 8009330 <HAL_UARTEx_SetRxFifoThreshold+0x48>
 800931a:	f7ff ff7d 	bl	8009218 <UARTEx_SetNbDataToProcess.part.0>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800931e:	6803      	ldr	r3, [r0, #0]
 8009320:	601d      	str	r5, [r3, #0]
  __HAL_UNLOCK(huart);
 8009322:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8009324:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8009326:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800932a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
}
 800932e:	bd38      	pop	{r3, r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8009330:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8009334:	6682      	str	r2, [r0, #104]	; 0x68
 8009336:	e7f3      	b.n	8009320 <HAL_UARTEx_SetRxFifoThreshold+0x38>
  __HAL_LOCK(huart);
 8009338:	2002      	movs	r0, #2
}
 800933a:	bd38      	pop	{r3, r4, r5, pc}

0800933c <LL_ADC_CommonInit>:
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 800933c:	4b1b      	ldr	r3, [pc, #108]	; (80093ac <LL_ADC_CommonInit+0x70>)
 800933e:	4298      	cmp	r0, r3
{
 8009340:	b410      	push	{r4}
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8009342:	d028      	beq.n	8009396 <LL_ADC_CommonInit+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009344:	4c1a      	ldr	r4, [pc, #104]	; (80093b0 <LL_ADC_CommonInit+0x74>)
 8009346:	4b1b      	ldr	r3, [pc, #108]	; (80093b4 <LL_ADC_CommonInit+0x78>)
 8009348:	4a1b      	ldr	r2, [pc, #108]	; (80093b8 <LL_ADC_CommonInit+0x7c>)
 800934a:	68a4      	ldr	r4, [r4, #8]
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	6892      	ldr	r2, [r2, #8]
 8009350:	4323      	orrs	r3, r4
 8009352:	4313      	orrs	r3, r2
 8009354:	43db      	mvns	r3, r3
 8009356:	f003 0301 	and.w	r3, r3, #1
 800935a:	b183      	cbz	r3, 800937e <LL_ADC_CommonInit+0x42>
  if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800935c:	684b      	ldr	r3, [r1, #4]
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800935e:	6884      	ldr	r4, [r0, #8]
 8009360:	4a16      	ldr	r2, [pc, #88]	; (80093bc <LL_ADC_CommonInit+0x80>)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8009362:	b183      	cbz	r3, 8009386 <LL_ADC_CommonInit+0x4a>
      MODIFY_REG(ADCxy_COMMON->CCR,
 8009364:	4022      	ands	r2, r4
 8009366:	680c      	ldr	r4, [r1, #0]
 8009368:	4313      	orrs	r3, r2
 800936a:	4323      	orrs	r3, r4
 800936c:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 8009370:	4323      	orrs	r3, r4
 8009372:	4313      	orrs	r3, r2
 8009374:	6083      	str	r3, [r0, #8]
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
  }

  return status;
}
 8009376:	f85d 4b04 	ldr.w	r4, [sp], #4
  ErrorStatus status = SUCCESS;
 800937a:	2000      	movs	r0, #0
}
 800937c:	4770      	bx	lr
    status = ERROR;
 800937e:	2001      	movs	r0, #1
}
 8009380:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009384:	4770      	bx	lr
      MODIFY_REG(ADCxy_COMMON->CCR,
 8009386:	6809      	ldr	r1, [r1, #0]
 8009388:	4022      	ands	r2, r4
 800938a:	430a      	orrs	r2, r1
 800938c:	6082      	str	r2, [r0, #8]
}
 800938e:	f85d 4b04 	ldr.w	r4, [sp], #4
  ErrorStatus status = SUCCESS;
 8009392:	4618      	mov	r0, r3
}
 8009394:	4770      	bx	lr
 8009396:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800939a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800939e:	6892      	ldr	r2, [r2, #8]
 80093a0:	689b      	ldr	r3, [r3, #8]
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 80093a2:	4313      	orrs	r3, r2
 80093a4:	43db      	mvns	r3, r3
 80093a6:	f003 0301 	and.w	r3, r3, #1
 80093aa:	e7d6      	b.n	800935a <LL_ADC_CommonInit+0x1e>
 80093ac:	50000300 	.word	0x50000300
 80093b0:	50000400 	.word	0x50000400
 80093b4:	50000500 	.word	0x50000500
 80093b8:	50000600 	.word	0x50000600
 80093bc:	ffc030e0 	.word	0xffc030e0

080093c0 <LL_ADC_Init>:
 80093c0:	6883      	ldr	r3, [r0, #8]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80093c2:	f013 0301 	ands.w	r3, r3, #1
 80093c6:	d112      	bne.n	80093ee <LL_ADC_Init+0x2e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 80093c8:	4602      	mov	r2, r0
 80093ca:	68c0      	ldr	r0, [r0, #12]
{
 80093cc:	b410      	push	{r4}
    MODIFY_REG(ADCx->CFGR,
 80093ce:	f420 4c40 	bic.w	ip, r0, #49152	; 0xc000
  ErrorStatus status = SUCCESS;
 80093d2:	4618      	mov	r0, r3
    MODIFY_REG(ADCx->CFGR,
 80093d4:	e9d1 4300 	ldrd	r4, r3, [r1]
 80093d8:	6889      	ldr	r1, [r1, #8]
 80093da:	4323      	orrs	r3, r4
 80093dc:	f02c 0c18 	bic.w	ip, ip, #24
 80093e0:	430b      	orrs	r3, r1
 80093e2:	ea43 030c 	orr.w	r3, r3, ip
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }

  return status;
}
 80093e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(ADCx->CFGR,
 80093ea:	60d3      	str	r3, [r2, #12]
}
 80093ec:	4770      	bx	lr
    status = ERROR;
 80093ee:	2001      	movs	r0, #1
}
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop

080093f4 <LL_ADC_REG_Init>:
 80093f4:	6882      	ldr	r2, [r0, #8]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80093f6:	07d3      	lsls	r3, r2, #31
 80093f8:	d418      	bmi.n	800942c <LL_ADC_REG_Init+0x38>
{
 80093fa:	b430      	push	{r4, r5}
  if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80093fc:	684c      	ldr	r4, [r1, #4]
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80093fe:	4603      	mov	r3, r0
 8009400:	b9b4      	cbnz	r4, 8009430 <LL_ADC_REG_Init+0x3c>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8009402:	68c2      	ldr	r2, [r0, #12]
 8009404:	4812      	ldr	r0, [pc, #72]	; (8009450 <LL_ADC_REG_Init+0x5c>)
 8009406:	4010      	ands	r0, r2
 8009408:	680a      	ldr	r2, [r1, #0]
 800940a:	4310      	orrs	r0, r2
 800940c:	68ca      	ldr	r2, [r1, #12]
 800940e:	4310      	orrs	r0, r2
 8009410:	e9d1 5204 	ldrd	r5, r2, [r1, #16]
 8009414:	ea40 0105 	orr.w	r1, r0, r5
 8009418:	4311      	orrs	r1, r2
 800941a:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800941c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800941e:	f022 020f 	bic.w	r2, r2, #15
 8009422:	4322      	orrs	r2, r4
  ErrorStatus status = SUCCESS;
 8009424:	2000      	movs	r0, #0
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 8009426:	bc30      	pop	{r4, r5}
 8009428:	631a      	str	r2, [r3, #48]	; 0x30
 800942a:	4770      	bx	lr
    status = ERROR;
 800942c:	2001      	movs	r0, #1
}
 800942e:	4770      	bx	lr
      MODIFY_REG(ADCx->CFGR,
 8009430:	68c0      	ldr	r0, [r0, #12]
 8009432:	4a07      	ldr	r2, [pc, #28]	; (8009450 <LL_ADC_REG_Init+0x5c>)
 8009434:	4002      	ands	r2, r0
 8009436:	6808      	ldr	r0, [r1, #0]
 8009438:	4302      	orrs	r2, r0
 800943a:	6888      	ldr	r0, [r1, #8]
 800943c:	4302      	orrs	r2, r0
 800943e:	68c8      	ldr	r0, [r1, #12]
 8009440:	4302      	orrs	r2, r0
 8009442:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8009446:	4302      	orrs	r2, r0
 8009448:	430a      	orrs	r2, r1
 800944a:	60da      	str	r2, [r3, #12]
 800944c:	e7e6      	b.n	800941c <LL_ADC_REG_Init+0x28>
 800944e:	bf00      	nop
 8009450:	fff0c01c 	.word	0xfff0c01c

08009454 <LL_COMP_Init>:
  * @param  COMPx Comparator instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_COMP_IsLocked(COMP_TypeDef *COMPx)
{
  return ((READ_BIT(COMPx->CSR, COMP_CSR_LOCK) == (COMP_CSR_LOCK)) ? 1UL : 0UL);
 8009454:	6803      	ldr	r3, [r0, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	db12      	blt.n	8009480 <LL_COMP_Init+0x2c>
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: COMP registers are initialized
  *          - ERROR: COMP registers are not initialized
  */
ErrorStatus LL_COMP_Init(COMP_TypeDef *COMPx, LL_COMP_InitTypeDef *COMP_InitStruct)
{
 800945a:	b410      	push	{r4}
    /*  - InputPlus                                                           */
    /*  - InputMinus                                                          */
    /*  - InputHysteresis                                                     */
    /*  - OutputPolarity                                                      */
    /*  - OutputBlankingSource                                                */
    MODIFY_REG(COMPx->CSR,
 800945c:	e9d1 3400 	ldrd	r3, r4, [r1]
 8009460:	688a      	ldr	r2, [r1, #8]
 8009462:	4323      	orrs	r3, r4
 8009464:	4313      	orrs	r3, r2
 8009466:	e9d1 2103 	ldrd	r2, r1, [r1, #12]
 800946a:	6804      	ldr	r4, [r0, #0]
 800946c:	4313      	orrs	r3, r2
 800946e:	4a05      	ldr	r2, [pc, #20]	; (8009484 <LL_COMP_Init+0x30>)
 8009470:	430b      	orrs	r3, r1
 8009472:	4022      	ands	r2, r4
 8009474:	4313      	orrs	r3, r2
 8009476:	6003      	str	r3, [r0, #0]
    /* Initialization error: COMP instance is locked.                         */
    status = ERROR;
  }

  return status;
}
 8009478:	f85d 4b04 	ldr.w	r4, [sp], #4
  ErrorStatus status = SUCCESS;
 800947c:	2000      	movs	r0, #0
}
 800947e:	4770      	bx	lr
    status = ERROR;
 8009480:	2001      	movs	r0, #1
}
 8009482:	4770      	bx	lr
 8009484:	ff007e0f 	.word	0xff007e0f

08009488 <LL_DAC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 8009488:	b510      	push	{r4, lr}
  return ((READ_BIT(DACx->CR,
 800948a:	f001 0c10 	and.w	ip, r1, #16
 800948e:	6804      	ldr	r4, [r0, #0]
 8009490:	2301      	movs	r3, #1
 8009492:	fa03 fe0c 	lsl.w	lr, r3, ip
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8009496:	ea3e 0404 	bics.w	r4, lr, r4
 800949a:	d02f      	beq.n	80094fc <LL_DAC_Init+0x74>
  assert_param(IS_LL_DAC_TRIGGER_SOURCE(DACx, DAC_InitStruct->TriggerSource));
  assert_param(IS_LL_DAC_OUTPUT_BUFFER(DAC_InitStruct->OutputBuffer));
  assert_param(IS_LL_DAC_OUTPUT_CONNECTION(DAC_InitStruct->OutputConnection));
  assert_param(IS_LL_DAC_OUTPUT_MODE(DAC_InitStruct->OutputMode));
  assert_param(IS_LL_DAC_WAVE_AUTO_GENER_MODE(DAC_InitStruct->WaveAutoGeneration));
  if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 800949c:	6893      	ldr	r3, [r2, #8]
    /*  - TriggerSource                                                       */
    /*  - WaveAutoGeneration                                                  */
    /*  - OutputBuffer                                                        */
    /*  - OutputConnection                                                    */
    /*  - OutputMode                                                          */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 800949e:	b18b      	cbz	r3, 80094c4 <LL_DAC_Init+0x3c>
    {
      if (DAC_InitStruct->WaveAutoGeneration == LL_DAC_WAVE_AUTO_GENERATION_SAWTOOTH)
 80094a0:	2bc0      	cmp	r3, #192	; 0xc0
 80094a2:	d02d      	beq.n	8009500 <LL_DAC_Init+0x78>
        WRITE_REG(*(__DAC_PTR_REG_OFFSET(DACx->STR1, (DAC_Channel >> DAC_REG_STRX_REGOFFSET_BITOFFSET_POS) & DAC_REG_STRX_REGOFFSET_MASK_POSBIT0)),
                  DAC_InitStruct->WaveAutoGenerationConfig);
      }
      else
      {
        MODIFY_REG(DACx->CR,
 80094a4:	6814      	ldr	r4, [r2, #0]
 80094a6:	6801      	ldr	r1, [r0, #0]
 80094a8:	4323      	orrs	r3, r4
 80094aa:	68d4      	ldr	r4, [r2, #12]
 80094ac:	4323      	orrs	r3, r4
 80094ae:	f640 74fc 	movw	r4, #4092	; 0xffc
 80094b2:	fa04 f40c 	lsl.w	r4, r4, ip
 80094b6:	fa03 f30c 	lsl.w	r3, r3, ip
 80094ba:	ea21 0104 	bic.w	r1, r1, r4
 80094be:	430b      	orrs	r3, r1
 80094c0:	6003      	str	r3, [r0, #0]
 80094c2:	e00a      	b.n	80094da <LL_DAC_Init+0x52>
                  );
      }
    }
    else
    {
      MODIFY_REG(DACx->CR,
 80094c4:	6803      	ldr	r3, [r0, #0]
 80094c6:	21fc      	movs	r1, #252	; 0xfc
 80094c8:	fa01 f10c 	lsl.w	r1, r1, ip
 80094cc:	ea23 0301 	bic.w	r3, r3, r1
 80094d0:	6811      	ldr	r1, [r2, #0]
 80094d2:	fa01 f10c 	lsl.w	r1, r1, ip
 80094d6:	430b      	orrs	r3, r1
 80094d8:	6003      	str	r3, [r0, #0]
                 (DAC_InitStruct->TriggerSource
                  | LL_DAC_WAVE_AUTO_GENERATION_NONE
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    MODIFY_REG(DACx->MCR,
 80094da:	e9d2 3404 	ldrd	r3, r4, [r2, #16]
 80094de:	6991      	ldr	r1, [r2, #24]
 80094e0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80094e2:	4323      	orrs	r3, r4
 80094e4:	430b      	orrs	r3, r1
 80094e6:	2107      	movs	r1, #7
 80094e8:	fa01 f10c 	lsl.w	r1, r1, ip
 80094ec:	fa03 f30c 	lsl.w	r3, r3, ip
 80094f0:	ea22 0201 	bic.w	r2, r2, r1
 80094f4:	4313      	orrs	r3, r2
 80094f6:	63c3      	str	r3, [r0, #60]	; 0x3c
  ErrorStatus status = SUCCESS;
 80094f8:	2000      	movs	r0, #0
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
  }
  return status;
}
 80094fa:	bd10      	pop	{r4, pc}
    status = ERROR;
 80094fc:	4618      	mov	r0, r3
}
 80094fe:	bd10      	pop	{r4, pc}
        MODIFY_REG(DACx->CR,
 8009500:	6804      	ldr	r4, [r0, #0]
 8009502:	fa03 f30c 	lsl.w	r3, r3, ip
 8009506:	4323      	orrs	r3, r4
 8009508:	6003      	str	r3, [r0, #0]
        MODIFY_REG(DACx->STMODR,
 800950a:	6853      	ldr	r3, [r2, #4]
 800950c:	6e04      	ldr	r4, [r0, #96]	; 0x60
 800950e:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8009512:	6813      	ldr	r3, [r2, #0]
 8009514:	089b      	lsrs	r3, r3, #2
 8009516:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 800951a:	f640 7e0f 	movw	lr, #3855	; 0xf0f
        WRITE_REG(*(__DAC_PTR_REG_OFFSET(DACx->STR1, (DAC_Channel >> DAC_REG_STRX_REGOFFSET_BITOFFSET_POS) & DAC_REG_STRX_REGOFFSET_MASK_POSBIT0)),
 800951e:	0949      	lsrs	r1, r1, #5
        MODIFY_REG(DACx->STMODR,
 8009520:	fa0e fe0c 	lsl.w	lr, lr, ip
        WRITE_REG(*(__DAC_PTR_REG_OFFSET(DACx->STR1, (DAC_Channel >> DAC_REG_STRX_REGOFFSET_BITOFFSET_POS) & DAC_REG_STRX_REGOFFSET_MASK_POSBIT0)),
 8009524:	f001 0104 	and.w	r1, r1, #4
        MODIFY_REG(DACx->STMODR,
 8009528:	fa03 f30c 	lsl.w	r3, r3, ip
 800952c:	ea24 040e 	bic.w	r4, r4, lr
 8009530:	4323      	orrs	r3, r4
        WRITE_REG(*(__DAC_PTR_REG_OFFSET(DACx->STR1, (DAC_Channel >> DAC_REG_STRX_REGOFFSET_BITOFFSET_POS) & DAC_REG_STRX_REGOFFSET_MASK_POSBIT0)),
 8009532:	4401      	add	r1, r0
        MODIFY_REG(DACx->STMODR,
 8009534:	6603      	str	r3, [r0, #96]	; 0x60
        WRITE_REG(*(__DAC_PTR_REG_OFFSET(DACx->STR1, (DAC_Channel >> DAC_REG_STRX_REGOFFSET_BITOFFSET_POS) & DAC_REG_STRX_REGOFFSET_MASK_POSBIT0)),
 8009536:	68d3      	ldr	r3, [r2, #12]
 8009538:	658b      	str	r3, [r1, #88]	; 0x58
 800953a:	e7ce      	b.n	80094da <LL_DAC_Init+0x52>

0800953c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800953c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009540:	680d      	ldr	r5, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009542:	fa95 f2a5 	rbit	r2, r5
  return __builtin_clz(value);
 8009546:	fab2 f282 	clz	r2, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800954a:	fa35 f302 	lsrs.w	r3, r5, r2
 800954e:	f000 80a2 	beq.w	8009696 <LL_GPIO_Init+0x15a>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8009552:	f04f 0c01 	mov.w	ip, #1
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009556:	f04f 0e03 	mov.w	lr, #3
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800955a:	43ef      	mvns	r7, r5
 800955c:	e01f      	b.n	800959e <LL_GPIO_Init+0x62>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800955e:	f8d0 8000 	ldr.w	r8, [r0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009562:	fa93 f9a3 	rbit	r9, r3
  if (value == 0U)
 8009566:	f1b9 0f00 	cmp.w	r9, #0
 800956a:	d007      	beq.n	800957c <LL_GPIO_Init+0x40>
  return __builtin_clz(value);
 800956c:	fab9 f989 	clz	r9, r9
 8009570:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8009574:	fa0e f909 	lsl.w	r9, lr, r9
 8009578:	ea28 0809 	bic.w	r8, r8, r9
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800957c:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8009580:	2b00      	cmp	r3, #0
 8009582:	f000 808b 	beq.w	800969c <LL_GPIO_Init+0x160>
  return __builtin_clz(value);
 8009586:	fab3 f383 	clz	r3, r3
 800958a:	005b      	lsls	r3, r3, #1
 800958c:	fa04 f303 	lsl.w	r3, r4, r3
 8009590:	ea43 0308 	orr.w	r3, r3, r8
 8009594:	6003      	str	r3, [r0, #0]
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 8009596:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009598:	fa35 f302 	lsrs.w	r3, r5, r2
 800959c:	d07b      	beq.n	8009696 <LL_GPIO_Init+0x15a>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800959e:	fa0c f302 	lsl.w	r3, ip, r2
    if (currentpin != 0x00u)
 80095a2:	402b      	ands	r3, r5
 80095a4:	d0f7      	beq.n	8009596 <LL_GPIO_Init+0x5a>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80095a6:	684c      	ldr	r4, [r1, #4]
 80095a8:	f104 38ff 	add.w	r8, r4, #4294967295
 80095ac:	f1b8 0f01 	cmp.w	r8, #1
 80095b0:	d945      	bls.n	800963e <LL_GPIO_Init+0x102>
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80095b2:	f8d1 9010 	ldr.w	r9, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80095b6:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095ba:	fa93 f8a3 	rbit	r8, r3
  if (value == 0U)
 80095be:	f1b8 0f00 	cmp.w	r8, #0
 80095c2:	d007      	beq.n	80095d4 <LL_GPIO_Init+0x98>
  return __builtin_clz(value);
 80095c4:	fab8 f888 	clz	r8, r8
 80095c8:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80095cc:	fa0e f808 	lsl.w	r8, lr, r8
 80095d0:	ea2a 0a08 	bic.w	sl, sl, r8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095d4:	fa93 f8a3 	rbit	r8, r3
  if (value == 0U)
 80095d8:	f1b8 0f00 	cmp.w	r8, #0
 80095dc:	d060      	beq.n	80096a0 <LL_GPIO_Init+0x164>
  return __builtin_clz(value);
 80095de:	fab8 f888 	clz	r8, r8
 80095e2:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80095e6:	fa09 f808 	lsl.w	r8, r9, r8
 80095ea:	ea48 0a0a 	orr.w	sl, r8, sl
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80095ee:	2c02      	cmp	r4, #2
 80095f0:	f8c0 a00c 	str.w	sl, [r0, #12]
 80095f4:	d1b3      	bne.n	800955e <LL_GPIO_Init+0x22>
        if (currentpin < LL_GPIO_PIN_8)
 80095f6:	2bff      	cmp	r3, #255	; 0xff
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80095f8:	f8d1 9014 	ldr.w	r9, [r1, #20]
        if (currentpin < LL_GPIO_PIN_8)
 80095fc:	d853      	bhi.n	80096a6 <LL_GPIO_Init+0x16a>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80095fe:	f8d0 a020 	ldr.w	sl, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009602:	fa93 f8a3 	rbit	r8, r3
  if (value == 0U)
 8009606:	f1b8 0f00 	cmp.w	r8, #0
 800960a:	d008      	beq.n	800961e <LL_GPIO_Init+0xe2>
  return __builtin_clz(value);
 800960c:	fab8 f888 	clz	r8, r8
 8009610:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8009614:	260f      	movs	r6, #15
 8009616:	fa06 f808 	lsl.w	r8, r6, r8
 800961a:	ea2a 0a08 	bic.w	sl, sl, r8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800961e:	fa93 f8a3 	rbit	r8, r3
  if (value == 0U)
 8009622:	f1b8 0f00 	cmp.w	r8, #0
 8009626:	d063      	beq.n	80096f0 <LL_GPIO_Init+0x1b4>
  return __builtin_clz(value);
 8009628:	fab8 f888 	clz	r8, r8
 800962c:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8009630:	fa09 f808 	lsl.w	r8, r9, r8
 8009634:	ea48 0a0a 	orr.w	sl, r8, sl
 8009638:	f8c0 a020 	str.w	sl, [r0, #32]
}
 800963c:	e78f      	b.n	800955e <LL_GPIO_Init+0x22>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800963e:	f8d1 9008 	ldr.w	r9, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8009642:	f8d0 a008 	ldr.w	sl, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009646:	fa93 f8a3 	rbit	r8, r3
  if (value == 0U)
 800964a:	f1b8 0f00 	cmp.w	r8, #0
 800964e:	d007      	beq.n	8009660 <LL_GPIO_Init+0x124>
  return __builtin_clz(value);
 8009650:	fab8 f888 	clz	r8, r8
 8009654:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8009658:	fa0e f808 	lsl.w	r8, lr, r8
 800965c:	ea2a 0a08 	bic.w	sl, sl, r8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009660:	fa93 f8a3 	rbit	r8, r3
  if (value == 0U)
 8009664:	f1b8 0f00 	cmp.w	r8, #0
 8009668:	d03f      	beq.n	80096ea <LL_GPIO_Init+0x1ae>
  return __builtin_clz(value);
 800966a:	fab8 f888 	clz	r8, r8
 800966e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8009672:	fa09 f808 	lsl.w	r8, r9, r8
 8009676:	ea48 0a0a 	orr.w	sl, r8, sl
 800967a:	f8c0 a008 	str.w	sl, [r0, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800967e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8009682:	68ce      	ldr	r6, [r1, #12]
 8009684:	ea07 0808 	and.w	r8, r7, r8
 8009688:	fb06 f905 	mul.w	r9, r6, r5
 800968c:	ea48 0809 	orr.w	r8, r8, r9
 8009690:	f8c0 8004 	str.w	r8, [r0, #4]
}
 8009694:	e78d      	b.n	80095b2 <LL_GPIO_Init+0x76>
  }
  return (SUCCESS);
}
 8009696:	2000      	movs	r0, #0
 8009698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800969c:	2340      	movs	r3, #64	; 0x40
 800969e:	e775      	b.n	800958c <LL_GPIO_Init+0x50>
 80096a0:	f04f 0840 	mov.w	r8, #64	; 0x40
 80096a4:	e79f      	b.n	80095e6 <LL_GPIO_Init+0xaa>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80096a6:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 80096aa:	ea4f 2813 	mov.w	r8, r3, lsr #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096ae:	fa98 fba8 	rbit	fp, r8
  if (value == 0U)
 80096b2:	f1bb 0f00 	cmp.w	fp, #0
 80096b6:	d008      	beq.n	80096ca <LL_GPIO_Init+0x18e>
  return __builtin_clz(value);
 80096b8:	fabb fb8b 	clz	fp, fp
 80096bc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80096c0:	260f      	movs	r6, #15
 80096c2:	fa06 fb0b 	lsl.w	fp, r6, fp
 80096c6:	ea2a 0a0b 	bic.w	sl, sl, fp
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096ca:	fa98 f8a8 	rbit	r8, r8
  if (value == 0U)
 80096ce:	f1b8 0f00 	cmp.w	r8, #0
 80096d2:	d010      	beq.n	80096f6 <LL_GPIO_Init+0x1ba>
  return __builtin_clz(value);
 80096d4:	fab8 f888 	clz	r8, r8
 80096d8:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80096dc:	fa09 f808 	lsl.w	r8, r9, r8
 80096e0:	ea48 0a0a 	orr.w	sl, r8, sl
 80096e4:	f8c0 a024 	str.w	sl, [r0, #36]	; 0x24
}
 80096e8:	e739      	b.n	800955e <LL_GPIO_Init+0x22>
 80096ea:	f04f 0840 	mov.w	r8, #64	; 0x40
 80096ee:	e7c0      	b.n	8009672 <LL_GPIO_Init+0x136>
 80096f0:	f04f 0880 	mov.w	r8, #128	; 0x80
 80096f4:	e79c      	b.n	8009630 <LL_GPIO_Init+0xf4>
 80096f6:	f04f 0880 	mov.w	r8, #128	; 0x80
 80096fa:	e7ef      	b.n	80096dc <LL_GPIO_Init+0x1a0>

080096fc <LL_OPAMP_Init>:
  * @param  OPAMPx OPAMP instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_OPAMP_IsLocked(OPAMP_TypeDef *OPAMPx)
{
  return ((READ_BIT(OPAMPx->CSR, OPAMP_CSR_LOCK) == (OPAMP_CSR_LOCK)) ? 1UL : 0UL);
 80096fc:	6803      	ldr	r3, [r0, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	db23      	blt.n	800974a <LL_OPAMP_Init+0x4e>
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: OPAMP registers are initialized
  *          - ERROR: OPAMP registers are not initialized
  */
ErrorStatus LL_OPAMP_Init(OPAMP_TypeDef *OPAMPx, LL_OPAMP_InitTypeDef *OPAMP_InitStruct)
{
 8009702:	b410      	push	{r4}

  /* Note: OPAMP inverting input can be used with OPAMP in mode standalone    */
  /*       or PGA with external capacitors for filtering circuit.             */
  /*       Otherwise (OPAMP in mode follower), OPAMP inverting input is       */
  /*       not used (not connected to GPIO pin).                              */
  if (OPAMP_InitStruct->FunctionalMode != LL_OPAMP_MODE_FOLLOWER)
 8009704:	684c      	ldr	r4, [r1, #4]
    /*  - Input non-inverting                                                 */
    /*  - Input inverting                                                     */
    /* Note: Bit OPAMP_CSR_CALON reset to ensure to be in functional mode.    */
    if (OPAMP_InitStruct->FunctionalMode != LL_OPAMP_MODE_FOLLOWER)
    {
      MODIFY_REG(OPAMPx->CSR,
 8009706:	6803      	ldr	r3, [r0, #0]
    if (OPAMP_InitStruct->FunctionalMode != LL_OPAMP_MODE_FOLLOWER)
 8009708:	2c60      	cmp	r4, #96	; 0x60
 800970a:	d00f      	beq.n	800972c <LL_OPAMP_Init+0x30>
      MODIFY_REG(OPAMPx->CSR,
 800970c:	f423 23c1 	bic.w	r3, r3, #395264	; 0x60800
 8009710:	680a      	ldr	r2, [r1, #0]
 8009712:	f023 03ec 	bic.w	r3, r3, #236	; 0xec
 8009716:	4323      	orrs	r3, r4
 8009718:	4313      	orrs	r3, r2
 800971a:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 800971e:	4323      	orrs	r3, r4
 8009720:	4313      	orrs	r3, r2
 8009722:	6003      	str	r3, [r0, #0]
    /* Initialization error: OPAMP instance is locked.                        */
    status = ERROR;
  }

  return status;
}
 8009724:	f85d 4b04 	ldr.w	r4, [sp], #4
  ErrorStatus status = SUCCESS;
 8009728:	2000      	movs	r0, #0
}
 800972a:	4770      	bx	lr
      MODIFY_REG(OPAMPx->CSR,
 800972c:	688c      	ldr	r4, [r1, #8]
 800972e:	680a      	ldr	r2, [r1, #0]
 8009730:	f423 23c1 	bic.w	r3, r3, #395264	; 0x60800
 8009734:	f023 03ec 	bic.w	r3, r3, #236	; 0xec
 8009738:	4323      	orrs	r3, r4
 800973a:	4313      	orrs	r3, r2
 800973c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009740:	6003      	str	r3, [r0, #0]
}
 8009742:	f85d 4b04 	ldr.w	r4, [sp], #4
  ErrorStatus status = SUCCESS;
 8009746:	2000      	movs	r0, #0
}
 8009748:	4770      	bx	lr
    status = ERROR;
 800974a:	2001      	movs	r0, #1
}
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop

08009750 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009750:	4a30      	ldr	r2, [pc, #192]	; (8009814 <LL_TIM_Init+0xc4>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8009752:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009754:	4290      	cmp	r0, r2
{
 8009756:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009758:	d03f      	beq.n	80097da <LL_TIM_Init+0x8a>
 800975a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800975e:	d028      	beq.n	80097b2 <LL_TIM_Init+0x62>
 8009760:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009764:	4290      	cmp	r0, r2
 8009766:	d024      	beq.n	80097b2 <LL_TIM_Init+0x62>
 8009768:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800976c:	4290      	cmp	r0, r2
 800976e:	d020      	beq.n	80097b2 <LL_TIM_Init+0x62>
 8009770:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009774:	4290      	cmp	r0, r2
 8009776:	d01c      	beq.n	80097b2 <LL_TIM_Init+0x62>
 8009778:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800977c:	4290      	cmp	r0, r2
 800977e:	d03e      	beq.n	80097fe <LL_TIM_Init+0xae>
 8009780:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8009784:	4290      	cmp	r0, r2
 8009786:	d040      	beq.n	800980a <LL_TIM_Init+0xba>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009788:	4a23      	ldr	r2, [pc, #140]	; (8009818 <LL_TIM_Init+0xc8>)
 800978a:	4290      	cmp	r0, r2
 800978c:	d035      	beq.n	80097fa <LL_TIM_Init+0xaa>
 800978e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009792:	4290      	cmp	r0, r2
 8009794:	d031      	beq.n	80097fa <LL_TIM_Init+0xaa>
 8009796:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800979a:	4290      	cmp	r0, r2
 800979c:	d02d      	beq.n	80097fa <LL_TIM_Init+0xaa>
 800979e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097a2:	4290      	cmp	r0, r2
 80097a4:	d029      	beq.n	80097fa <LL_TIM_Init+0xaa>

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80097a6:	688c      	ldr	r4, [r1, #8]

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80097a8:	880a      	ldrh	r2, [r1, #0]
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80097aa:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80097ac:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 80097ae:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097b0:	e00c      	b.n	80097cc <LL_TIM_Init+0x7c>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80097b2:	684a      	ldr	r2, [r1, #4]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80097b4:	68cd      	ldr	r5, [r1, #12]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80097b6:	688c      	ldr	r4, [r1, #8]
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80097b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097bc:	4313      	orrs	r3, r2
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80097be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80097c2:	880a      	ldrh	r2, [r1, #0]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80097c4:	432b      	orrs	r3, r5
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80097c6:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80097c8:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 80097ca:	6282      	str	r2, [r0, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80097cc:	6943      	ldr	r3, [r0, #20]
 80097ce:	f043 0301 	orr.w	r3, r3, #1
 80097d2:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 80097d4:	bc30      	pop	{r4, r5}
 80097d6:	2000      	movs	r0, #0
 80097d8:	4770      	bx	lr
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80097da:	684c      	ldr	r4, [r1, #4]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80097dc:	68ca      	ldr	r2, [r1, #12]
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80097de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097e2:	4323      	orrs	r3, r4
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80097e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097e8:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80097ea:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80097ec:	688a      	ldr	r2, [r1, #8]
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80097ee:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80097f0:	62c2      	str	r2, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 80097f2:	6283      	str	r3, [r0, #40]	; 0x28
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80097f4:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80097f6:	6303      	str	r3, [r0, #48]	; 0x30
}
 80097f8:	e7e8      	b.n	80097cc <LL_TIM_Init+0x7c>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80097fa:	68ca      	ldr	r2, [r1, #12]
 80097fc:	e7f2      	b.n	80097e4 <LL_TIM_Init+0x94>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80097fe:	684c      	ldr	r4, [r1, #4]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8009800:	68ca      	ldr	r2, [r1, #12]
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8009802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009806:	4323      	orrs	r3, r4
 8009808:	e7ec      	b.n	80097e4 <LL_TIM_Init+0x94>
 800980a:	684a      	ldr	r2, [r1, #4]
 800980c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009810:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009812:	e7b9      	b.n	8009788 <LL_TIM_Init+0x38>
 8009814:	40012c00 	.word	0x40012c00
 8009818:	40014000 	.word	0x40014000

0800981c <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 800981c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
{
 8009820:	b430      	push	{r4, r5}
  switch (Channel)
 8009822:	f000 8123 	beq.w	8009a6c <LL_TIM_OC_Init+0x250>
 8009826:	d851      	bhi.n	80098cc <LL_TIM_OC_Init+0xb0>
 8009828:	2910      	cmp	r1, #16
 800982a:	f000 816d 	beq.w	8009b08 <LL_TIM_OC_Init+0x2ec>
 800982e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8009832:	f040 8090 	bne.w	8009956 <LL_TIM_OC_Init+0x13a>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8009836:	6a03      	ldr	r3, [r0, #32]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8009838:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800983a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800983e:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8009840:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8009842:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8009844:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8009846:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800984a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800984e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8009852:	6815      	ldr	r5, [r2, #0]
 8009854:	f021 0173 	bic.w	r1, r1, #115	; 0x73
 8009858:	4329      	orrs	r1, r5

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800985a:	6855      	ldr	r5, [r2, #4]
 800985c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009860:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009864:	4da7      	ldr	r5, [pc, #668]	; (8009b04 <LL_TIM_OC_Init+0x2e8>)
 8009866:	42a8      	cmp	r0, r5
 8009868:	d013      	beq.n	8009892 <LL_TIM_OC_Init+0x76>
 800986a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800986e:	42a8      	cmp	r0, r5
 8009870:	d00f      	beq.n	8009892 <LL_TIM_OC_Init+0x76>
 8009872:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8009876:	42a8      	cmp	r0, r5
 8009878:	d00b      	beq.n	8009892 <LL_TIM_OC_Init+0x76>
 800987a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800987e:	42a8      	cmp	r0, r5
 8009880:	d007      	beq.n	8009892 <LL_TIM_OC_Init+0x76>
 8009882:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009886:	42a8      	cmp	r0, r5
 8009888:	d003      	beq.n	8009892 <LL_TIM_OC_Init+0x76>
 800988a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800988e:	42a8      	cmp	r0, r5
 8009890:	d113      	bne.n	80098ba <LL_TIM_OC_Init+0x9e>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8009892:	6955      	ldr	r5, [r2, #20]
 8009894:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009898:	ea43 2385 	orr.w	r3, r3, r5, lsl #10

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800989c:	6995      	ldr	r5, [r2, #24]
 800989e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80098a2:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80098a6:	6895      	ldr	r5, [r2, #8]
 80098a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80098ac:	ea43 2385 	orr.w	r3, r3, r5, lsl #10

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80098b0:	69d5      	ldr	r5, [r2, #28]
 80098b2:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
 80098b6:	ea44 1445 	orr.w	r4, r4, r5, lsl #5

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80098ba:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80098bc:	6044      	str	r4, [r0, #4]
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80098be:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80098c0:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80098c2:	63c5      	str	r5, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80098c4:	6203      	str	r3, [r0, #32]
}
 80098c6:	bc30      	pop	{r4, r5}
 80098c8:	4610      	mov	r0, r2
 80098ca:	4770      	bx	lr
  switch (Channel)
 80098cc:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80098d0:	f000 808f 	beq.w	80099f2 <LL_TIM_OC_Init+0x1d6>
 80098d4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80098d8:	f040 8087 	bne.w	80099ea <LL_TIM_OC_Init+0x1ce>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80098dc:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80098de:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80098e0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80098e4:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80098e6:	6a03      	ldr	r3, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80098e8:	6d01      	ldr	r1, [r0, #80]	; 0x50
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80098ea:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80098ee:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80098f2:	ea41 2104 	orr.w	r1, r1, r4, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80098f6:	6914      	ldr	r4, [r2, #16]
 80098f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80098fc:	ea43 5304 	orr.w	r3, r3, r4, lsl #20

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8009900:	6854      	ldr	r4, [r2, #4]
 8009902:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009906:	ea43 5304 	orr.w	r3, r3, r4, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800990a:	4c7e      	ldr	r4, [pc, #504]	; (8009b04 <LL_TIM_OC_Init+0x2e8>)
 800990c:	42a0      	cmp	r0, r4
 800990e:	d013      	beq.n	8009938 <LL_TIM_OC_Init+0x11c>
 8009910:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8009914:	42a0      	cmp	r0, r4
 8009916:	d00f      	beq.n	8009938 <LL_TIM_OC_Init+0x11c>
 8009918:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 800991c:	42a0      	cmp	r0, r4
 800991e:	d00b      	beq.n	8009938 <LL_TIM_OC_Init+0x11c>
 8009920:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009924:	42a0      	cmp	r0, r4
 8009926:	d007      	beq.n	8009938 <LL_TIM_OC_Init+0x11c>
 8009928:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800992c:	42a0      	cmp	r0, r4
 800992e:	d003      	beq.n	8009938 <LL_TIM_OC_Init+0x11c>
 8009930:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8009934:	42a0      	cmp	r0, r4
 8009936:	d106      	bne.n	8009946 <LL_TIM_OC_Init+0x12a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8009938:	6844      	ldr	r4, [r0, #4]
 800993a:	6995      	ldr	r5, [r2, #24]
 800993c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8009940:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 8009944:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8009946:	68d4      	ldr	r4, [r2, #12]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8009948:	6501      	str	r1, [r0, #80]	; 0x50
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800994a:	2200      	movs	r2, #0
  WRITE_REG(TIMx->CCR6, CompareValue);
 800994c:	64c4      	str	r4, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800994e:	6203      	str	r3, [r0, #32]
}
 8009950:	bc30      	pop	{r4, r5}
 8009952:	4610      	mov	r0, r2
 8009954:	4770      	bx	lr
  switch (Channel)
 8009956:	2901      	cmp	r1, #1
 8009958:	d147      	bne.n	80099ea <LL_TIM_OC_Init+0x1ce>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800995a:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800995c:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800995e:	f023 0301 	bic.w	r3, r3, #1
 8009962:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8009964:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8009966:	6844      	ldr	r4, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8009968:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800996a:	f023 0302 	bic.w	r3, r3, #2
 800996e:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8009970:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8009974:	6815      	ldr	r5, [r2, #0]
 8009976:	f021 0173 	bic.w	r1, r1, #115	; 0x73
 800997a:	4329      	orrs	r1, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800997c:	6855      	ldr	r5, [r2, #4]
 800997e:	f023 0301 	bic.w	r3, r3, #1
 8009982:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009984:	4d5f      	ldr	r5, [pc, #380]	; (8009b04 <LL_TIM_OC_Init+0x2e8>)
 8009986:	42a8      	cmp	r0, r5
 8009988:	d013      	beq.n	80099b2 <LL_TIM_OC_Init+0x196>
 800998a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800998e:	42a8      	cmp	r0, r5
 8009990:	d00f      	beq.n	80099b2 <LL_TIM_OC_Init+0x196>
 8009992:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8009996:	42a8      	cmp	r0, r5
 8009998:	d00b      	beq.n	80099b2 <LL_TIM_OC_Init+0x196>
 800999a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800999e:	42a8      	cmp	r0, r5
 80099a0:	d007      	beq.n	80099b2 <LL_TIM_OC_Init+0x196>
 80099a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80099a6:	42a8      	cmp	r0, r5
 80099a8:	d003      	beq.n	80099b2 <LL_TIM_OC_Init+0x196>
 80099aa:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80099ae:	42a8      	cmp	r0, r5
 80099b0:	d112      	bne.n	80099d8 <LL_TIM_OC_Init+0x1bc>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80099b2:	6955      	ldr	r5, [r2, #20]
 80099b4:	f023 0308 	bic.w	r3, r3, #8
 80099b8:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80099bc:	6995      	ldr	r5, [r2, #24]
 80099be:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 80099c2:	432c      	orrs	r4, r5
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80099c4:	6895      	ldr	r5, [r2, #8]
 80099c6:	f023 0304 	bic.w	r3, r3, #4
 80099ca:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80099ce:	69d5      	ldr	r5, [r2, #28]
 80099d0:	f424 7400 	bic.w	r4, r4, #512	; 0x200
 80099d4:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80099d8:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80099da:	6044      	str	r4, [r0, #4]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80099dc:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80099de:	6181      	str	r1, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80099e0:	6345      	str	r5, [r0, #52]	; 0x34
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80099e2:	6203      	str	r3, [r0, #32]
}
 80099e4:	bc30      	pop	{r4, r5}
 80099e6:	4610      	mov	r0, r2
 80099e8:	4770      	bx	lr
  switch (Channel)
 80099ea:	2201      	movs	r2, #1
}
 80099ec:	4610      	mov	r0, r2
 80099ee:	bc30      	pop	{r4, r5}
 80099f0:	4770      	bx	lr
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80099f2:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80099f4:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80099f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099fa:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80099fc:	6a03      	ldr	r3, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80099fe:	6d01      	ldr	r1, [r0, #80]	; 0x50
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8009a00:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8009a04:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009a08:	4321      	orrs	r1, r4
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8009a0a:	6914      	ldr	r4, [r2, #16]
 8009a0c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009a10:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8009a14:	6854      	ldr	r4, [r2, #4]
 8009a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a1e:	4c39      	ldr	r4, [pc, #228]	; (8009b04 <LL_TIM_OC_Init+0x2e8>)
 8009a20:	42a0      	cmp	r0, r4
 8009a22:	d013      	beq.n	8009a4c <LL_TIM_OC_Init+0x230>
 8009a24:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8009a28:	42a0      	cmp	r0, r4
 8009a2a:	d00f      	beq.n	8009a4c <LL_TIM_OC_Init+0x230>
 8009a2c:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8009a30:	42a0      	cmp	r0, r4
 8009a32:	d00b      	beq.n	8009a4c <LL_TIM_OC_Init+0x230>
 8009a34:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009a38:	42a0      	cmp	r0, r4
 8009a3a:	d007      	beq.n	8009a4c <LL_TIM_OC_Init+0x230>
 8009a3c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009a40:	42a0      	cmp	r0, r4
 8009a42:	d003      	beq.n	8009a4c <LL_TIM_OC_Init+0x230>
 8009a44:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8009a48:	42a0      	cmp	r0, r4
 8009a4a:	d106      	bne.n	8009a5a <LL_TIM_OC_Init+0x23e>
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8009a4c:	6844      	ldr	r4, [r0, #4]
 8009a4e:	6995      	ldr	r5, [r2, #24]
 8009a50:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8009a54:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8009a58:	6044      	str	r4, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8009a5a:	6501      	str	r1, [r0, #80]	; 0x50
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8009a5c:	68d1      	ldr	r1, [r2, #12]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8009a5e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8009a60:	6481      	str	r1, [r0, #72]	; 0x48
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8009a62:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009a64:	6203      	str	r3, [r0, #32]
}
 8009a66:	bc30      	pop	{r4, r5}
 8009a68:	4610      	mov	r0, r2
 8009a6a:	4770      	bx	lr
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8009a6c:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8009a6e:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8009a70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a74:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8009a76:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8009a78:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8009a7a:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8009a7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a80:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8009a84:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8009a88:	6815      	ldr	r5, [r2, #0]
 8009a8a:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8009a8e:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8009a92:	6855      	ldr	r5, [r2, #4]
 8009a94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a98:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a9c:	4d19      	ldr	r5, [pc, #100]	; (8009b04 <LL_TIM_OC_Init+0x2e8>)
 8009a9e:	42a8      	cmp	r0, r5
 8009aa0:	d013      	beq.n	8009aca <LL_TIM_OC_Init+0x2ae>
 8009aa2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009aa6:	42a8      	cmp	r0, r5
 8009aa8:	d00f      	beq.n	8009aca <LL_TIM_OC_Init+0x2ae>
 8009aaa:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8009aae:	42a8      	cmp	r0, r5
 8009ab0:	d00b      	beq.n	8009aca <LL_TIM_OC_Init+0x2ae>
 8009ab2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009ab6:	42a8      	cmp	r0, r5
 8009ab8:	d007      	beq.n	8009aca <LL_TIM_OC_Init+0x2ae>
 8009aba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009abe:	42a8      	cmp	r0, r5
 8009ac0:	d003      	beq.n	8009aca <LL_TIM_OC_Init+0x2ae>
 8009ac2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009ac6:	42a8      	cmp	r0, r5
 8009ac8:	d113      	bne.n	8009af2 <LL_TIM_OC_Init+0x2d6>
    MODIFY_REG(tmpccer, TIM_CCER_CC4NP, TIM_OCInitStruct->OCNPolarity << 14U);
 8009aca:	6955      	ldr	r5, [r2, #20]
 8009acc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009ad0:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8009ad4:	6995      	ldr	r5, [r2, #24]
 8009ad6:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 8009ada:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC4NE, TIM_OCInitStruct->OCNState << 14U);
 8009ade:	6895      	ldr	r5, [r2, #8]
 8009ae0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ae4:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4N, TIM_OCInitStruct->OCNIdleState << 7U);
 8009ae8:	69d5      	ldr	r5, [r2, #28]
 8009aea:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
 8009aee:	ea44 14c5 	orr.w	r4, r4, r5, lsl #7
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8009af2:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8009af4:	6044      	str	r4, [r0, #4]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8009af6:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8009af8:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009afa:	6405      	str	r5, [r0, #64]	; 0x40
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009afc:	6203      	str	r3, [r0, #32]
}
 8009afe:	bc30      	pop	{r4, r5}
 8009b00:	4610      	mov	r0, r2
 8009b02:	4770      	bx	lr
 8009b04:	40012c00 	.word	0x40012c00
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8009b08:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8009b0a:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8009b0c:	f023 0310 	bic.w	r3, r3, #16
 8009b10:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8009b12:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8009b14:	6844      	ldr	r4, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8009b16:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8009b18:	f023 0320 	bic.w	r3, r3, #32
 8009b1c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8009b20:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8009b24:	6815      	ldr	r5, [r2, #0]
 8009b26:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8009b2a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8009b2e:	6855      	ldr	r5, [r2, #4]
 8009b30:	f023 0310 	bic.w	r3, r3, #16
 8009b34:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b38:	4d19      	ldr	r5, [pc, #100]	; (8009ba0 <LL_TIM_OC_Init+0x384>)
 8009b3a:	42a8      	cmp	r0, r5
 8009b3c:	d013      	beq.n	8009b66 <LL_TIM_OC_Init+0x34a>
 8009b3e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009b42:	42a8      	cmp	r0, r5
 8009b44:	d00f      	beq.n	8009b66 <LL_TIM_OC_Init+0x34a>
 8009b46:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8009b4a:	42a8      	cmp	r0, r5
 8009b4c:	d00b      	beq.n	8009b66 <LL_TIM_OC_Init+0x34a>
 8009b4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009b52:	42a8      	cmp	r0, r5
 8009b54:	d007      	beq.n	8009b66 <LL_TIM_OC_Init+0x34a>
 8009b56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009b5a:	42a8      	cmp	r0, r5
 8009b5c:	d003      	beq.n	8009b66 <LL_TIM_OC_Init+0x34a>
 8009b5e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009b62:	42a8      	cmp	r0, r5
 8009b64:	d113      	bne.n	8009b8e <LL_TIM_OC_Init+0x372>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8009b66:	6955      	ldr	r5, [r2, #20]
 8009b68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b6c:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8009b70:	6995      	ldr	r5, [r2, #24]
 8009b72:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8009b76:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8009b7a:	6895      	ldr	r5, [r2, #8]
 8009b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b80:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8009b84:	69d5      	ldr	r5, [r2, #28]
 8009b86:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8009b8a:	ea44 04c5 	orr.w	r4, r4, r5, lsl #3
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8009b8e:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8009b90:	6044      	str	r4, [r0, #4]
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8009b92:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8009b94:	6181      	str	r1, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009b96:	6385      	str	r5, [r0, #56]	; 0x38
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009b98:	6203      	str	r3, [r0, #32]
}
 8009b9a:	bc30      	pop	{r4, r5}
 8009b9c:	4610      	mov	r0, r2
 8009b9e:	4770      	bx	lr
 8009ba0:	40012c00 	.word	0x40012c00

08009ba4 <LL_TIM_BDTR_Init>:
{
 8009ba4:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8009ba6:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8009baa:	7b0a      	ldrb	r2, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8009bac:	4322      	orrs	r2, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8009bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8009bb2:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8009bb4:	431a      	orrs	r2, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8009bb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009bba:	4322      	orrs	r2, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8009bbc:	89cb      	ldrh	r3, [r1, #14]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8009bbe:	690c      	ldr	r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8009bc0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009bc4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8009bc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8009bca:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8009bcc:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8009bce:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8009bd2:	4313      	orrs	r3, r2
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 8009bd4:	4a13      	ldr	r2, [pc, #76]	; (8009c24 <LL_TIM_BDTR_Init+0x80>)
 8009bd6:	4290      	cmp	r0, r2
 8009bd8:	d007      	beq.n	8009bea <LL_TIM_BDTR_Init+0x46>
 8009bda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bde:	4290      	cmp	r0, r2
 8009be0:	d003      	beq.n	8009bea <LL_TIM_BDTR_Init+0x46>
 8009be2:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8009be6:	4290      	cmp	r0, r2
 8009be8:	d117      	bne.n	8009c1a <LL_TIM_BDTR_Init+0x76>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 8009bea:	694c      	ldr	r4, [r1, #20]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
 8009bec:	698a      	ldr	r2, [r1, #24]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 8009bee:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8009bf2:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
 8009bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8009bf8:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
 8009bfa:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8009bfc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8009c00:	69ca      	ldr	r2, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8009c02:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8009c04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c08:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8009c0a:	6a0c      	ldr	r4, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, TIM_BDTRInitStruct->Break2AFMode);
 8009c0c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8009c0e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009c12:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, TIM_BDTRInitStruct->Break2AFMode);
 8009c14:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009c18:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8009c1a:	6443      	str	r3, [r0, #68]	; 0x44
}
 8009c1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c20:	2000      	movs	r0, #0
 8009c22:	4770      	bx	lr
 8009c24:	40012c00 	.word	0x40012c00

08009c28 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8009c28:	4b01      	ldr	r3, [pc, #4]	; (8009c30 <LL_SetSystemCoreClock+0x8>)
 8009c2a:	6018      	str	r0, [r3, #0]
}
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	2000001c 	.word	0x2000001c

08009c34 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8009c34:	b508      	push	{r3, lr}
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8009c36:	4906      	ldr	r1, [pc, #24]	; (8009c50 <MX_FATFS_Init+0x1c>)
 8009c38:	4806      	ldr	r0, [pc, #24]	; (8009c54 <MX_FATFS_Init+0x20>)
 8009c3a:	f000 fdef 	bl	800a81c <FATFS_LinkDriver>
 8009c3e:	b918      	cbnz	r0, 8009c48 <MX_FATFS_Init+0x14>
  {
    return APP_ERROR;
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8009c40:	4b05      	ldr	r3, [pc, #20]	; (8009c58 <MX_FATFS_Init+0x24>)
 8009c42:	2201      	movs	r2, #1
 8009c44:	701a      	strb	r2, [r3, #0]
    return APP_OK;
  }
  /* USER CODE END FATFS_Init */
}
 8009c46:	bd08      	pop	{r3, pc}
    return APP_ERROR;
 8009c48:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009c4c:	bd08      	pop	{r3, pc}
 8009c4e:	bf00      	nop
 8009c50:	20009424 	.word	0x20009424
 8009c54:	20000028 	.word	0x20000028
 8009c58:	20009420 	.word	0x20009420

08009c5c <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8009c5c:	f000 b95c 	b.w	8009f18 <USER_SPI_initialize>

08009c60 <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 8009c60:	f000 ba62 	b.w	800a128 <USER_SPI_status>

08009c64 <USER_read>:
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8009c64:	f000 ba6a 	b.w	800a13c <USER_SPI_read>

08009c68 <USER_write>:
	UINT count          /* Number of sectors to write */
)
{
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8009c68:	f000 bac8 	b.w	800a1fc <USER_SPI_write>

08009c6c <USER_ioctl>:
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8009c6c:	f000 bc2a 	b.w	800a4c4 <USER_SPI_ioctl>

08009c70 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8009c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c74:	b084      	sub	sp, #16
 8009c76:	4681      	mov	r9, r0
 8009c78:	468a      	mov	sl, r1
    spiTimerTickStart = HAL_GetTick();
 8009c7a:	f7fb fda1 	bl	80057c0 <HAL_GetTick>
 8009c7e:	4d2c      	ldr	r5, [pc, #176]	; (8009d30 <rcvr_datablock+0xc0>)
    spiTimerTickDelay = waitTicks;
 8009c80:	4c2c      	ldr	r4, [pc, #176]	; (8009d34 <rcvr_datablock+0xc4>)
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009c82:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8009d38 <rcvr_datablock+0xc8>
    spiTimerTickStart = HAL_GetTick();
 8009c86:	6028      	str	r0, [r5, #0]
    spiTimerTickDelay = waitTicks;
 8009c88:	23c8      	movs	r3, #200	; 0xc8
 8009c8a:	6023      	str	r3, [r4, #0]
 8009c8c:	27ff      	movs	r7, #255	; 0xff
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009c8e:	2632      	movs	r6, #50	; 0x32
}
 8009c90:	e006      	b.n	8009ca0 <rcvr_datablock+0x30>
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8009c92:	f7fb fd95 	bl	80057c0 <HAL_GetTick>
 8009c96:	682a      	ldr	r2, [r5, #0]

	SPI_Timer_On(200);
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8009c98:	6823      	ldr	r3, [r4, #0]
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8009c9a:	1a80      	subs	r0, r0, r2
	} while ((token == 0xFF) && SPI_Timer_Status());
 8009c9c:	4298      	cmp	r0, r3
 8009c9e:	d243      	bcs.n	8009d28 <rcvr_datablock+0xb8>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	f10d 020f 	add.w	r2, sp, #15
 8009ca6:	f10d 010e 	add.w	r1, sp, #14
 8009caa:	9600      	str	r6, [sp, #0]
 8009cac:	4640      	mov	r0, r8
 8009cae:	f88d 700e 	strb.w	r7, [sp, #14]
 8009cb2:	f7fe f867 	bl	8007d84 <HAL_SPI_TransmitReceive>
    return rxDat;
 8009cb6:	f89d 300f 	ldrb.w	r3, [sp, #15]
	} while ((token == 0xFF) && SPI_Timer_Status());
 8009cba:	2bff      	cmp	r3, #255	; 0xff
 8009cbc:	d0e9      	beq.n	8009c92 <rcvr_datablock+0x22>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8009cbe:	2bfe      	cmp	r3, #254	; 0xfe
 8009cc0:	d132      	bne.n	8009d28 <rcvr_datablock+0xb8>
 8009cc2:	f10a 3aff 	add.w	sl, sl, #4294967295
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009cc6:	4f1c      	ldr	r7, [pc, #112]	; (8009d38 <rcvr_datablock+0xc8>)
 8009cc8:	f109 34ff 	add.w	r4, r9, #4294967295
 8009ccc:	25ff      	movs	r5, #255	; 0xff
 8009cce:	44d1      	add	r9, sl
 8009cd0:	2632      	movs	r6, #50	; 0x32
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	9600      	str	r6, [sp, #0]
 8009cd6:	f10d 020f 	add.w	r2, sp, #15
 8009cda:	f10d 010e 	add.w	r1, sp, #14
 8009cde:	4638      	mov	r0, r7
 8009ce0:	f88d 500e 	strb.w	r5, [sp, #14]
 8009ce4:	f7fe f84e 	bl	8007d84 <HAL_SPI_TransmitReceive>
    return rxDat;
 8009ce8:	f89d 300f 	ldrb.w	r3, [sp, #15]
		*(buff+i) = xchg_spi(0xFF);
 8009cec:	f804 3f01 	strb.w	r3, [r4, #1]!
	for(UINT i=0; i<btr; i++) {
 8009cf0:	454c      	cmp	r4, r9
 8009cf2:	d1ee      	bne.n	8009cd2 <rcvr_datablock+0x62>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009cf4:	f10d 020f 	add.w	r2, sp, #15
 8009cf8:	f10d 010e 	add.w	r1, sp, #14
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	9600      	str	r6, [sp, #0]
 8009d00:	480d      	ldr	r0, [pc, #52]	; (8009d38 <rcvr_datablock+0xc8>)
 8009d02:	f88d 500e 	strb.w	r5, [sp, #14]
 8009d06:	f7fe f83d 	bl	8007d84 <HAL_SPI_TransmitReceive>
 8009d0a:	9600      	str	r6, [sp, #0]
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	f10d 020f 	add.w	r2, sp, #15
 8009d12:	f10d 010e 	add.w	r1, sp, #14
 8009d16:	4808      	ldr	r0, [pc, #32]	; (8009d38 <rcvr_datablock+0xc8>)
 8009d18:	f88d 500e 	strb.w	r5, [sp, #14]
 8009d1c:	f7fe f832 	bl	8007d84 <HAL_SPI_TransmitReceive>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8009d20:	2001      	movs	r0, #1

	return 1;						/* Function succeeded */
}
 8009d22:	b004      	add	sp, #16
 8009d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8009d28:	2000      	movs	r0, #0
}
 8009d2a:	b004      	add	sp, #16
 8009d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d30:	20009430 	.word	0x20009430
 8009d34:	2000942c 	.word	0x2000942c
 8009d38:	20009214 	.word	0x20009214

08009d3c <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8009d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8009d40:	0603      	lsls	r3, r0, #24
{
 8009d42:	b085      	sub	sp, #20
 8009d44:	4680      	mov	r8, r0
 8009d46:	468b      	mov	fp, r1
	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8009d48:	f100 80c0 	bmi.w	8009ecc <send_cmd+0x190>
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8009d4c:	f1b8 0f0c 	cmp.w	r8, #12
 8009d50:	f000 80a4 	beq.w	8009e9c <send_cmd+0x160>
	CS_HIGH();		/* Set CS# high */
 8009d54:	486e      	ldr	r0, [pc, #440]	; (8009f10 <send_cmd+0x1d4>)
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009d56:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 8009f14 <send_cmd+0x1d8>
	CS_HIGH();		/* Set CS# high */
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	f44f 7180 	mov.w	r1, #256	; 0x100
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009d60:	f10d 060f 	add.w	r6, sp, #15
 8009d64:	f10d 050e 	add.w	r5, sp, #14
 8009d68:	2732      	movs	r7, #50	; 0x32
	CS_HIGH();		/* Set CS# high */
 8009d6a:	f7fc f905 	bl	8005f78 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8009d6e:	24ff      	movs	r4, #255	; 0xff
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009d70:	2301      	movs	r3, #1
 8009d72:	4632      	mov	r2, r6
 8009d74:	4629      	mov	r1, r5
 8009d76:	4867      	ldr	r0, [pc, #412]	; (8009f14 <send_cmd+0x1d8>)
 8009d78:	9700      	str	r7, [sp, #0]
 8009d7a:	f88d 400e 	strb.w	r4, [sp, #14]
 8009d7e:	f7fe f801 	bl	8007d84 <HAL_SPI_TransmitReceive>
	CS_LOW();		/* Set CS# low */
 8009d82:	4863      	ldr	r0, [pc, #396]	; (8009f10 <send_cmd+0x1d4>)
 8009d84:	2200      	movs	r2, #0
 8009d86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009d8a:	f7fc f8f5 	bl	8005f78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009d8e:	2301      	movs	r3, #1
 8009d90:	4632      	mov	r2, r6
 8009d92:	4629      	mov	r1, r5
 8009d94:	485f      	ldr	r0, [pc, #380]	; (8009f14 <send_cmd+0x1d8>)
 8009d96:	9700      	str	r7, [sp, #0]
 8009d98:	f88d 400e 	strb.w	r4, [sp, #14]
 8009d9c:	f7fd fff2 	bl	8007d84 <HAL_SPI_TransmitReceive>
	waitSpiTimerTickStart = HAL_GetTick();
 8009da0:	f7fb fd0e 	bl	80057c0 <HAL_GetTick>
 8009da4:	4681      	mov	r9, r0
	waitSpiTimerTickDelay = (uint32_t)wt;
 8009da6:	e006      	b.n	8009db6 <send_cmd+0x7a>
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8009da8:	f7fb fd0a 	bl	80057c0 <HAL_GetTick>
 8009dac:	eba0 0009 	sub.w	r0, r0, r9
 8009db0:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8009db4:	d277      	bcs.n	8009ea6 <send_cmd+0x16a>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009db6:	2301      	movs	r3, #1
 8009db8:	4632      	mov	r2, r6
 8009dba:	4629      	mov	r1, r5
 8009dbc:	9700      	str	r7, [sp, #0]
 8009dbe:	4650      	mov	r0, sl
 8009dc0:	f88d 400e 	strb.w	r4, [sp, #14]
 8009dc4:	f7fd ffde 	bl	8007d84 <HAL_SPI_TransmitReceive>
    return rxDat;
 8009dc8:	f89d 300f 	ldrb.w	r3, [sp, #15]
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8009dcc:	2bff      	cmp	r3, #255	; 0xff
 8009dce:	d1eb      	bne.n	8009da8 <send_cmd+0x6c>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009dd0:	2432      	movs	r4, #50	; 0x32
		despiselect();
		if (!spiselect()) return 0xFF;
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8009dd2:	f048 0340 	orr.w	r3, r8, #64	; 0x40
 8009dd6:	f88d 300e 	strb.w	r3, [sp, #14]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009dda:	4632      	mov	r2, r6
 8009ddc:	2301      	movs	r3, #1
 8009dde:	4629      	mov	r1, r5
 8009de0:	484c      	ldr	r0, [pc, #304]	; (8009f14 <send_cmd+0x1d8>)
 8009de2:	9400      	str	r4, [sp, #0]
 8009de4:	f7fd ffce 	bl	8007d84 <HAL_SPI_TransmitReceive>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8009de8:	ea4f 671b 	mov.w	r7, fp, lsr #24
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009dec:	2301      	movs	r3, #1
 8009dee:	4632      	mov	r2, r6
 8009df0:	4629      	mov	r1, r5
 8009df2:	4848      	ldr	r0, [pc, #288]	; (8009f14 <send_cmd+0x1d8>)
 8009df4:	9400      	str	r4, [sp, #0]
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8009df6:	f88d 700e 	strb.w	r7, [sp, #14]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009dfa:	f7fd ffc3 	bl	8007d84 <HAL_SPI_TransmitReceive>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8009dfe:	ea4f 471b 	mov.w	r7, fp, lsr #16
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009e02:	2301      	movs	r3, #1
 8009e04:	4632      	mov	r2, r6
 8009e06:	4629      	mov	r1, r5
 8009e08:	4842      	ldr	r0, [pc, #264]	; (8009f14 <send_cmd+0x1d8>)
 8009e0a:	9400      	str	r4, [sp, #0]
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8009e0c:	f88d 700e 	strb.w	r7, [sp, #14]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009e10:	f7fd ffb8 	bl	8007d84 <HAL_SPI_TransmitReceive>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8009e14:	ea4f 271b 	mov.w	r7, fp, lsr #8
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009e18:	2301      	movs	r3, #1
 8009e1a:	4632      	mov	r2, r6
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	483d      	ldr	r0, [pc, #244]	; (8009f14 <send_cmd+0x1d8>)
 8009e20:	9400      	str	r4, [sp, #0]
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8009e22:	f88d 700e 	strb.w	r7, [sp, #14]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009e26:	f7fd ffad 	bl	8007d84 <HAL_SPI_TransmitReceive>
 8009e2a:	483a      	ldr	r0, [pc, #232]	; (8009f14 <send_cmd+0x1d8>)
 8009e2c:	9400      	str	r4, [sp, #0]
 8009e2e:	2301      	movs	r3, #1
 8009e30:	4632      	mov	r2, r6
 8009e32:	4629      	mov	r1, r5
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8009e34:	f88d b00e 	strb.w	fp, [sp, #14]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009e38:	f7fd ffa4 	bl	8007d84 <HAL_SPI_TransmitReceive>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8009e3c:	f1b8 0f00 	cmp.w	r8, #0
 8009e40:	d02a      	beq.n	8009e98 <send_cmd+0x15c>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8009e42:	f1b8 0f08 	cmp.w	r8, #8
 8009e46:	d14a      	bne.n	8009ede <send_cmd+0x1a2>
	xchg_spi(n);
 8009e48:	2187      	movs	r1, #135	; 0x87
 8009e4a:	f88d 100e 	strb.w	r1, [sp, #14]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009e4e:	4831      	ldr	r0, [pc, #196]	; (8009f14 <send_cmd+0x1d8>)
 8009e50:	9400      	str	r4, [sp, #0]
 8009e52:	2301      	movs	r3, #1
 8009e54:	4632      	mov	r2, r6
 8009e56:	4629      	mov	r1, r5
 8009e58:	f7fd ff94 	bl	8007d84 <HAL_SPI_TransmitReceive>
 8009e5c:	4f2d      	ldr	r7, [pc, #180]	; (8009f14 <send_cmd+0x1d8>)
{
 8009e5e:	240a      	movs	r4, #10
 8009e60:	f04f 09ff 	mov.w	r9, #255	; 0xff
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009e64:	f04f 0832 	mov.w	r8, #50	; 0x32
 8009e68:	2301      	movs	r3, #1
 8009e6a:	4632      	mov	r2, r6
 8009e6c:	f8cd 8000 	str.w	r8, [sp]
 8009e70:	4629      	mov	r1, r5
 8009e72:	4638      	mov	r0, r7
 8009e74:	f88d 900e 	strb.w	r9, [sp, #14]
 8009e78:	f7fd ff84 	bl	8007d84 <HAL_SPI_TransmitReceive>
	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
	n = 10;								/* Wait for response (10 bytes max) */
	do {
		res = xchg_spi(0xFF);
	} while ((res & 0x80) && --n);
 8009e7c:	f99d 200f 	ldrsb.w	r2, [sp, #15]
    return rxDat;
 8009e80:	f89d 000f 	ldrb.w	r0, [sp, #15]
	} while ((res & 0x80) && --n);
 8009e84:	2a00      	cmp	r2, #0
 8009e86:	f104 33ff 	add.w	r3, r4, #4294967295
 8009e8a:	da02      	bge.n	8009e92 <send_cmd+0x156>
 8009e8c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8009e90:	d1ea      	bne.n	8009e68 <send_cmd+0x12c>

	return res;							/* Return received response */
}
 8009e92:	b005      	add	sp, #20
 8009e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	xchg_spi(n);
 8009e98:	2195      	movs	r1, #149	; 0x95
 8009e9a:	e7d6      	b.n	8009e4a <send_cmd+0x10e>
 8009e9c:	f10d 060f 	add.w	r6, sp, #15
 8009ea0:	f10d 050e 	add.w	r5, sp, #14
 8009ea4:	e794      	b.n	8009dd0 <send_cmd+0x94>
	CS_HIGH();		/* Set CS# high */
 8009ea6:	481a      	ldr	r0, [pc, #104]	; (8009f10 <send_cmd+0x1d4>)
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009eae:	f7fc f863 	bl	8005f78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009eb2:	9700      	str	r7, [sp, #0]
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	4632      	mov	r2, r6
 8009eb8:	4629      	mov	r1, r5
 8009eba:	4816      	ldr	r0, [pc, #88]	; (8009f14 <send_cmd+0x1d8>)
 8009ebc:	f88d 400e 	strb.w	r4, [sp, #14]
 8009ec0:	f7fd ff60 	bl	8007d84 <HAL_SPI_TransmitReceive>
		if (!spiselect()) return 0xFF;
 8009ec4:	20ff      	movs	r0, #255	; 0xff
}
 8009ec6:	b005      	add	sp, #20
 8009ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = send_cmd(CMD55, 0);
 8009ecc:	2100      	movs	r1, #0
 8009ece:	2037      	movs	r0, #55	; 0x37
 8009ed0:	f7ff ff34 	bl	8009d3c <send_cmd>
		if (res > 1) return res;
 8009ed4:	2801      	cmp	r0, #1
 8009ed6:	d8dc      	bhi.n	8009e92 <send_cmd+0x156>
		cmd &= 0x7F;
 8009ed8:	f008 087f 	and.w	r8, r8, #127	; 0x7f
 8009edc:	e736      	b.n	8009d4c <send_cmd+0x10>
	xchg_spi(n);
 8009ede:	2701      	movs	r7, #1
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009ee0:	480c      	ldr	r0, [pc, #48]	; (8009f14 <send_cmd+0x1d8>)
 8009ee2:	9400      	str	r4, [sp, #0]
 8009ee4:	463b      	mov	r3, r7
 8009ee6:	4632      	mov	r2, r6
 8009ee8:	4629      	mov	r1, r5
 8009eea:	f88d 700e 	strb.w	r7, [sp, #14]
 8009eee:	f7fd ff49 	bl	8007d84 <HAL_SPI_TransmitReceive>
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8009ef2:	f1b8 0f0c 	cmp.w	r8, #12
 8009ef6:	d1b1      	bne.n	8009e5c <send_cmd+0x120>
 8009ef8:	21ff      	movs	r1, #255	; 0xff
 8009efa:	f88d 100e 	strb.w	r1, [sp, #14]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009efe:	9400      	str	r4, [sp, #0]
 8009f00:	463b      	mov	r3, r7
 8009f02:	4632      	mov	r2, r6
 8009f04:	4629      	mov	r1, r5
 8009f06:	4803      	ldr	r0, [pc, #12]	; (8009f14 <send_cmd+0x1d8>)
 8009f08:	f7fd ff3c 	bl	8007d84 <HAL_SPI_TransmitReceive>
    return rxDat;
 8009f0c:	e7a6      	b.n	8009e5c <send_cmd+0x120>
 8009f0e:	bf00      	nop
 8009f10:	48000800 	.word	0x48000800
 8009f14:	20009214 	.word	0x20009214

08009f18 <USER_SPI_initialize>:
	BYTE drv		/* Physical drive number (0) */
)
{
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	d13e      	bne.n	8009f9a <USER_SPI_initialize+0x82>
{
 8009f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8009f20:	4c7b      	ldr	r4, [pc, #492]	; (800a110 <USER_SPI_initialize+0x1f8>)
 8009f22:	7823      	ldrb	r3, [r4, #0]
 8009f24:	079b      	lsls	r3, r3, #30
{
 8009f26:	b087      	sub	sp, #28
	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8009f28:	d432      	bmi.n	8009f90 <USER_SPI_initialize+0x78>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009f2a:	4f7a      	ldr	r7, [pc, #488]	; (800a114 <USER_SPI_initialize+0x1fc>)
 8009f2c:	250a      	movs	r5, #10
 8009f2e:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8009f32:	2632      	movs	r6, #50	; 0x32
 8009f34:	9600      	str	r6, [sp, #0]
 8009f36:	2301      	movs	r3, #1
 8009f38:	aa05      	add	r2, sp, #20
 8009f3a:	f10d 0113 	add.w	r1, sp, #19
 8009f3e:	4638      	mov	r0, r7

	//FCLK_SLOW();
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8009f40:	3d01      	subs	r5, #1
 8009f42:	f88d 8013 	strb.w	r8, [sp, #19]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009f46:	f7fd ff1d 	bl	8007d84 <HAL_SPI_TransmitReceive>
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8009f4a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8009f4e:	d1f1      	bne.n	8009f34 <USER_SPI_initialize+0x1c>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8009f50:	4629      	mov	r1, r5
 8009f52:	4628      	mov	r0, r5
 8009f54:	f7ff fef2 	bl	8009d3c <send_cmd>
 8009f58:	2801      	cmp	r0, #1
 8009f5a:	4680      	mov	r8, r0
 8009f5c:	d01f      	beq.n	8009f9e <USER_SPI_initialize+0x86>
 8009f5e:	f10d 0512 	add.w	r5, sp, #18
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
				ty = 0;
		}
	}
	CardType = ty;	/* Card type */
 8009f62:	4b6d      	ldr	r3, [pc, #436]	; (800a118 <USER_SPI_initialize+0x200>)
	CS_HIGH();		/* Set CS# high */
 8009f64:	486d      	ldr	r0, [pc, #436]	; (800a11c <USER_SPI_initialize+0x204>)
	CardType = ty;	/* Card type */
 8009f66:	2200      	movs	r2, #0
 8009f68:	701a      	strb	r2, [r3, #0]
	CS_HIGH();		/* Set CS# high */
 8009f6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f7fc f802 	bl	8005f78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009f74:	2232      	movs	r2, #50	; 0x32
 8009f76:	23ff      	movs	r3, #255	; 0xff
 8009f78:	9200      	str	r2, [sp, #0]
 8009f7a:	f88d 3012 	strb.w	r3, [sp, #18]
 8009f7e:	4865      	ldr	r0, [pc, #404]	; (800a114 <USER_SPI_initialize+0x1fc>)
 8009f80:	2301      	movs	r3, #1
 8009f82:	f10d 0213 	add.w	r2, sp, #19
 8009f86:	4629      	mov	r1, r5
 8009f88:	f7fd fefc 	bl	8007d84 <HAL_SPI_TransmitReceive>

	if (ty) {			/* OK */
		//FCLK_FAST();			/* Set fast clock */
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	7023      	strb	r3, [r4, #0]
	}

	return Stat;
 8009f90:	7820      	ldrb	r0, [r4, #0]
 8009f92:	b2c0      	uxtb	r0, r0
}
 8009f94:	b007      	add	sp, #28
 8009f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8009f9a:	2001      	movs	r0, #1
}
 8009f9c:	4770      	bx	lr
    spiTimerTickStart = HAL_GetTick();
 8009f9e:	f7fb fc0f 	bl	80057c0 <HAL_GetTick>
 8009fa2:	4f5f      	ldr	r7, [pc, #380]	; (800a120 <USER_SPI_initialize+0x208>)
    spiTimerTickDelay = waitTicks;
 8009fa4:	4e5f      	ldr	r6, [pc, #380]	; (800a124 <USER_SPI_initialize+0x20c>)
    spiTimerTickStart = HAL_GetTick();
 8009fa6:	6038      	str	r0, [r7, #0]
    spiTimerTickDelay = waitTicks;
 8009fa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8009fac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009fb0:	2008      	movs	r0, #8
    spiTimerTickDelay = waitTicks;
 8009fb2:	6033      	str	r3, [r6, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8009fb4:	f7ff fec2 	bl	8009d3c <send_cmd>
 8009fb8:	2801      	cmp	r0, #1
 8009fba:	d15f      	bne.n	800a07c <USER_SPI_initialize+0x164>
 8009fbc:	ab05      	add	r3, sp, #20
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009fbe:	f8df b154 	ldr.w	fp, [pc, #340]	; 800a114 <USER_SPI_initialize+0x1fc>
 8009fc2:	9303      	str	r3, [sp, #12]
 8009fc4:	f10d 0918 	add.w	r9, sp, #24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8009fc8:	4698      	mov	r8, r3
 8009fca:	f10d 0512 	add.w	r5, sp, #18
 8009fce:	f04f 0aff 	mov.w	sl, #255	; 0xff
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009fd2:	2332      	movs	r3, #50	; 0x32
 8009fd4:	9300      	str	r3, [sp, #0]
 8009fd6:	f10d 0213 	add.w	r2, sp, #19
 8009fda:	2301      	movs	r3, #1
 8009fdc:	4629      	mov	r1, r5
 8009fde:	4658      	mov	r0, fp
 8009fe0:	f88d a012 	strb.w	sl, [sp, #18]
 8009fe4:	f7fd fece 	bl	8007d84 <HAL_SPI_TransmitReceive>
    return rxDat;
 8009fe8:	f89d 3013 	ldrb.w	r3, [sp, #19]
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8009fec:	f808 3b01 	strb.w	r3, [r8], #1
 8009ff0:	45c8      	cmp	r8, r9
 8009ff2:	d1ee      	bne.n	8009fd2 <USER_SPI_initialize+0xba>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8009ff4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d1b2      	bne.n	8009f62 <USER_SPI_initialize+0x4a>
 8009ffc:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800a000:	2baa      	cmp	r3, #170	; 0xaa
 800a002:	d1ae      	bne.n	8009f62 <USER_SPI_initialize+0x4a>
 800a004:	e002      	b.n	800a00c <USER_SPI_initialize+0xf4>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800a006:	f7ff fe99 	bl	8009d3c <send_cmd>
 800a00a:	b150      	cbz	r0, 800a022 <USER_SPI_initialize+0x10a>
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800a00c:	f7fb fbd8 	bl	80057c0 <HAL_GetTick>
 800a010:	683b      	ldr	r3, [r7, #0]
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800a012:	6832      	ldr	r2, [r6, #0]
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800a014:	1ac3      	subs	r3, r0, r3
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800a016:	4293      	cmp	r3, r2
 800a018:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a01c:	f04f 00a9 	mov.w	r0, #169	; 0xa9
 800a020:	d3f1      	bcc.n	800a006 <USER_SPI_initialize+0xee>
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800a022:	f7fb fbcd 	bl	80057c0 <HAL_GetTick>
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	1ac0      	subs	r0, r0, r3
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800a02a:	6833      	ldr	r3, [r6, #0]
 800a02c:	4298      	cmp	r0, r3
 800a02e:	d298      	bcs.n	8009f62 <USER_SPI_initialize+0x4a>
 800a030:	2100      	movs	r1, #0
 800a032:	203a      	movs	r0, #58	; 0x3a
 800a034:	f7ff fe82 	bl	8009d3c <send_cmd>
 800a038:	2800      	cmp	r0, #0
 800a03a:	d192      	bne.n	8009f62 <USER_SPI_initialize+0x4a>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a03c:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800a114 <USER_SPI_initialize+0x1fc>
 800a040:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800a044:	27ff      	movs	r7, #255	; 0xff
 800a046:	2632      	movs	r6, #50	; 0x32
 800a048:	2301      	movs	r3, #1
 800a04a:	9600      	str	r6, [sp, #0]
 800a04c:	f10d 0213 	add.w	r2, sp, #19
 800a050:	4629      	mov	r1, r5
 800a052:	4640      	mov	r0, r8
 800a054:	f88d 7012 	strb.w	r7, [sp, #18]
 800a058:	f7fd fe94 	bl	8007d84 <HAL_SPI_TransmitReceive>
    return rxDat;
 800a05c:	f89d 3013 	ldrb.w	r3, [sp, #19]
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800a060:	f80a 3b01 	strb.w	r3, [sl], #1
 800a064:	45d1      	cmp	r9, sl
 800a066:	d1ef      	bne.n	800a048 <USER_SPI_initialize+0x130>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800a068:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800a06c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a070:	bf14      	ite	ne
 800a072:	f04f 090c 	movne.w	r9, #12
 800a076:	f04f 0904 	moveq.w	r9, #4
 800a07a:	e02b      	b.n	800a0d4 <USER_SPI_initialize+0x1bc>
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800a07c:	4629      	mov	r1, r5
 800a07e:	20a9      	movs	r0, #169	; 0xa9
 800a080:	f7ff fe5c 	bl	8009d3c <send_cmd>
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800a084:	2802      	cmp	r0, #2
 800a086:	bf3a      	itte	cc
 800a088:	f04f 08a9 	movcc.w	r8, #169	; 0xa9
 800a08c:	f04f 0902 	movcc.w	r9, #2
 800a090:	f04f 0901 	movcs.w	r9, #1
 800a094:	e003      	b.n	800a09e <USER_SPI_initialize+0x186>
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800a096:	4640      	mov	r0, r8
 800a098:	f7ff fe50 	bl	8009d3c <send_cmd>
 800a09c:	b140      	cbz	r0, 800a0b0 <USER_SPI_initialize+0x198>
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800a09e:	f7fb fb8f 	bl	80057c0 <HAL_GetTick>
 800a0a2:	683a      	ldr	r2, [r7, #0]
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800a0a4:	6833      	ldr	r3, [r6, #0]
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800a0a6:	1a80      	subs	r0, r0, r2
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800a0a8:	4298      	cmp	r0, r3
 800a0aa:	f04f 0100 	mov.w	r1, #0
 800a0ae:	d3f2      	bcc.n	800a096 <USER_SPI_initialize+0x17e>
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800a0b0:	f7fb fb86 	bl	80057c0 <HAL_GetTick>
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	1ac0      	subs	r0, r0, r3
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800a0b8:	6833      	ldr	r3, [r6, #0]
 800a0ba:	4298      	cmp	r0, r3
 800a0bc:	f4bf af4f 	bcs.w	8009f5e <USER_SPI_initialize+0x46>
 800a0c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a0c4:	2010      	movs	r0, #16
 800a0c6:	f7ff fe39 	bl	8009d3c <send_cmd>
 800a0ca:	f10d 0512 	add.w	r5, sp, #18
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	f47f af47 	bne.w	8009f62 <USER_SPI_initialize+0x4a>
	CardType = ty;	/* Card type */
 800a0d4:	4b10      	ldr	r3, [pc, #64]	; (800a118 <USER_SPI_initialize+0x200>)
	CS_HIGH();		/* Set CS# high */
 800a0d6:	4811      	ldr	r0, [pc, #68]	; (800a11c <USER_SPI_initialize+0x204>)
	CardType = ty;	/* Card type */
 800a0d8:	f883 9000 	strb.w	r9, [r3]
	CS_HIGH();		/* Set CS# high */
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a0e2:	f7fb ff49 	bl	8005f78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a0e6:	2232      	movs	r2, #50	; 0x32
 800a0e8:	23ff      	movs	r3, #255	; 0xff
 800a0ea:	9200      	str	r2, [sp, #0]
 800a0ec:	f88d 3012 	strb.w	r3, [sp, #18]
 800a0f0:	f10d 0213 	add.w	r2, sp, #19
 800a0f4:	4629      	mov	r1, r5
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	4806      	ldr	r0, [pc, #24]	; (800a114 <USER_SPI_initialize+0x1fc>)
 800a0fa:	f7fd fe43 	bl	8007d84 <HAL_SPI_TransmitReceive>
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800a0fe:	7823      	ldrb	r3, [r4, #0]
 800a100:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a104:	7023      	strb	r3, [r4, #0]
	return Stat;
 800a106:	7820      	ldrb	r0, [r4, #0]
 800a108:	b2c0      	uxtb	r0, r0
}
 800a10a:	b007      	add	sp, #28
 800a10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a110:	2000003c 	.word	0x2000003c
 800a114:	20009214 	.word	0x20009214
 800a118:	20009428 	.word	0x20009428
 800a11c:	48000800 	.word	0x48000800
 800a120:	20009430 	.word	0x20009430
 800a124:	2000942c 	.word	0x2000942c

0800a128 <USER_SPI_status>:

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800a128:	b918      	cbnz	r0, 800a132 <USER_SPI_status+0xa>

	return Stat;	/* Return disk status */
 800a12a:	4b03      	ldr	r3, [pc, #12]	; (800a138 <USER_SPI_status+0x10>)
 800a12c:	7818      	ldrb	r0, [r3, #0]
 800a12e:	b2c0      	uxtb	r0, r0
 800a130:	4770      	bx	lr
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800a132:	2001      	movs	r0, #1
}
 800a134:	4770      	bx	lr
 800a136:	bf00      	nop
 800a138:	2000003c 	.word	0x2000003c

0800a13c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800a13c:	b570      	push	{r4, r5, r6, lr}
 800a13e:	b084      	sub	sp, #16
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a140:	2800      	cmp	r0, #0
 800a142:	d13c      	bne.n	800a1be <USER_SPI_read+0x82>
 800a144:	461c      	mov	r4, r3
 800a146:	2b00      	cmp	r3, #0
 800a148:	d039      	beq.n	800a1be <USER_SPI_read+0x82>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a14a:	4b28      	ldr	r3, [pc, #160]	; (800a1ec <USER_SPI_read+0xb0>)
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	07d8      	lsls	r0, r3, #31
 800a150:	d439      	bmi.n	800a1c6 <USER_SPI_read+0x8a>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800a152:	4b27      	ldr	r3, [pc, #156]	; (800a1f0 <USER_SPI_read+0xb4>)
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	071b      	lsls	r3, r3, #28
 800a158:	bf58      	it	pl
 800a15a:	0252      	lslpl	r2, r2, #9

	if (count == 1) {	/* Single sector read */
 800a15c:	2c01      	cmp	r4, #1
 800a15e:	460e      	mov	r6, r1
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800a160:	4611      	mov	r1, r2
	if (count == 1) {	/* Single sector read */
 800a162:	d034      	beq.n	800a1ce <USER_SPI_read+0x92>
			&& rcvr_datablock(buff, 512)) {
			count = 0;
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800a164:	2012      	movs	r0, #18
 800a166:	f7ff fde9 	bl	8009d3c <send_cmd>
 800a16a:	4605      	mov	r5, r0
 800a16c:	b1c0      	cbz	r0, 800a1a0 <USER_SPI_read+0x64>
 800a16e:	2501      	movs	r5, #1
	CS_HIGH();		/* Set CS# high */
 800a170:	4820      	ldr	r0, [pc, #128]	; (800a1f4 <USER_SPI_read+0xb8>)
 800a172:	2201      	movs	r2, #1
 800a174:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a178:	f7fb fefe 	bl	8005f78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a17c:	2332      	movs	r3, #50	; 0x32
 800a17e:	20ff      	movs	r0, #255	; 0xff
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	f88d 000e 	strb.w	r0, [sp, #14]
 800a186:	2301      	movs	r3, #1
 800a188:	f10d 020f 	add.w	r2, sp, #15
 800a18c:	f10d 010e 	add.w	r1, sp, #14
 800a190:	4819      	ldr	r0, [pc, #100]	; (800a1f8 <USER_SPI_read+0xbc>)
 800a192:	f7fd fdf7 	bl	8007d84 <HAL_SPI_TransmitReceive>
		}
	}
	despiselect();

	return count ? RES_ERROR : RES_OK;	/* Return result */
}
 800a196:	4628      	mov	r0, r5
 800a198:	b004      	add	sp, #16
 800a19a:	bd70      	pop	{r4, r5, r6, pc}
			} while (--count);
 800a19c:	3c01      	subs	r4, #1
 800a19e:	d009      	beq.n	800a1b4 <USER_SPI_read+0x78>
				if (!rcvr_datablock(buff, 512)) break;
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a1a6:	f7ff fd63 	bl	8009c70 <rcvr_datablock>
				buff += 512;
 800a1aa:	f506 7600 	add.w	r6, r6, #512	; 0x200
				if (!rcvr_datablock(buff, 512)) break;
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	d1f4      	bne.n	800a19c <USER_SPI_read+0x60>
 800a1b2:	2501      	movs	r5, #1
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	200c      	movs	r0, #12
 800a1b8:	f7ff fdc0 	bl	8009d3c <send_cmd>
 800a1bc:	e7d8      	b.n	800a170 <USER_SPI_read+0x34>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a1be:	2504      	movs	r5, #4
}
 800a1c0:	4628      	mov	r0, r5
 800a1c2:	b004      	add	sp, #16
 800a1c4:	bd70      	pop	{r4, r5, r6, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a1c6:	2503      	movs	r5, #3
}
 800a1c8:	4628      	mov	r0, r5
 800a1ca:	b004      	add	sp, #16
 800a1cc:	bd70      	pop	{r4, r5, r6, pc}
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800a1ce:	2011      	movs	r0, #17
 800a1d0:	f7ff fdb4 	bl	8009d3c <send_cmd>
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	d1ca      	bne.n	800a16e <USER_SPI_read+0x32>
			&& rcvr_datablock(buff, 512)) {
 800a1d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a1dc:	4630      	mov	r0, r6
 800a1de:	f7ff fd47 	bl	8009c70 <rcvr_datablock>
	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a1e2:	fab0 f580 	clz	r5, r0
 800a1e6:	096d      	lsrs	r5, r5, #5
 800a1e8:	e7c2      	b.n	800a170 <USER_SPI_read+0x34>
 800a1ea:	bf00      	nop
 800a1ec:	2000003c 	.word	0x2000003c
 800a1f0:	20009428 	.word	0x20009428
 800a1f4:	48000800 	.word	0x48000800
 800a1f8:	20009214 	.word	0x20009214

0800a1fc <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800a1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a200:	b087      	sub	sp, #28
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a202:	2800      	cmp	r0, #0
 800a204:	f040 80ab 	bne.w	800a35e <USER_SPI_write+0x162>
 800a208:	469b      	mov	fp, r3
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	f000 80a7 	beq.w	800a35e <USER_SPI_write+0x162>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800a210:	4ba8      	ldr	r3, [pc, #672]	; (800a4b4 <USER_SPI_write+0x2b8>)
 800a212:	468a      	mov	sl, r1
 800a214:	7819      	ldrb	r1, [r3, #0]
 800a216:	07cc      	lsls	r4, r1, #31
 800a218:	f100 80c2 	bmi.w	800a3a0 <USER_SPI_write+0x1a4>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	0758      	lsls	r0, r3, #29
 800a220:	f100 80d7 	bmi.w	800a3d2 <USER_SPI_write+0x1d6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800a224:	4ba4      	ldr	r3, [pc, #656]	; (800a4b8 <USER_SPI_write+0x2bc>)
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	0719      	lsls	r1, r3, #28
 800a22a:	bf58      	it	pl
 800a22c:	0252      	lslpl	r2, r2, #9

	if (count == 1) {	/* Single sector write */
 800a22e:	f1bb 0f01 	cmp.w	fp, #1
 800a232:	f000 80c2 	beq.w	800a3ba <USER_SPI_write+0x1be>
			&& xmit_datablock(buff, 0xFE)) {
			count = 0;
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800a236:	f013 0f06 	tst.w	r3, #6
 800a23a:	f040 80d0 	bne.w	800a3de <USER_SPI_write+0x1e2>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800a23e:	4611      	mov	r1, r2
 800a240:	2019      	movs	r0, #25
 800a242:	f7ff fd7b 	bl	8009d3c <send_cmd>
 800a246:	2800      	cmp	r0, #0
 800a248:	f040 808f 	bne.w	800a36a <USER_SPI_write+0x16e>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a24c:	4f9b      	ldr	r7, [pc, #620]	; (800a4bc <USER_SPI_write+0x2c0>)
 800a24e:	f20a 1aff 	addw	sl, sl, #511	; 0x1ff
 800a252:	f10d 0517 	add.w	r5, sp, #23
 800a256:	f10d 0416 	add.w	r4, sp, #22
 800a25a:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800a25e:	2632      	movs	r6, #50	; 0x32
	waitSpiTimerTickStart = HAL_GetTick();
 800a260:	f7fb faae 	bl	80057c0 <HAL_GetTick>
 800a264:	4680      	mov	r8, r0
	waitSpiTimerTickDelay = (uint32_t)wt;
 800a266:	e006      	b.n	800a276 <USER_SPI_write+0x7a>
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a268:	f7fb faaa 	bl	80057c0 <HAL_GetTick>
 800a26c:	eba0 0008 	sub.w	r0, r0, r8
 800a270:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800a274:	d246      	bcs.n	800a304 <USER_SPI_write+0x108>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a276:	2301      	movs	r3, #1
 800a278:	462a      	mov	r2, r5
 800a27a:	4621      	mov	r1, r4
 800a27c:	9600      	str	r6, [sp, #0]
 800a27e:	4638      	mov	r0, r7
 800a280:	f88d 9016 	strb.w	r9, [sp, #22]
 800a284:	f7fd fd7e 	bl	8007d84 <HAL_SPI_TransmitReceive>
    return rxDat;
 800a288:	f89d 3017 	ldrb.w	r3, [sp, #23]
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a28c:	2bff      	cmp	r3, #255	; 0xff
 800a28e:	d1eb      	bne.n	800a268 <USER_SPI_write+0x6c>
	xchg_spi(token);					/* Send token */
 800a290:	23fc      	movs	r3, #252	; 0xfc
 800a292:	f88d 3016 	strb.w	r3, [sp, #22]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a296:	9600      	str	r6, [sp, #0]
 800a298:	2301      	movs	r3, #1
 800a29a:	462a      	mov	r2, r5
 800a29c:	4621      	mov	r1, r4
 800a29e:	4638      	mov	r0, r7
 800a2a0:	f7fd fd70 	bl	8007d84 <HAL_SPI_TransmitReceive>
	for(UINT i=0; i<btx; i++) {
 800a2a4:	f5aa 7800 	sub.w	r8, sl, #512	; 0x200
		xchg_spi(*(buff+i));
 800a2a8:	f818 0f01 	ldrb.w	r0, [r8, #1]!
 800a2ac:	f88d 0016 	strb.w	r0, [sp, #22]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	9600      	str	r6, [sp, #0]
 800a2b4:	462a      	mov	r2, r5
 800a2b6:	4621      	mov	r1, r4
 800a2b8:	4638      	mov	r0, r7
 800a2ba:	f7fd fd63 	bl	8007d84 <HAL_SPI_TransmitReceive>
	for(UINT i=0; i<btx; i++) {
 800a2be:	45d0      	cmp	r8, sl
 800a2c0:	d1f2      	bne.n	800a2a8 <USER_SPI_write+0xac>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	462a      	mov	r2, r5
 800a2c6:	4621      	mov	r1, r4
 800a2c8:	9600      	str	r6, [sp, #0]
 800a2ca:	4638      	mov	r0, r7
 800a2cc:	f88d 9016 	strb.w	r9, [sp, #22]
 800a2d0:	f7fd fd58 	bl	8007d84 <HAL_SPI_TransmitReceive>
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	462a      	mov	r2, r5
 800a2d8:	4621      	mov	r1, r4
 800a2da:	9600      	str	r6, [sp, #0]
 800a2dc:	4638      	mov	r0, r7
 800a2de:	f88d 9016 	strb.w	r9, [sp, #22]
 800a2e2:	f7fd fd4f 	bl	8007d84 <HAL_SPI_TransmitReceive>
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	9600      	str	r6, [sp, #0]
 800a2ea:	462a      	mov	r2, r5
 800a2ec:	4621      	mov	r1, r4
 800a2ee:	4638      	mov	r0, r7
 800a2f0:	f88d 9016 	strb.w	r9, [sp, #22]
 800a2f4:	f7fd fd46 	bl	8007d84 <HAL_SPI_TransmitReceive>
    return rxDat;
 800a2f8:	f89d 3017 	ldrb.w	r3, [sp, #23]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800a2fc:	f003 031f 	and.w	r3, r3, #31
 800a300:	2b05      	cmp	r3, #5
 800a302:	d053      	beq.n	800a3ac <USER_SPI_write+0x1b0>
	waitSpiTimerTickStart = HAL_GetTick();
 800a304:	f7fb fa5c 	bl	80057c0 <HAL_GetTick>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a308:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a4bc <USER_SPI_write+0x2c0>
	waitSpiTimerTickStart = HAL_GetTick();
 800a30c:	4606      	mov	r6, r0
	waitSpiTimerTickDelay = (uint32_t)wt;
 800a30e:	f04f 09ff 	mov.w	r9, #255	; 0xff
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a312:	2732      	movs	r7, #50	; 0x32
 800a314:	e005      	b.n	800a322 <USER_SPI_write+0x126>
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a316:	f7fb fa53 	bl	80057c0 <HAL_GetTick>
 800a31a:	1b80      	subs	r0, r0, r6
 800a31c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800a320:	d254      	bcs.n	800a3cc <USER_SPI_write+0x1d0>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a322:	2301      	movs	r3, #1
 800a324:	462a      	mov	r2, r5
 800a326:	4621      	mov	r1, r4
 800a328:	9700      	str	r7, [sp, #0]
 800a32a:	4640      	mov	r0, r8
 800a32c:	f88d 9016 	strb.w	r9, [sp, #22]
 800a330:	f7fd fd28 	bl	8007d84 <HAL_SPI_TransmitReceive>
    return rxDat;
 800a334:	f89d 3017 	ldrb.w	r3, [sp, #23]
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a338:	2bff      	cmp	r3, #255	; 0xff
 800a33a:	d1ec      	bne.n	800a316 <USER_SPI_write+0x11a>
	xchg_spi(token);					/* Send token */
 800a33c:	22fd      	movs	r2, #253	; 0xfd
 800a33e:	f88d 2016 	strb.w	r2, [sp, #22]
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
		}
	}
	despiselect();

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a342:	f1bb 0b00 	subs.w	fp, fp, #0
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a346:	9700      	str	r7, [sp, #0]
 800a348:	f04f 0301 	mov.w	r3, #1
 800a34c:	462a      	mov	r2, r5
 800a34e:	4621      	mov	r1, r4
 800a350:	485a      	ldr	r0, [pc, #360]	; (800a4bc <USER_SPI_write+0x2c0>)
	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a352:	bf18      	it	ne
 800a354:	f04f 0b01 	movne.w	fp, #1
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a358:	f7fd fd14 	bl	8007d84 <HAL_SPI_TransmitReceive>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800a35c:	e00b      	b.n	800a376 <USER_SPI_write+0x17a>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a35e:	f04f 0b04 	mov.w	fp, #4
}
 800a362:	4658      	mov	r0, fp
 800a364:	b007      	add	sp, #28
 800a366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a36a:	f04f 0b01 	mov.w	fp, #1
 800a36e:	f10d 0517 	add.w	r5, sp, #23
 800a372:	f10d 0416 	add.w	r4, sp, #22
	CS_HIGH();		/* Set CS# high */
 800a376:	4852      	ldr	r0, [pc, #328]	; (800a4c0 <USER_SPI_write+0x2c4>)
 800a378:	2201      	movs	r2, #1
 800a37a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a37e:	f7fb fdfb 	bl	8005f78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a382:	2332      	movs	r3, #50	; 0x32
 800a384:	20ff      	movs	r0, #255	; 0xff
 800a386:	9300      	str	r3, [sp, #0]
 800a388:	f88d 0016 	strb.w	r0, [sp, #22]
 800a38c:	2301      	movs	r3, #1
 800a38e:	462a      	mov	r2, r5
 800a390:	4621      	mov	r1, r4
 800a392:	484a      	ldr	r0, [pc, #296]	; (800a4bc <USER_SPI_write+0x2c0>)
 800a394:	f7fd fcf6 	bl	8007d84 <HAL_SPI_TransmitReceive>
}
 800a398:	4658      	mov	r0, fp
 800a39a:	b007      	add	sp, #28
 800a39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800a3a0:	f04f 0b03 	mov.w	fp, #3
}
 800a3a4:	4658      	mov	r0, fp
 800a3a6:	b007      	add	sp, #28
 800a3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			} while (--count);
 800a3ac:	f1bb 0b01 	subs.w	fp, fp, #1
 800a3b0:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
 800a3b4:	f47f af54 	bne.w	800a260 <USER_SPI_write+0x64>
 800a3b8:	e7a4      	b.n	800a304 <USER_SPI_write+0x108>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800a3ba:	4611      	mov	r1, r2
 800a3bc:	2018      	movs	r0, #24
 800a3be:	f7ff fcbd 	bl	8009d3c <send_cmd>
 800a3c2:	b198      	cbz	r0, 800a3ec <USER_SPI_write+0x1f0>
 800a3c4:	f10d 0517 	add.w	r5, sp, #23
 800a3c8:	f10d 0416 	add.w	r4, sp, #22
{
 800a3cc:	f04f 0b01 	mov.w	fp, #1
 800a3d0:	e7d1      	b.n	800a376 <USER_SPI_write+0x17a>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800a3d2:	f04f 0b02 	mov.w	fp, #2
}
 800a3d6:	4658      	mov	r0, fp
 800a3d8:	b007      	add	sp, #28
 800a3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800a3de:	4659      	mov	r1, fp
 800a3e0:	2097      	movs	r0, #151	; 0x97
 800a3e2:	9203      	str	r2, [sp, #12]
 800a3e4:	f7ff fcaa 	bl	8009d3c <send_cmd>
 800a3e8:	9a03      	ldr	r2, [sp, #12]
 800a3ea:	e728      	b.n	800a23e <USER_SPI_write+0x42>
	waitSpiTimerTickStart = HAL_GetTick();
 800a3ec:	f7fb f9e8 	bl	80057c0 <HAL_GetTick>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a3f0:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800a4bc <USER_SPI_write+0x2c0>
	waitSpiTimerTickStart = HAL_GetTick();
 800a3f4:	4607      	mov	r7, r0
	waitSpiTimerTickDelay = (uint32_t)wt;
 800a3f6:	f10d 0517 	add.w	r5, sp, #23
 800a3fa:	f10d 0416 	add.w	r4, sp, #22
 800a3fe:	f04f 09ff 	mov.w	r9, #255	; 0xff
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a402:	2632      	movs	r6, #50	; 0x32
 800a404:	e005      	b.n	800a412 <USER_SPI_write+0x216>
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a406:	f7fb f9db 	bl	80057c0 <HAL_GetTick>
 800a40a:	1bc0      	subs	r0, r0, r7
 800a40c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800a410:	d2dc      	bcs.n	800a3cc <USER_SPI_write+0x1d0>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a412:	2301      	movs	r3, #1
 800a414:	9600      	str	r6, [sp, #0]
 800a416:	462a      	mov	r2, r5
 800a418:	4621      	mov	r1, r4
 800a41a:	4640      	mov	r0, r8
 800a41c:	f88d 9016 	strb.w	r9, [sp, #22]
 800a420:	f7fd fcb0 	bl	8007d84 <HAL_SPI_TransmitReceive>
    return rxDat;
 800a424:	f89d 3017 	ldrb.w	r3, [sp, #23]
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a428:	2bff      	cmp	r3, #255	; 0xff
 800a42a:	d1ec      	bne.n	800a406 <USER_SPI_write+0x20a>
	xchg_spi(token);					/* Send token */
 800a42c:	22fe      	movs	r2, #254	; 0xfe
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a42e:	9600      	str	r6, [sp, #0]
 800a430:	f88d 2016 	strb.w	r2, [sp, #22]
 800a434:	4821      	ldr	r0, [pc, #132]	; (800a4bc <USER_SPI_write+0x2c0>)
 800a436:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800a4bc <USER_SPI_write+0x2c0>
 800a43a:	2301      	movs	r3, #1
 800a43c:	462a      	mov	r2, r5
 800a43e:	4621      	mov	r1, r4
 800a440:	f7fd fca0 	bl	8007d84 <HAL_SPI_TransmitReceive>
	for(UINT i=0; i<btx; i++) {
 800a444:	f10a 36ff 	add.w	r6, sl, #4294967295
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a448:	2732      	movs	r7, #50	; 0x32
 800a44a:	f20a 1aff 	addw	sl, sl, #511	; 0x1ff
 800a44e:	9700      	str	r7, [sp, #0]
 800a450:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800a454:	f88d 3016 	strb.w	r3, [sp, #22]
 800a458:	462a      	mov	r2, r5
 800a45a:	2301      	movs	r3, #1
 800a45c:	4621      	mov	r1, r4
 800a45e:	4640      	mov	r0, r8
 800a460:	f7fd fc90 	bl	8007d84 <HAL_SPI_TransmitReceive>
	for(UINT i=0; i<btx; i++) {
 800a464:	4556      	cmp	r6, sl
 800a466:	d1f2      	bne.n	800a44e <USER_SPI_write+0x252>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800a468:	26ff      	movs	r6, #255	; 0xff
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a46a:	2301      	movs	r3, #1
 800a46c:	462a      	mov	r2, r5
 800a46e:	4621      	mov	r1, r4
 800a470:	4812      	ldr	r0, [pc, #72]	; (800a4bc <USER_SPI_write+0x2c0>)
 800a472:	9700      	str	r7, [sp, #0]
 800a474:	f88d 6016 	strb.w	r6, [sp, #22]
 800a478:	f7fd fc84 	bl	8007d84 <HAL_SPI_TransmitReceive>
 800a47c:	2301      	movs	r3, #1
 800a47e:	462a      	mov	r2, r5
 800a480:	4621      	mov	r1, r4
 800a482:	480e      	ldr	r0, [pc, #56]	; (800a4bc <USER_SPI_write+0x2c0>)
 800a484:	9700      	str	r7, [sp, #0]
 800a486:	f88d 6016 	strb.w	r6, [sp, #22]
 800a48a:	f7fd fc7b 	bl	8007d84 <HAL_SPI_TransmitReceive>
 800a48e:	480b      	ldr	r0, [pc, #44]	; (800a4bc <USER_SPI_write+0x2c0>)
 800a490:	9700      	str	r7, [sp, #0]
 800a492:	2301      	movs	r3, #1
 800a494:	462a      	mov	r2, r5
 800a496:	4621      	mov	r1, r4
 800a498:	f88d 6016 	strb.w	r6, [sp, #22]
 800a49c:	f7fd fc72 	bl	8007d84 <HAL_SPI_TransmitReceive>
    return rxDat;
 800a4a0:	f89d b017 	ldrb.w	fp, [sp, #23]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800a4a4:	f00b 0b1f 	and.w	fp, fp, #31
	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a4a8:	f1bb 0b05 	subs.w	fp, fp, #5
 800a4ac:	bf18      	it	ne
 800a4ae:	f04f 0b01 	movne.w	fp, #1
 800a4b2:	e760      	b.n	800a376 <USER_SPI_write+0x17a>
 800a4b4:	2000003c 	.word	0x2000003c
 800a4b8:	20009428 	.word	0x20009428
 800a4bc:	20009214 	.word	0x20009214
 800a4c0:	48000800 	.word	0x48000800

0800a4c4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800a4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4c8:	b088      	sub	sp, #32
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800a4ca:	b970      	cbnz	r0, 800a4ea <USER_SPI_ioctl+0x26>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a4cc:	4bcf      	ldr	r3, [pc, #828]	; (800a80c <USER_SPI_ioctl+0x348>)
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	07d8      	lsls	r0, r3, #31
 800a4d2:	f100 80db 	bmi.w	800a68c <USER_SPI_ioctl+0x1c8>
 800a4d6:	460c      	mov	r4, r1
 800a4d8:	4616      	mov	r6, r2

	res = RES_ERROR;

	switch (cmd) {
 800a4da:	2904      	cmp	r1, #4
 800a4dc:	f200 80d0 	bhi.w	800a680 <USER_SPI_ioctl+0x1bc>
 800a4e0:	e8df f001 	tbb	[pc, r1]
 800a4e4:	91ce5928 	.word	0x91ce5928
 800a4e8:	08          	.byte	0x08
 800a4e9:	00          	.byte	0x00
	if (drv) return RES_PARERR;					/* Check parameter */
 800a4ea:	2404      	movs	r4, #4
	}

	despiselect();

	return res;
}
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	b008      	add	sp, #32
 800a4f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800a4f4:	4cc6      	ldr	r4, [pc, #792]	; (800a810 <USER_SPI_ioctl+0x34c>)
 800a4f6:	7823      	ldrb	r3, [r4, #0]
 800a4f8:	f013 0f06 	tst.w	r3, #6
 800a4fc:	f040 8108 	bne.w	800a710 <USER_SPI_ioctl+0x24c>
 800a500:	f10d 050f 	add.w	r5, sp, #15
 800a504:	f10d 070e 	add.w	r7, sp, #14
	res = RES_ERROR;
 800a508:	2401      	movs	r4, #1
	CS_HIGH();		/* Set CS# high */
 800a50a:	48c2      	ldr	r0, [pc, #776]	; (800a814 <USER_SPI_ioctl+0x350>)
 800a50c:	2201      	movs	r2, #1
 800a50e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a512:	f7fb fd31 	bl	8005f78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a516:	2332      	movs	r3, #50	; 0x32
 800a518:	20ff      	movs	r0, #255	; 0xff
 800a51a:	9300      	str	r3, [sp, #0]
 800a51c:	f88d 000e 	strb.w	r0, [sp, #14]
 800a520:	2301      	movs	r3, #1
 800a522:	462a      	mov	r2, r5
 800a524:	4639      	mov	r1, r7
 800a526:	48bc      	ldr	r0, [pc, #752]	; (800a818 <USER_SPI_ioctl+0x354>)
 800a528:	f7fd fc2c 	bl	8007d84 <HAL_SPI_TransmitReceive>
}
 800a52c:	4620      	mov	r0, r4
 800a52e:	b008      	add	sp, #32
 800a530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	CS_LOW();		/* Set CS# low */
 800a534:	48b7      	ldr	r0, [pc, #732]	; (800a814 <USER_SPI_ioctl+0x350>)
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a536:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 800a818 <USER_SPI_ioctl+0x354>
	CS_LOW();		/* Set CS# low */
 800a53a:	2200      	movs	r2, #0
 800a53c:	f44f 7180 	mov.w	r1, #256	; 0x100
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a540:	f10d 050f 	add.w	r5, sp, #15
 800a544:	2732      	movs	r7, #50	; 0x32
	CS_LOW();		/* Set CS# low */
 800a546:	f7fb fd17 	bl	8005f78 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800a54a:	26ff      	movs	r6, #255	; 0xff
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a54c:	2301      	movs	r3, #1
 800a54e:	aa04      	add	r2, sp, #16
 800a550:	4629      	mov	r1, r5
 800a552:	48b1      	ldr	r0, [pc, #708]	; (800a818 <USER_SPI_ioctl+0x354>)
 800a554:	9700      	str	r7, [sp, #0]
 800a556:	f88d 600f 	strb.w	r6, [sp, #15]
 800a55a:	f7fd fc13 	bl	8007d84 <HAL_SPI_TransmitReceive>
	waitSpiTimerTickStart = HAL_GetTick();
 800a55e:	f7fb f92f 	bl	80057c0 <HAL_GetTick>
 800a562:	4680      	mov	r8, r0
	waitSpiTimerTickDelay = (uint32_t)wt;
 800a564:	e007      	b.n	800a576 <USER_SPI_ioctl+0xb2>
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a566:	f7fb f92b 	bl	80057c0 <HAL_GetTick>
 800a56a:	eba0 0008 	sub.w	r0, r0, r8
 800a56e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800a572:	f080 80ba 	bcs.w	800a6ea <USER_SPI_ioctl+0x226>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a576:	2301      	movs	r3, #1
 800a578:	aa04      	add	r2, sp, #16
 800a57a:	9700      	str	r7, [sp, #0]
 800a57c:	4629      	mov	r1, r5
 800a57e:	4648      	mov	r0, r9
 800a580:	f88d 600f 	strb.w	r6, [sp, #15]
 800a584:	f7fd fbfe 	bl	8007d84 <HAL_SPI_TransmitReceive>
    return rxDat;
 800a588:	f89d 3010 	ldrb.w	r3, [sp, #16]
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a58c:	2bff      	cmp	r3, #255	; 0xff
 800a58e:	d1ea      	bne.n	800a566 <USER_SPI_ioctl+0xa2>
 800a590:	f10d 070e 	add.w	r7, sp, #14
 800a594:	e7b9      	b.n	800a50a <USER_SPI_ioctl+0x46>
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800a596:	2100      	movs	r1, #0
 800a598:	2009      	movs	r0, #9
 800a59a:	f7ff fbcf 	bl	8009d3c <send_cmd>
 800a59e:	4604      	mov	r4, r0
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	d1ad      	bne.n	800a500 <USER_SPI_ioctl+0x3c>
 800a5a4:	2110      	movs	r1, #16
 800a5a6:	eb0d 0001 	add.w	r0, sp, r1
 800a5aa:	f7ff fb61 	bl	8009c70 <rcvr_datablock>
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	d0a6      	beq.n	800a500 <USER_SPI_ioctl+0x3c>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800a5b2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a5b6:	099b      	lsrs	r3, r3, #6
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	f000 80fe 	beq.w	800a7ba <USER_SPI_ioctl+0x2f6>
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800a5be:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800a5c2:	f89d 1016 	ldrb.w	r1, [sp, #22]
 800a5c6:	f89d 0018 	ldrb.w	r0, [sp, #24]
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800a5ca:	f89d 2015 	ldrb.w	r2, [sp, #21]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	0289      	lsls	r1, r1, #10
 800a5d2:	eb03 1390 	add.w	r3, r3, r0, lsr #6
 800a5d6:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 800a5da:	440b      	add	r3, r1
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800a5dc:	f89d 1019 	ldrb.w	r1, [sp, #25]
 800a5e0:	f89d 001a 	ldrb.w	r0, [sp, #26]
 800a5e4:	f002 020f 	and.w	r2, r2, #15
 800a5e8:	0049      	lsls	r1, r1, #1
 800a5ea:	f001 0106 	and.w	r1, r1, #6
 800a5ee:	eb02 12d0 	add.w	r2, r2, r0, lsr #7
				*(DWORD*)buff = csize << (n - 9);
 800a5f2:	440a      	add	r2, r1
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800a5f4:	3301      	adds	r3, #1
				*(DWORD*)buff = csize << (n - 9);
 800a5f6:	3a07      	subs	r2, #7
 800a5f8:	4093      	lsls	r3, r2
 800a5fa:	6033      	str	r3, [r6, #0]
 800a5fc:	f10d 050f 	add.w	r5, sp, #15
 800a600:	f10d 070e 	add.w	r7, sp, #14
 800a604:	e781      	b.n	800a50a <USER_SPI_ioctl+0x46>
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800a606:	4c82      	ldr	r4, [pc, #520]	; (800a810 <USER_SPI_ioctl+0x34c>)
 800a608:	7821      	ldrb	r1, [r4, #0]
 800a60a:	f011 0104 	ands.w	r1, r1, #4
 800a60e:	d042      	beq.n	800a696 <USER_SPI_ioctl+0x1d2>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800a610:	2100      	movs	r1, #0
 800a612:	208d      	movs	r0, #141	; 0x8d
 800a614:	f7ff fb92 	bl	8009d3c <send_cmd>
 800a618:	2800      	cmp	r0, #0
 800a61a:	f47f af71 	bne.w	800a500 <USER_SPI_ioctl+0x3c>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a61e:	f10d 050f 	add.w	r5, sp, #15
 800a622:	f04f 0932 	mov.w	r9, #50	; 0x32
 800a626:	4629      	mov	r1, r5
 800a628:	487b      	ldr	r0, [pc, #492]	; (800a818 <USER_SPI_ioctl+0x354>)
 800a62a:	f8cd 9000 	str.w	r9, [sp]
 800a62e:	2301      	movs	r3, #1
 800a630:	f04f 08ff 	mov.w	r8, #255	; 0xff
 800a634:	aa04      	add	r2, sp, #16
 800a636:	f88d 800f 	strb.w	r8, [sp, #15]
 800a63a:	f7fd fba3 	bl	8007d84 <HAL_SPI_TransmitReceive>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800a63e:	a804      	add	r0, sp, #16
 800a640:	2110      	movs	r1, #16
 800a642:	f7ff fb15 	bl	8009c70 <rcvr_datablock>
 800a646:	2800      	cmp	r0, #0
 800a648:	f43f af5c 	beq.w	800a504 <USER_SPI_ioctl+0x40>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a64c:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 800a818 <USER_SPI_ioctl+0x354>
 800a650:	2430      	movs	r4, #48	; 0x30
 800a652:	f10d 070e 	add.w	r7, sp, #14
 800a656:	f8cd 9000 	str.w	r9, [sp]
 800a65a:	2301      	movs	r3, #1
 800a65c:	462a      	mov	r2, r5
 800a65e:	4639      	mov	r1, r7
 800a660:	4650      	mov	r0, sl
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800a662:	3c01      	subs	r4, #1
 800a664:	f88d 800e 	strb.w	r8, [sp, #14]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a668:	f7fd fb8c 	bl	8007d84 <HAL_SPI_TransmitReceive>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800a66c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800a670:	d1f1      	bne.n	800a656 <USER_SPI_ioctl+0x192>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800a672:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800a676:	091a      	lsrs	r2, r3, #4
 800a678:	2310      	movs	r3, #16
 800a67a:	4093      	lsls	r3, r2
 800a67c:	6033      	str	r3, [r6, #0]
					res = RES_OK;
 800a67e:	e744      	b.n	800a50a <USER_SPI_ioctl+0x46>
	switch (cmd) {
 800a680:	2404      	movs	r4, #4
 800a682:	f10d 050f 	add.w	r5, sp, #15
 800a686:	f10d 070e 	add.w	r7, sp, #14
 800a68a:	e73e      	b.n	800a50a <USER_SPI_ioctl+0x46>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a68c:	2403      	movs	r4, #3
}
 800a68e:	4620      	mov	r0, r4
 800a690:	b008      	add	sp, #32
 800a692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800a696:	2009      	movs	r0, #9
 800a698:	f7ff fb50 	bl	8009d3c <send_cmd>
 800a69c:	4605      	mov	r5, r0
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	f47f af2e 	bne.w	800a500 <USER_SPI_ioctl+0x3c>
 800a6a4:	2110      	movs	r1, #16
 800a6a6:	eb0d 0001 	add.w	r0, sp, r1
 800a6aa:	f7ff fae1 	bl	8009c70 <rcvr_datablock>
 800a6ae:	2800      	cmp	r0, #0
 800a6b0:	f43f af26 	beq.w	800a500 <USER_SPI_ioctl+0x3c>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800a6b4:	7824      	ldrb	r4, [r4, #0]
 800a6b6:	f014 0402 	ands.w	r4, r4, #2
 800a6ba:	f000 8092 	beq.w	800a7e2 <USER_SPI_ioctl+0x31e>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800a6be:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800a6c2:	f89d 101b 	ldrb.w	r1, [sp, #27]
 800a6c6:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800a6ca:	005b      	lsls	r3, r3, #1
 800a6cc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800a6d0:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
 800a6d4:	0992      	lsrs	r2, r2, #6
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	3a01      	subs	r2, #1
 800a6da:	4093      	lsls	r3, r2
				res = RES_OK;
 800a6dc:	462c      	mov	r4, r5
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800a6de:	6033      	str	r3, [r6, #0]
 800a6e0:	f10d 050f 	add.w	r5, sp, #15
 800a6e4:	f10d 070e 	add.w	r7, sp, #14
 800a6e8:	e70f      	b.n	800a50a <USER_SPI_ioctl+0x46>
	CS_HIGH();		/* Set CS# high */
 800a6ea:	484a      	ldr	r0, [pc, #296]	; (800a814 <USER_SPI_ioctl+0x350>)
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a6f2:	f7fb fc41 	bl	8005f78 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a6f6:	9700      	str	r7, [sp, #0]
 800a6f8:	4847      	ldr	r0, [pc, #284]	; (800a818 <USER_SPI_ioctl+0x354>)
 800a6fa:	f88d 600f 	strb.w	r6, [sp, #15]
 800a6fe:	2301      	movs	r3, #1
 800a700:	aa04      	add	r2, sp, #16
 800a702:	4629      	mov	r1, r5
 800a704:	f7fd fb3e 	bl	8007d84 <HAL_SPI_TransmitReceive>
	res = RES_ERROR;
 800a708:	2401      	movs	r4, #1
 800a70a:	f10d 070e 	add.w	r7, sp, #14
 800a70e:	e6fc      	b.n	800a50a <USER_SPI_ioctl+0x46>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800a710:	aa04      	add	r2, sp, #16
 800a712:	210b      	movs	r1, #11
 800a714:	2000      	movs	r0, #0
 800a716:	f7ff fed5 	bl	800a4c4 <USER_SPI_ioctl>
 800a71a:	2800      	cmp	r0, #0
 800a71c:	f47f aef0 	bne.w	800a500 <USER_SPI_ioctl+0x3c>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800a720:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800a724:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800a728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a72c:	ea53 1392 	orrs.w	r3, r3, r2, lsr #6
 800a730:	f43f aee6 	beq.w	800a500 <USER_SPI_ioctl+0x3c>
		if (!(CardType & CT_BLOCK)) {
 800a734:	7823      	ldrb	r3, [r4, #0]
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800a736:	e9d6 1400 	ldrd	r1, r4, [r6]
		if (!(CardType & CT_BLOCK)) {
 800a73a:	071b      	lsls	r3, r3, #28
			st *= 512; ed *= 512;
 800a73c:	bf58      	it	pl
 800a73e:	0249      	lslpl	r1, r1, #9
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800a740:	f04f 0020 	mov.w	r0, #32
			st *= 512; ed *= 512;
 800a744:	bf58      	it	pl
 800a746:	0264      	lslpl	r4, r4, #9
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800a748:	f7ff faf8 	bl	8009d3c <send_cmd>
 800a74c:	2800      	cmp	r0, #0
 800a74e:	f47f aed7 	bne.w	800a500 <USER_SPI_ioctl+0x3c>
 800a752:	4621      	mov	r1, r4
 800a754:	2021      	movs	r0, #33	; 0x21
 800a756:	f7ff faf1 	bl	8009d3c <send_cmd>
 800a75a:	2800      	cmp	r0, #0
 800a75c:	f47f aed0 	bne.w	800a500 <USER_SPI_ioctl+0x3c>
 800a760:	4601      	mov	r1, r0
 800a762:	2026      	movs	r0, #38	; 0x26
 800a764:	f7ff faea 	bl	8009d3c <send_cmd>
 800a768:	4604      	mov	r4, r0
 800a76a:	2800      	cmp	r0, #0
 800a76c:	f47f aec8 	bne.w	800a500 <USER_SPI_ioctl+0x3c>
	waitSpiTimerTickStart = HAL_GetTick();
 800a770:	f7fb f826 	bl	80057c0 <HAL_GetTick>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a774:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800a818 <USER_SPI_ioctl+0x354>
	waitSpiTimerTickStart = HAL_GetTick();
 800a778:	4606      	mov	r6, r0
	waitSpiTimerTickDelay = (uint32_t)wt;
 800a77a:	f10d 050f 	add.w	r5, sp, #15
 800a77e:	f10d 070e 	add.w	r7, sp, #14
 800a782:	f04f 0aff 	mov.w	sl, #255	; 0xff
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a786:	f04f 0832 	mov.w	r8, #50	; 0x32
 800a78a:	e007      	b.n	800a79c <USER_SPI_ioctl+0x2d8>
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a78c:	f7fb f818 	bl	80057c0 <HAL_GetTick>
 800a790:	f247 522f 	movw	r2, #29999	; 0x752f
 800a794:	1b83      	subs	r3, r0, r6
 800a796:	4293      	cmp	r3, r2
 800a798:	f63f aeb6 	bhi.w	800a508 <USER_SPI_ioctl+0x44>
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a79c:	2301      	movs	r3, #1
 800a79e:	f8cd 8000 	str.w	r8, [sp]
 800a7a2:	462a      	mov	r2, r5
 800a7a4:	4639      	mov	r1, r7
 800a7a6:	4648      	mov	r0, r9
 800a7a8:	f88d a00e 	strb.w	sl, [sp, #14]
 800a7ac:	f7fd faea 	bl	8007d84 <HAL_SPI_TransmitReceive>
    return rxDat;
 800a7b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a7b4:	2bff      	cmp	r3, #255	; 0xff
 800a7b6:	d1e9      	bne.n	800a78c <USER_SPI_ioctl+0x2c8>
 800a7b8:	e6a7      	b.n	800a50a <USER_SPI_ioctl+0x46>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800a7ba:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800a7be:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800a7c2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800a7c6:	0412      	lsls	r2, r2, #16
 800a7c8:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 800a7cc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800a7d0:	3201      	adds	r2, #1
 800a7d2:	4413      	add	r3, r2
				*(DWORD*)buff = csize << 10;
 800a7d4:	029b      	lsls	r3, r3, #10
 800a7d6:	6033      	str	r3, [r6, #0]
 800a7d8:	f10d 050f 	add.w	r5, sp, #15
 800a7dc:	f10d 070e 	add.w	r7, sp, #14
 800a7e0:	e693      	b.n	800a50a <USER_SPI_ioctl+0x46>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800a7e2:	f89d 101b 	ldrb.w	r1, [sp, #27]
 800a7e6:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800a7ea:	00ca      	lsls	r2, r1, #3
 800a7ec:	f002 0218 	and.w	r2, r2, #24
 800a7f0:	f3c3 0384 	ubfx	r3, r3, #2, #5
 800a7f4:	eb02 1251 	add.w	r2, r2, r1, lsr #5
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	fb02 3303 	mla	r3, r2, r3, r3
 800a7fe:	6033      	str	r3, [r6, #0]
 800a800:	f10d 050f 	add.w	r5, sp, #15
 800a804:	f10d 070e 	add.w	r7, sp, #14
 800a808:	e67f      	b.n	800a50a <USER_SPI_ioctl+0x46>
 800a80a:	bf00      	nop
 800a80c:	2000003c 	.word	0x2000003c
 800a810:	20009428 	.word	0x20009428
 800a814:	48000800 	.word	0x48000800
 800a818:	20009214 	.word	0x20009214

0800a81c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a81c:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 800a81e:	4b10      	ldr	r3, [pc, #64]	; (800a860 <FATFS_LinkDriver+0x44>)
 800a820:	7a5c      	ldrb	r4, [r3, #9]
 800a822:	b9cc      	cbnz	r4, 800a858 <FATFS_LinkDriver+0x3c>
 800a824:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 800a826:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 800a82a:	7a5c      	ldrb	r4, [r3, #9]
 800a82c:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 800a82e:	7a5c      	ldrb	r4, [r3, #9]
 800a830:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a834:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 800a836:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 800a838:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 800a83a:	441c      	add	r4, r3
 800a83c:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 800a83e:	1c54      	adds	r4, r2, #1
 800a840:	b2e4      	uxtb	r4, r4
 800a842:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 800a844:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 800a846:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 800a848:	232f      	movs	r3, #47	; 0x2f
    path[1] = ':';
 800a84a:	704c      	strb	r4, [r1, #1]
    path[0] = DiskNum + '0';
 800a84c:	700a      	strb	r2, [r1, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800a84e:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 800a852:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800a854:	70c8      	strb	r0, [r1, #3]
}
 800a856:	4770      	bx	lr
  uint8_t ret = 1;
 800a858:	2001      	movs	r0, #1
}
 800a85a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a85e:	4770      	bx	lr
 800a860:	20009434 	.word	0x20009434

0800a864 <__libc_init_array>:
 800a864:	b570      	push	{r4, r5, r6, lr}
 800a866:	4d0d      	ldr	r5, [pc, #52]	; (800a89c <__libc_init_array+0x38>)
 800a868:	4c0d      	ldr	r4, [pc, #52]	; (800a8a0 <__libc_init_array+0x3c>)
 800a86a:	1b64      	subs	r4, r4, r5
 800a86c:	10a4      	asrs	r4, r4, #2
 800a86e:	2600      	movs	r6, #0
 800a870:	42a6      	cmp	r6, r4
 800a872:	d109      	bne.n	800a888 <__libc_init_array+0x24>
 800a874:	4d0b      	ldr	r5, [pc, #44]	; (800a8a4 <__libc_init_array+0x40>)
 800a876:	4c0c      	ldr	r4, [pc, #48]	; (800a8a8 <__libc_init_array+0x44>)
 800a878:	f000 f820 	bl	800a8bc <_init>
 800a87c:	1b64      	subs	r4, r4, r5
 800a87e:	10a4      	asrs	r4, r4, #2
 800a880:	2600      	movs	r6, #0
 800a882:	42a6      	cmp	r6, r4
 800a884:	d105      	bne.n	800a892 <__libc_init_array+0x2e>
 800a886:	bd70      	pop	{r4, r5, r6, pc}
 800a888:	f855 3b04 	ldr.w	r3, [r5], #4
 800a88c:	4798      	blx	r3
 800a88e:	3601      	adds	r6, #1
 800a890:	e7ee      	b.n	800a870 <__libc_init_array+0xc>
 800a892:	f855 3b04 	ldr.w	r3, [r5], #4
 800a896:	4798      	blx	r3
 800a898:	3601      	adds	r6, #1
 800a89a:	e7f2      	b.n	800a882 <__libc_init_array+0x1e>
 800a89c:	0800ae40 	.word	0x0800ae40
 800a8a0:	0800ae40 	.word	0x0800ae40
 800a8a4:	0800ae40 	.word	0x0800ae40
 800a8a8:	0800ae44 	.word	0x0800ae44

0800a8ac <memset>:
 800a8ac:	4402      	add	r2, r0
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d100      	bne.n	800a8b6 <memset+0xa>
 800a8b4:	4770      	bx	lr
 800a8b6:	f803 1b01 	strb.w	r1, [r3], #1
 800a8ba:	e7f9      	b.n	800a8b0 <memset+0x4>

0800a8bc <_init>:
 800a8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8be:	bf00      	nop
 800a8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8c2:	bc08      	pop	{r3}
 800a8c4:	469e      	mov	lr, r3
 800a8c6:	4770      	bx	lr

0800a8c8 <_fini>:
 800a8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ca:	bf00      	nop
 800a8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ce:	bc08      	pop	{r3}
 800a8d0:	469e      	mov	lr, r3
 800a8d2:	4770      	bx	lr
